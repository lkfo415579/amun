!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTION	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	g	namespace:YAML
ALIAS	amun/3rd_party/yaml-cpp/token.h	/^    ALIAS,$/;"	e	enum:YAML::Token::TYPE
ALIAS_CONTENT	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const ALIAS_CONTENT =$/;"	m	namespace:YAML::ErrorMsg
ALIAS_NOT_FOUND	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const ALIAS_NOT_FOUND = "alias not found after *";$/;"	m	namespace:YAML::ErrorMsg
ALIGNMENT_IO_H_	amun/3rd_party/fast_align/src/alignment_io.h	2;"	d
ALIGN_CENTER	amun/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_CENTER	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	amun/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	amun/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	amun/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	amun/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
AMBIGUOUS_ANCHOR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const AMBIGUOUS_ANCHOR =$/;"	m	namespace:YAML::ErrorMsg
ANCHOR	amun/3rd_party/yaml-cpp/token.h	/^    ANCHOR,$/;"	e	enum:YAML::Token::TYPE
ANCHORDICT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/contrib/anchordict.h	2;"	d
ANCHOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/anchor.h	2;"	d
ANCHOR_NOT_FOUND	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const ANCHOR_NOT_FOUND = "anchor not found after &";$/;"	m	namespace:YAML::ErrorMsg
ARRAY2D_H_	amun/3rd_party/fast_align/src/array2d.h	2;"	d
ASSERT_MESSAGE	amun/3rd_party/blaze/util/Assert.h	/^inline bool ASSERT_MESSAGE( const char* \/*msg*\/ )$/;"	f	namespace:blaze
A_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor A_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
A_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor A_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
A_	amun/fpga/decoder.h	/^      mblas::Tensor A_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
A_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor A_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
A_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class A_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Abs	amun/3rd_party/blaze/math/functors/Abs.h	/^struct Abs$/;"	s	namespace:blaze
Accuracy	amun/3rd_party/blaze/math/Accuracy.h	/^class Accuracy$/;"	c	namespace:blaze
Accuracy	amun/3rd_party/blaze/math/Accuracy.h	/^inline Accuracy::Accuracy()$/;"	f	class:blaze::Accuracy
Acos	amun/3rd_party/blaze/math/functors/Acos.h	/^struct Acos$/;"	s	namespace:blaze
Acosh	amun/3rd_party/blaze/math/functors/Acosh.h	/^struct Acosh$/;"	s	namespace:blaze
Add	amun/common/histories.h	/^    void Add(const Beams& beams) {$/;"	f	class:amunmt::Histories
Add	amun/common/history.cpp	/^void History::Add(const Beam& beam) {$/;"	f	class:amunmt::History
Add	amun/gpu/decoder/kenlm.cpp	/^    void Add(lm::WordIndex index, const StringPiece &str) {$/;"	f	class:VocabGetter
AddAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      explicit inline AddAssigner( Target& target, const Source& source )$/;"	f	struct:blaze::ThreadBackend::AddAssigner
AddAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   struct AddAssigner$/;"	s	class:blaze::ThreadBackend
AddBiasVector	amun/cpu/mblas/tensor.h	/^MT& AddBiasVector(MT& m, const VT& b) {$/;"	f	namespace:amunmt::CPU::mblas
AddCV	amun/3rd_party/blaze/util/typetraits/AddCV.h	/^struct AddCV$/;"	s	namespace:blaze
AddCommand	amun/3rd_party/fast_align/src/atools.cc	/^template<class C> static void AddCommand() {$/;"	f	file:
AddConst	amun/3rd_party/blaze/util/typetraits/AddConst.h	/^struct AddConst$/;"	s	namespace:blaze
AddCount	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::WordCount::AddCount(float incr)$/;"	f	class:extract::WordCount
AddExpr	amun/3rd_party/blaze/math/expressions/AddExpr.h	/^struct AddExpr : private Expression$/;"	s	namespace:blaze
AddExprTrait	amun/3rd_party/blaze/math/traits/AddExprTrait.h	/^struct AddExprTrait$/;"	s	namespace:blaze
AddOptions	amun/common/config.cpp	/^void Config::AddOptions(unsigned argc, char** argv) {$/;"	f	class:amunmt::Config
AddPointer	amun/3rd_party/blaze/util/typetraits/AddPointer.h	/^struct AddPointer$/;"	s	namespace:blaze
AddReference	amun/3rd_party/blaze/util/typetraits/AddReference.h	/^struct AddReference$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DiagonalMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT,SO1,DF,NF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT,SO1,DF,NF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT,SO1,DF,NF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT,SO1,DF,NF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT,SO1,DF,NF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF1>, SymmetricMatrix<MT2,SO2,DF2,NF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UniUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< CompressedMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< CustomMatrix<T,AF,PF,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< DynamicMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< HermitianMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< HybridMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< LowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< StaticMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UniLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct AddTrait< UpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO1>, CustomMatrix<T2,AF,PF,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO1>, DynamicMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO1>, HybridMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO1>, StaticMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO>, CustomMatrix<T2,AF,PF,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO>, DynamicMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO>, HybridMatrix<T2,M,N,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CompressedMatrix<T1,SO>, StaticMatrix<T2,M,N,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CustomMatrix<T1,AF,PF,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< CustomMatrix<T1,AF,PF,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< DynamicMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< DynamicMatrix<T1,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< HybridMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< HybridMatrix<T1,M,N,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< StaticMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct AddTrait< StaticMatrix<T1,M,N,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CompressedVector<T1,TF>, CustomVector<T2,AF,PF,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CompressedVector<T1,TF>, DynamicVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CompressedVector<T1,TF>, HybridVector<T2,N,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CompressedVector<T1,TF>, StaticVector<T2,N,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< CustomVector<T1,AF,PF,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< DynamicVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< HybridVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct AddTrait< StaticVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/traits/AddTrait.h	/^struct AddTrait$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/traits/AddTrait.h	/^struct AddTrait< T1, complex<T2>, EnableIf_< IsBuiltin<T1> > >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/traits/AddTrait.h	/^struct AddTrait< complex<T1>, T2, EnableIf_< IsBuiltin<T2> > >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/traits/AddTrait.h	/^struct AddTrait< complex<T1>, complex<T2> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct AddTrait< Column<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct AddTrait< T, Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct AddTrait< Row<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct AddTrait< T, Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct AddTrait< Submatrix<MT,AF,SO,DF>, T >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct AddTrait< T, Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct AddTrait< Subvector<VT,AF,TF,DF>, T >$/;"	s	namespace:blaze
AddTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct AddTrait< T, Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
AddTranslationOptions	amun/3rd_party/fast_align/src/fast_align.cc	/^inline void AddTranslationOptions(vector<vector<unsigned> >& insert_buffer,$/;"	f
AddType	amun/3rd_party/blaze/math/traits/AddTrait.h	/^   struct AddType { using Type = decltype( std::declval<Type1>() + std::declval<Type2>() ); };$/;"	s	struct:blaze::AddTrait
AddVolatile	amun/3rd_party/blaze/util/typetraits/AddVolatile.h	/^struct AddVolatile$/;"	s	namespace:blaze
AdvanceCurrent	amun/3rd_party/yaml-cpp/stream.cpp	/^void Stream::AdvanceCurrent() {$/;"	f	class:YAML::Stream
Alias	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Alias Alias(const std::string content) { return _Alias(content); }$/;"	f	namespace:YAML
Alias	amun/3rd_party/yaml-cpp/exp.h	/^const char Alias = '*';$/;"	m	namespace:YAML::Keys
AliasManager	amun/3rd_party/yaml-cpp/nodeevents.h	/^    AliasManager() : m_curAnchor(0) {}$/;"	f	class:YAML::NodeEvents::AliasManager
AliasManager	amun/3rd_party/yaml-cpp/nodeevents.h	/^  class AliasManager {$/;"	c	class:YAML::NodeEvents
Align	amun/3rd_party/fast_align/src/atools.cc	/^  void Align(unsigned i, unsigned j) {$/;"	f	struct:RefineCommand
AlignSpec	amun/3rd_party/spdlog/details/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	amun/3rd_party/spdlog/details/format.h	/^struct AlignSpec: WidthSpec$/;"	s	namespace:fmt
AlignSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct AlignSpec: WidthSpec$/;"	s	namespace:fmt
AlignTypeSpec	amun/3rd_party/spdlog/details/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill): AlignSpec(width, fill)$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	amun/3rd_party/spdlog/details/format.h	/^struct AlignTypeSpec: AlignSpec$/;"	s	namespace:fmt
AlignTypeSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill): AlignSpec(width, fill)$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct AlignTypeSpec: AlignSpec$/;"	s	namespace:fmt
AlignedAllocator	amun/3rd_party/blaze/util/AlignedAllocator.h	/^class AlignedAllocator$/;"	c	namespace:blaze
AlignedAllocator	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline AlignedAllocator<Type>::AlignedAllocator( const AlignedAllocator<Type2>& allocator )$/;"	f	class:blaze::AlignedAllocator
AlignedAllocator	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline AlignedAllocator<Type>::AlignedAllocator()$/;"	f	class:blaze::AlignedAllocator
AlignedArray	amun/3rd_party/blaze/util/AlignedArray.h	/^class AlignedArray$/;"	c	namespace:blaze
AlignedArray	amun/3rd_party/blaze/util/AlignedArray.h	/^inline AlignedArray<Type,N,Alignment>::AlignedArray()$/;"	f	class:blaze::AlignedArray
AlignedArray	amun/3rd_party/blaze/util/AlignedArray.h	/^inline constexpr AlignedArray<Type,N,Alignment>::AlignedArray( const Ts&... args )$/;"	f	class:blaze::AlignedArray
AlignedSourceContext_	amun/cpu/dl4mt/decoder.h	/^    mblas::Tensor AlignedSourceContext_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
AlignedSourceContext_	amun/cpu/nematus/decoder.h	/^    mblas::Tensor AlignedSourceContext_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
AlignedSourceContext_	amun/fpga/decoder.h	/^  mblas::Tensor AlignedSourceContext_;$/;"	m	class:amunmt::FPGA::Decoder
AlignedSourceContext_	amun/gpu/dl4mt/decoder.h	/^    mblas::Tensor AlignedSourceContext_;$/;"	m	class:amunmt::GPU::Decoder
Alignment	amun/3rd_party/spdlog/details/format.h	/^enum Alignment$/;"	g	namespace:fmt
Alignment	amun/3rd_party/spdlog/fmt/bundled/format.h	/^enum Alignment$/;"	g	namespace:fmt
Alignment	amun/fpga/decoder.h	/^    Alignment(const OpenCLInfo &openCLInfo, const God &god, const Weights& model)$/;"	f	class:amunmt::FPGA::Decoder::Alignment
Alignment	amun/fpga/decoder.h	/^  class Alignment {$/;"	c	class:amunmt::FPGA::Decoder
Alignment	amun/gpu/dl4mt/decoder.h	/^        Alignment(const God &god, const Weights& model)$/;"	f	class:amunmt::GPU::Decoder::Alignment
Alignment	amun/gpu/dl4mt/decoder.h	/^    class Alignment {$/;"	c	class:amunmt::GPU::Decoder
AlignmentIO	amun/3rd_party/fast_align/src/alignment_io.h	/^struct AlignmentIO {$/;"	s
AlignmentOf	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOf : IntegralConstant<size_t,AlignmentOfHelper<T>::value>$/;"	s	namespace:blaze
AlignmentOf	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOf< const T > : IntegralConstant<size_t,AlignmentOfHelper<T>::value>$/;"	s	namespace:blaze
AlignmentOf	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOf< const volatile T > : IntegralConstant<size_t,AlignmentOfHelper<T>::value>$/;"	s	namespace:blaze
AlignmentOf	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOf< volatile T > : IntegralConstant<size_t,AlignmentOfHelper<T>::value>$/;"	s	namespace:blaze
AlignmentOfHelper	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOfHelper$/;"	s	namespace:blaze
AlignmentOfHelper	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOfHelper< complex<double> >$/;"	s	namespace:blaze
AlignmentOfHelper	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOfHelper< complex<float> >$/;"	s	namespace:blaze
AlignmentOfHelper	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOfHelper<double>$/;"	s	namespace:blaze
AlignmentOfHelper	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^struct AlignmentOfHelper<float>$/;"	s	namespace:blaze
AlignmentType	amun/3rd_party/fast_align/src/alignment_io.h	/^  enum AlignmentType { kNONE = 0, kTRANSLATION = 1, kTRANSLITERATION = 2 };$/;"	g	struct:AlignmentIO
All	amun/3rd_party/blaze/util/typetraits/All.h	/^struct All : public BoolConstant< And< TypeTrait<Ts>... >::value >$/;"	s	namespace:blaze
Alpha	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Alpha() {$/;"	f	namespace:YAML::Exp
AlphaNumeric	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& AlphaNumeric() {$/;"	f	namespace:YAML::Exp
AmunInput	amun/plugin/hypo_info.h	/^  AmunInput(const HypoState &hypoState)$/;"	f	struct:amunmt::AmunInput
AmunInput	amun/plugin/hypo_info.h	/^struct AmunInput : public HypoState$/;"	s	namespace:amunmt
AmunInputs	amun/plugin/hypo_info.h	/^typedef std::vector<AmunInput> AmunInputs;$/;"	t	namespace:amunmt
Anchor	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Anchor Anchor(const std::string content) { return _Anchor(content); }$/;"	f	namespace:YAML
Anchor	amun/3rd_party/yaml-cpp/exp.h	/^const char Anchor = '&';$/;"	m	namespace:YAML::Keys
Anchor	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Anchor() {$/;"	f	namespace:YAML::Exp
AnchorByIdentity	amun/3rd_party/yaml-cpp/nodeevents.h	/^    typedef std::map<const detail::node_ref*, anchor_t> AnchorByIdentity;$/;"	t	class:YAML::NodeEvents::AliasManager
AnchorDict	amun/3rd_party/yaml-cpp/contrib/anchordict.h	/^class AnchorDict {$/;"	c	namespace:YAML
AnchorEnd	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& AnchorEnd() {$/;"	f	namespace:YAML::Exp
AnchorMap	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  typedef AnchorDict<void*> AnchorMap;$/;"	t	class:YAML::GraphBuilderAdapter
AnchorReference	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *AnchorReference(const Mark &mark, void *pNode) {$/;"	f	class:YAML::GraphBuilder
AnchorReference	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *AnchorReference(const Mark &mark, void *pNode) {$/;"	f	class:YAML::GraphBuilderInterface
Anchors	amun/3rd_party/yaml-cpp/singledocparser.h	/^  typedef std::map<std::string, anchor_t> Anchors;$/;"	t	class:YAML::SingleDocParser
And	amun/3rd_party/blaze/util/mpl/And.h	/^struct And$/;"	s	namespace:blaze
AndHelper	amun/3rd_party/blaze/util/mpl/And.h	/^struct AndHelper$/;"	s	namespace:blaze
AndHelper	amun/3rd_party/blaze/util/mpl/And.h	/^struct AndHelper<T>$/;"	s	namespace:blaze
Any	amun/3rd_party/blaze/util/typetraits/Any.h	/^struct Any : public BoolConstant< Or< TypeTrait<Ts>... >::value >$/;"	s	namespace:blaze
ApePenalty	amun/gpu/decoder/ape_penalty.h	/^class ApePenalty : public Scorer {$/;"	c	namespace:GPU
ApePenaltyLoader	amun/gpu/decoder/ape_penalty.h	/^class ApePenaltyLoader : public Loader {$/;"	c	namespace:GPU
ApePenaltyState	amun/gpu/decoder/ape_penalty.h	/^class ApePenaltyState : public State {$/;"	c	namespace:GPU
Append	amun/3rd_party/blaze/util/TypeList.h	/^struct Append< NullType, NullType >$/;"	s	namespace:blaze
Append	amun/3rd_party/blaze/util/TypeList.h	/^struct Append< NullType, Type >$/;"	s	namespace:blaze
Append	amun/3rd_party/blaze/util/TypeList.h	/^struct Append< NullType, TypeList<Head,Tail> >$/;"	s	namespace:blaze
Append	amun/3rd_party/blaze/util/TypeList.h	/^struct Append< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
Append	amun/common/exception.h	/^    template <class Data> void Append(const Data &data) {$/;"	f	class:amunmt::util::Exception
Append	amun/common/exception.h	/^    void Append(const char *data) {$/;"	f	class:amunmt::util::Exception
Append	amun/common/exception.h	/^    void Append(const std::string &data) {$/;"	f	class:amunmt::util::Exception
Append	amun/common/histories.cpp	/^void Histories::Append(const Histories &other)$/;"	f	class:amunmt::Histories
AppendToSequence	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void AppendToSequence(void *pSequence, void *pNode) {$/;"	f	class:YAML::GraphBuilder
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:GDCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:GDFACommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:GDFCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:IntersectCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:UnionCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& hyp, const Array2D<bool>& ref, Array2D<bool>* x) {$/;"	f	struct:FMeasureCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& in, const Array2D<bool>&, Array2D<bool>* x) {$/;"	f	struct:ConvertCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& in, const Array2D<bool>&, Array2D<bool>* x) {$/;"	f	struct:DisplayCommand
Apply	amun/3rd_party/fast_align/src/atools.cc	/^  void Apply(const Array2D<bool>& in, const Array2D<bool>&, Array2D<bool>* x) {$/;"	f	struct:InvertCommand
Archive	amun/3rd_party/blaze/util/serialization/Archive.h	/^class Archive : private NonCopyable$/;"	c	namespace:blaze
Archive	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline Archive<Stream>::Archive( Args&&... args )$/;"	f	class:blaze::Archive
Archive	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline Archive<Stream>::Archive( Stream& stream )$/;"	f	class:blaze::Archive
AreSIMDCombinable	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	/^struct AreSIMDCombinable$/;"	s
AreSIMDCombinableHelper	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	/^struct AreSIMDCombinableHelper$/;"	s	namespace:blaze
AreSIMDCombinableHelper	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	/^struct AreSIMDCombinableHelper<T,T>$/;"	s
AreSIMDCombinableHelper	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	/^struct AreSIMDCombinableHelper<T1,T2>$/;"	s
Arg	amun/3rd_party/spdlog/details/format.h	/^struct Arg: Value$/;"	s	namespace:fmt::internal
Arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef internal::Arg Arg;$/;"	t	class:fmt::ArgVisitor
Arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Arg: Value$/;"	s	namespace:fmt::internal
ArgArray	amun/3rd_party/spdlog/details/format.h	/^struct ArgArray<N, false\/*IsPacked*\/>$/;"	s	namespace:fmt
ArgArray	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ArgArray<N, false\/*IsPacked*\/>$/;"	s	namespace:fmt
ArgConverter	amun/3rd_party/spdlog/details/format.cc	/^			ArgConverter(fmt::internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::__anon30::ArgConverter
ArgConverter	amun/3rd_party/spdlog/details/format.cc	/^		class ArgConverter: public fmt::internal::ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fmt::__anon30	file:
ArgConverter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    ArgConverter(internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::internal::ArgConverter
ArgConverter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class ArgConverter: public ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fmt::internal
ArgFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgFormatter(BasicFormatter<Char> &formatter,$/;"	f	class:fmt::ArgFormatter
ArgFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ArgFormatter: public BasicArgFormatter<ArgFormatter<Char>, Char>$/;"	c	namespace:fmt
ArgFormatterBase	amun/3rd_party/spdlog/details/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	amun/3rd_party/spdlog/details/format.h	/^class ArgFormatterBase: public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgFormatterBase	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ArgFormatterBase: public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgList	amun/3rd_party/spdlog/details/format.h	/^    ArgList(): types_(0)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/details/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/details/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/details/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgList	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgList(): types_(0)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgMap	amun/3rd_party/spdlog/details/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgMap	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgType	amun/3rd_party/spdlog/details/format.h	/^    ArgType(): type(0)$/;"	f	struct:fmt::ArgType
ArgType	amun/3rd_party/spdlog/details/format.h	/^    ArgType(const T &arg) : type(make_type(arg))$/;"	f	struct:fmt::ArgType
ArgType	amun/3rd_party/spdlog/details/format.h	/^struct ArgType$/;"	s	namespace:fmt
ArgType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgType(): type(0)$/;"	f	struct:fmt::ArgType
ArgType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgType(const T &arg) : type(make_type(arg))$/;"	f	struct:fmt::ArgType
ArgType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ArgType$/;"	s	namespace:fmt
ArgVisitor	amun/3rd_party/spdlog/details/format.h	/^class ArgVisitor$/;"	c	namespace:fmt::internal
ArgVisitor	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ArgVisitor$/;"	c	namespace:fmt
Array	amun/3rd_party/blaze/util/DimensionOf.h	/^struct Array {$/;"	s	namespace:blaze
Array	amun/fpga/array.h	/^  Array(const Array &other)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^  Array(const OpenCLInfo &openCLInfo)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^  Array(const OpenCLInfo &openCLInfo, const std::vector<T> &vec)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^  Array(const OpenCLInfo &openCLInfo, size_t size)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^  Array(const OpenCLInfo &openCLInfo, size_t size, const T &value)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^  Array(const OpenCLInfo &openCLInfo, size_t size, const T *arr)$/;"	f	class:amunmt::FPGA::Array
Array	amun/fpga/array.h	/^class Array$/;"	c	namespace:amunmt::FPGA
Array2D	amun/3rd_party/fast_align/src/array2d.h	/^  Array2D() : width_(0), height_(0) {}$/;"	f	class:Array2D
Array2D	amun/3rd_party/fast_align/src/array2d.h	/^  Array2D(const Array2D& rhs) :$/;"	f	class:Array2D
Array2D	amun/3rd_party/fast_align/src/array2d.h	/^  Array2D(unsigned w, unsigned h, const T& d = T()) :$/;"	f	class:Array2D
Array2D	amun/3rd_party/fast_align/src/array2d.h	/^class Array2D {$/;"	c
ArrayDelete	amun/3rd_party/blaze/util/policies/ArrayDelete.h	/^struct ArrayDelete$/;"	s	namespace:blaze
ArrayMatrix	amun/cpu/mblas/tensor.h	/^    ArrayMatrix()$/;"	f	class:amunmt::CPU::mblas::ArrayMatrix
ArrayMatrix	amun/cpu/mblas/tensor.h	/^    ArrayMatrix(const MT& rhs)$/;"	f	class:amunmt::CPU::mblas::ArrayMatrix
ArrayMatrix	amun/cpu/mblas/tensor.h	/^    ArrayMatrix(unsigned rows, unsigned columns, value_type val = 0)$/;"	f	class:amunmt::CPU::mblas::ArrayMatrix
ArrayMatrix	amun/cpu/mblas/tensor.h	/^class ArrayMatrix : public BlazeMatrix<float, blaze::rowMajor>$/;"	c	namespace:amunmt::CPU::mblas
ArrayWriter	amun/3rd_party/spdlog/details/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
ArrayWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
AsBuilderInterface	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  GraphBuilderInterface &AsBuilderInterface() { return *this; }$/;"	f	class:YAML::GraphBuilder
AsMap	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Map *AsMap(void *pMap) { return static_cast<Map *>(pMap); }$/;"	f	class:YAML::GraphBuilder
AsNode	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Node *AsNode(void *pNode) { return static_cast<Node *>(pNode); }$/;"	f	class:YAML::GraphBuilder
AsSequence	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Sequence *AsSequence(void *pSeq) {$/;"	f	class:YAML::GraphBuilder
Asin	amun/3rd_party/blaze/math/functors/Asin.h	/^struct Asin$/;"	s	namespace:blaze
Asinh	amun/3rd_party/blaze/math/functors/Asinh.h	/^struct Asinh$/;"	s	namespace:blaze
Assemble	amun/cpu/mblas/tensor.h	/^MT Assemble(const MT1& in,$/;"	f	namespace:amunmt::CPU::mblas
Assemble	amun/fpga/matrix_functions.cpp	/^Matrix& Assemble($/;"	f	namespace:amunmt::FPGA::mblas
AssembleBeamState	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::AssembleBeamState(const State& in,$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
AssembleBeamState	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::AssembleBeamState(const State& in,$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
AssembleBeamState	amun/fpga/encoder_decoder.cpp	/^void EncoderDecoder::AssembleBeamState(const State& in,$/;"	f	class:amunmt::FPGA::EncoderDecoder
Assign	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(char* rhs) {$/;"	f	class:YAML::Node
Assign	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const T& rhs) {$/;"	f	class:YAML::Node
Assign	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const char* rhs) {$/;"	f	class:YAML::Node
Assign	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const std::string& rhs) {$/;"	f	class:YAML::Node
AssignData	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::AssignData(const Node& rhs) {$/;"	f	class:YAML::Node
AssignInMap	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void AssignInMap(void *pMap, void *pKeyNode, void *pValueNode) {$/;"	f	class:YAML::GraphBuilder
AssignNode	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::AssignNode(const Node& rhs) {$/;"	f	class:YAML::Node
Assigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      explicit inline Assigner( Target& target, const Source& source )$/;"	f	struct:blaze::ThreadBackend::Assigner
Assigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   struct Assigner$/;"	s	class:blaze::ThreadBackend
Atan	amun/3rd_party/blaze/math/functors/Atan.h	/^struct Atan$/;"	s	namespace:blaze
Atanh	amun/3rd_party/blaze/math/functors/Atanh.h	/^struct Atanh$/;"	s	namespace:blaze
Attention	amun/cpu/dl4mt/decoder.h	/^        Attention(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Attention
Attention	amun/cpu/dl4mt/decoder.h	/^    class Attention {$/;"	c	class:amunmt::CPU::dl4mt::Decoder
Attention	amun/cpu/nematus/decoder.h	/^        Attention(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Decoder::Attention
Attention	amun/cpu/nematus/decoder.h	/^    class Attention {$/;"	c	class:amunmt::CPU::Nematus::Decoder
Auto	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Auto,$/;"	e	enum:YAML::EMITTER_MANIP
B1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
B1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
B1_	amun/fpga/model.h	/^    const mblas::Tensor B1_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
B1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B1_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
B2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
B2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
B2_	amun/fpga/model.h	/^    const mblas::Tensor B2_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
B2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B2_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
B3_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B3_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
B3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
B3_	amun/fpga/model.h	/^    const mblas::Tensor B3_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
B3_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B3_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
B4_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B4_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
B4_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B4_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
B4_	amun/fpga/model.h	/^    const mblas::Tensor B4_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
B4_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B4_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
BAD_CONVERSION	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_CONVERSION = "bad conversion";$/;"	m	namespace:YAML::ErrorMsg
BAD_DEREFERENCE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_DEREFERENCE = "bad dereference";$/;"	m	namespace:YAML::ErrorMsg
BAD_FILE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_FILE = "bad file";$/;"	m	namespace:YAML::ErrorMsg
BAD_INSERT	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_INSERT = "inserting in a non-convertible-to-map";$/;"	m	namespace:YAML::ErrorMsg
BAD_PUSHBACK	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_PUSHBACK = "appending to a non-sequence";$/;"	m	namespace:YAML::ErrorMsg
BAD_SUBSCRIPT	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_SUBSCRIPT = "operator[] call on a scalar";$/;"	m	namespace:YAML::ErrorMsg
BASE64_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/binary.h	2;"	d
BEGIN_TIMER	amun/gpu/types-gpu.h	30;"	d
BEGIN_TIMER_CPU	amun/common/utils.h	48;"	d
BLACK	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLACK	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLAZE_ALWAYS_INLINE	amun/3rd_party/blaze/system/Inline.h	83;"	d
BLAZE_ALWAYS_INLINE	amun/3rd_party/blaze/system/Inline.h	85;"	d
BLAZE_AVX2_MODE	amun/3rd_party/blaze/system/Vectorization.h	229;"	d
BLAZE_AVX2_MODE	amun/3rd_party/blaze/system/Vectorization.h	231;"	d
BLAZE_AVX_MODE	amun/3rd_party/blaze/system/Vectorization.h	212;"	d
BLAZE_AVX_MODE	amun/3rd_party/blaze/system/Vectorization.h	214;"	d
BLAZE_BEFRIEND_SINGLETON	amun/3rd_party/blaze/util/SystemClock.h	/^   BLAZE_BEFRIEND_SINGLETON;$/;"	m	class:blaze::SystemClock
BLAZE_BEFRIEND_SINGLETON	amun/3rd_party/blaze/util/logging/Logger.h	/^   BLAZE_BEFRIEND_SINGLETON;$/;"	m	class:blaze::logging::Logger
BLAZE_BLACK	amun/3rd_party/blaze/util/ColorMacros.h	114;"	d
BLAZE_BLACK	amun/3rd_party/blaze/util/ColorMacros.h	61;"	d
BLAZE_BLAS_INCLUDE_FILE	amun/3rd_party/blaze/config/BLAS.h	91;"	d
BLAZE_BLAS_IS_PARALLEL	amun/3rd_party/blaze/config/BLAS.h	75;"	d
BLAZE_BLAS_MODE	amun/3rd_party/blaze/config/BLAS.h	55;"	d
BLAZE_BLUE	amun/3rd_party/blaze/util/ColorMacros.h	126;"	d
BLAZE_BLUE	amun/3rd_party/blaze/util/ColorMacros.h	73;"	d
BLAZE_BOOST_THREADS_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	120;"	d
BLAZE_BOOST_THREADS_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	122;"	d
BLAZE_BROWN	amun/3rd_party/blaze/util/ColorMacros.h	123;"	d
BLAZE_BROWN	amun/3rd_party/blaze/util/ColorMacros.h	70;"	d
BLAZE_COLOR_OUTPUT	amun/3rd_party/blaze/util/ColorMacros.h	47;"	d
BLAZE_CONSTRAINT_MATRICES_MUST_HAVE_DIFFERENT_STORAGE_ORDER	amun/3rd_party/blaze/math/constraints/StorageOrder.h	106;"	d
BLAZE_CONSTRAINT_MATRICES_MUST_HAVE_SAME_STORAGE_ORDER	amun/3rd_party/blaze/math/constraints/StorageOrder.h	84;"	d
BLAZE_CONSTRAINT_MUST_BE_ADAPTOR_TYPE	amun/3rd_party/blaze/math/constraints/Adaptor.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/AddExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ALIGNED_TYPE	amun/3rd_party/blaze/math/constraints/Aligned.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ARITHMETIC_TYPE	amun/3rd_party/blaze/util/constraints/Arithmetic.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ARRAY_TYPE	amun/3rd_party/blaze/util/constraints/Array.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_BASE_OF	amun/3rd_party/blaze/util/constraints/BaseOf.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_BLAS_COMPATIBLE_TYPE	amun/3rd_party/blaze/math/constraints/BLASCompatible.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_BOOLEAN_TYPE	amun/3rd_party/blaze/util/constraints/Boolean.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_BUILTIN_TYPE	amun/3rd_party/blaze/util/constraints/Builtin.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_CLASS_TYPE	amun/3rd_party/blaze/util/constraints/Class.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/ColumnMajorMatrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_COLUMN_TYPE	amun/3rd_party/blaze/math/constraints/Column.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/ColumnVector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_COMPLEX_DOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/ComplexDouble.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_COMPLEX_FLOAT_TYPE	amun/3rd_party/blaze/util/constraints/ComplexFloat.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_COMPLEX_TYPE	amun/3rd_party/blaze/util/constraints/Complex.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_COMPUTATION_TYPE	amun/3rd_party/blaze/math/constraints/Computation.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_CONST	amun/3rd_party/blaze/util/constraints/Const.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_CONVERTIBLE	amun/3rd_party/blaze/util/constraints/Convertible.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_COPY_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_COPY_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	141;"	d
BLAZE_CONSTRAINT_MUST_BE_CROSSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/CrossExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_CUSTOM_TYPE	amun/3rd_party/blaze/math/constraints/Custom.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DEFAULT_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/DenseMatrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/DenseVector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DERIVED_FROM	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_DESTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Destructible.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DIAGONAL_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Diagonal.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_DIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/DivExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_DOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/Double.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_EMPTY	amun/3rd_party/blaze/util/constraints/Empty.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_EVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/EvalExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_EXPRESSION_TYPE	amun/3rd_party/blaze/math/constraints/Expression.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_FLOATING_POINT_TYPE	amun/3rd_party/blaze/util/constraints/FloatingPoint.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_FLOAT_TYPE	amun/3rd_party/blaze/util/constraints/Float.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_FOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/ForEachExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_GENERAL_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/General.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_HERMITIAN_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Hermitian.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_IDENTITY_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Identity.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_INTEGER_TYPE	amun/3rd_party/blaze/util/constraints/Integer.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_INTEGRAL_TYPE	amun/3rd_party/blaze/util/constraints/Integral.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_INVERTIBLE_TYPE	amun/3rd_party/blaze/math/constraints/Invertible.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_LONGDOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/LongDouble.h	62;"	d
BLAZE_CONSTRAINT_MUST_BE_LOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Lower.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATEVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatEvalExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATFOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatForEachExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATINVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatInvExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATMATADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_MATMATMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_MATMATSUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Matrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATRIX_WITH_STORAGE_ORDER	amun/3rd_party/blaze/math/constraints/StorageOrder.h	63;"	d
BLAZE_CONSTRAINT_MUST_BE_MATSCALARDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatScalarDivExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATSCALARMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatScalarMultExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATSERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatSerialExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATTRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatTransExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_MATVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	70;"	d
BLAZE_CONSTRAINT_MUST_BE_MOVE_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	141;"	d
BLAZE_CONSTRAINT_MUST_BE_MOVE_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	221;"	d
BLAZE_CONSTRAINT_MUST_BE_MULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MultExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_COPY_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	101;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_COPY_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	181;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_DEFAULT_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	101;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_DESTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Destructible.h	101;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_MOVE_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	181;"	d
BLAZE_CONSTRAINT_MUST_BE_NOTHROW_MOVE_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	261;"	d
BLAZE_CONSTRAINT_MUST_BE_NUMERIC_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/NumericMatrix.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_NUMERIC_TYPE	amun/3rd_party/blaze/util/constraints/Numeric.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_NUMERIC_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/NumericVector.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_OBJECT_TYPE	amun/3rd_party/blaze/util/constraints/Object.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_OPPOSED_VIEW	amun/3rd_party/blaze/math/constraints/OpposedView.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_PADDED_TYPE	amun/3rd_party/blaze/math/constraints/Padded.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_POD	amun/3rd_party/blaze/util/constraints/Pod.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_POINTER_TYPE	amun/3rd_party/blaze/util/constraints/Pointer.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_PROXY_TYPE	amun/3rd_party/blaze/math/constraints/Proxy.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_REFERENCE_TYPE	amun/3rd_party/blaze/util/constraints/Reference.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_RESIZABLE	amun/3rd_party/blaze/math/constraints/Resizable.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_RESTRICTED	amun/3rd_party/blaze/math/constraints/Restricted.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/RowMajorMatrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ROW_TYPE	amun/3rd_party/blaze/math/constraints/Row.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/RowVector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SAME_TYPE	amun/3rd_party/blaze/util/constraints/SameType.h	71;"	d
BLAZE_CONSTRAINT_MUST_BE_SERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/SerialExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SIGNED_TYPE	amun/3rd_party/blaze/util/constraints/Signed.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SIMD_ENABLED	amun/3rd_party/blaze/math/constraints/SIMDEnabled.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SIMD_PACK	amun/3rd_party/blaze/math/constraints/SIMDPack.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_SMP_ASSIGNABLE	amun/3rd_party/blaze/math/constraints/SMPAssignable.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SPARSE_ELEMENT_TYPE	amun/3rd_party/blaze/math/constraints/SparseElement.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SPARSE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/SparseMatrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SPARSE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/SparseVector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SQUARE	amun/3rd_party/blaze/math/constraints/Square.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_BASE_OF	amun/3rd_party/blaze/util/constraints/BaseOf.h	101;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_DERIVED_FROM	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	101;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_LOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyLower.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_SAME_TYPE	amun/3rd_party/blaze/util/constraints/SameType.h	131;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_TRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyTriangular.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_STRICTLY_UPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyUpper.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/SubExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SUBMATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Submatrix.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SUBSCRIPTABLE	amun/3rd_party/blaze/util/constraints/Subscriptable.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_SUBSCRIPTABLE_AS_DECAYABLE_POINTER	amun/3rd_party/blaze/util/constraints/Subscriptable.h	79;"	d
BLAZE_CONSTRAINT_MUST_BE_SUBVECTOR_TYPE	amun/3rd_party/blaze/math/constraints/Subvector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_SYMMETRIC_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Symmetric.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_TRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/TransExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_TRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Triangular.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_TVECMATMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	70;"	d
BLAZE_CONSTRAINT_MUST_BE_UNILOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniLower.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_UNION	amun/3rd_party/blaze/util/constraints/Union.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_UNITRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniTriangular.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_UNIUPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniUpper.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_UNSIGNED_TYPE	amun/3rd_party/blaze/util/constraints/Unsigned.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_UPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Upper.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VALID_TYPE	amun/3rd_party/blaze/util/constraints/Valid.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_VECEVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecEvalExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECFOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecForEachExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECSCALARDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecScalarDivExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECSCALARMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecScalarMultExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECSERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecSerialExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECTORIZABLE_TYPE	amun/3rd_party/blaze/util/constraints/Vectorizable.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/Vector.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECTOR_WITH_TRANSPOSE_FLAG	amun/3rd_party/blaze/math/constraints/TransposeFlag.h	63;"	d
BLAZE_CONSTRAINT_MUST_BE_VECTRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecTransExpr.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VECTVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	65;"	d
BLAZE_CONSTRAINT_MUST_BE_VECVECADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_VECVECDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_VECVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_VECVECSUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	69;"	d
BLAZE_CONSTRAINT_MUST_BE_VIEW_TYPE	amun/3rd_party/blaze/math/constraints/View.h	61;"	d
BLAZE_CONSTRAINT_MUST_BE_VOID	amun/3rd_party/blaze/util/constraints/Void.h	60;"	d
BLAZE_CONSTRAINT_MUST_BE_VOLATILE	amun/3rd_party/blaze/util/constraints/Volatile.h	60;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_MATMATADDEXPR	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_MATMATMULTEXPR	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_MATMATSUBEXPR	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_MATVECMULTEXPR	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	110;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_TVECMATMULTEXPR	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	110;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_VECTVECMULTEXPR	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	105;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_VECVECADDEXPR	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_VECVECDIVEXPR	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_VECVECMULTEXPR	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_FORM_VALID_VECVECSUBEXPR	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	109;"	d
BLAZE_CONSTRAINT_MUST_HAVE_1_BYTE	amun/3rd_party/blaze/util/constraints/Size.h	98;"	d
BLAZE_CONSTRAINT_MUST_HAVE_2_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	136;"	d
BLAZE_CONSTRAINT_MUST_HAVE_4_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	174;"	d
BLAZE_CONSTRAINT_MUST_HAVE_8_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	213;"	d
BLAZE_CONSTRAINT_MUST_HAVE_CONST_DATA_ACCESS	amun/3rd_party/blaze/math/constraints/ConstDataAccess.h	61;"	d
BLAZE_CONSTRAINT_MUST_HAVE_EQUAL_NUMBER_OF_COLUMNS	amun/3rd_party/blaze/math/constraints/Columns.h	67;"	d
BLAZE_CONSTRAINT_MUST_HAVE_EQUAL_NUMBER_OF_ROWS	amun/3rd_party/blaze/math/constraints/Rows.h	67;"	d
BLAZE_CONSTRAINT_MUST_HAVE_EQUAL_SIZE	amun/3rd_party/blaze/math/constraints/Size.h	67;"	d
BLAZE_CONSTRAINT_MUST_HAVE_MUTABLE_DATA_ACCESS	amun/3rd_party/blaze/math/constraints/MutableDataAccess.h	61;"	d
BLAZE_CONSTRAINT_MUST_HAVE_RANK	amun/3rd_party/blaze/util/constraints/Rank.h	60;"	d
BLAZE_CONSTRAINT_MUST_HAVE_SAME_SIZE	amun/3rd_party/blaze/util/constraints/SameSize.h	60;"	d
BLAZE_CONSTRAINT_MUST_HAVE_SIZE	amun/3rd_party/blaze/util/constraints/Size.h	60;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ADAPTOR_TYPE	amun/3rd_party/blaze/math/constraints/Adaptor.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/AddExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ALIGNED_TYPE	amun/3rd_party/blaze/math/constraints/Aligned.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ARITHMETIC_TYPE	amun/3rd_party/blaze/util/constraints/Arithmetic.h	80;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ARRAY_TYPE	amun/3rd_party/blaze/util/constraints/Array.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_BASE_OF	amun/3rd_party/blaze/util/constraints/BaseOf.h	80;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_BLAS_COMPATIBLE_TYPE	amun/3rd_party/blaze/math/constraints/BLASCompatible.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_BOOLEAN_TYPE	amun/3rd_party/blaze/util/constraints/Boolean.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_BUILTIN_TYPE	amun/3rd_party/blaze/util/constraints/Builtin.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_CLASS_TYPE	amun/3rd_party/blaze/util/constraints/Class.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COLUMN_MAJOR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/ColumnMajorMatrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COLUMN_TYPE	amun/3rd_party/blaze/math/constraints/Column.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COLUMN_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/ColumnVector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COMPLEX_DOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/ComplexDouble.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COMPLEX_FLOAT_TYPE	amun/3rd_party/blaze/util/constraints/ComplexFloat.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COMPLEX_TYPE	amun/3rd_party/blaze/util/constraints/Complex.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COMPUTATION_TYPE	amun/3rd_party/blaze/math/constraints/Computation.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_CONST	amun/3rd_party/blaze/util/constraints/Const.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_CONVERTIBLE	amun/3rd_party/blaze/util/constraints/Convertible.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COPY_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_COPY_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	161;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_CROSSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/CrossExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_CUSTOM_TYPE	amun/3rd_party/blaze/math/constraints/Custom.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DEFAULT_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DENSE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/DenseMatrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DENSE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/DenseVector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DERIVED_FROM	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	80;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DESTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Destructible.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DIAGONAL_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Diagonal.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/DivExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_DOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/Double.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_EMPTY	amun/3rd_party/blaze/util/constraints/Empty.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_EVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/EvalExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_EXPRESSION_TYPE	amun/3rd_party/blaze/math/constraints/Expression.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_FLOATING_POINT_TYPE	amun/3rd_party/blaze/util/constraints/FloatingPoint.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_FLOAT_TYPE	amun/3rd_party/blaze/util/constraints/Float.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_FOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/ForEachExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_GENERAL_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/General.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_HERMITIAN_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Hermitian.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_IDENTITY_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Identity.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_INTEGER_TYPE	amun/3rd_party/blaze/util/constraints/Integer.h	82;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_INTEGRAL_TYPE	amun/3rd_party/blaze/util/constraints/Integral.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_INVERTIBLE_TYPE	amun/3rd_party/blaze/math/constraints/Invertible.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_LONGDOUBLE_TYPE	amun/3rd_party/blaze/util/constraints/LongDouble.h	83;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_LOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Lower.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATEVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatEvalExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATFOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatForEachExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATINVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatInvExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATMATADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATMATMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATMATSUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Matrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATSCALARDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatScalarDivExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATSCALARMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatScalarMultExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATSERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatSerialExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATTRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatTransExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MATVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	90;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MOVE_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	161;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MOVE_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	241;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_MULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/MultExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_COPY_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	121;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_COPY_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	201;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_DEFAULT_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	121;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_DESTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Destructible.h	121;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_MOVE_ASSIGNABLE_TYPE	amun/3rd_party/blaze/util/constraints/Assignable.h	201;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NOTHROW_MOVE_CONSTRUCTIBLE_TYPE	amun/3rd_party/blaze/util/constraints/Constructible.h	281;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NUMERIC_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/NumericMatrix.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NUMERIC_TYPE	amun/3rd_party/blaze/util/constraints/Numeric.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_NUMERIC_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/NumericVector.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_OBJECT_TYPE	amun/3rd_party/blaze/util/constraints/Object.h	80;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_OPPOSED_VIEW	amun/3rd_party/blaze/math/constraints/OpposedView.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_PADDED_TYPE	amun/3rd_party/blaze/math/constraints/Padded.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_POD	amun/3rd_party/blaze/util/constraints/Pod.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_POINTER_TYPE	amun/3rd_party/blaze/util/constraints/Pointer.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_PROXY_TYPE	amun/3rd_party/blaze/math/constraints/Proxy.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_REFERENCE_TYPE	amun/3rd_party/blaze/util/constraints/Reference.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_RESIZABLE	amun/3rd_party/blaze/math/constraints/Resizable.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_RESTRICTED	amun/3rd_party/blaze/math/constraints/Restricted.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ROW_MAJOR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/RowMajorMatrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ROW_TYPE	amun/3rd_party/blaze/math/constraints/Row.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_ROW_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/RowVector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SAME_TYPE	amun/3rd_party/blaze/util/constraints/SameType.h	102;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/SerialExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SIGNED_TYPE	amun/3rd_party/blaze/util/constraints/Signed.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SIMD_ENABLED	amun/3rd_party/blaze/math/constraints/SIMDEnabled.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SIMD_PACK	amun/3rd_party/blaze/math/constraints/SIMDPack.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SMP_ASSIGNABLE	amun/3rd_party/blaze/math/constraints/SMPAssignable.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SPARSE_ELEMENT_TYPE	amun/3rd_party/blaze/math/constraints/SparseElement.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SPARSE_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/SparseMatrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SPARSE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/SparseVector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SQUARE	amun/3rd_party/blaze/math/constraints/Square.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_BASE_OF	amun/3rd_party/blaze/util/constraints/BaseOf.h	122;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_DERIVED_FROM	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	122;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_LOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyLower.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_SAME_TYPE	amun/3rd_party/blaze/util/constraints/SameType.h	160;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_TRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyTriangular.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_STRICTLY_UPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/StrictlyUpper.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/SubExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SUBMATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Submatrix.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SUBVECTOR_TYPE	amun/3rd_party/blaze/math/constraints/Subvector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_SYMMETRIC_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Symmetric.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_TRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/TransExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_TRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Triangular.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_TVECMATMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	90;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UNILOWER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniLower.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UNION	amun/3rd_party/blaze/util/constraints/Union.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UNITRIANGULAR_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniTriangular.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UNIUPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/UniUpper.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UNSIGNED_TYPE	amun/3rd_party/blaze/util/constraints/Unsigned.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_UPPER_MATRIX_TYPE	amun/3rd_party/blaze/math/constraints/Upper.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VALID_TYPE	amun/3rd_party/blaze/util/constraints/Valid.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECEVALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecEvalExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECFOREACHEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecForEachExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECSCALARDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecScalarDivExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECSCALARMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecScalarMultExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECSERIALEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecSerialExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECTORIZABLE_TYPE	amun/3rd_party/blaze/util/constraints/Vectorizable.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECTOR_TYPE	amun/3rd_party/blaze/math/constraints/Vector.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECTRANSEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecTransExpr.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECTVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	85;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECVECADDEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECVECDIVEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECVECMULTEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VECVECSUBEXPR_TYPE	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	89;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VIEW_TYPE	amun/3rd_party/blaze/math/constraints/View.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VOID	amun/3rd_party/blaze/util/constraints/Void.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_BE_VOLATILE	amun/3rd_party/blaze/util/constraints/Volatile.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_MATMATADDEXPR	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	137;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_MATMATMULTEXPR	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	134;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_MATMATSUBEXPR	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	137;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_MATVECMULTEXPR	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	135;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_TVECMATMULTEXPR	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	135;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_VECTVECMULTEXPR	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	127;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_VECVECADDEXPR	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	136;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_VECVECDIVEXPR	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	136;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_VECVECMULTEXPR	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	136;"	d
BLAZE_CONSTRAINT_MUST_NOT_FORM_VALID_VECVECSUBEXPR	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	136;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_1_BYTE	amun/3rd_party/blaze/util/constraints/Size.h	117;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_2_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	155;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_4_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	193;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_8_BYTES	amun/3rd_party/blaze/util/constraints/Size.h	232;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_CONST_DATA_ACCESS	amun/3rd_party/blaze/math/constraints/ConstDataAccess.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_EQUAL_NUMBER_OF_COLUMNS	amun/3rd_party/blaze/math/constraints/Columns.h	92;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_EQUAL_NUMBER_OF_ROWS	amun/3rd_party/blaze/math/constraints/Rows.h	92;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_EQUAL_SIZE	amun/3rd_party/blaze/math/constraints/Size.h	92;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_MUTABLE_DATA_ACCESS	amun/3rd_party/blaze/math/constraints/MutableDataAccess.h	81;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_RANK	amun/3rd_party/blaze/util/constraints/Rank.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_SAME_SIZE	amun/3rd_party/blaze/util/constraints/SameSize.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_HAVE_SIZE	amun/3rd_party/blaze/util/constraints/Size.h	79;"	d
BLAZE_CONSTRAINT_MUST_NOT_REQUIRE_EVALUATION	amun/3rd_party/blaze/math/constraints/RequiresEvaluation.h	81;"	d
BLAZE_CONSTRAINT_MUST_REQUIRE_EVALUATION	amun/3rd_party/blaze/math/constraints/RequiresEvaluation.h	61;"	d
BLAZE_CONSTRAINT_POINTER_MUST_BE_COMPARABLE	amun/3rd_party/blaze/util/constraints/Comparable.h	60;"	d
BLAZE_CONSTRAINT_SOFT_TYPE_RESTRICTION	amun/3rd_party/blaze/util/constraints/TypeRestriction.h	61;"	d
BLAZE_CONSTRAINT_TYPE_RESTRICTION	amun/3rd_party/blaze/util/constraints/TypeRestriction.h	81;"	d
BLAZE_CONSTRAINT_VECTORS_MUST_HAVE_DIFFERENT_TRANSPOSE_FLAG	amun/3rd_party/blaze/math/constraints/TransposeFlag.h	106;"	d
BLAZE_CONSTRAINT_VECTORS_MUST_HAVE_SAME_TRANSPOSE_FLAG	amun/3rd_party/blaze/math/constraints/TransposeFlag.h	84;"	d
BLAZE_CPP_THREADS_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	93;"	d
BLAZE_CPP_THREADS_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	95;"	d
BLAZE_CREATE_BUILTIN_MATHTRAIT_SPECIALIZATION	amun/3rd_party/blaze/math/traits/MathTrait.h	216;"	d
BLAZE_CREATE_COMPLEX_MATHTRAIT_SPECIALIZATION	amun/3rd_party/blaze/math/traits/MathTrait.h	234;"	d
BLAZE_CREATE_GET_TYPE_MEMBER_TYPE_TRAIT	amun/3rd_party/blaze/util/typetraits/GetMemberType.h	95;"	d
BLAZE_CREATE_HAS_DATA_OR_FUNCTION_MEMBER_TYPE_TRAIT	amun/3rd_party/blaze/util/typetraits/HasMember.h	98;"	d
BLAZE_CREATE_HAS_MEMBER_TYPE_TRAIT	amun/3rd_party/blaze/util/typetraits/HasMember.h	264;"	d
BLAZE_CREATE_HAS_TYPE_MEMBER_TYPE_TRAIT	amun/3rd_party/blaze/util/typetraits/HasMember.h	182;"	d
BLAZE_CYAN	amun/3rd_party/blaze/util/ColorMacros.h	132;"	d
BLAZE_CYAN	amun/3rd_party/blaze/util/ColorMacros.h	79;"	d
BLAZE_DEBUG_MODE	amun/3rd_party/blaze/system/Debugging.h	57;"	d
BLAZE_DEBUG_MODE	amun/3rd_party/blaze/system/Debugging.h	59;"	d
BLAZE_DEPRECATED	amun/3rd_party/blaze/system/Deprecated.h	54;"	d
BLAZE_DEPRECATED	amun/3rd_party/blaze/system/Deprecated.h	58;"	d
BLAZE_DO_JOIN	amun/3rd_party/blaze/util/Suffix.h	50;"	d
BLAZE_DO_JOIN2	amun/3rd_party/blaze/util/Suffix.h	51;"	d
BLAZE_ENFORCE_AVX	amun/3rd_party/blaze/system/Vectorization.h	59;"	d
BLAZE_FMA_MODE	amun/3rd_party/blaze/system/Vectorization.h	271;"	d
BLAZE_FMA_MODE	amun/3rd_party/blaze/system/Vectorization.h	273;"	d
BLAZE_FUNCTION_TRACE	amun/3rd_party/blaze/util/logging/FunctionTrace.h	154;"	d
BLAZE_FUNCTION_TRACE	amun/3rd_party/blaze/util/logging/FunctionTrace.h	157;"	d
BLAZE_GREEN	amun/3rd_party/blaze/util/ColorMacros.h	120;"	d
BLAZE_GREEN	amun/3rd_party/blaze/util/ColorMacros.h	67;"	d
BLAZE_INTERNAL_ASSERT	amun/3rd_party/blaze/util/Assert.h	101;"	d
BLAZE_INTERNAL_ASSERT	amun/3rd_party/blaze/util/Assert.h	99;"	d
BLAZE_INTERNAL_ASSERTION	amun/3rd_party/blaze/config/Assertion.h	48;"	d
BLAZE_JOIN	amun/3rd_party/blaze/util/Suffix.h	49;"	d
BLAZE_LIGHTBLACK	amun/3rd_party/blaze/util/ColorMacros.h	138;"	d
BLAZE_LIGHTBLACK	amun/3rd_party/blaze/util/ColorMacros.h	85;"	d
BLAZE_LIGHTBLUE	amun/3rd_party/blaze/util/ColorMacros.h	150;"	d
BLAZE_LIGHTBLUE	amun/3rd_party/blaze/util/ColorMacros.h	97;"	d
BLAZE_LIGHTCYAN	amun/3rd_party/blaze/util/ColorMacros.h	103;"	d
BLAZE_LIGHTCYAN	amun/3rd_party/blaze/util/ColorMacros.h	156;"	d
BLAZE_LIGHTGREEN	amun/3rd_party/blaze/util/ColorMacros.h	144;"	d
BLAZE_LIGHTGREEN	amun/3rd_party/blaze/util/ColorMacros.h	91;"	d
BLAZE_LIGHTMAGENTA	amun/3rd_party/blaze/util/ColorMacros.h	100;"	d
BLAZE_LIGHTMAGENTA	amun/3rd_party/blaze/util/ColorMacros.h	153;"	d
BLAZE_LIGHTRED	amun/3rd_party/blaze/util/ColorMacros.h	141;"	d
BLAZE_LIGHTRED	amun/3rd_party/blaze/util/ColorMacros.h	88;"	d
BLAZE_LIGHTWHITE	amun/3rd_party/blaze/util/ColorMacros.h	106;"	d
BLAZE_LIGHTWHITE	amun/3rd_party/blaze/util/ColorMacros.h	159;"	d
BLAZE_LOG_DEBUG_SECTION	amun/3rd_party/blaze/util/logging/DebugSection.h	96;"	d
BLAZE_LOG_DETAIL_SECTION	amun/3rd_party/blaze/util/logging/DetailSection.h	96;"	d
BLAZE_LOG_ERROR_SECTION	amun/3rd_party/blaze/util/logging/ErrorSection.h	96;"	d
BLAZE_LOG_INFO_SECTION	amun/3rd_party/blaze/util/logging/InfoSection.h	96;"	d
BLAZE_LOG_PROGRESS_SECTION	amun/3rd_party/blaze/util/logging/ProgressSection.h	96;"	d
BLAZE_LOG_WARNING_SECTION	amun/3rd_party/blaze/util/logging/WarningSection.h	96;"	d
BLAZE_MAGENTA	amun/3rd_party/blaze/util/ColorMacros.h	129;"	d
BLAZE_MAGENTA	amun/3rd_party/blaze/util/ColorMacros.h	76;"	d
BLAZE_MAJOR_VERSION	amun/3rd_party/blaze/system/Version.h	52;"	d
BLAZE_MIC_MODE	amun/3rd_party/blaze/system/Vectorization.h	246;"	d
BLAZE_MIC_MODE	amun/3rd_party/blaze/system/Vectorization.h	248;"	d
BLAZE_MINOR_VERSION	amun/3rd_party/blaze/system/Version.h	63;"	d
BLAZE_MPI_PARALLEL_MODE	amun/3rd_party/blaze/config/MPI.h	50;"	d
BLAZE_OLDCOLOR	amun/3rd_party/blaze/util/ColorMacros.h	109;"	d
BLAZE_OLDCOLOR	amun/3rd_party/blaze/util/ColorMacros.h	162;"	d
BLAZE_OPENMP_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	65;"	d
BLAZE_OPENMP_PARALLEL_MODE	amun/3rd_party/blaze/system/SMP.h	67;"	d
BLAZE_PARALLEL_SECTION	amun/3rd_party/blaze/math/smp/ParallelSection.h	246;"	d
BLAZE_RED	amun/3rd_party/blaze/util/ColorMacros.h	117;"	d
BLAZE_RED	amun/3rd_party/blaze/util/ColorMacros.h	64;"	d
BLAZE_RESTRICT	amun/3rd_party/blaze/system/Restrict.h	65;"	d
BLAZE_RESTRICT	amun/3rd_party/blaze/system/Restrict.h	69;"	d
BLAZE_RESTRICT	amun/3rd_party/blaze/system/Restrict.h	73;"	d
BLAZE_RESTRICT	amun/3rd_party/blaze/system/Restrict.h	77;"	d
BLAZE_RESTRICT	amun/3rd_party/blaze/system/Restrict.h	81;"	d
BLAZE_SERIAL_SECTION	amun/3rd_party/blaze/math/smp/SerialSection.h	262;"	d
BLAZE_SIGNATURE	amun/3rd_party/blaze/system/Signature.h	56;"	d
BLAZE_SIGNATURE	amun/3rd_party/blaze/system/Signature.h	60;"	d
BLAZE_SIGNATURE	amun/3rd_party/blaze/system/Signature.h	64;"	d
BLAZE_SIGNATURE	amun/3rd_party/blaze/system/Signature.h	68;"	d
BLAZE_SSE2_MODE	amun/3rd_party/blaze/system/Vectorization.h	144;"	d
BLAZE_SSE2_MODE	amun/3rd_party/blaze/system/Vectorization.h	146;"	d
BLAZE_SSE3_MODE	amun/3rd_party/blaze/system/Vectorization.h	161;"	d
BLAZE_SSE3_MODE	amun/3rd_party/blaze/system/Vectorization.h	163;"	d
BLAZE_SSE4_MODE	amun/3rd_party/blaze/system/Vectorization.h	195;"	d
BLAZE_SSE4_MODE	amun/3rd_party/blaze/system/Vectorization.h	197;"	d
BLAZE_SSE_MODE	amun/3rd_party/blaze/system/Vectorization.h	127;"	d
BLAZE_SSE_MODE	amun/3rd_party/blaze/system/Vectorization.h	129;"	d
BLAZE_SSSE3_MODE	amun/3rd_party/blaze/system/Vectorization.h	178;"	d
BLAZE_SSSE3_MODE	amun/3rd_party/blaze/system/Vectorization.h	180;"	d
BLAZE_STATIC_ASSERT	amun/3rd_party/blaze/util/StaticAssert.h	112;"	d
BLAZE_STATIC_ASSERT_MSG	amun/3rd_party/blaze/util/StaticAssert.h	123;"	d
BLAZE_STRONG_INLINE	amun/3rd_party/blaze/system/Inline.h	62;"	d
BLAZE_STRONG_INLINE	amun/3rd_party/blaze/system/Inline.h	64;"	d
BLAZE_SVML_MODE	amun/3rd_party/blaze/system/Vectorization.h	296;"	d
BLAZE_SVML_MODE	amun/3rd_party/blaze/system/Vectorization.h	298;"	d
BLAZE_TEMPLATE	amun/3rd_party/blaze/util/Template.h	73;"	d
BLAZE_TEMPLATE	amun/3rd_party/blaze/util/Template.h	75;"	d
BLAZE_THROW	amun/3rd_party/blaze/util/Exception.h	94;"	d
BLAZE_THROW_BAD_ALLOC	amun/3rd_party/blaze/util/Exception.h	139;"	d
BLAZE_THROW_DIVISION_BY_ZERO	amun/3rd_party/blaze/math/Exception.h	97;"	d
BLAZE_THROW_INVALID_ARGUMENT	amun/3rd_party/blaze/util/Exception.h	235;"	d
BLAZE_THROW_LAPACK_ERROR	amun/3rd_party/blaze/math/Exception.h	146;"	d
BLAZE_THROW_LENGTH_ERROR	amun/3rd_party/blaze/util/Exception.h	283;"	d
BLAZE_THROW_LOGIC_ERROR	amun/3rd_party/blaze/util/Exception.h	187;"	d
BLAZE_THROW_OUT_OF_RANGE	amun/3rd_party/blaze/util/Exception.h	331;"	d
BLAZE_THROW_RUNTIME_ERROR	amun/3rd_party/blaze/util/Exception.h	379;"	d
BLAZE_TYPELIST_1	amun/3rd_party/blaze/util/TypeList.h	149;"	d
BLAZE_TYPELIST_10	amun/3rd_party/blaze/util/TypeList.h	339;"	d
BLAZE_TYPELIST_2	amun/3rd_party/blaze/util/TypeList.h	170;"	d
BLAZE_TYPELIST_3	amun/3rd_party/blaze/util/TypeList.h	191;"	d
BLAZE_TYPELIST_4	amun/3rd_party/blaze/util/TypeList.h	212;"	d
BLAZE_TYPELIST_5	amun/3rd_party/blaze/util/TypeList.h	233;"	d
BLAZE_TYPELIST_6	amun/3rd_party/blaze/util/TypeList.h	254;"	d
BLAZE_TYPELIST_7	amun/3rd_party/blaze/util/TypeList.h	275;"	d
BLAZE_TYPELIST_8	amun/3rd_party/blaze/util/TypeList.h	296;"	d
BLAZE_TYPELIST_9	amun/3rd_party/blaze/util/TypeList.h	317;"	d
BLAZE_USER_ASSERT	amun/3rd_party/blaze/util/Assert.h	115;"	d
BLAZE_USER_ASSERT	amun/3rd_party/blaze/util/Assert.h	117;"	d
BLAZE_USER_ASSERTION	amun/3rd_party/blaze/config/Assertion.h	64;"	d
BLAZE_USE_ALWAYS_INLINE	amun/3rd_party/blaze/config/Inline.h	74;"	d
BLAZE_USE_DEBUG_MODE	amun/3rd_party/blaze/config/Debugging.h	52;"	d
BLAZE_USE_FUNCTION_TRACES	amun/3rd_party/blaze/config/Logging.h	88;"	d
BLAZE_USE_RESTRICT	amun/3rd_party/blaze/config/Restrict.h	46;"	d
BLAZE_USE_SHARED_MEMORY_PARALLELIZATION	amun/3rd_party/blaze/config/SMP.h	51;"	d
BLAZE_USE_STRONG_INLINE	amun/3rd_party/blaze/config/Inline.h	54;"	d
BLAZE_USE_VECTORIZATION	amun/3rd_party/blaze/config/Vectorization.h	53;"	d
BLAZE_WHITE	amun/3rd_party/blaze/util/ColorMacros.h	135;"	d
BLAZE_WHITE	amun/3rd_party/blaze/util/ColorMacros.h	82;"	d
BLAZE_YELLOW	amun/3rd_party/blaze/util/ColorMacros.h	147;"	d
BLAZE_YELLOW	amun/3rd_party/blaze/util/ColorMacros.h	94;"	d
BLOCK_ENTRY	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const BLOCK_ENTRY = "illegal block entry";$/;"	m	namespace:YAML::ErrorMsg
BLOCK_ENTRY	amun/3rd_party/yaml-cpp/token.h	/^    BLOCK_ENTRY,$/;"	e	enum:YAML::Token::TYPE
BLOCK_MAP_END	amun/3rd_party/yaml-cpp/token.h	/^    BLOCK_MAP_END,$/;"	e	enum:YAML::Token::TYPE
BLOCK_MAP_START	amun/3rd_party/yaml-cpp/token.h	/^    BLOCK_MAP_START,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SEQ_END	amun/3rd_party/yaml-cpp/token.h	/^    BLOCK_SEQ_END,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SEQ_START	amun/3rd_party/yaml-cpp/token.h	/^    BLOCK_SEQ_START,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t BLOCK_SIZE = ( BLAZE_DEBUG_MODE ? DEBUG_BLOCK_SIZE : DEFAULT_BLOCK_SIZE );$/;"	m	namespace:blaze
BLOCK_SIZE	amun/fpga/nth_element.h	/^  const int BLOCK_SIZE = 512;$/;"	m	class:amunmt::FPGA::NthElement
BLOCK_SIZE	amun/gpu/mblas/nth_element.h	/^    const unsigned BLOCK_SIZE = 512;$/;"	m	class:amunmt::GPU::NthElement
BLUE	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLUE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BOLD	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink
BOOL	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
BOOL	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
BOOST_PYTHON_MODULE	amun/python/amunmt.cpp	/^BOOST_PYTHON_MODULE(libfastnmt) {$/;"	f
BOOST_PYTHON_MODULE	amun/python/bk.cpp	/^BOOST_PYTHON_MODULE(libamunmt) {$/;"	f
BOOST_PYTHON_MODULE	amun/python/new.cpp	/^BOOST_PYTHON_MODULE(libfastnmt) {$/;"	f
BPE	amun/common/processor/bpe.cpp	/^BPE::BPE()$/;"	f	class:amunmt::BPE
BPE	amun/common/processor/bpe.cpp	/^BPE::BPE(const std::string& path, const std::string sep)$/;"	f	class:amunmt::BPE
BPE	amun/common/processor/bpe.cpp	/^BPE::BPE(std::ifstream&& file, const std::string sep)$/;"	f	class:amunmt::BPE
BPE	amun/common/processor/bpe.h	/^class BPE : public Processor {$/;"	c	namespace:amunmt
BREAK	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
BUFFER_SIZE	amun/3rd_party/spdlog/details/format.h	/^        BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3$/;"	e	enum:FormatInt::__anon29
BUFFER_SIZE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3$/;"	e	enum:FormatInt::__anon63
B_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
B_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
B_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
B_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> B_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
B_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
B_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
B_	amun/cpu/nematus/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
B_	amun/fpga/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
B_	amun/fpga/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
B_	amun/fpga/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
B_	amun/fpga/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
B_	amun/fpga/model.h	/^    const mblas::Tensor B_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM1
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM2
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardLSTM
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
B_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> B_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardLSTM
B_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class B_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
BadConversion	amun/3rd_party/yaml-cpp/exceptions.h	/^  explicit BadConversion(const Mark& mark_)$/;"	f	class:YAML::BadConversion
BadConversion	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadConversion : public RepresentationException {$/;"	c	namespace:YAML
BadDereference	amun/3rd_party/yaml-cpp/exceptions.h	/^  BadDereference()$/;"	f	class:YAML::BadDereference
BadDereference	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadDereference : public RepresentationException {$/;"	c	namespace:YAML
BadFile	amun/3rd_party/yaml-cpp/exceptions.h	/^  BadFile() : Exception(Mark::null_mark(), ErrorMsg::BAD_FILE) {}$/;"	f	class:YAML::BadFile
BadFile	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadFile : public Exception {$/;"	c	namespace:YAML
BadInsert	amun/3rd_party/yaml-cpp/exceptions.h	/^  BadInsert()$/;"	f	class:YAML::BadInsert
BadInsert	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadInsert : public RepresentationException {$/;"	c	namespace:YAML
BadPushback	amun/3rd_party/yaml-cpp/exceptions.h	/^  BadPushback()$/;"	f	class:YAML::BadPushback
BadPushback	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadPushback : public RepresentationException {$/;"	c	namespace:YAML
BadSubscript	amun/3rd_party/yaml-cpp/exceptions.h	/^  BadSubscript()$/;"	f	class:YAML::BadSubscript
BadSubscript	amun/3rd_party/yaml-cpp/exceptions.h	/^class BadSubscript : public RepresentationException {$/;"	c	namespace:YAML
Base	amun/3rd_party/spdlog/details/format.cc	/^			typedef ArgFormatterBase<PrintfArgFormatter<Char>, Char> Base;$/;"	t	class:fmt::internal::PrintfArgFormatter	file:
Base	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    typedef internal::ArgFormatterBase<Impl, Char> Base;$/;"	t	class:fmt::BasicPrintfArgFormatter
BaseBestHyps	amun/common/base_best_hyps.cpp	/^BaseBestHyps::BaseBestHyps(const God &god)$/;"	f	class:amunmt::BaseBestHyps
BaseBestHyps	amun/common/base_best_hyps.h	/^class BaseBestHyps$/;"	c	namespace:amunmt
BaseBestHypsPtr	amun/common/base_best_hyps.h	/^typedef std::shared_ptr<BaseBestHyps> BaseBestHypsPtr;$/;"	t	namespace:amunmt
BaseTensor	amun/common/base_tensor.h	/^	BaseTensor() {}$/;"	f	class:amunmt::BaseTensor
BaseTensor	amun/common/base_tensor.h	/^class BaseTensor {$/;"	c	namespace:amunmt
BaseType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef DenseMatrix<This,SO>         BaseType;        \/\/!< Base type of this DiagonalMatrix instance.$/;"	t	class:blaze::DiagonalMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>         BaseType;        \/\/!< Base type of this DiagonalMatrix instance.$/;"	t	class:blaze::DiagonalMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef DenseMatrix<This,SO>          BaseType;        \/\/!< Base type of this HermitianMatrix instance.$/;"	t	class:blaze::HermitianMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>          BaseType;        \/\/!< Base type of this HermitianMatrix instance.$/;"	t	class:blaze::HermitianMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>      BaseType;        \/\/!< Base type of this LowerMatrix instance.$/;"	t	class:blaze::LowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>      BaseType;        \/\/!< Base type of this LowerMatrix instance.$/;"	t	class:blaze::LowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>              BaseType;        \/\/!< Base type of this StrictlyLowerMatrix instance.$/;"	t	class:blaze::StrictlyLowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>             BaseType;        \/\/!< Base type of this StrictlyLowerMatrix instance.$/;"	t	class:blaze::StrictlyLowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>              BaseType;        \/\/!< Base type of this StrictlyUpperMatrix instance.$/;"	t	class:blaze::StrictlyUpperMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>              BaseType;        \/\/!< Base type of this StrictlyUpperMatrix instance.$/;"	t	class:blaze::StrictlyUpperMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef DenseMatrix<This,SO>                BaseType;        \/\/!< Base type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef DenseMatrix<This,SO>               BaseType;        \/\/!< Base type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef SparseMatrix<This,SO>                BaseType;        \/\/!< Base type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef SparseMatrix<This,SO>               BaseType;        \/\/!< Base type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>         BaseType;        \/\/!< Base type of this UniLowerMatrix instance.$/;"	t	class:blaze::UniLowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>        BaseType;        \/\/!< Base type of this UniLowerMatrix instance.$/;"	t	class:blaze::UniLowerMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>         BaseType;        \/\/!< Base type of this UniUpperMatrix instance.$/;"	t	class:blaze::UniUpperMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>         BaseType;        \/\/!< Base type of this UniUpperMatrix instance.$/;"	t	class:blaze::UniUpperMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef DenseMatrix<This,SO>      BaseType;        \/\/!< Base type of this UpperMatrix instance.$/;"	t	class:blaze::UpperMatrix
BaseType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef SparseMatrix<This,SO>      BaseType;        \/\/!< Base type of this UpperMatrix instance.$/;"	t	class:blaze::UpperMatrix
BaseType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DenseMatrix<This,SO>         BaseType;       \/\/!< Base type of this CustomMatrix instance.$/;"	t	class:blaze::CustomMatrix
BaseType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef DenseVector<This,TF>         BaseType;       \/\/!< Base type of this CustomVector instance.$/;"	t	class:blaze::CustomVector
BaseType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DenseMatrix<This,SO>     BaseType;       \/\/!< Base type of this DynamicMatrix instance.$/;"	t	class:blaze::DynamicMatrix
BaseType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef DenseVector<This,TF>     BaseType;       \/\/!< Base type of this DynamicVector instance.$/;"	t	class:blaze::DynamicVector
BaseType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef DenseMatrix<This,SO>        BaseType;       \/\/!< Base type of this HybridMatrix instance.$/;"	t	class:blaze::HybridMatrix
BaseType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef DenseVector<This,TF>      BaseType;       \/\/!< Base type of this HybridVector instance.$/;"	t	class:blaze::HybridVector
BaseType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef DenseMatrix<This,SO>        BaseType;       \/\/!< Base type of this StaticMatrix instance.$/;"	t	class:blaze::StaticMatrix
BaseType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef DenseVector<This,TF>      BaseType;       \/\/!< Base type of this StaticVector instance.$/;"	t	class:blaze::StaticVector
BaseType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef SparseMatrix<This,SO>       BaseType;        \/\/!< Base type of this CompressedMatrix instance.$/;"	t	class:blaze::CompressedMatrix
BaseType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef SparseMatrix<This,true>       BaseType;        \/\/!< Base type of this CompressedMatrix instance.$/;"	t	class:blaze::CompressedMatrix
BaseType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef SparseVector<This,TF>       BaseType;        \/\/!< Base type of this CompressedVector instance.$/;"	t	class:blaze::CompressedVector
BaseType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef DenseVector<This,false>     BaseType;       \/\/!< Base type of this Column instance.$/;"	t	class:blaze::Column
BaseType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef SparseVector<This,false>      BaseType;       \/\/!< Base type of this Column instance.$/;"	t	class:blaze::Column
BaseType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef SparseVector<This,false>     BaseType;       \/\/!< Base type of this Column instance.$/;"	t	class:blaze::Column
BaseType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef SparseVector<This,false>    BaseType;       \/\/!< Base type of this Column instance.$/;"	t	class:blaze::Column
BaseType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef DenseVector<This,true>      BaseType;       \/\/!< Base type of this Row instance.$/;"	t	class:blaze::Row
BaseType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef SparseVector<This,true>     BaseType;       \/\/!< Base type of this Row instance.$/;"	t	class:blaze::Row
BaseType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef DenseMatrix<This,false>             BaseType;       \/\/!< Base type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
BaseType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef SparseMatrix<This,false>      BaseType;       \/\/!< Base type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
BaseType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef SparseMatrix<This,true>      BaseType;       \/\/!< Base type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
BaseType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef DenseVector<This,TF>             BaseType;       \/\/!< Base type of this Subvector instance.$/;"	t	class:blaze::Subvector
BaseType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef SparseVector<This,TF>       BaseType;       \/\/!< Base type of this Subvector instance.$/;"	t	class:blaze::Subvector
BasicArgFormatter	amun/3rd_party/spdlog/details/format.h	/^    BasicArgFormatter(BasicFormatter<Char> &f, FormatSpec &s, const Char *fmt)$/;"	f	class:fmt::internal::BasicArgFormatter
BasicArgFormatter	amun/3rd_party/spdlog/details/format.h	/^class BasicArgFormatter:$/;"	c	namespace:fmt::internal
BasicArgFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicArgFormatter(BasicFormatter<Char, Impl> &formatter,$/;"	f	class:fmt::BasicArgFormatter
BasicArgFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicArgFormatter: public internal::ArgFormatterBase<Impl, Char>$/;"	c	namespace:fmt
BasicArrayWriter	amun/3rd_party/spdlog/details/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	amun/3rd_party/spdlog/details/format.h	/^class BasicArrayWriter: public BasicWriter<Char>$/;"	c
BasicArrayWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicArrayWriter: public BasicWriter<Char>$/;"	c
BasicCStringRef	amun/3rd_party/spdlog/details/format.h	/^    BasicCStringRef(const Char *s): data_(s)$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	amun/3rd_party/spdlog/details/format.h	/^    BasicCStringRef(const std::basic_string<Char> &s): data_(s.c_str())$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	amun/3rd_party/spdlog/details/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const Char *s): data_(s)$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const std::basic_string<Char> &s): data_(s.c_str())$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCharTraits	amun/3rd_party/spdlog/details/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicCharTraits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicData	amun/3rd_party/spdlog/details/format.cc	/^template struct fmt::internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:struct:fmt::internal::	file:
BasicData	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	template struct internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:struct:fmt::internal::	file:
BasicFormatter	amun/3rd_party/spdlog/details/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	amun/3rd_party/spdlog/details/format.h	/^class BasicFormatter: private internal::FormatterBase$/;"	c	namespace:fmt
BasicFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicFormatter: private internal::FormatterBase$/;"	c	namespace:fmt
BasicMemoryWriter	amun/3rd_party/spdlog/details/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	amun/3rd_party/spdlog/details/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	amun/3rd_party/spdlog/details/format.h	/^class BasicMemoryWriter: public BasicWriter<Char>$/;"	c
BasicMemoryWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicMemoryWriter: public BasicWriter<Char>$/;"	c
BasicPrintfArgFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    BasicPrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::BasicPrintfArgFormatter
BasicPrintfArgFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class BasicPrintfArgFormatter: public internal::ArgFormatterBase<Impl, Char>$/;"	c	namespace:fmt
BasicStringRef	amun/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const Char *s, std::size_t size): data_(s), size_(size)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/details/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s, std::size_t size): data_(s), size_(size)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicWriter	amun/3rd_party/spdlog/details/format.h	/^    explicit BasicWriter(Buffer<Char> &b): buffer_(b)$/;"	f	class:BasicWriter
BasicWriter	amun/3rd_party/spdlog/details/format.h	/^class BasicWriter$/;"	c
BasicWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit BasicWriter(Buffer<Char> &b): buffer_(b)$/;"	f	class:BasicWriter
BasicWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class BasicWriter$/;"	c
Beam	amun/common/beam.h	/^typedef std::vector<HypothesisPtr> Beam;$/;"	t	namespace:amunmt
Beam	amun/common/scorer.h	/^typedef std::vector<HypothesisPtr> Beam;$/;"	t	namespace:amunmt
Beams	amun/common/beam.h	/^typedef std::vector<Beam> Beams;$/;"	t	namespace:amunmt
BeginDoc	amun/3rd_party/yaml-cpp/emittermanip.h	/^  BeginDoc,$/;"	e	enum:YAML::EMITTER_MANIP
BeginMap	amun/3rd_party/yaml-cpp/emittermanip.h	/^  BeginMap,$/;"	e	enum:YAML::EMITTER_MANIP
BeginNode	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::BeginNode() {$/;"	f	class:YAML::EmitFromEvents
BeginSentenceState	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::BeginSentenceState(State& state, unsigned batchSize) {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
BeginSentenceState	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::BeginSentenceState(State& state, unsigned batchSize) {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
BeginSentenceState	amun/fpga/encoder_decoder.cpp	/^void EncoderDecoder::BeginSentenceState(State& state, unsigned batchSize)$/;"	f	class:amunmt::FPGA::EncoderDecoder
BeginSentenceState	amun/gpu/decoder/kenlm.cpp	/^const KenlmState& LM::BeginSentenceState() const {$/;"	f	class:LM
BeginSeq	amun/3rd_party/yaml-cpp/emittermanip.h	/^  BeginSeq,$/;"	e	enum:YAML::EMITTER_MANIP
BestHyps	amun/cpu/decoder/best_hyps.cpp	/^BestHyps::BestHyps(const God &god)$/;"	f	class:amunmt::CPU::BestHyps
BestHyps	amun/cpu/decoder/best_hyps.h	/^class BestHyps : public BaseBestHyps$/;"	c	namespace:amunmt::CPU
BestHyps	amun/fpga/best_hyps.cpp	/^BestHyps::BestHyps(const God &god, const OpenCLInfo &openCLInfo)$/;"	f	class:amunmt::FPGA::BestHyps
BestHyps	amun/fpga/best_hyps.h	/^class BestHyps : public BaseBestHyps$/;"	c	namespace:amunmt::FPGA
BestHyps	amun/gpu/decoder/best_hyps.h	/^class BestHyps : public BaseBestHyps$/;"	c	namespace:amunmt::GPU
Bi_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Bi_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecInit
Bi_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bi_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecInit
Bi_	amun/fpga/model.h	/^    const mblas::Tensor Bi_;$/;"	m	struct:amunmt::FPGA::Weights::DecInit
Bi_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bi_;$/;"	m	struct:amunmt::GPU::Weights::DecInit
BigEndianTest	amun/3rd_party/cnpy/cnpy.cpp	/^char cnpy::BigEndianTest() {$/;"	f	class:cnpy
Binary	amun/3rd_party/yaml-cpp/binary.h	/^  Binary() : m_unownedData(0), m_unownedSize(0) {}$/;"	f	class:YAML::Binary
Binary	amun/3rd_party/yaml-cpp/binary.h	/^  Binary(const unsigned char *data_, std::size_t size_)$/;"	f	class:YAML::Binary
Binary	amun/3rd_party/yaml-cpp/binary.h	/^class YAML_CPP_API Binary {$/;"	c	namespace:YAML
Blank	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Blank() {$/;"	f	namespace:YAML::Exp
BlankOrBreak	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& BlankOrBreak() {$/;"	f	namespace:YAML::Exp
BlazeBase	amun/cpu/mblas/tensor.h	/^                                SO> BlazeBase;$/;"	t	class:amunmt::CPU::mblas::BlazeMatrix
BlazeMatrix	amun/cpu/mblas/tensor.h	/^    BlazeMatrix() {}$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
BlazeMatrix	amun/cpu/mblas/tensor.h	/^    BlazeMatrix(const MT& rhs)$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
BlazeMatrix	amun/cpu/mblas/tensor.h	/^    BlazeMatrix(unsigned rows, unsigned columns, value_type val = 0)$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
BlazeMatrix	amun/cpu/mblas/tensor.h	/^class BlazeMatrix : public BaseTensor, public blaze::CustomMatrix<T, blaze::unaligned,$/;"	c	namespace:amunmt::CPU::mblas
BlazeWrapper	amun/cpu/npz_converter.h	/^      blaze::unpadded, blaze::rowMajor> BlazeWrapper;$/;"	t	class:amunmt::CPU::NpzConverter
Block	amun/3rd_party/blaze/util/MemoryPool.h	/^   struct Block$/;"	s	class:blaze::MemoryPool
Block	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Block,$/;"	e	enum:YAML::EMITTER_MANIP
Block	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
Block	amun/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
BlockEntry	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& BlockEntry() {$/;"	f	namespace:YAML::Exp
BlockMap	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
BlockMap	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
BlockMapPrepareLongKey	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareLongKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareLongKeyValue	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareLongKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareSimpleKey	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareSimpleKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareSimpleKeyValue	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareSimpleKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockSeq	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
BlockSeq	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
BlockSeqPrepareNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockSeqPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
Blocks	amun/3rd_party/blaze/util/MemoryPool.h	/^   typedef std::vector<Block> Blocks;  \/\/!< Vector of memory blocks.$/;"	t	class:blaze::MemoryPool
Bm_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bm_;$/;"	m	struct:amunmt::GPU::Weights::MultWeights
Bmu_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bmu_;$/;"	m	struct:amunmt::GPU::Weights::MultWeights
Bool	amun/3rd_party/blaze/util/mpl/Bool.h	/^struct Bool : public IntegralConstant<bool,C>$/;"	s	namespace:blaze
Break	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Break() {$/;"	f	namespace:YAML::Exp
Broadcast	amun/cpu/mblas/tensor.h	/^MT Broadcast(const Functor& functor, const MT1& m1, const MT2& m2) {$/;"	f	namespace:amunmt::CPU::mblas
Broadcast	amun/gpu/mblas/tensor_functions.h	/^Tensor& Broadcast(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
BroadcastTanh	amun/fpga/matrix_functions.cpp	/^Matrix& BroadcastTanh(Matrix& Out, const Matrix& In, const Array<int>& batchMapping, size_t srcSize)$/;"	f	namespace:amunmt::FPGA::mblas
BroadcastVec	amun/gpu/mblas/tensor_functions.h	/^Tensor& BroadcastVec(Functor functor, Tensor& Out, const Tensor& In)$/;"	f	namespace:amunmt::GPU::mblas
BroadcastVecAdd	amun/fpga/matrix_functions.cpp	/^Matrix& BroadcastVecAdd(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
BroadcastVecColumn	amun/gpu/mblas/tensor_functions.h	/^Tensor& BroadcastVecColumn(Functor functor, Tensor& Out, const mblas::Vector<float>& In)$/;"	f	namespace:amunmt::GPU::mblas
BroadcastVecColumnAddWeighted	amun/fpga/matrix_functions.cpp	/^Matrix& BroadcastVecColumnAddWeighted(Matrix& Out, float weight, const Array<float>& In)$/;"	f	namespace:amunmt::FPGA::mblas
BroadcastVecTanh	amun/fpga/matrix_functions.cpp	/^Matrix& BroadcastVecTanh(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
Buffer	amun/3rd_party/spdlog/details/format.h	/^    Buffer(T *ptr = 0, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	amun/3rd_party/spdlog/details/format.h	/^class Buffer$/;"	c	namespace:fmt
Buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Buffer(T *ptr = FMT_NULL, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class Buffer$/;"	c	namespace:fmt
BuildGraphOfNextDocument	amun/3rd_party/yaml-cpp/contrib/graphbuilder.cpp	/^void* BuildGraphOfNextDocument(Parser& parser,$/;"	f	namespace:YAML
BuildGraphOfNextDocument	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^typename Impl::Node *BuildGraphOfNextDocument(Parser &parser, Impl &impl) {$/;"	f	namespace:YAML
Builtin	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^   struct Builtin {$/;"	s	struct:blaze::ImagTrait
Builtin	amun/3rd_party/blaze/math/traits/RealTrait.h	/^   struct Builtin {$/;"	s	struct:blaze::RealTrait
Builtin	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Builtin { typedef T2  Type; };$/;"	s	struct:blaze::UnderlyingBuiltin
Builtin	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Builtin { typedef T2  Type; };$/;"	s	struct:blaze::UnderlyingElement
Builtin	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^   struct Builtin { typedef BT  Type; };$/;"	s	struct:blaze::IsVectorizableHelper
BuiltinOrComplex	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^   struct BuiltinOrComplex { typedef T2  Type; };$/;"	s	struct:blaze::UnderlyingNumeric
BuiltinType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::HermitianProxy
BuiltinType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::HermitianValue
BuiltinType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::NumericProxy
BuiltinType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::SymmetricValue
BuiltinType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::UniLowerProxy
BuiltinType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::UniLowerValue
BuiltinType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::UniUpperProxy
BuiltinType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	s	class:blaze::UniUpperValue
Bx1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Bx1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Bx1_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> Bx1_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
Bx1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Bx1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Bx1_	amun/fpga/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Bx1_	amun/fpga/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Bx1_	amun/fpga/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Bx1_	amun/fpga/model.h	/^    const mblas::Tensor Bx1_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Bx1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx1_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Bx1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx1_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Bx1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx1_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Bx1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx1_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Bx2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Bx2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Bx2_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> Bx2_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
Bx2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Bx2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Bx2_	amun/fpga/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Bx2_	amun/fpga/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Bx2_	amun/fpga/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Bx2_	amun/fpga/model.h	/^    const mblas::Tensor Bx2_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Bx2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx2_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Bx2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx2_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Bx2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx2_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Bx2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Bx2_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Bx3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Bx3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Bx3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
CHAR	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR_FLAG	amun/3rd_party/spdlog/details/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon28
CHAR_FLAG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon62
CHAR_IN_ALIAS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_ALIAS =$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_ANCHOR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_ANCHOR =$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_BLOCK	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_BLOCK = "unexpected character in block scalar";$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_SCALAR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_SCALAR = "illegal character in scalar";$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_TAG_HANDLE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_TAG_HANDLE =$/;"	m	namespace:YAML::ErrorMsg
CHOMP	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	g	namespace:YAML
CLIP	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
CODE_POINT_MAX	amun/3rd_party/utf8/core.h	/^    const uint32_t CODE_POINT_MAX      = 0x0010ffffu;$/;"	m	namespace:utf8::internal
COLLECTIONSTACK_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/collectionstack.h	2;"	d
COUNT_INCR	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^float COUNT_INCR = 1;$/;"	v
CPU	amun/cpu/decoder/best_hyps.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/decoder/best_hyps.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/decoder/encoder_decoder.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/decoder/encoder_decoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/decoder/encoder_decoder_loader.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/decoder/encoder_decoder_loader.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/decoder/encoder_decoder_state.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/decoder/encoder_decoder_state.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/decoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/encoder.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/dl4mt/encoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/encoder_decoder.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/dl4mt/encoder_decoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/gru.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/model.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/dl4mt/model.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/dl4mt/transition.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/mblas/phoenix_functions.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/mblas/phoenix_functions.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/mblas/tensor.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/mblas/tensor.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/decoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/encoder.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/nematus/encoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/encoder_decoder.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/nematus/encoder_decoder.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/gru.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/model.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/nematus/model.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/nematus/transition.cpp	/^namespace CPU {$/;"	n	namespace:amunmt	file:
CPU	amun/cpu/nematus/transition.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPU	amun/cpu/npz_converter.h	/^namespace CPU {$/;"	n	namespace:amunmt
CPUDevice	amun/common/types.h	/^	CPUDevice = 7,$/;"	e	enum:amunmt::DeviceType
CPUEncoderDecoderBase	amun/cpu/decoder/encoder_decoder.cpp	/^CPUEncoderDecoderBase::CPUEncoderDecoderBase($/;"	f	class:amunmt::CPU::CPUEncoderDecoderBase
CPUEncoderDecoderBase	amun/cpu/decoder/encoder_decoder.h	/^class CPUEncoderDecoderBase : public Scorer {$/;"	c	namespace:amunmt::CPU
CPYPDICT_H_	amun/3rd_party/fast_align/src/corpus.h	2;"	d
CP_REPLACEMENT_CHARACTER	amun/3rd_party/yaml-cpp/stream.cpp	12;"	d	file:
CRT	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ConstReference_<SET>  CRT;  \/\/!< Reference-to-const type of the underlying sparse element.$/;"	t	class:blaze::Column::ColumnElement
CRT	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ConstReference_<SET>  CRT;  \/\/!< Reference-to-const type of the underlying sparse element.$/;"	t	class:blaze::Row::RowElement
CRT	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ConstReference_<SET>  CRT;  \/\/!< Reference-to-const type of the underlying sparse element.$/;"	t	class:blaze::Submatrix::SubmatrixElement
CRT	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ConstReference_<SET>  CRT;  \/\/!< Reference-to-const type of the underlying sparse element.$/;"	t	class:blaze::Subvector::SubvectorElement
CSTRING	amun/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CSTRING	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CStringRef	amun/3rd_party/spdlog/details/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt
CStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt
CT	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the dense matrix expression.$/;"	t	class:blaze::DMatInvExpr
CT	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarDivExpr
CT	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarMultExpr
CT	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the dense matrix expression.$/;"	t	class:blaze::DMatTransExpr
CT	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the dense vector expression.$/;"	t	class:blaze::DVecScalarDivExpr
CT	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the dense vector expression.$/;"	t	class:blaze::DVecScalarMultExpr
CT	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the dense vector expression.$/;"	t	class:blaze::DVecTransExpr
CT	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarDivExpr
CT	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarMultExpr
CT	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef CompositeType_<MT>  CT;  \/\/!< Composite type of the sparse matrix expression.$/;"	t	class:blaze::SMatTransExpr
CT	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarDivExpr
CT	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarMultExpr
CT	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef CompositeType_<VT>  CT;  \/\/!< Composite type of the sparse vector expression.$/;"	t	class:blaze::SVecTransExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
CT1	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef CompositeType_<VT1>  CT1;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	/^   typedef RemoveReference_< CompositeType_<T1> >  CT1;$/;"	t	struct:blaze::TDVecDVecMultExprHelper
CT1	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatMultExpr
CT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef CompositeType_<MT1>  CT1;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef CompositeType_<VT2>  CT2;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	/^   typedef RemoveReference_< CompositeType_<T2> >  CT2;$/;"	t	struct:blaze::TDVecDVecMultExprHelper
CT2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatMultExpr
CT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef CompositeType_<MT2>  CT2;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
CTrans	amun/3rd_party/blaze/math/functors/CTrans.h	/^struct CTrans$/;"	s	namespace:blaze
CTransExprTrait	amun/3rd_party/blaze/math/traits/CTransExprTrait.h	/^struct CTransExprTrait$/;"	s	namespace:blaze
CUSTOM	amun/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CUSTOM	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CYAN	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
CYAN	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
CYAN	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
C_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor C_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
C_	amun/cpu/nematus/model.h	/^    const mblas::Tensor C_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
C_	amun/fpga/model.h	/^    const mblas::Tensor C_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
C_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor C_;$/;"	m	class:amunmt::GPU::SlowLSTM
C_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> C_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
C_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class C_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
CalcBeam	amun/common/search.cpp	/^bool Search::CalcBeam($/;"	f	class:amunmt::Search
CalcBeam	amun/cpu/decoder/best_hyps.cpp	/^void BestHyps::CalcBeam($/;"	f	class:amunmt::CPU::BestHyps
CalcBeam	amun/fpga/best_hyps.cpp	/^void BestHyps::CalcBeam($/;"	f	class:amunmt::FPGA::BestHyps
CallOpenCL	amun/fpga/matrix_functions.cpp	/^void CallOpenCL($/;"	f	namespace:amunmt::FPGA::mblas
CamelCase	amun/3rd_party/yaml-cpp/emittermanip.h	/^  CamelCase,      \/\/ No, Off$/;"	e	enum:YAML::EMITTER_MANIP
CanEmitNewline	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::CanEmitNewline() const { return true; }$/;"	f	class:YAML::Emitter
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::DMatDMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::DMatSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::DMatTSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::SMatSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::SMatTDMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::SMatTSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TDMatSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TDMatTDMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TSMatDMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TSMatSMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TSMatTDMatMultExpr
CanExploitSymmetry	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   struct CanExploitSymmetry {$/;"	s	class:blaze::TSMatTSMatMultExpr
CanInsertPotentialSimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::CanInsertPotentialSimpleKey() const {$/;"	f	class:YAML::Scanner
CastConverter	amun/3rd_party/blaze/util/Convert.h	/^struct CastConverter$/;"	s	namespace:blaze
CastConverter	amun/3rd_party/blaze/util/Convert.h	/^struct CastConverter<To*,From*,0> : private NonCreatable$/;"	s	namespace:blaze
CastConverter	amun/3rd_party/blaze/util/Convert.h	/^struct CastConverter<To*,From*,1> : private NonCreatable$/;"	s	namespace:blaze
CastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^class PtrVector<T,D,G>::CastIterator$/;"	c	class:blaze::PtrVector
CastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::CastIterator<C>::CastIterator( IteratorType begin, IteratorType end )$/;"	f	class:blaze::PtrVector::CastIterator
CastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::CastIterator<C>::CastIterator( const CastIterator<Other>& it )$/;"	f	class:blaze::PtrVector::CastIterator
CastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::CastIterator<C>::CastIterator()$/;"	f	class:blaze::PtrVector::CastIterator
Cbrt	amun/3rd_party/blaze/math/functors/Cbrt.h	/^struct Cbrt$/;"	s	namespace:blaze
Ceil	amun/3rd_party/blaze/math/functors/Ceil.h	/^struct Ceil$/;"	s	namespace:blaze
Cell	amun/gpu/dl4mt/cell.h	/^class Cell {$/;"	c	namespace:amunmt::GPU
CellLength	amun/gpu/dl4mt/cell.h	/^  CellLength(size_t cell, size_t output): cell(cell), output(output){}$/;"	f	struct:amunmt::GPU::CellLength
CellLength	amun/gpu/dl4mt/cell.h	/^struct CellLength {$/;"	s	namespace:amunmt::GPU
CellState	amun/gpu/dl4mt/cellstate.h	/^  CellState(){$/;"	f	struct:amunmt::GPU::CellState
CellState	amun/gpu/dl4mt/cellstate.h	/^  CellState(std::unique_ptr<mblas::Tensor> cell, std::unique_ptr<mblas::Tensor> output):$/;"	f	struct:amunmt::GPU::CellState
CellState	amun/gpu/dl4mt/cellstate.h	/^struct CellState {$/;"	s	namespace:amunmt::GPU
Char	amun/3rd_party/blaze/util/mpl/Char.h	/^struct Char : IntegralConstant<char,N>$/;"	s	namespace:blaze
Char	amun/3rd_party/spdlog/details/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter
Char	amun/3rd_party/spdlog/details/format.h	/^    typedef char Char;  \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	amun/3rd_party/spdlog/details/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue
Char	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter
Char	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef char Char;  \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue
CharAt	amun/3rd_party/yaml-cpp/stream.h	/^inline char Stream::CharAt(size_t i) const { return m_readahead[i]; }$/;"	f	class:YAML::Stream
CharConverter	amun/3rd_party/spdlog/details/format.cc	/^			explicit CharConverter(fmt::internal::Arg &arg): arg_(arg)$/;"	f	class:fmt::__anon30::CharConverter
CharConverter	amun/3rd_party/spdlog/details/format.cc	/^		class CharConverter: public fmt::internal::ArgVisitor<CharConverter, void>$/;"	c	namespace:fmt::__anon30	file:
CharConverter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    explicit CharConverter(internal::Arg &arg): arg_(arg)$/;"	f	class:fmt::internal::CharConverter
CharConverter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class CharConverter: public ArgVisitor<CharConverter, void>$/;"	c	namespace:fmt::internal
CharPtr	amun/3rd_party/spdlog/details/format.h	/^    typedef stdext::checked_array_iterator<Char*> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits
CharPtr	amun/3rd_party/spdlog/details/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharPtr	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef stdext::checked_array_iterator<Char*> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits
CharPtr	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharTraits	amun/3rd_party/spdlog/details/format.h	/^class CharTraits<char>: public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	amun/3rd_party/spdlog/details/format.h	/^class CharTraits<wchar_t>: public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
CharTraits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class CharTraits<char>: public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class CharTraits<wchar_t>: public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
CharacterSet	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	g	class:YAML::Stream
CheckError	amun/fpga/types-fpga.h	/^inline void CheckError(cl_int error)$/;"	f
CheckOverflow	amun/3rd_party/extract_lex/exception.h	/^inline std::size_t CheckOverflow(uint64_t value) {$/;"	f	namespace:util
CheckOverflow	amun/common/exception.h	/^inline std::size_t CheckOverflow(uint64_t value) {$/;"	f	namespace:amunmt::util
CheckOverflowInternal	amun/3rd_party/extract_lex/exception.h	/^template <> inline std::size_t CheckOverflowInternal<8>(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	amun/3rd_party/extract_lex/exception.h	/^template <unsigned len> inline std::size_t CheckOverflowInternal(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	amun/common/exception.h	/^template <> inline std::size_t CheckOverflowInternal<8>(uint64_t value) {$/;"	f	namespace:amunmt::util
CheckOverflowInternal	amun/common/exception.h	/^template <unsigned len> inline std::size_t CheckOverflowInternal(uint64_t value) {$/;"	f	namespace:amunmt::util
CheckType	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static T *CheckType(U *p) {$/;"	f	class:YAML::GraphBuilder
Chomp	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Chomp() {$/;"	f	namespace:YAML::Exp
ChompIndicator	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ChompIndicator() {$/;"	f	namespace:YAML::Exp
ClassLanguageModel	amun/gpu/decoder/class_language_model.h	/^    ClassLanguageModel(const LM& lm,$/;"	f	class:amunmt::GPU::ClassLanguageModel
ClassLanguageModel	amun/gpu/decoder/class_language_model.h	/^class ClassLanguageModel : public LanguageModel {$/;"	c	namespace:amunmt::GPU
CleanAfterTranslation	amun/common/scorer.h	/^    virtual void CleanAfterTranslation() {}$/;"	f	class:amunmt::Scorer
CleanAfterTranslation	amun/common/search.cpp	/^void Search::CleanAfterTranslation()$/;"	f	class:amunmt::Search
Cleanup	amun/common/god.cpp	/^void God::Cleanup()$/;"	f	class:amunmt::God
ClearCounts	amun/3rd_party/fast_align/src/ttables.h	/^  void ClearCounts() {$/;"	f	class:TTable
ClearModifiedSettings	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::ClearModifiedSettings() { m_modifiedSettings.clear(); }$/;"	f	class:YAML::EmitterState
Clone	amun/3rd_party/yaml-cpp/node.cpp	/^Node Clone(const Node& node) {$/;"	f	namespace:YAML
CollectionStack	amun/3rd_party/yaml-cpp/collectionstack.h	/^class CollectionStack {$/;"	c	namespace:YAML
CollectionType	amun/3rd_party/yaml-cpp/collectionstack.h	/^struct CollectionType {$/;"	s	namespace:YAML
Color	amun/3rd_party/spdlog/details/format.h	/^enum Color$/;"	g
Color	amun/3rd_party/spdlog/fmt/bundled/format.h	/^enum Color$/;"	g
Column	amun/3rd_party/blaze/math/views/column/BaseTemplate.h	/^class Column$/;"	c	namespace:blaze
Column	amun/3rd_party/blaze/math/views/column/Dense.h	/^class Column<MT,true,true,SF>$/;"	c	namespace:blaze
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^class Column<MT,false,false,false>$/;"	c	namespace:blaze
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^class Column<MT,false,false,true>$/;"	c	namespace:blaze
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^class Column<MT,true,false,SF>$/;"	c	namespace:blaze
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,false,false,false>::Column( MT& matrix, size_t index )$/;"	f	class:blaze::Column
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,false,false,true>::Column( MT& matrix, size_t index )$/;"	f	class:blaze::Column
Column	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>::Column( MT& matrix, size_t index )$/;"	f	class:blaze::Column
ColumnElement	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnElement( IteratorType pos, size_t row )$/;"	f	class:blaze::Column::ColumnElement
ColumnElement	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   class ColumnElement : private SparseElement$/;"	c	class:blaze::Column
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct ColumnExprTrait< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct ColumnExprTrait< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct ColumnExprTrait< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct ColumnExprTrait< DMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct ColumnExprTrait< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct ColumnExprTrait< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct ColumnExprTrait< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct ColumnExprTrait< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct ColumnExprTrait< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct ColumnExprTrait< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct ColumnExprTrait< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct ColumnExprTrait< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct ColumnExprTrait< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct ColumnExprTrait< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct ColumnExprTrait< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct ColumnExprTrait< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct ColumnExprTrait< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct ColumnExprTrait< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct ColumnExprTrait< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct ColumnExprTrait< SMatSMatMultExpr<MT1,MT2> >$/;"	s
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct ColumnExprTrait< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct ColumnExprTrait< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct ColumnExprTrait< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct ColumnExprTrait< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct ColumnExprTrait< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct ColumnExprTrait< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct ColumnExprTrait< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct ColumnExprTrait< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct ColumnExprTrait< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct ColumnExprTrait< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^struct ColumnExprTrait< SVecTSVecMultExpr<VT1,VT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct ColumnExprTrait< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct ColumnExprTrait< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct ColumnExprTrait< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct ColumnExprTrait< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct ColumnExprTrait< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct ColumnExprTrait< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct ColumnExprTrait< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
ColumnExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct ColumnExprTrait< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
ColumnExprTrait	amun/3rd_party/blaze/math/traits/ColumnExprTrait.h	/^struct ColumnExprTrait$/;"	s	namespace:blaze
ColumnIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnIterator( MatrixType& matrix, size_t row, size_t column )$/;"	f	class:blaze::Column::ColumnIterator
ColumnIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnIterator( MatrixType& matrix, size_t row, size_t column, IteratorType pos )$/;"	f	class:blaze::Column::ColumnIterator
ColumnIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnIterator( const ColumnIterator<MatrixType2,IteratorType2>& it )$/;"	f	class:blaze::Column::ColumnIterator
ColumnIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnIterator()$/;"	f	class:blaze::Column::ColumnIterator
ColumnIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   class ColumnIterator$/;"	c	class:blaze::Column
ColumnTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ColumnTrait< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ColumnTrait< HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ColumnTrait< LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ColumnTrait< StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ColumnTrait< StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ColumnTrait< SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct ColumnTrait< UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct ColumnTrait< UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ColumnTrait< UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct ColumnTrait< CompressedMatrix<T1,SO> >$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/traits/ColumnTrait.h	/^struct ColumnTrait$/;"	s	namespace:blaze
ColumnTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct ColumnTrait< Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
ColumnVector	amun/cpu/mblas/tensor.h	/^typedef blaze::DynamicVector<float, blaze::columnVector> ColumnVector;$/;"	t	namespace:amunmt::CPU::mblas
Columns	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct Columns< DiagonalMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct Columns< HermitianMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct Columns< LowerMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct Columns< StrictlyLowerMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct Columns< StrictlyUpperMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct Columns< SymmetricMatrix<MT,SO,DF,NF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct Columns< UniLowerMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct Columns< UniUpperMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct Columns< UpperMatrix<MT,SO,DF> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct Columns< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct Columns< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct Columns< DMatEvalExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct Columns< DMatForEachExpr<MT,OP,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct Columns< DMatInvExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct Columns< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct Columns< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct Columns< DMatScalarDivExpr<MT,ST,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct Columns< DMatScalarMultExpr<MT,ST,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct Columns< DMatSerialExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct Columns< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct Columns< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct Columns< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct Columns< DMatTSMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s
Columns	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct Columns< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct Columns< DMatTransExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct Columns< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct Columns< SMatEvalExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct Columns< SMatForEachExpr<MT,OP,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct Columns< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct Columns< SMatSMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s
Columns	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct Columns< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct Columns< SMatScalarDivExpr<MT,ST,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct Columns< SMatScalarMultExpr<MT,ST,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct Columns< SMatSerialExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct Columns< SMatTDMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s
Columns	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct Columns< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct Columns< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct Columns< SMatTSMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct Columns< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct Columns< SMatTransExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^struct Columns< SVecTSVecMultExpr<VT1,VT2> > : public Size<VT2>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct Columns< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct Columns< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct Columns< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct Columns< TSMatSMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s
Columns	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct Columns< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct Columns< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct Columns< TSMatTSMatMultExpr<MT1,MT2> > : public Columns<MT2>$/;"	s
Columns	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct Columns< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/typetraits/Columns.h	/^struct Columns : public SizeT<0UL>$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/typetraits/Columns.h	/^struct Columns< const T > : public SizeT< Columns<T>::value >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/typetraits/Columns.h	/^struct Columns< const volatile T > : public SizeT< Columns<T>::value >$/;"	s	namespace:blaze
Columns	amun/3rd_party/blaze/math/typetraits/Columns.h	/^struct Columns< volatile T > : public SizeT< Columns<T>::value >$/;"	s	namespace:blaze
Command	amun/3rd_party/fast_align/src/atools.cc	/^struct Command {$/;"	s	file:
Comment	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Comment Comment(const std::string content) { return _Comment(content); }$/;"	f	namespace:YAML
Comment	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx Comment() {$/;"	f	namespace:YAML::Exp
CommonType	amun/3rd_party/blaze/util/typetraits/CommonType.h	/^struct CommonType$/;"	s	namespace:blaze
CompactMap	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
Complex	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^   struct Complex {$/;"	s	struct:blaze::ImagTrait
Complex	amun/3rd_party/blaze/math/traits/RealTrait.h	/^   struct Complex {$/;"	s	struct:blaze::RealTrait
Complex	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Complex { typedef typename UnderlyingBuiltin<typename T2::value_type>::Type  Type; };$/;"	s	struct:blaze::UnderlyingBuiltin
Complex	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Complex { typedef typename T2::value_type  Type; };$/;"	s	struct:blaze::UnderlyingElement
Complex	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^   struct Complex { typedef typename CT::value_type  Type; };$/;"	s	struct:blaze::IsVectorizableHelper
ComplexProxy	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^class ComplexProxy$/;"	c	namespace:blaze
ComplexType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::HermitianProxy
ComplexType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::HermitianValue
ComplexType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::NumericProxy
ComplexType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::SymmetricValue
ComplexType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::UniLowerProxy
ComplexType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::UniLowerValue
ComplexType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::UniUpperProxy
ComplexType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	s	class:blaze::UniUpperValue
CompositeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef const This&                  CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DiagonalMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef const This&                   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DiagonalMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef const This&                   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::HermitianMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef const This&                    CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::HermitianMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef const This&               CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::LowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef const This&                CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::LowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef const This&                       CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StrictlyLowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef const This&                       CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StrictlyLowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef const This&                       CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StrictlyUpperMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef const This&                        CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StrictlyUpperMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef const This&                         CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SymmetricMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef const This&                        CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SymmetricMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef const This&                          CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SymmetricMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef const This&                         CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SymmetricMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef const This&                  CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UniLowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef const This&                  CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UniLowerMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef const This&                  CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UniUpperMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef const This&                   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UniUpperMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef const This&               CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UpperMatrix
CompositeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef const This&                CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::UpperMatrix
CompositeType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef const This&                  CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::CustomMatrix
CompositeType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef const CustomVector&          CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::CustomVector
CompositeType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef const This&              CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DynamicMatrix
CompositeType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef const DynamicVector&     CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DynamicVector
CompositeType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef const This&                 CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::HybridMatrix
CompositeType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef const HybridVector&       CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::HybridVector
CompositeType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef const This&                 CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StaticMatrix
CompositeType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef const StaticVector&       CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::StaticVector
CompositeType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatDMatAddExpr& >  CompositeType;$/;"	t	class:blaze::DMatDMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatDMatSubExpr& >  CompositeType;$/;"	t	class:blaze::DMatDMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatEvalExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatForEachExpr& >  CompositeType;$/;"	t	class:blaze::DMatForEachExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatInvExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatSVecMultExpr& >  CompositeType;$/;"	t	class:blaze::DMatSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatScalarDivExpr& >  CompositeType;$/;"	t	class:blaze::DMatScalarDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatScalarMultExpr& >  CompositeType;$/;"	t	class:blaze::DMatScalarMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatSerialExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatTDMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatTDMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatTSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	namespace:blaze
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DMatTSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DMatTransExpr& >  CompositeType;$/;"	t	class:blaze::DMatTransExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef const This&              CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DMatTransposer
CompositeType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecDVecAddExpr& >  CompositeType;$/;"	t	class:blaze::DVecDVecAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecDVecCrossExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecDVecDivExpr& >  CompositeType;$/;"	t	class:blaze::DVecDVecDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecDVecMultExpr& >  CompositeType;$/;"	t	class:blaze::DVecDVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecDVecSubExpr& >  CompositeType;$/;"	t	class:blaze::DVecDVecSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecEvalExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecForEachExpr& >  CompositeType;$/;"	t	class:blaze::DVecForEachExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecSVecAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecSVecCrossExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecSVecMultExpr& >  CompositeType;$/;"	t	class:blaze::DVecSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecSVecSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecScalarDivExpr& >  CompositeType;$/;"	t	class:blaze::DVecScalarDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecScalarMultExpr& >  CompositeType;$/;"	t	class:blaze::DVecScalarMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::DVecSerialExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecTDVecMultExpr& >  CompositeType;$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecTSVecMultExpr& >  CompositeType;$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const DVecTransExpr& >  CompositeType;$/;"	t	class:blaze::DVecTransExpr
CompositeType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef const This&              CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DVecTransposer
CompositeType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatDMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SMatDVecMultExpr& >  CompositeType;$/;"	t	class:blaze::SMatDVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatEvalExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SMatForEachExpr& >  CompositeType;$/;"	t	class:blaze::SMatForEachExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	namespace:blaze
CompositeType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SMatScalarDivExpr& >  CompositeType;$/;"	t	class:blaze::SMatScalarDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SMatScalarMultExpr& >  CompositeType;$/;"	t	class:blaze::SMatScalarMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatSerialExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	namespace:blaze
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatTDMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatTSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SMatTSMatMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SMatTSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SMatTransExpr& >  CompositeType;$/;"	t	class:blaze::SMatTransExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef const This&              CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SMatTransposer
CompositeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef const This&            CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SMatTransposer
CompositeType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecDVecCrossExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecDVecDivExpr& >  CompositeType;$/;"	t	class:blaze::SVecDVecDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecDVecMultExpr& >  CompositeType;$/;"	t	class:blaze::SVecDVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecDVecSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecEvalExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecForEachExpr& >  CompositeType;$/;"	t	class:blaze::SVecForEachExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecSVecAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecSVecCrossExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecSVecSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecScalarDivExpr& >  CompositeType;$/;"	t	class:blaze::SVecScalarDivExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecScalarMultExpr& >  CompositeType;$/;"	t	class:blaze::SVecScalarMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecSerialExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecTDVecMultExpr& >  CompositeType;$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::SVecTSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const SVecTransExpr& >  CompositeType;$/;"	t	class:blaze::SVecTransExpr
CompositeType	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef const This&            CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SVecTransposer
CompositeType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TDMatSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TDMatSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::TDVecSMatMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const TDVecTSMatMultExpr& >  CompositeType;$/;"	t	class:blaze::TDVecTSMatMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TSMatDMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::TSMatDVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	namespace:blaze
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TSMatSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TSMatSVecMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef const ResultType             CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TSMatTSMatAddExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef const ResultType             CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	namespace:blaze
CompositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef const ResultType  CompositeType;$/;"	t	class:blaze::TSMatTSMatSubExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::TSVecSMatMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef IfTrue_< useAssign, const ResultType, const TSVecTDMatMultExpr& >  CompositeType;$/;"	t	class:blaze::TSVecTDMatMultExpr
CompositeType	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef const ResultType            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::TSVecTSMatMultExpr
CompositeType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef CompositeType_<MT>   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DenseMatrixProxy
CompositeType	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef CompositeType_<VT>   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::DenseVectorProxy
CompositeType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef CompositeType_<MT>   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SparseMatrixProxy
CompositeType	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef CompositeType_<VT>   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::SparseVectorProxy
CompositeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const This&                   CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::CompressedMatrix
CompositeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const This&                 CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::CompressedMatrix
CompositeType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef const CompressedVector&     CompositeType;   \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::CompressedVector
CompositeType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef const Column&               CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Column
CompositeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef const Column&                 CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Column
CompositeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef const Column&                CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Column
CompositeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef const Column&               CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Column
CompositeType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef const Row&                  CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Row
CompositeType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef const Row&                  CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Row
CompositeType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef const Submatrix&                    CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Submatrix
CompositeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef const Submatrix&              CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Submatrix
CompositeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef const Submatrix&             CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Submatrix
CompositeType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef const Subvector&                 CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Subvector
CompositeType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef const Subvector&            CompositeType;  \/\/!< Data type for composite expression templates.$/;"	t	class:blaze::Subvector
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^CompressedMatrix<Type,SO>::CompressedMatrix( size_t m, size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^CompressedMatrix<Type,true>::CompressedMatrix( size_t m, size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^class CompressedMatrix : public SparseMatrix< CompressedMatrix<Type,SO>, SO >$/;"	c	namespace:blaze
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^class CompressedMatrix<Type,true> : public SparseMatrix< CompressedMatrix<Type,true>, true >$/;"	c	namespace:blaze
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix( const CompressedMatrix& sm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix( const DenseMatrix<MT,SO2>& dm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix( const SparseMatrix<MT,SO2>& sm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix( size_t m, size_t n )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix( size_t m, size_t n, size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::CompressedMatrix()$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix( const CompressedMatrix& sm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix( const DenseMatrix<MT,SO>& dm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix( const SparseMatrix<MT,SO>& sm )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix( size_t m, size_t n )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix( size_t m, size_t n, size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::CompressedMatrix()$/;"	f	class:blaze::CompressedMatrix
CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^class CompressedVector : public SparseVector< CompressedVector<Type,TF>, TF >$/;"	c	namespace:blaze
CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>::CompressedVector( const CompressedVector& sv )$/;"	f	class:blaze::CompressedVector
CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>::CompressedVector( const DenseVector<VT,TF>& dv )$/;"	f	class:blaze::CompressedVector
CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>::CompressedVector( const SparseVector<VT,TF>& sv )$/;"	f	class:blaze::CompressedVector
CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>::CompressedVector( size_t n, size_t nonzeros )$/;"	f	class:blaze::CompressedVector
Computation	amun/3rd_party/blaze/math/expressions/Computation.h	/^struct Computation$/;"	s	namespace:blaze
ComputeDLogZ	amun/3rd_party/fast_align/src/da.h	/^  static double ComputeDLogZ(const unsigned i, const unsigned m, const unsigned n, const double alpha) {$/;"	f	struct:DiagonalAlignment
ComputeFullBoolName	amun/3rd_party/yaml-cpp/emitter.cpp	/^const char* Emitter::ComputeFullBoolName(bool b) const {$/;"	f	class:YAML::Emitter
ComputeStringFormat	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^StringFormat::value ComputeStringFormat(const std::string& str,$/;"	f	namespace:YAML::Utils
ComputeZ	amun/3rd_party/fast_align/src/da.h	/^  static double ComputeZ(const unsigned i, const unsigned m, const unsigned n, const double alpha) {$/;"	f	struct:DiagonalAlignment
Concat	amun/cpu/mblas/tensor.h	/^MT Concat(const MT1& m1, const MT2& m2) {$/;"	f	namespace:amunmt::CPU::mblas
Concat	amun/fpga/matrix_functions.cpp	/^Matrix& Concat(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
Condition	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef CT                        Condition;      \/\/!< Condition variable type.$/;"	t	class:blaze::ThreadPool
Conditional	amun/3rd_party/spdlog/details/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	amun/3rd_party/spdlog/details/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
Conditional	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
Config	amun/common/config.h	/^class Config {$/;"	c	namespace:amunmt
Conj	amun/3rd_party/blaze/math/functors/Conj.h	/^struct Conj$/;"	s	namespace:blaze
ConstCastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^class PtrVector<T,D,G>::ConstCastIterator$/;"	c	class:blaze::PtrVector
ConstCastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::ConstCastIterator<C>::ConstCastIterator( IteratorType begin, IteratorType end )$/;"	f	class:blaze::PtrVector::ConstCastIterator
ConstCastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::ConstCastIterator<C>::ConstCastIterator( const ConstCastIterator<Other>& it )$/;"	f	class:blaze::PtrVector::ConstCastIterator
ConstCastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::ConstCastIterator<C>::ConstCastIterator( const typename PtrVector<T,D,G>::BLAZE_TEMPLATE CastIterator<Other>& it )$/;"	f	class:blaze::PtrVector::ConstCastIterator
ConstCastIterator	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::ConstCastIterator<C>::ConstCastIterator()$/;"	f	class:blaze::PtrVector::ConstCastIterator
ConstIterator	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ConstIterator_<MT>           ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DiagonalMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef ConstIterator_<MT>            ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DiagonalMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ConstIterator_<MT>            ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::HermitianMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef ConstIterator_<MT>             ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::HermitianMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ConstIterator_<MT>        ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::LowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef ConstIterator_<MT>         ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::LowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ConstIterator_<MT>                ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StrictlyLowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef ConstIterator_<MT>                ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StrictlyLowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ConstIterator_<MT>                ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StrictlyUpperMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef ConstIterator_<MT>                 ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StrictlyUpperMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef MatrixIterator<const MT>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SymmetricMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ConstIterator_<MT>                 ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SymmetricMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                         >  ConstIterator;$/;"	t	class:blaze::SymmetricMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef ConstIterator_<MT>                  ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SymmetricMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ConstIterator_<MT>           ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UniLowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef ConstIterator_<MT>           ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UniLowerMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ConstIterator_<MT>           ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UniUpperMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef ConstIterator_<MT>            ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UniUpperMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ConstIterator_<MT>        ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UpperMatrix
ConstIterator	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef ConstIterator_<MT>         ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::UpperMatrix
ConstIterator	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DenseIterator<const Type,AF>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::CustomMatrix
ConstIterator	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef DenseIterator<const Type,AF>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::CustomVector
ConstIterator	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DenseIterator<const Type,usePadding>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DynamicMatrix
ConstIterator	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef DenseIterator<const Type,aligned>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DynamicVector
ConstIterator	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef DenseIterator<const Type,usePadding>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::HybridMatrix
ConstIterator	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef DenseIterator<const Type,aligned>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::HybridVector
ConstIterator	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef DenseIterator<const Type,usePadding>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StaticMatrix
ConstIterator	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef DenseIterator<const Type,aligned>  ConstIterator;  \/\/!< Iterator over constant elements.$/;"	t	class:blaze::StaticVector
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatDMatAddExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatDMatSubExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      explicit inline ConstIterator( IteratorType it, OP op )$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatForEachExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      explicit inline ConstIterator( IteratorType iterator, RightOperand scalar )$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatScalarDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      explicit inline ConstIterator( IteratorType iterator, RightOperand scalar )$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatScalarMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      explicit inline ConstIterator( IteratorType iterator )$/;"	f	class:blaze::DMatTransExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DMatTransExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ConstIterator_<MT>       ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DMatTransposer
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecDVecAddExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecDVecDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecDVecMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecDVecSubExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      explicit inline ConstIterator( IteratorType it, OP op )$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecForEachExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline ConstIterator( LeftOperand vec, IteratorType it )$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecSVecMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      explicit inline ConstIterator( IteratorType iterator, RightOperand scalar )$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecScalarDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      explicit inline ConstIterator( IteratorType iterator, RightOperand scalar )$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecScalarMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      explicit inline ConstIterator( LeftIteratorType left, RightIteratorType right )$/;"	f	class:ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   class ConstIterator$/;"	c
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline ConstIterator( LeftElement v, IteratorType it )$/;"	f	class:ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   class ConstIterator$/;"	c
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      explicit inline ConstIterator( IteratorType iterator )$/;"	f	class:blaze::DVecTransExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   class ConstIterator$/;"	c	class:blaze::DVecTransExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ConstIterator_<VT>       ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DVecTransposer
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline ConstIterator( IteratorType it, OP op )$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SMatForEachExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline ConstIterator( IteratorType matrix, RightOperand scalar )$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SMatScalarDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline ConstIterator( IteratorType matrix, RightOperand scalar )$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SMatScalarMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline ConstIterator( IteratorType it )$/;"	f	class:blaze::SMatTransExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SMatTransExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ConstIterator_<MT>       ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SMatTransposer
ConstIterator	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ConstIterator_<MT>     ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SMatTransposer
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline ConstIterator( IteratorType it, RightOperand vec )$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecDVecDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline ConstIterator( IteratorType it, RightOperand vec )$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecDVecMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline ConstIterator( IteratorType it, OP op )$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecForEachExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline ConstIterator( IteratorType vector, RightOperand scalar )$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecScalarDivExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline ConstIterator( IteratorType vector, RightOperand scalar )$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecScalarMultExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline ConstIterator( IteratorType it, RightElement v )$/;"	f	class:ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   class ConstIterator$/;"	c
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline ConstIterator( IteratorType it )$/;"	f	class:blaze::SVecTransExpr::ConstIterator
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   class ConstIterator$/;"	c	class:blaze::SVecTransExpr
ConstIterator	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef ConstIterator_<VT>     ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SVecTransposer
ConstIterator	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ConstIterator_<MT>   ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DenseMatrixProxy
ConstIterator	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ConstIterator_<VT>   ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::DenseVectorProxy
ConstIterator	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef ConstIterator_<MT>   ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SparseMatrixProxy
ConstIterator	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef ConstIterator_<VT>   ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::SparseVectorProxy
ConstIterator	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Element*                ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::CompressedMatrix
ConstIterator	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Element*              ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::CompressedMatrix
ConstIterator	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef const Element*              ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::CompressedVector
ConstIterator	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef ConstIterator_<MT>  ConstIterator;$/;"	t	class:blaze::Column
ConstIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ColumnIterator< const MT, ConstIterator_<MT> >  ConstIterator;$/;"	t	class:blaze::Column
ConstIterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ConstIterator_<MT>  ConstIterator;$/;"	t	class:blaze::Column
ConstIterator	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef ConstIterator_<MT>  ConstIterator;$/;"	t	class:blaze::Row
ConstIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef ConstIterator_<MT>  ConstIterator;$/;"	t	class:blaze::Row
ConstIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef RowIterator< const MT, ConstIterator_<MT> >  ConstIterator;$/;"	t	class:blaze::Row
ConstIterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef SubmatrixIterator< ConstIterator_<MT> >  ConstIterator;$/;"	t	class:blaze::Submatrix
ConstIterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef SubmatrixIterator< const MT, ConstIterator_<MT> >  ConstIterator;$/;"	t	class:blaze::Submatrix
ConstIterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef SubvectorIterator< ConstIterator_<VT> >  ConstIterator;$/;"	t	class:blaze::Subvector
ConstIterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef SubvectorIterator< const VT, ConstIterator_<VT> >  ConstIterator;$/;"	t	class:blaze::Subvector
ConstIterator	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef const Type*  ConstIterator;   \/\/!< Iterator over constant elements.$/;"	t	class:blaze::AlignedArray
ConstIterator	amun/3rd_party/blaze/util/Indices.h	/^   typedef std::vector<size_t>::const_iterator  ConstIterator;  \/\/!< Iterator over the generated indices.$/;"	t	class:blaze::Indices
ConstIterator	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef PtrIterator<const T>  ConstIterator;       \/\/!< Iterator over const objects.$/;"	t	class:blaze::PtrVector
ConstPointer	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ConstPointer_<MT>            ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ConstPointer_<MT>             ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::HermitianMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   typedef const HermitianProxy*  ConstPointer;     \/\/!< Pointer-to-const to the represented element.$/;"	t	class:blaze::HermitianProxy
ConstPointer	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ConstPointer_<MT>         ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::LowerMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ConstPointer_<MT>                 ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ConstPointer_<MT>                 ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef ConstPointer_<MT>                   ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ConstPointer_<MT>                  ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   typedef const NumericProxy*  ConstPointer;     \/\/!< Pointer-to-const to the represented element.$/;"	t	class:blaze::NumericProxy
ConstPointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer-to-const to the shared value.$/;"	t	class:blaze::SharedValue
ConstPointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef const SharedElement*  ConstPointer;    \/\/!< Pointer-to-const return type.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
ConstPointer	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ConstPointer_<MT>            ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ConstPointer_<MT>            ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
ConstPointer	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ConstPointer_<MT>         ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::UpperMatrix
ConstPointer	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::CustomMatrix
ConstPointer	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::CustomVector
ConstPointer	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::DynamicMatrix
ConstPointer	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::DynamicVector
ConstPointer	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::HybridMatrix
ConstPointer	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::HybridVector
ConstPointer	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::StaticMatrix
ConstPointer	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::StaticVector
ConstPointer	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ConstPointer_<MT>        ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::DMatTransposer
ConstPointer	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ConstPointer_<VT>        ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::DVecTransposer
ConstPointer	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ConstPointer_<MT>    ConstPointer;    \/\/!< Pointer to a constant matrix value.$/;"	t	class:blaze::DenseMatrixProxy
ConstPointer	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ConstPointer_<VT>    ConstPointer;    \/\/!< Pointer to a constant vector value.$/;"	t	class:blaze::DenseVectorProxy
ConstPointer	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef const ElementType*  ConstPointer;$/;"	t	class:blaze::Column
ConstPointer	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef const ElementType*  ConstPointer;$/;"	t	class:blaze::Row
ConstPointer	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef const ElementType*  ConstPointer;$/;"	t	class:blaze::Submatrix
ConstPointer	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef const ElementType*  ConstPointer;$/;"	t	class:blaze::Subvector
ConstPointer	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef const Type*     ConstPointer;     \/\/!< Type of a pointer-to-const to the allocated values.$/;"	t	class:blaze::AlignedAllocator
ConstPointer	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef const Type*  ConstPointer;    \/\/!< Pointer to a constant array element.$/;"	t	class:blaze::AlignedArray
ConstPointerType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef const T*              ConstPointerType;    \/\/!< Pointer to a const object.$/;"	t	class:blaze::PtrVector
ConstReference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ConstReference_<MT>          ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   typedef const RepresentedType&        ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::DiagonalProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef ConstReference_<MT>           ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ConstReference_<MT>           ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::HermitianMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef const HermitianValue<MT>  ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::HermitianElement
ConstReference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   typedef ConstReference_<MT>    ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::HermitianProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef ConstReference_<MT>            ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::HermitianMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ConstReference_<MT>       ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::LowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   typedef const RepresentedType&        ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::LowerProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef ConstReference_<MT>        ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::LowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ConstReference_<MT>               ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef ConstReference_<MT>               ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   typedef const RepresentedType&        ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::StrictlyLowerProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ConstReference_<MT>               ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef ConstReference_<MT>                ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   typedef const RepresentedType&        ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::StrictlyUpperProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef ConstReference_<MT>                 ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ConstReference_<MT>                ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   typedef ConstReference_<MT>  ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::NumericProxy
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference-to-const to the shared value.$/;"	t	class:blaze::SharedValue
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef const ValueType&      ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef ConstReference_<MT>                  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef ConstReference_<MT>                 ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef const SymmetricValue<MT>  ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::SymmetricElement
ConstReference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ConstReference_<MT>          ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef ConstReference_<MT>          ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef const UniLowerValue<MT>  ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::UniLowerElement
ConstReference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ConstReference_<MT>          ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef ConstReference_<MT>           ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef const UniUpperValue<MT>  ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::UniUpperElement
ConstReference	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ConstReference_<MT>       ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef ConstReference_<MT>        ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::UpperMatrix
ConstReference	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   typedef const RepresentedType&        ConstReference;   \/\/!< Reference-to-const to the represented element.$/;"	t	class:blaze::UpperProxy
ConstReference	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::CustomMatrix
ConstReference	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::CustomVector
ConstReference	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::DynamicMatrix
ConstReference	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::DynamicVector
ConstReference	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::HybridMatrix
ConstReference	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::HybridVector
ConstReference	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::StaticMatrix
ConstReference	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::StaticVector
ConstReference	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ConstReference_<MT>      ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::DMatTransposer
ConstReference	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ConstReference_<VT>      ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::DVecTransposer
ConstReference	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ConstReference_<MT>      ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SMatTransposer
ConstReference	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ConstReference_<MT>    ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SMatTransposer
ConstReference	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef ConstReference_<VT>    ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SVecTransposer
ConstReference	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ConstReference_<MT>  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::DenseMatrixProxy
ConstReference	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ConstReference_<VT>  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::DenseVectorProxy
ConstReference	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef ConstReference_<MT>  ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::SparseMatrixProxy
ConstReference	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef ConstReference_<VT>  ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::SparseVectorProxy
ConstReference	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Type&                   ConstReference;  \/\/!< Reference to a constant matrix value.$/;"	t	class:blaze::CompressedMatrix
ConstReference	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Type&                 ConstReference;  \/\/!< Reference to a constant sparse matrix value.$/;"	t	class:blaze::CompressedMatrix
ConstReference	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef const Type&                 ConstReference;  \/\/!< Reference to a constant vector value.$/;"	t	class:blaze::CompressedVector
ConstReference	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::ValueIndexPair
ConstReference	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Column
ConstReference	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef CRT                          ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::Column::ColumnElement
ConstReference	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Column
ConstReference	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Row
ConstReference	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef CRT                          ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::Row::RowElement
ConstReference	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Row
ConstReference	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Submatrix
ConstReference	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef CRT                          ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::Submatrix::SubmatrixElement
ConstReference	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef ConstReference_<MT>  ConstReference;$/;"	t	class:blaze::Submatrix
ConstReference	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef ConstReference_<VT>  ConstReference;$/;"	t	class:blaze::Subvector
ConstReference	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef CRT                          ConstReference;  \/\/!< Reference-to-const return type.$/;"	t	class:blaze::Subvector::SubvectorElement
ConstReference	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef ConstReference_<VT>  ConstReference;$/;"	t	class:blaze::Subvector
ConstReference	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef const Type&     ConstReference;   \/\/!< Type of a reference-to-const to the allocated values.$/;"	t	class:blaze::AlignedAllocator
ConstReference	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef const Type&  ConstReference;  \/\/!< Reference to a constant array element.$/;"	t	class:blaze::AlignedArray
ConstReferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef T*const&              ConstReferenceType;  \/\/!< Reference to a const object.$/;"	t	class:blaze::PtrVector
ConstSystemClockID	amun/3rd_party/blaze/util/SystemClockID.h	/^typedef std::shared_ptr<const SystemClock>  ConstSystemClockID;$/;"	t	namespace:blaze
ConstantGrowth	amun/3rd_party/blaze/util/policies/ConstantGrowth.h	/^struct ConstantGrowth$/;"	s	namespace:blaze
ContainerFrame	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    ContainerFrame(void* pMap, void* pPrevKeyNode)$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
ContainerFrame	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    ContainerFrame(void* pSequence)$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
ContainerFrame	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  struct ContainerFrame {$/;"	s	class:YAML::GraphBuilderAdapter
ContainerStack	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  typedef std::stack<ContainerFrame> ContainerStack;$/;"	t	class:YAML::GraphBuilderAdapter
Contains	amun/3rd_party/blaze/util/TypeList.h	/^struct Contains< NullType, Type >$/;"	s	namespace:blaze
Contains	amun/3rd_party/blaze/util/TypeList.h	/^struct Contains< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
Contains	amun/3rd_party/blaze/util/TypeList.h	/^struct Contains< TypeList<Type,Tail>, Type >$/;"	s	namespace:blaze
ContainsRelated	amun/3rd_party/blaze/util/TypeList.h	/^struct ContainsRelated< NullType, Type >$/;"	s	namespace:blaze
ContainsRelated	amun/3rd_party/blaze/util/TypeList.h	/^struct ContainsRelated< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
Context	amun/fpga/encoder.h	/^  mblas::Tensor Context;$/;"	m	class:amunmt::FPGA::Encoder
Convert	amun/3rd_party/fast_align/src/corpus.h	/^  inline const std::string& Convert(const unsigned id) const {$/;"	f	class:Dict
Convert	amun/3rd_party/fast_align/src/corpus.h	/^  inline unsigned Convert(const std::string& word, bool frozen = false) {$/;"	f	class:Dict
ConvertCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct ConvertCommand : public Command {$/;"	s	file:
ConvertToInt	amun/3rd_party/spdlog/details/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToIntImpl	amun/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	amun/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	amun/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	amun/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
ConvertWhitespaceDelimitedLine	amun/3rd_party/fast_align/src/corpus.h	/^  inline void ConvertWhitespaceDelimitedLine(const std::string& line, std::vector<unsigned>* out) {$/;"	f	class:Dict
Converter	amun/3rd_party/blaze/util/Convert.h	/^struct Converter : private NonCreatable$/;"	s	namespace:blaze
Converter	amun/3rd_party/blaze/util/Convert.h	/^struct Converter<To*,From*> : private NonCreatable$/;"	s	namespace:blaze
Converter	amun/3rd_party/blaze/util/Convert.h	/^struct Converter<To,std::string> : private NonCreatable$/;"	s	namespace:blaze
Converter	amun/3rd_party/blaze/util/Convert.h	/^struct Converter<std::string,From> : private NonCreatable$/;"	s	namespace:blaze
Converter	amun/3rd_party/blaze/util/Convert.h	/^struct Converter<std::string,std::string> : private NonCreatable$/;"	s	namespace:blaze
Copy	amun/fpga/matrix_functions.cpp	/^Matrix& Copy(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
CopyRows	amun/fpga/matrix_functions.cpp	/^Matrix& CopyRows($/;"	f	namespace:amunmt::FPGA::mblas
Cos	amun/3rd_party/blaze/math/functors/Cos.h	/^struct Cos$/;"	s	namespace:blaze
Cosh	amun/3rd_party/blaze/math/functors/Cosh.h	/^struct Cosh$/;"	s	namespace:blaze
Costs	amun/fpga/best_hyps.h	/^  Array<float> Costs;$/;"	m	class:amunmt::FPGA::BestHyps
CpuPolicy	amun/3rd_party/blaze/util/timing/CpuPolicy.h	/^struct CpuPolicy$/;"	s	namespace:blaze::timing
CpuTimer	amun/3rd_party/blaze/util/timing/CpuTimer.h	/^typedef Timer<CpuPolicy>  CpuTimer;$/;"	t	namespace:blaze::timing
Create	amun/common/loader_factory.cpp	/^LoaderPtr LoaderFactory::Create($/;"	f	class:amunmt::LoaderFactory
CreateCPU	amun/common/loader_factory.cpp	/^Loader *LoaderFactory::CreateCPU($/;"	f	class:amunmt::LoaderFactory
CreateCommandQueue	amun/fpga/kernel.cpp	/^cl_command_queue CreateCommandQueue(const OpenCLInfo &openCLInfo)$/;"	f	namespace:amunmt::FPGA
CreateContext	amun/fpga/kernel.cpp	/^cl_context CreateContext($/;"	f	namespace:amunmt::FPGA
CreateFPGA	amun/common/loader_factory.cpp	/^Loader *LoaderFactory::CreateFPGA(const God &god, const std::string& name,$/;"	f	class:amunmt::LoaderFactory
CreateGPU	amun/common/loader_factory.cpp	/^Loader *LoaderFactory::CreateGPU($/;"	f	class:amunmt::LoaderFactory
CreateKernel	amun/fpga/kernel.cpp	/^cl_kernel CreateKernel(const std::string &filePath, const std::string &kernelName, const OpenCLInfo &openCLInfo)$/;"	f	namespace:amunmt::FPGA
CrossExpr	amun/3rd_party/blaze/math/expressions/CrossExpr.h	/^struct CrossExpr : private Expression$/;"	s	namespace:blaze
CrossExprTrait	amun/3rd_party/blaze/math/traits/CrossExprTrait.h	/^struct CrossExprTrait$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< CompressedVector<T1,TF>, DynamicVector<T2,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< CompressedVector<T1,TF>, HybridVector<T2,N,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< CompressedVector<T1,TF>, StaticVector<T2,3UL,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< DynamicVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< HybridVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct CrossTrait< StaticVector<T1,3UL,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/traits/CrossTrait.h	/^struct CrossTrait$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct CrossTrait< Column<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct CrossTrait< T, Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct CrossTrait< Row<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct CrossTrait< T, Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct CrossTrait< Subvector<VT,AF,TF,DF>, T >$/;"	s	namespace:blaze
CrossTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct CrossTrait< T, Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
CublasHandler	amun/gpu/mblas/handles.h	/^class CublasHandler$/;"	c	namespace:amunmt::GPU::mblas
CudaStreamHandler	amun/gpu/mblas/handles.h	/^class CudaStreamHandler$/;"	c	namespace:amunmt::GPU::mblas
CurGroupChildCount	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^std::size_t EmitterState::CurGroupChildCount() const {$/;"	f	class:YAML::EmitterState
CurGroupFlowType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^FlowType::value EmitterState::CurGroupFlowType() const {$/;"	f	class:YAML::EmitterState
CurGroupIndent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^int EmitterState::CurGroupIndent() const {$/;"	f	class:YAML::EmitterState
CurGroupLongKey	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::CurGroupLongKey() const {$/;"	f	class:YAML::EmitterState
CurGroupNodeType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterNodeType::value EmitterState::CurGroupNodeType() const {$/;"	f	class:YAML::EmitterState
CurGroupType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^GroupType::value EmitterState::CurGroupType() const {$/;"	f	class:YAML::EmitterState
CurIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  int CurIndent() const { return m_curIndent; }$/;"	f	class:YAML::EmitterState
CustomMatrix	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^class CustomMatrix : public DenseMatrix< CustomMatrix<Type,AF,PF,SO>, SO >$/;"	c	namespace:blaze
CustomValue	amun/3rd_party/spdlog/details/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
CustomValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
CustomVector	amun/3rd_party/blaze/math/dense/CustomVector.h	/^class CustomVector : public DenseVector< CustomVector<Type,AF,PF,TF>, TF >$/;"	c	namespace:blaze
D1	amun/3rd_party/blaze/util/singleton/Singleton.h	/^   typedef typename TypeAt<D,0>::Result  D1;$/;"	t	struct:HasCyclicDependencyHelper
D1	amun/3rd_party/blaze/util/singleton/Singleton.h	/^   typedef typename TypeAt<D,0>::Result  D1;$/;"	t	struct:blaze::HasCyclicDependencyHelper
D2	amun/3rd_party/blaze/util/singleton/Singleton.h	/^   typedef typename TypeAt<D,1>::Result  D2;$/;"	t	struct:HasCyclicDependencyHelper
DEBUG_BLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DEBUG_BLOCK_SIZE = 8UL;$/;"	m	namespace:blaze
DEFAULT_BLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DEFAULT_BLOCK_SIZE = 16UL;$/;"	m	namespace:blaze
DIGITS	amun/3rd_party/spdlog/details/format.cc	/^const char fmt::internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData	file:
DIGITS	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	const char internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData	file:
DIRECTIVE	amun/3rd_party/yaml-cpp/token.h	/^    DIRECTIVE,$/;"	e	enum:YAML::Token::TYPE
DIRECTIVES_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/directives.h	2;"	d
DLL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/dll.h	2;"	d
DMATDMATMULT_DEBUG_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEBUG_IBLOCK_SIZE =  8UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEBUG_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEBUG_JBLOCK_SIZE = 64UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEBUG_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEBUG_KBLOCK_SIZE =  8UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEFAULT_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEFAULT_IBLOCK_SIZE =  64UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEFAULT_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEFAULT_JBLOCK_SIZE = 128UL;$/;"	m	namespace:blaze
DMATDMATMULT_DEFAULT_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_DEFAULT_KBLOCK_SIZE = 128UL;$/;"	m	namespace:blaze
DMATDMATMULT_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_IBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? DMATDMATMULT_DEBUG_IBLOCK_SIZE : DMATDMATMULT_DEFAULT_IBLOCK_SIZE );$/;"	m	namespace:blaze
DMATDMATMULT_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_JBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? DMATDMATMULT_DEBUG_JBLOCK_SIZE : DMATDMATMULT_DEFAULT_JBLOCK_SIZE );$/;"	m	namespace:blaze
DMATDMATMULT_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t DMATDMATMULT_KBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? DMATDMATMULT_DEBUG_KBLOCK_SIZE : DMATDMATMULT_DEFAULT_KBLOCK_SIZE );$/;"	m	namespace:blaze
DMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATDMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? DMATDMATMULT_DEBUG_THRESHOLD   : DMATDMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
DMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t DMATDMATMULT_USER_THRESHOLD = 10000UL;$/;"	m	namespace:blaze
DMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATDVECMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
DMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATDVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? DMATDVECMULT_DEBUG_THRESHOLD   : DMATDVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
DMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t DMATDVECMULT_USER_THRESHOLD = 4000000UL;$/;"	m	namespace:blaze
DMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATSMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
DMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATSMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? DMATSMATMULT_DEBUG_THRESHOLD   : DMATSMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
DMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t DMATSMATMULT_USER_THRESHOLD = 2500UL;$/;"	m	namespace:blaze
DMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATTDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
DMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t DMATTDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? DMATTDMATMULT_DEBUG_THRESHOLD  : DMATTDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
DMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t DMATTDMATMULT_USER_THRESHOLD = 10000UL;$/;"	m	namespace:blaze
DMatCTransExprTrait	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^struct DMatCTransExprTrait$/;"	s	namespace:blaze
DMatDMatAddExpr	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^class DMatDMatAddExpr : public DenseMatrix< DMatDMatAddExpr<MT1,MT2,SO>, SO >$/;"	c	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct DMatDMatAddExprTrait< DMatSMatAddExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct DMatDMatAddExprTrait< DMatSMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct DMatDMatAddExprTrait< DMatTSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct DMatDMatAddExprTrait< DMatTSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct DMatDMatAddExprTrait< SMatDMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct DMatDMatAddExprTrait< SMatTDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct DMatDMatAddExprTrait< TDMatSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct DMatDMatAddExprTrait< TDMatSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct DMatDMatAddExprTrait< TSMatDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatAddExprTrait	amun/3rd_party/blaze/math/traits/DMatDMatAddExprTrait.h	/^struct DMatDMatAddExprTrait$/;"	s	namespace:blaze
DMatDMatMultExpr	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^class DMatDMatMultExpr : public DenseMatrix< DMatDMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatDMatMultExprTrait< DMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
DMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatDMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,false>, DMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
DMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
DMatDMatMultExprTrait	amun/3rd_party/blaze/math/traits/DMatDMatMultExprTrait.h	/^struct DMatDMatMultExprTrait$/;"	s	namespace:blaze
DMatDMatSubExpr	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^class DMatDMatSubExpr : public DenseMatrix< DMatDMatSubExpr<MT1,MT2,SO>, SO >$/;"	c	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct DMatDMatSubExprTrait< DMatSMatAddExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct DMatDMatSubExprTrait< DMatSMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct DMatDMatSubExprTrait< DMatTSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct DMatDMatSubExprTrait< DMatTSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct DMatDMatSubExprTrait< SMatDMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct DMatDMatSubExprTrait< SMatTDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct DMatDMatSubExprTrait< TDMatSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct DMatDMatSubExprTrait< TDMatSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct DMatDMatSubExprTrait< TSMatDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatDMatSubExprTrait	amun/3rd_party/blaze/math/traits/DMatDMatSubExprTrait.h	/^struct DMatDMatSubExprTrait$/;"	s	namespace:blaze
DMatDVecMultExpr	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^class DMatDVecMultExpr : public DenseVector< DMatDVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatDVecMultExprTrait< DMatScalarMultExpr<MT,ST,false>, VT >$/;"	s	namespace:blaze
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatDVecMultExprTrait< DMatScalarMultExpr<MT,ST1,false>, DVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct DMatDVecMultExprTrait< DMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DMatDVecMultExprTrait< MT, DVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct DMatDVecMultExprTrait< SMatTDMatMultExpr<MT1,MT2>, VT >$/;"	s
DMatDVecMultExprTrait	amun/3rd_party/blaze/math/traits/DMatDVecMultExprTrait.h	/^struct DMatDVecMultExprTrait$/;"	s	namespace:blaze
DMatEvalExpr	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^class DMatEvalExpr : public DenseMatrix< DMatEvalExpr<MT,SO>, SO >$/;"	c	namespace:blaze
DMatEvalExprTrait	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct DMatEvalExprTrait< DMatEvalExpr<MT,false> >$/;"	s	namespace:blaze
DMatEvalExprTrait	amun/3rd_party/blaze/math/traits/DMatEvalExprTrait.h	/^struct DMatEvalExprTrait$/;"	s	namespace:blaze
DMatForEachExpr	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^class DMatForEachExpr : public DenseMatrix< DMatForEachExpr<MT,OP,SO>, SO >$/;"	c	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatForEachExpr<MT,Abs,false>, Abs >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatForEachExpr<MT,Ceil,false>, Ceil >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatForEachExpr<MT,Conj,false>, Conj >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatForEachExpr<MT,Floor,false>, Floor >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatForEachExpr<MT,Real,false>, Real >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct DMatForEachExprTrait< DMatTransExpr< DMatForEachExpr<MT,Conj,true>, false >, Conj >$/;"	s	namespace:blaze
DMatForEachExprTrait	amun/3rd_party/blaze/math/traits/DMatForEachExprTrait.h	/^struct DMatForEachExprTrait$/;"	s	namespace:blaze
DMatInvExpr	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^class DMatInvExpr : public DenseMatrix< DMatInvExpr<MT,SO>, SO >$/;"	c	namespace:blaze
DMatInvExprTrait	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct DMatInvExprTrait< DMatInvExpr<MT,false> >$/;"	s	namespace:blaze
DMatInvExprTrait	amun/3rd_party/blaze/math/traits/DMatInvExprTrait.h	/^struct DMatInvExprTrait$/;"	s	namespace:blaze
DMatSMatAddExpr	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^class DMatSMatAddExpr : public DenseMatrix< DMatSMatAddExpr<MT1,MT2,SO>, SO >$/;"	c	namespace:blaze
DMatSMatAddExprTrait	amun/3rd_party/blaze/math/traits/DMatSMatAddExprTrait.h	/^struct DMatSMatAddExprTrait$/;"	s	namespace:blaze
DMatSMatMultExpr	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^class DMatSMatMultExpr : public DenseMatrix< DMatSMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatSMatMultExprTrait< DMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
DMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatSMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,false>, SMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
DMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct DMatSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
DMatSMatMultExprTrait	amun/3rd_party/blaze/math/traits/DMatSMatMultExprTrait.h	/^struct DMatSMatMultExprTrait$/;"	s	namespace:blaze
DMatSMatSubExpr	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^class DMatSMatSubExpr : public DenseMatrix< DMatSMatSubExpr<MT1,MT2,SO>, SO >$/;"	c	namespace:blaze
DMatSMatSubExprTrait	amun/3rd_party/blaze/math/traits/DMatSMatSubExprTrait.h	/^struct DMatSMatSubExprTrait$/;"	s	namespace:blaze
DMatSVecMultExpr	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^class DMatSVecMultExpr : public DenseVector< DMatSVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatSVecMultExprTrait< DMatScalarMultExpr<MT,ST,false>, VT >$/;"	s	namespace:blaze
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatSVecMultExprTrait< DMatScalarMultExpr<MT,ST1,false>, SVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct DMatSVecMultExprTrait< DMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct DMatSVecMultExprTrait< SMatTDMatMultExpr<MT1,MT2>, VT >$/;"	s
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct DMatSVecMultExprTrait< MT, SVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
DMatSVecMultExprTrait	amun/3rd_party/blaze/math/traits/DMatSVecMultExprTrait.h	/^struct DMatSVecMultExprTrait$/;"	s	namespace:blaze
DMatScalarDivExpr	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^class DMatScalarDivExpr : public DenseMatrix< DMatScalarDivExpr<MT,ST,SO>, SO >$/;"	c	namespace:blaze
DMatScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatScalarDivExprTrait< DMatScalarMultExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DMatScalarDivExprTrait	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	/^struct DMatScalarDivExprTrait$/;"	s	namespace:blaze
DMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	/^struct DMatScalarDivExprTraitHelper$/;"	s	namespace:blaze
DMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	/^struct DMatScalarDivExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
DMatScalarMultExpr	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^class DMatScalarMultExpr : public DenseMatrix< DMatScalarMultExpr<MT,ST,SO>, SO >$/;"	c	namespace:blaze
DMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct DMatScalarMultExprTrait< DMatScalarDivExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatScalarMultExprTrait< DMatScalarMultExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DMatScalarMultExprTrait	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	/^struct DMatScalarMultExprTrait$/;"	s	namespace:blaze
DMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	/^struct DMatScalarMultExprTraitHelper$/;"	s	namespace:blaze
DMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	/^struct DMatScalarMultExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
DMatSerialExpr	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^class DMatSerialExpr : public DenseMatrix< DMatSerialExpr<MT,SO>, SO >$/;"	c	namespace:blaze
DMatSerialExprTrait	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct DMatSerialExprTrait< DMatSerialExpr<MT,false> >$/;"	s	namespace:blaze
DMatSerialExprTrait	amun/3rd_party/blaze/math/traits/DMatSerialExprTrait.h	/^struct DMatSerialExprTrait$/;"	s	namespace:blaze
DMatTDMatAddExpr	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^class DMatTDMatAddExpr : public DenseMatrix< DMatTDMatAddExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct DMatTDMatAddExprTrait< DMatSMatAddExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct DMatTDMatAddExprTrait< DMatSMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct DMatTDMatAddExprTrait< DMatTSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct DMatTDMatAddExprTrait< DMatTSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct DMatTDMatAddExprTrait< SMatDMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct DMatTDMatAddExprTrait< SMatTDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct DMatTDMatAddExprTrait< TDMatSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct DMatTDMatAddExprTrait< TDMatSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct DMatTDMatAddExprTrait< TSMatDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatAddExprTrait	amun/3rd_party/blaze/math/traits/DMatTDMatAddExprTrait.h	/^struct DMatTDMatAddExprTrait$/;"	s	namespace:blaze
DMatTDMatMultExpr	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^class DMatTDMatMultExpr : public DenseMatrix< DMatTDMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatTDMatMultExprTrait< DMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
DMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatTDMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,false>, DMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
DMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatTDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
DMatTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/DMatTDMatMultExprTrait.h	/^struct DMatTDMatMultExprTrait$/;"	s	namespace:blaze
DMatTDMatSubExpr	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^class DMatTDMatSubExpr : public DenseMatrix< DMatTDMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct DMatTDMatSubExprTrait< DMatSMatAddExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct DMatTDMatSubExprTrait< DMatSMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct DMatTDMatSubExprTrait< DMatTSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct DMatTDMatSubExprTrait< DMatTSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct DMatTDMatSubExprTrait< SMatDMatSubExpr<MT1,MT2,false>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct DMatTDMatSubExprTrait< SMatTDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct DMatTDMatSubExprTrait< TDMatSMatAddExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct DMatTDMatSubExprTrait< TDMatSMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct DMatTDMatSubExprTrait< TSMatDMatSubExpr<MT1,MT2>, MT3 >$/;"	s	namespace:blaze
DMatTDMatSubExprTrait	amun/3rd_party/blaze/math/traits/DMatTDMatSubExprTrait.h	/^struct DMatTDMatSubExprTrait$/;"	s	namespace:blaze
DMatTSMatAddExpr	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^class DMatTSMatAddExpr : public DenseMatrix< DMatTSMatAddExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTSMatAddExprTrait	amun/3rd_party/blaze/math/traits/DMatTSMatAddExprTrait.h	/^struct DMatTSMatAddExprTrait$/;"	s	namespace:blaze
DMatTSMatMultExpr	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^class DMatTSMatMultExpr : public DenseMatrix< DMatTSMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatTSMatMultExprTrait< DMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
DMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct DMatTSMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,false>, SMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
DMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct DMatTSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
DMatTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/DMatTSMatMultExprTrait.h	/^struct DMatTSMatMultExprTrait$/;"	s	namespace:blaze
DMatTSMatSubExpr	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^class DMatTSMatSubExpr : public DenseMatrix< DMatTSMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
DMatTSMatSubExprTrait	amun/3rd_party/blaze/math/traits/DMatTSMatSubExprTrait.h	/^struct DMatTSMatSubExprTrait$/;"	s	namespace:blaze
DMatTransExpr	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^class DMatTransExpr : public DenseMatrix< DMatTransExpr<MT,SO>, SO >$/;"	c	namespace:blaze
DMatTransExprTrait	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct DMatTransExprTrait< DMatTransExpr<MT,false> >$/;"	s	namespace:blaze
DMatTransExprTrait	amun/3rd_party/blaze/math/traits/DMatTransExprTrait.h	/^struct DMatTransExprTrait$/;"	s	namespace:blaze
DMatTransposer	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^class DMatTransposer : public DenseMatrix< DMatTransposer<MT,SO>, SO >$/;"	c	namespace:blaze
DMatTransposer	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^class DMatTransposer<MT,true> : public DenseMatrix< DMatTransposer<MT,true>, true >$/;"	c	namespace:blaze
DOC_END	amun/3rd_party/yaml-cpp/token.h	/^    DOC_END,$/;"	e	enum:YAML::Token::TYPE
DOC_IN_SCALAR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const DOC_IN_SCALAR = "illegal document indicator in scalar";$/;"	m	namespace:YAML::ErrorMsg
DOC_START	amun/3rd_party/yaml-cpp/token.h	/^    DOC_START,$/;"	e	enum:YAML::Token::TYPE
DONT_FOLD	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
DOUBLE	amun/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
DOUBLE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
DVecCTransExprTrait	amun/3rd_party/blaze/math/traits/DVecCTransExprTrait.h	/^struct DVecCTransExprTrait$/;"	s	namespace:blaze
DVecDVecAddExpr	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^class DVecDVecAddExpr : public DenseVector< DVecDVecAddExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct DVecDVecAddExprTrait< DVecSVecAddExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct DVecDVecAddExprTrait< DVecSVecSubExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct DVecDVecAddExprTrait< SVecDVecSubExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecAddExprTrait	amun/3rd_party/blaze/math/traits/DVecDVecAddExprTrait.h	/^struct DVecDVecAddExprTrait$/;"	s	namespace:blaze
DVecDVecCrossExpr	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^class DVecDVecCrossExpr : public DenseVector< DVecDVecCrossExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecDVecCrossExprTrait	amun/3rd_party/blaze/math/traits/DVecDVecCrossExprTrait.h	/^struct DVecDVecCrossExprTrait$/;"	s	namespace:blaze
DVecDVecDivExpr	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^class DVecDVecDivExpr : public DenseVector< DVecDVecDivExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecDVecDivExprTrait	amun/3rd_party/blaze/math/traits/DVecDVecDivExprTrait.h	/^struct DVecDVecDivExprTrait$/;"	s	namespace:blaze
DVecDVecMultExpr	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^class DVecDVecMultExpr : public DenseVector< DVecDVecMultExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecDVecMultExprTrait< DVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
DVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecDVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,false>, DVecScalarMultExpr<VT2,ST2,false> >$/;"	s	namespace:blaze
DVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,false> >$/;"	s	namespace:blaze
DVecDVecMultExprTrait	amun/3rd_party/blaze/math/traits/DVecDVecMultExprTrait.h	/^struct DVecDVecMultExprTrait$/;"	s	namespace:blaze
DVecDVecSubExpr	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^class DVecDVecSubExpr : public DenseVector< DVecDVecSubExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct DVecDVecSubExprTrait< DVecSVecAddExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct DVecDVecSubExprTrait< DVecSVecSubExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct DVecDVecSubExprTrait< SVecDVecSubExpr<VT1,VT2,false>, VT3 >$/;"	s	namespace:blaze
DVecDVecSubExprTrait	amun/3rd_party/blaze/math/traits/DVecDVecSubExprTrait.h	/^struct DVecDVecSubExprTrait$/;"	s	namespace:blaze
DVecEvalExpr	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^class DVecEvalExpr : public DenseVector< DVecEvalExpr<VT,TF>, TF >$/;"	c	namespace:blaze
DVecEvalExprTrait	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^struct DVecEvalExprTrait< DVecEvalExpr<VT,false> >$/;"	s	namespace:blaze
DVecEvalExprTrait	amun/3rd_party/blaze/math/traits/DVecEvalExprTrait.h	/^struct DVecEvalExprTrait$/;"	s	namespace:blaze
DVecForEachExpr	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^class DVecForEachExpr : public DenseVector< DVecForEachExpr<VT,OP,TF>, TF >$/;"	c	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecForEachExpr<VT,Abs,false>, Abs >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecForEachExpr<VT,Ceil,false>, Ceil >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecForEachExpr<VT,Conj,false>, Conj >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecForEachExpr<VT,Floor,false>, Floor >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecForEachExpr<VT,Real,false>, Real >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct DVecForEachExprTrait< DVecTransExpr< DVecForEachExpr<VT,Conj,true>, false >, Conj >$/;"	s	namespace:blaze
DVecForEachExprTrait	amun/3rd_party/blaze/math/traits/DVecForEachExprTrait.h	/^struct DVecForEachExprTrait$/;"	s	namespace:blaze
DVecSVecAddExpr	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^class DVecSVecAddExpr : public DenseVector< DVecSVecAddExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecSVecAddExprTrait	amun/3rd_party/blaze/math/traits/DVecSVecAddExprTrait.h	/^struct DVecSVecAddExprTrait$/;"	s	namespace:blaze
DVecSVecCrossExpr	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^class DVecSVecCrossExpr : public DenseVector< DVecSVecCrossExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecSVecCrossExprTrait	amun/3rd_party/blaze/math/traits/DVecSVecCrossExprTrait.h	/^struct DVecSVecCrossExprTrait$/;"	s	namespace:blaze
DVecSVecMultExpr	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^class DVecSVecMultExpr : public SparseVector< DVecSVecMultExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecSVecMultExprTrait< DVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
DVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecSVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,false>, SVecScalarMultExpr<VT2,ST2,false> >$/;"	s	namespace:blaze
DVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct DVecSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,false> >$/;"	s	namespace:blaze
DVecSVecMultExprTrait	amun/3rd_party/blaze/math/traits/DVecSVecMultExprTrait.h	/^struct DVecSVecMultExprTrait$/;"	s	namespace:blaze
DVecSVecSubExpr	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^class DVecSVecSubExpr : public DenseVector< DVecSVecSubExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
DVecSVecSubExprTrait	amun/3rd_party/blaze/math/traits/DVecSVecSubExprTrait.h	/^struct DVecSVecSubExprTrait$/;"	s	namespace:blaze
DVecScalarDivExpr	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^class DVecScalarDivExpr : public DenseVector< DVecScalarDivExpr<VT,ST,TF>, TF >$/;"	c	namespace:blaze
DVecScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecScalarDivExprTrait< DVecScalarMultExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DVecScalarDivExprTrait	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	/^struct DVecScalarDivExprTrait$/;"	s	namespace:blaze
DVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	/^struct DVecScalarDivExprTraitHelper$/;"	s	namespace:blaze
DVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	/^struct DVecScalarDivExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
DVecScalarMultExpr	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^class DVecScalarMultExpr : public DenseVector< DVecScalarMultExpr<VT,ST,TF>, TF >$/;"	c	namespace:blaze
DVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct DVecScalarMultExprTrait< DVecScalarDivExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecScalarMultExprTrait< DVecScalarMultExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
DVecScalarMultExprTrait	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	/^struct DVecScalarMultExprTrait$/;"	s	namespace:blaze
DVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	/^struct DVecScalarMultExprTraitHelper$/;"	s	namespace:blaze
DVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	/^struct DVecScalarMultExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
DVecSerialExpr	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^class DVecSerialExpr : public DenseVector< DVecSerialExpr<VT,TF>, TF >$/;"	c	namespace:blaze
DVecSerialExprTrait	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^struct DVecSerialExprTrait< DVecSerialExpr<VT,false> >$/;"	s	namespace:blaze
DVecSerialExprTrait	amun/3rd_party/blaze/math/traits/DVecSerialExprTrait.h	/^struct DVecSerialExprTrait$/;"	s	namespace:blaze
DVecTDVecMultExpr	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^class DVecTDVecMultExpr : public DenseMatrix< DVecTDVecMultExpr<VT1,VT2>, false >$/;"	c	namespace:blaze
DVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecTDVecMultExprTrait< DVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
DVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecTDVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,false>, DVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
DVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecTDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
DVecTDVecMultExprTrait	amun/3rd_party/blaze/math/traits/DVecTDVecMultExprTrait.h	/^struct DVecTDVecMultExprTrait$/;"	s	namespace:blaze
DVecTSVecMultExpr	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^class DVecTSVecMultExpr : public SparseMatrix< DVecTSVecMultExpr<VT1,VT2>, false >$/;"	c	namespace:blaze
DVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecTSVecMultExprTrait< DVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
DVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct DVecTSVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,false>, SVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
DVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct DVecTSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
DVecTSVecMultExprTrait	amun/3rd_party/blaze/math/traits/DVecTSVecMultExprTrait.h	/^struct DVecTSVecMultExprTrait$/;"	s	namespace:blaze
DVecTransExpr	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^class DVecTransExpr : public DenseVector< DVecTransExpr<VT,TF>, TF >$/;"	c	namespace:blaze
DVecTransExprTrait	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct DVecTransExprTrait< DVecTransExpr<VT,false> >$/;"	s	namespace:blaze
DVecTransExprTrait	amun/3rd_party/blaze/math/traits/DVecTransExprTrait.h	/^struct DVecTransExprTrait$/;"	s	namespace:blaze
DVecTransposer	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^class DVecTransposer : public DenseVector< DVecTransposer<VT,TF>, TF >$/;"	c	namespace:blaze
D_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class D_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Deallocate	amun/3rd_party/blaze/util/policies/Deallocate.h	/^struct Deallocate$/;"	s	namespace:blaze
Debug	amun/common/base_tensor.cpp	/^std::string BaseTensor::Debug(unsigned detailed) const$/;"	f	class:amunmt::BaseTensor
Debug	amun/common/beam.cpp	/^std::string Debug(const Beam &vec, unsigned verbosity)$/;"	f	namespace:amunmt
Debug	amun/common/beam.cpp	/^std::string Debug(const Beams &vec, unsigned verbosity)$/;"	f	namespace:amunmt
Debug	amun/common/sentence.cpp	/^std::string Sentence::Debug(unsigned verbosity) const$/;"	f	class:amunmt::Sentence
Debug	amun/common/sentences.cpp	/^std::string Sentences::Debug(unsigned verbosity) const$/;"	f	class:amunmt::Sentences
Debug	amun/common/utils.h	/^std::string Debug(const std::vector<T> &vec, size_t verbosity = 1)$/;"	f	namespace:amunmt
Debug	amun/cpu/decoder/encoder_decoder_state.cpp	/^std::string EncoderDecoderState::Debug(unsigned verbosity) const$/;"	f	class:amunmt::CPU::EncoderDecoderState
Debug	amun/cpu/mblas/tensor.h	/^std::string Debug(const M& m)$/;"	f	namespace:amunmt::CPU::mblas
Debug	amun/fpga/array.h	/^  virtual std::string Debug(size_t verbosity = 1) const$/;"	f	class:amunmt::FPGA::Array
Debug	amun/fpga/encoder_decoder_state.cpp	/^std::string EncoderDecoderState::Debug(unsigned verbosity) const$/;"	f	class:amunmt::FPGA::EncoderDecoderState
Debug	amun/fpga/matrix.cpp	/^std::string Matrix::Debug(size_t verbosity) const$/;"	f	class:amunmt::FPGA::mblas::Matrix
Debug	amun/gpu/decoder/ape_penalty.h	/^    virtual std::string Debug() const {$/;"	f	class:GPU::ApePenaltyState
Debug	amun/gpu/dl4mt/decoder.h	/^        std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::Decoder::RNNFinal
Debug	amun/gpu/dl4mt/gru.h	/^    virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::FastGRU
Debug	amun/gpu/dl4mt/gru.h	/^    virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::SlowGRU
Debug	amun/gpu/dl4mt/lstm.h	/^    virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::SlowLSTM
Debug	amun/gpu/dl4mt/multiplicative.h	/^    virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::Multiplicative
Debug	amun/gpu/mblas/tensor.h	/^    virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::mblas::TTensor
Debug	amun/gpu/mblas/tensor_functions.h	/^std::string Debug(const mblas::Vector<T> &vec, unsigned verbosity = 1)$/;"	f	namespace:amunmt::GPU::mblas
Debug	amun/gpu/mblas/tensor_functions.h	/^std::string Debug(const std::vector<T> &vec, unsigned verbosity = 1)$/;"	f	namespace:amunmt::GPU::mblas
Debug	amun/gpu/mblas/tensor_wrapper.h	/^  std::string Debug() const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
Debug	amun/gpu/mblas/vector.h	/^  virtual std::string Debug(unsigned verbosity = 1) const$/;"	f	class:amunmt::GPU::mblas::Vector
Debug	amun/gpu/mblas/vector_wrapper.h	/^  std::string Debug() const$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
Debug	amun/plugin/hypo_info.cpp	/^std::string HypoState::Debug() const$/;"	f	class:amunmt::HypoState
Debug	amun/plugin/neural_phrase.cpp	/^std::string NeuralPhrase::Debug() const$/;"	f	class:amunmt::NeuralPhrase
DebugDeviceInfo	amun/fpga/debug-devices.cpp	/^void DebugDeviceInfo(cl_device_id id)$/;"	f
DebugDevicesInfo	amun/fpga/debug-devices.cpp	/^void DebugDevicesInfo(cl_device_id *devices, cl_uint numDevices)$/;"	f
DebugDevicesInfo	amun/fpga/debug-devices.cpp	/^void DebugDevicesInfo(cl_platform_id id)$/;"	f
Dec	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Dec,$/;"	e	enum:YAML::EMITTER_MANIP
DecAlignment	amun/fpga/model.h	/^    DecAlignment(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecAlignment
DecAlignment	amun/fpga/model.h	/^  struct DecAlignment {$/;"	s	struct:amunmt::FPGA::Weights
DecAlignment	amun/gpu/dl4mt/model.h	/^  struct DecAlignment {$/;"	s	struct:amunmt::GPU::Weights
DecAttention	amun/cpu/dl4mt/model.cpp	/^Weights::DecAttention::DecAttention(const NpzConverter& model)$/;"	f	class:amunmt::CPU::dl4mt::Weights::DecAttention
DecAttention	amun/cpu/dl4mt/model.h	/^  struct DecAttention {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
DecAttention	amun/cpu/nematus/model.cpp	/^Weights::DecAttention::DecAttention(const NpzConverter& model)$/;"	f	class:amunmt::CPU::Nematus::Weights::DecAttention
DecAttention	amun/cpu/nematus/model.h	/^  struct DecAttention {$/;"	s	struct:amunmt::CPU::Nematus::Weights
DecEmbeddings	amun/fpga/model.h	/^    DecEmbeddings(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecEmbeddings
DecEmbeddings	amun/fpga/model.h	/^  struct DecEmbeddings {$/;"	s	struct:amunmt::FPGA::Weights
DecEmbeddings	amun/gpu/dl4mt/model.h	/^  struct DecEmbeddings {$/;"	s	struct:amunmt::GPU::Weights
DecGRU1	amun/fpga/model.h	/^    DecGRU1(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecGRU1
DecGRU1	amun/fpga/model.h	/^  struct DecGRU1 {$/;"	s	struct:amunmt::FPGA::Weights
DecGRU1	amun/gpu/dl4mt/model.h	/^  struct DecGRU1 {$/;"	s	struct:amunmt::GPU::Weights
DecGRU2	amun/cpu/dl4mt/model.cpp	/^Weights::DecGRU2::DecGRU2(const NpzConverter& model)$/;"	f	class:amunmt::CPU::dl4mt::Weights::DecGRU2
DecGRU2	amun/cpu/dl4mt/model.h	/^  struct DecGRU2 {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
DecGRU2	amun/cpu/nematus/model.cpp	/^Weights::DecGRU2::DecGRU2(const NpzConverter& model, std::string prefix, std::vector<std::string> keys)$/;"	f	class:amunmt::CPU::Nematus::Weights::DecGRU2
DecGRU2	amun/cpu/nematus/model.h	/^  struct DecGRU2 {$/;"	s	struct:amunmt::CPU::Nematus::Weights
DecGRU2	amun/fpga/model.h	/^    DecGRU2(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecGRU2
DecGRU2	amun/fpga/model.h	/^  struct DecGRU2 {$/;"	s	struct:amunmt::FPGA::Weights
DecGRU2	amun/gpu/dl4mt/model.h	/^  struct DecGRU2 {$/;"	s	struct:amunmt::GPU::Weights
DecInit	amun/cpu/dl4mt/model.cpp	/^Weights::DecInit::DecInit(const NpzConverter& model)$/;"	f	class:amunmt::CPU::dl4mt::Weights::DecInit
DecInit	amun/cpu/dl4mt/model.h	/^  struct DecInit {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
DecInit	amun/cpu/nematus/model.cpp	/^Weights::DecInit::DecInit(const NpzConverter& model)$/;"	f	class:amunmt::CPU::Nematus::Weights::DecInit
DecInit	amun/cpu/nematus/model.h	/^  struct DecInit {$/;"	s	struct:amunmt::CPU::Nematus::Weights
DecInit	amun/fpga/model.h	/^    DecInit(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecInit
DecInit	amun/fpga/model.h	/^  struct DecInit {$/;"	s	struct:amunmt::FPGA::Weights
DecInit	amun/gpu/dl4mt/model.h	/^  struct DecInit {$/;"	s	struct:amunmt::GPU::Weights
DecLSTM1	amun/gpu/dl4mt/model.h	/^  struct DecLSTM1 {$/;"	s	struct:amunmt::GPU::Weights
DecLSTM2	amun/gpu/dl4mt/model.h	/^  struct DecLSTM2 {$/;"	s	struct:amunmt::GPU::Weights
DecSoftmax	amun/cpu/dl4mt/model.cpp	/^Weights::DecSoftmax::DecSoftmax(const NpzConverter& model)$/;"	f	class:amunmt::CPU::dl4mt::Weights::DecSoftmax
DecSoftmax	amun/cpu/dl4mt/model.h	/^  struct DecSoftmax {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
DecSoftmax	amun/cpu/nematus/model.cpp	/^Weights::DecSoftmax::DecSoftmax(const NpzConverter& model)$/;"	f	class:amunmt::CPU::Nematus::Weights::DecSoftmax
DecSoftmax	amun/cpu/nematus/model.h	/^  struct DecSoftmax {$/;"	s	struct:amunmt::CPU::Nematus::Weights
DecSoftmax	amun/fpga/model.h	/^    DecSoftmax(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::DecSoftmax
DecSoftmax	amun/fpga/model.h	/^  struct DecSoftmax {$/;"	s	struct:amunmt::FPGA::Weights
DecSoftmax	amun/gpu/dl4mt/model.h	/^  struct DecSoftmax {$/;"	s	struct:amunmt::GPU::Weights
Decay	amun/3rd_party/blaze/util/typetraits/Decay.h	/^struct Decay$/;"	s	namespace:blaze
Decode	amun/cpu/dl4mt/decoder.h	/^    void Decode(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
Decode	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::Decode(const State& in, State& out, const std::vector<unsigned>&)$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
Decode	amun/cpu/nematus/decoder.h	/^    void Decode($/;"	f	class:amunmt::CPU::Nematus::Decoder
Decode	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::Decode(const State& in, State& out, const std::vector<unsigned>&)$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
Decode	amun/fpga/decoder.cpp	/^void Decoder::Decode(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::Decoder
Decode	amun/fpga/encoder_decoder.cpp	/^void EncoderDecoder::Decode(const State& in,$/;"	f	class:amunmt::FPGA::EncoderDecoder
Decode	amun/gpu/dl4mt/decoder.h	/^    void Decode(CellState& NextState,$/;"	f	class:amunmt::GPU::Decoder
DecodeBase64	amun/3rd_party/yaml-cpp/binary.cpp	/^std::vector<unsigned char> DecodeBase64(const std::string &input) {$/;"	f	namespace:YAML
Decoder	amun/cpu/dl4mt/decoder.h	/^    Decoder(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Decoder
Decoder	amun/cpu/dl4mt/decoder.h	/^class Decoder {$/;"	c	namespace:amunmt::CPU::dl4mt
Decoder	amun/cpu/nematus/decoder.h	/^    Decoder(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Decoder
Decoder	amun/cpu/nematus/decoder.h	/^class Decoder {$/;"	c	namespace:amunmt::CPU::Nematus
Decoder	amun/fpga/decoder.h	/^  Decoder(const OpenCLInfo &openCLInfo, const God &god, const Weights& model)$/;"	f	class:amunmt::FPGA::Decoder
Decoder	amun/fpga/decoder.h	/^class Decoder {$/;"	c	namespace:amunmt::FPGA
Decoder	amun/gpu/dl4mt/decoder.h	/^    Decoder(const God &god, const Weights& model, const YAML::Node& config)$/;"	f	class:amunmt::GPU::Decoder
Decoder	amun/gpu/dl4mt/decoder.h	/^class Decoder {$/;"	c	namespace:amunmt::GPU
Default	amun/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
DefaultDelete	amun/3rd_party/blaze/util/policies/DefaultDelete.h	/^struct DefaultDelete$/;"	s	namespace:blaze
DefaultDelete	amun/3rd_party/blaze/util/policies/DefaultDelete.h	/^struct DefaultDelete<Type[]>$/;"	s	namespace:blaze
DefaultProxy	amun/3rd_party/blaze/math/proxy/DefaultProxy.h	/^class DefaultProxy$/;"	c	namespace:blaze
DeletionPolicy	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef D                     DeletionPolicy;      \/\/!< Type of the deletion policy.$/;"	t	class:blaze::PtrVector
DenseIterator	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^class DenseIterator$/;"	c	namespace:blaze
DenseMatrix	amun/3rd_party/blaze/math/expressions/DenseMatrix.h	/^struct DenseMatrix : public Matrix<MT,SO>$/;"	s	namespace:blaze
DenseMatrixProxy	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^class DenseMatrixProxy : public DenseMatrix< PT, IsColumnMajorMatrix<MT>::value >$/;"	c	namespace:blaze
DenseVector	amun/3rd_party/blaze/math/expressions/DenseVector.h	/^struct DenseVector : public Vector<VT,TF>$/;"	s	namespace:blaze
DenseVectorProxy	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^class DenseVectorProxy : public DenseVector< PT, IsRowVector<VT>::value >$/;"	c	namespace:blaze
Dependency	amun/3rd_party/blaze/util/singleton/Dependency.h	/^class Dependency$/;"	c	namespace:blaze
Dependency	amun/3rd_party/blaze/util/singleton/Dependency.h	/^inline Dependency<T>::Dependency()$/;"	f	class:blaze::Dependency
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct DerestrictTrait< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct DerestrictTrait< LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct DerestrictTrait< StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct DerestrictTrait< StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct DerestrictTrait< UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct DerestrictTrait< UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct DerestrictTrait< UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/traits/DerestrictTrait.h	/^struct DerestrictTrait$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct DerestrictTrait< Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct DerestrictTrait< Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct DerestrictTrait< Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
DerestrictTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct DerestrictTrait< Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
DeserializeLogProbsFromText	amun/3rd_party/fast_align/src/ttables.cc	/^void TTable::DeserializeLogProbsFromText(istream* in, Dict& d) {$/;"	f	class:TTable
Destruct	amun/cpu/npz_converter.h	/^    void Destruct() {$/;"	f	class:amunmt::CPU::NpzConverter
DeviceInfo	amun/common/types.h	/^struct DeviceInfo$/;"	s	namespace:amunmt
DeviceRowPairs	amun/cpu/mblas/tensor.h	/^typedef std::vector<RowPair> DeviceRowPairs;$/;"	t	namespace:amunmt::CPU::mblas
DeviceType	amun/common/types.h	/^enum DeviceType$/;"	g	namespace:amunmt
DiagCommand	amun/3rd_party/fast_align/src/atools.cc	/^  DiagCommand() {$/;"	f	struct:DiagCommand
DiagCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct DiagCommand : public RefineCommand {$/;"	s	file:
DiagonalAlignment	amun/3rd_party/fast_align/src/da.h	/^struct DiagonalAlignment {$/;"	s
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/BaseTemplate.h	/^class DiagonalMatrix$/;"	c	namespace:blaze
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^class DiagonalMatrix<MT,SO,true>$/;"	c	namespace:blaze
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( const A1& a1 )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( const DiagonalMatrix& m )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix( size_t n, const Other* array )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>::DiagonalMatrix()$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^class DiagonalMatrix<MT,SO,false>$/;"	c	namespace:blaze
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix( const DiagonalMatrix& m )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix( size_t n )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::DiagonalMatrix
DiagonalMatrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline DiagonalMatrix<MT,SO,false>::DiagonalMatrix()$/;"	f	class:blaze::DiagonalMatrix
DiagonalProxy	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^class DiagonalProxy : public Proxy< DiagonalProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
DiagonalProxy	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>::DiagonalProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::DiagonalProxy
DiagonalProxy	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>::DiagonalProxy( const DiagonalProxy& dp )$/;"	f	class:blaze::DiagonalProxy
Dict	amun/3rd_party/fast_align/src/corpus.h	/^  Dict() : b0_("<bad0>") {$/;"	f	class:Dict
Dict	amun/3rd_party/fast_align/src/corpus.h	/^class Dict {$/;"	c
DifferenceType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DiagonalMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::HermitianMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::HermitianMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::LowerMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniLowerMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniLowerMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniUpperMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniUpperMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UpperMatrix::Iterator
DifferenceType	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DenseIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ptrdiff_t                        DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::difference_type  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ptrdiff_t                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
DifferenceType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::difference_type  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
DifferenceType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ptrdiff_t                               DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Column::ColumnIterator
DifferenceType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ptrdiff_t                            DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Row::RowIterator
DifferenceType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::difference_type  DifferenceType;$/;"	t	class:blaze::Submatrix::SubmatrixIterator
DifferenceType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ptrdiff_t                                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
DifferenceType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::difference_type  DifferenceType;$/;"	t	class:blaze::Subvector::SubvectorIterator
DifferenceType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ptrdiff_t                                  DifferenceType;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Subvector::SubvectorIterator
DifferenceType	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef std::ptrdiff_t  DifferenceType;   \/\/!< Difference type of the aligned allocator.$/;"	t	class:blaze::AlignedAllocator
DifferenceType	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef std::ptrdiff_t                   DifferenceType;     \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrIterator
DifferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ptrdiff_t                  DifferenceType;     \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrVector::CastIterator
DifferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ptrdiff_t                  DifferenceType;     \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrVector::ConstCastIterator
Digit	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Digit() {$/;"	f	namespace:YAML::Exp
Directive	amun/3rd_party/yaml-cpp/exp.h	/^const char Directive = '%';$/;"	m	namespace:YAML::Keys
Directives	amun/3rd_party/yaml-cpp/directives.cpp	/^Directives::Directives() {$/;"	f	class:YAML::Directives
Directives	amun/3rd_party/yaml-cpp/directives.h	/^struct Directives {$/;"	s	namespace:YAML
DisAllowUNK	amun/fpga/best_hyps.cpp	/^void BestHyps::DisAllowUNK(mblas::Tensor& Prob)$/;"	f	class:amunmt::FPGA::BestHyps
DisableIf	amun/3rd_party/blaze/util/DisableIf.h	/^struct DisableIf : public DisableIfTrue<Condition::value,T>$/;"	s	namespace:blaze
DisableIfTrue	amun/3rd_party/blaze/util/DisableIf.h	/^struct DisableIfTrue$/;"	s	namespace:blaze
DisableIfTrue	amun/3rd_party/blaze/util/DisableIf.h	/^struct DisableIfTrue<true,T>$/;"	s	namespace:blaze
DisplayCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct DisplayCommand : public Command {$/;"	s	file:
DispositionNode	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::DispositionNode(void *pNode) {$/;"	f	class:YAML::GraphBuilderAdapter
DivAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      explicit inline DivAssigner( Target& target, const Source& source )$/;"	f	struct:blaze::ThreadBackend::DivAssigner
DivAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   struct DivAssigner$/;"	s	class:blaze::ThreadBackend
DivExpr	amun/3rd_party/blaze/math/expressions/DivExpr.h	/^struct DivExpr : private Expression$/;"	s	namespace:blaze
DivExprTrait	amun/3rd_party/blaze/math/traits/DivExprTrait.h	/^struct DivExprTrait$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct DivTrait< DiagonalMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct DivTrait< HermitianMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct DivTrait< LowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct DivTrait< StrictlyLowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct DivTrait< StrictlyUpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct DivTrait< SymmetricMatrix<MT,SO,DF,NF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct DivTrait< UniLowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct DivTrait< UniUpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct DivTrait< UpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct DivTrait< CompressedMatrix<T1,SO>, T2, EnableIf_< IsNumeric<T2> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, CustomVector<T2,AF,PF,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, DynamicVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, HybridVector<T2,N,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, StaticVector<T2,N,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CompressedVector<T1,TF>, T2, EnableIf_< IsNumeric<T2> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< CustomVector<T1,AF,PF,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< DynamicVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< HybridVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct DivTrait< StaticVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/traits/DivTrait.h	/^struct DivTrait$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/traits/DivTrait.h	/^struct DivTrait< T1, complex<T2>, EnableIf_< IsBuiltin<T1> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/traits/DivTrait.h	/^struct DivTrait< complex<T1>, T2, EnableIf_< IsBuiltin<T2> > >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/traits/DivTrait.h	/^struct DivTrait< complex<T1>, complex<T2> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct DivTrait< Column<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct DivTrait< T, Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct DivTrait< Row<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct DivTrait< T, Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct DivTrait< Submatrix<MT,AF,SO,DF>, T >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct DivTrait< T, Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct DivTrait< Subvector<VT,AF,TF,DF>, T >$/;"	s	namespace:blaze
DivTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct DivTrait< T, Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
DivType	amun/3rd_party/blaze/math/traits/DivTrait.h	/^   struct DivType { using Type = decltype( std::declval<Type1>() \/ std::declval<Type2>() ); };$/;"	s	struct:blaze::DivTrait
DocEnd	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocEnd() {$/;"	f	namespace:YAML::Exp
DocIndicator	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocIndicator() {$/;"	f	namespace:YAML::Exp
DocStart	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocStart() {$/;"	f	namespace:YAML::Exp
DoublePrecision	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision DoublePrecision(int n) { return _Precision(-1, n); }$/;"	f	namespace:YAML
DoubleQuoted	amun/3rd_party/yaml-cpp/emittermanip.h	/^  DoubleQuoted,$/;"	e	enum:YAML::EMITTER_MANIP
DoubleQuoted	amun/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
DummyInt	amun/3rd_party/spdlog/details/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyStream	amun/3rd_party/spdlog/details/format.h	/^struct DummyStream: std::ostream$/;"	s	namespace:fmt::internal
DummyStream	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^struct DummyStream: std::ostream$/;"	s	namespace:fmt::internal
Dump	amun/3rd_party/yaml-cpp/emit.cpp	/^std::string Dump(const Node& node) {$/;"	f	namespace:YAML
DynamicMatrix	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^class DynamicMatrix : public DenseMatrix< DynamicMatrix<Type,SO>, SO >$/;"	c	namespace:blaze
DynamicVector	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^class DynamicVector : public DenseVector< DynamicVector<Type,TF>, TF >$/;"	c	namespace:blaze
EDState	amun/fpga/encoder_decoder.h	/^  typedef EncoderDecoderState EDState;$/;"	t	class:amunmt::FPGA::EncoderDecoder
EDState	amun/gpu/decoder/encoder_decoder.h	/^    typedef EncoderDecoderState EDState;$/;"	t	class:amunmt::GPU::EncoderDecoder
EMITFROMEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitfromevents.h	2;"	d
EMITTERDEF_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitterdef.h	2;"	d
EMITTERMANIP_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emittermanip.h	2;"	d
EMITTERSTATE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitterstate.h	2;"	d
EMITTERSTYLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitterstyle.h	2;"	d
EMITTERUTILS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitterutils.h	2;"	d
EMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/emitter.h	2;"	d
EMITTER_MANIP	amun/3rd_party/yaml-cpp/emittermanip.h	/^enum EMITTER_MANIP {$/;"	g	namespace:YAML
END_OF_MAP	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_MAP = "end of map not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_MAP_FLOW	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_MAP_FLOW = "end of map flow not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_SEQ	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_SEQ = "end of sequence not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_SEQ_FLOW	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_SEQ_FLOW = "end of sequence flow not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_VERBATIM_TAG	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_VERBATIM_TAG = "end of verbatim tag not found";$/;"	m	namespace:YAML::ErrorMsg
EOF_IN_SCALAR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const EOF_IN_SCALAR = "illegal EOF in scalar";$/;"	m	namespace:YAML::ErrorMsg
EOS_ID	amun/common/types.h	/^const Word EOS_ID = 0;$/;"	m	namespace:amunmt
EOS_STR	amun/common/types.h	/^const std::string EOS_STR = "<\/s>";$/;"	m	namespace:amunmt
ET	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::DiagonalMatrix
ET	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::DiagonalMatrix
ET	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::HermitianMatrix
ET	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::HermitianMatrix
ET	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::LowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::LowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
ET	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
ET	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
ET	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
ET	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   typedef ElementType_<MT>  ET;  \/\/!< Element type of the adapted matrix.$/;"	t	class:blaze::NonNumericProxy
ET	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
ET	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
ET	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::UniLowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::UniLowerMatrix
ET	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::UniUpperMatrix
ET	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::UniUpperMatrix
ET	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix.$/;"	t	class:blaze::UpperMatrix
ET	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the sparse matrix.$/;"	t	class:blaze::UpperMatrix
ET	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef ElementType_<MT>   ET;  \/\/!< Element type of the dense matrix expression.$/;"	t	class:blaze::DMatForEachExpr
ET	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarDivExpr
ET	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef ElementType_<MT>    ET;  \/\/!< Element type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarMultExpr
ET	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef ElementType_<VT>  ET;  \/\/!< Element type of the dense vector expression.$/;"	t	class:blaze::DVecForEachExpr
ET	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef ElementType_<VT>    ET;  \/\/!< Element type of the dense vector expression.$/;"	t	class:blaze::DVecScalarDivExpr
ET	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef ElementType_<VT>    ET;  \/\/!< Element type of the dense vector expression.$/;"	t	class:blaze::DVecScalarMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ElementType_<MT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ElementType_<MT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
ET1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
ET1	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
ET1	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
ET1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ElementType_<VT1>    ET1;  \/\/!< Element type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
ET1	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef ElementType_<RT1>    ET1;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ElementType_<MT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ElementType_<MT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
ET2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
ET2	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
ET2	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
ET2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ElementType_<VT2>    ET2;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
ET2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef ElementType_<RT2>    ET2;  \/\/!< Element type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
EVENTHANDLER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/eventhandler.h	2;"	d
EXCEPTIONS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/exceptions.h	2;"	d
EXP_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/exp.h	2;"	d
E_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor E_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::Embeddings
E_	amun/cpu/nematus/model.h	/^    const mblas::Tensor E_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::Embeddings
E_	amun/fpga/model.h	/^    const mblas::Tensor E_;$/;"	m	struct:amunmt::FPGA::Weights::DecEmbeddings
E_	amun/fpga/model.h	/^    const mblas::Tensor E_;$/;"	m	struct:amunmt::FPGA::Weights::EncEmbeddings
E_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> E_;$/;"	m	struct:amunmt::GPU::Weights::DecEmbeddings
Element	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
Element	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ValueIndexPair<ElementType>  Element;$/;"	t	class:ConstIterator
Element	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   struct Element : public ElementBase$/;"	s	class:blaze::CompressedMatrix
Element	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   struct Element : public ElementBase$/;"	s	class:blaze::CompressedVector
Element	amun/gpu/mblas/tensor_functions.h	/^Tensor& Element(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
ElementAddWeighted	amun/fpga/matrix_functions.cpp	/^Matrix& ElementAddWeighted(Matrix& Out, float weight, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
ElementBase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef ValueIndexPair<Type>  ElementBase;  \/\/!< Base class for the sparse matrix element.$/;"	t	class:blaze::CompressedMatrix
ElementBase	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef ValueIndexPair<Type>  ElementBase;  \/\/!< Base class for the compressed vector element.$/;"	t	class:blaze::CompressedVector
ElementLogit	amun/fpga/matrix_functions.cpp	/^Matrix& ElementLogit(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
ElementTanh	amun/fpga/matrix_functions.cpp	/^Matrix& ElementTanh(Matrix& Out, const Matrix& In1, const Matrix& In2)$/;"	f	namespace:amunmt::FPGA::mblas
ElementTanh2	amun/fpga/matrix_functions.cpp	/^Matrix& ElementTanh2(Matrix& Out, const Matrix& In1, const Matrix& In2)$/;"	f	namespace:amunmt::FPGA::mblas
ElementType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ET                           ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::DiagonalMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef ET                            ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::DiagonalMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ET                            ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::HermitianMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef ElementType_<MT>  ElementType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::HermitianElement
ElementType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef ET                             ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::HermitianMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ET                        ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::LowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef ET                         ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::LowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ET                                ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::StrictlyLowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef ET                                ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::StrictlyLowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ET                                ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::StrictlyUpperMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef ET                                 ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::StrictlyUpperMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef ET                                  ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::SymmetricMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ET                                 ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::SymmetricMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef ET                                   ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::SymmetricMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef ET                                  ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::SymmetricMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef ElementType_<MT>  ElementType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::SymmetricElement
ElementType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ET                           ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UniLowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef ET                           ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UniLowerMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef ElementType_<MT>  ElementType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::UniLowerElement
ElementType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ET                           ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UniUpperMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef ET                            ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UniUpperMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef ElementType_<MT>  ElementType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::UniUpperElement
ElementType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ET                        ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UpperMatrix
ElementType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef ET                         ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::UpperMatrix
ElementType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef Type                         ElementType;    \/\/!< Type of the matrix elements.$/;"	t	class:blaze::CustomMatrix
ElementType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef Type                         ElementType;    \/\/!< Type of the vector elements.$/;"	t	class:blaze::CustomVector
ElementType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef Type                     ElementType;    \/\/!< Type of the matrix elements.$/;"	t	class:blaze::DynamicMatrix
ElementType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef Type                     ElementType;    \/\/!< Type of the vector elements.$/;"	t	class:blaze::DynamicVector
ElementType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef Type                        ElementType;    \/\/!< Type of the matrix elements.$/;"	t	class:blaze::HybridMatrix
ElementType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef Type                      ElementType;    \/\/!< Type of the vector elements.$/;"	t	class:blaze::HybridVector
ElementType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef Type                        ElementType;    \/\/!< Type of the matrix elements.$/;"	t	class:blaze::StaticMatrix
ElementType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef Type                      ElementType;    \/\/!< Type of the vector elements.$/;"	t	class:blaze::StaticVector
ElementType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatDMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatDMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef ElementType_<MT>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatEvalExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatForEachExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef ElementType_<MT>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatInvExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatScalarDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatScalarMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef ElementType_<MT>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatSerialExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatTDMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatTDMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatTSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	namespace:blaze
ElementType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatTSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef ElementType_<MT>           ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DMatTransExpr
ElementType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ElementType_<MT>         ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::DMatTransposer
ElementType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecDVecAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ElementType_<ResultType>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecDVecCrossExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecDVecDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecDVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecDVecSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef ElementType_<VT>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecEvalExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecForEachExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecSVecAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ElementType_<ResultType>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecSVecCrossExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecSVecSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecScalarDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecScalarMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef ElementType_<VT>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecSerialExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef ElementType_<VT>         ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::DVecTransExpr
ElementType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ElementType_<VT>         ElementType;     \/\/!< Type of the vector elements.$/;"	t	class:blaze::DVecTransposer
ElementType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatDMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatDVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef ElementType_<MT>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatEvalExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatForEachExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	namespace:blaze
ElementType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatScalarDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatScalarMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef ElementType_<MT>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatSerialExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	namespace:blaze
ElementType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTDMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTSMatMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef ElementType_<MT>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTransExpr
ElementType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ElementType_<MT>         ElementType;     \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTransposer
ElementType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ElementType_<MT>       ElementType;     \/\/!< Resulting element type.$/;"	t	class:blaze::SMatTransposer
ElementType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ElementType_<ResultType>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecDVecCrossExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecDVecDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecDVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecDVecSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef ElementType_<VT>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecEvalExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecForEachExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecSVecAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ElementType_<ResultType>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecSVecCrossExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecSVecSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecScalarDivExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef ElementType_<ResultType>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecScalarMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef ElementType_<VT>       ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecSerialExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecTSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef ElementType_<VT>      ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::SVecTransExpr
ElementType	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef ElementType_<VT>       ElementType;     \/\/!< Resulting element type.$/;"	t	class:blaze::SVecTransposer
ElementType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TDMatSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TDMatSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TDVecSMatMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TDVecTSMatMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatDMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatDVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	namespace:blaze
ElementType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatSVecMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t
ElementType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatTSMatAddExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef ElementType_<ResultType>     ElementType;    \/\/!< Resulting element type.$/;"	t	namespace:blaze
ElementType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSMatTSMatSubExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSVecSMatMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSVecTDMatMultExpr
ElementType	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef ElementType_<ResultType>    ElementType;    \/\/!< Resulting element type.$/;"	t	class:blaze::TSVecTSMatMultExpr
ElementType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ElementType_<MT>     ElementType;     \/\/!< Type of the matrix elements.$/;"	t	class:blaze::DenseMatrixProxy
ElementType	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ElementType_<VT>     ElementType;     \/\/!< Type of the vector elements.$/;"	t	class:blaze::DenseVectorProxy
ElementType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef ElementType_<MT>     ElementType;     \/\/!< Type of the sparse matrix elements.$/;"	t	class:blaze::SparseMatrixProxy
ElementType	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef ElementType_<VT>     ElementType;     \/\/!< Type of the sparse vector elements.$/;"	t	class:blaze::SparseVectorProxy
ElementType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef Type                          ElementType;     \/\/!< Type of the sparse matrix elements.$/;"	t	class:blaze::CompressedMatrix
ElementType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef Type                        ElementType;     \/\/!< Type of the sparse matrix elements.$/;"	t	class:blaze::CompressedMatrix
ElementType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef Type                        ElementType;     \/\/!< Type of the compressed vector elements.$/;"	t	class:blaze::CompressedVector
ElementType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef ElementType_<MT>            ElementType;    \/\/!< Type of the column elements.$/;"	t	class:blaze::Column
ElementType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ElementType_<MT>              ElementType;    \/\/!< Type of the column elements.$/;"	t	class:blaze::Column
ElementType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ElementType_<MT>             ElementType;    \/\/!< Type of the column elements.$/;"	t	class:blaze::Column
ElementType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ElementType_<MT>            ElementType;    \/\/!< Type of the column elements.$/;"	t	class:blaze::Column
ElementType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef ElementType_<MT>            ElementType;    \/\/!< Type of the row elements.$/;"	t	class:blaze::Row
ElementType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef ElementType_<MT>            ElementType;    \/\/!< Type of the row elements.$/;"	t	class:blaze::Row
ElementType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef ElementType_<MT>                    ElementType;    \/\/!< Type of the submatrix elements.$/;"	t	class:blaze::Submatrix
ElementType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef ElementType_<MT>              ElementType;    \/\/!< Type of the submatrix elements.$/;"	t	class:blaze::Submatrix
ElementType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef ElementType_<MT>             ElementType;    \/\/!< Type of the submatrix elements.$/;"	t	class:blaze::Submatrix
ElementType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef ElementType_<VT>                 ElementType;    \/\/!< Type of the subvector elements.$/;"	t	class:blaze::Subvector
ElementType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef ElementType_<VT>            ElementType;    \/\/!< Type of the subvector elements.$/;"	t	class:blaze::Subvector
ElementType	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef Type         ElementType;     \/\/!< Type of the array elements.$/;"	t	class:blaze::AlignedArray
ElementType_	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:UseVectorizedDefaultKernel	typeref:enum:UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::DVecTDVecMultExpr::UseVectorizedKernel	typeref:enum:blaze::DVecTDVecMultExpr::UseVectorizedKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::SMatDMatMultExpr::UseVectorizedKernel	typeref:enum:blaze::SMatDMatMultExpr::UseVectorizedKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::TDMatSVecMultExpr::UseVectorizedKernel	typeref:enum:blaze::TDMatSVecMultExpr::UseVectorizedKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:UseVectorizedDefaultKernel	typeref:enum:UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::TDMatTSMatMultExpr::UseVectorizedKernel	typeref:enum:blaze::TDMatTSMatMultExpr::UseVectorizedKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::UseVectorizedDefaultKernel	typeref:enum:blaze::UseVectorizedDefaultKernel::
ElementType_	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^                                             , ElementType_<T2>$/;"	m	struct:blaze::TSVecDMatMultExpr::UseVectorizedKernel	typeref:enum:blaze::TSVecDMatMultExpr::UseVectorizedKernel::
ElementWhatever	amun/fpga/matrix_functions.cpp	/^Matrix& ElementWhatever(Matrix& Out, const Matrix& In1, const Matrix& In2)$/;"	f	namespace:amunmt::FPGA::mblas
ElementwiseOps	amun/cpu/dl4mt/gru.h	/^    void ElementwiseOps(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::GRU
ElementwiseOps	amun/cpu/dl4mt/transition.h	/^    void ElementwiseOps(mblas::Matrix& state, int idx) const {$/;"	f	class:amunmt::CPU::Transition
ElementwiseOps	amun/cpu/nematus/gru.h	/^    void ElementwiseOps(mblas::Tensor& NextState, const mblas::Tensor& State) const {$/;"	f	class:amunmt::CPU::GRU
ElementwiseOps	amun/cpu/nematus/transition.cpp	/^void Transition::ElementwiseOps(mblas::Tensor& state, int idx) const {$/;"	f	class:amunmt::CPU::Nematus::Transition
ElementwiseOps	amun/fpga/gru.h	/^  void ElementwiseOps(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::FastGRU
ElementwiseOps	amun/fpga/matrix_functions.cpp	/^void ElementwiseOps(mblas::Tensor& NextState,$/;"	f	namespace:amunmt::FPGA::mblas
ElementwiseOps	amun/gpu/dl4mt/gru.h	/^    void ElementwiseOps(mblas::Tensor& NextState,$/;"	f	class:amunmt::GPU::FastGRU
ElementwiseOpsLayerNorm	amun/cpu/nematus/gru.h	/^    void ElementwiseOpsLayerNorm(mblas::Tensor& NextState, const mblas::Tensor& State) const {$/;"	f	class:amunmt::CPU::GRU
Embeddings	amun/cpu/dl4mt/decoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Embeddings
Embeddings	amun/cpu/dl4mt/decoder.h	/^    class Embeddings {$/;"	c	class:amunmt::CPU::dl4mt::Decoder
Embeddings	amun/cpu/dl4mt/encoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Encoder::Embeddings
Embeddings	amun/cpu/dl4mt/encoder.h	/^    class Embeddings {$/;"	c	class:amunmt::CPU::dl4mt::Encoder
Embeddings	amun/cpu/dl4mt/model.cpp	/^Weights::Embeddings::Embeddings(const NpzConverter& model, const std::string &key)$/;"	f	class:amunmt::CPU::dl4mt::Weights::Embeddings
Embeddings	amun/cpu/dl4mt/model.cpp	/^Weights::Embeddings::Embeddings(const NpzConverter& model, const std::vector<std::pair<std::string, bool>> keys)$/;"	f	class:amunmt::CPU::dl4mt::Weights::Embeddings
Embeddings	amun/cpu/dl4mt/model.h	/^  struct Embeddings {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
Embeddings	amun/cpu/nematus/decoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Decoder::Embeddings
Embeddings	amun/cpu/nematus/decoder.h	/^    class Embeddings {$/;"	c	class:amunmt::CPU::Nematus::Decoder
Embeddings	amun/cpu/nematus/encoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Encoder::Embeddings
Embeddings	amun/cpu/nematus/encoder.h	/^    class Embeddings {$/;"	c	class:amunmt::CPU::Nematus::Encoder
Embeddings	amun/cpu/nematus/model.cpp	/^Weights::Embeddings::Embeddings(const NpzConverter& model, const std::string &key)$/;"	f	class:amunmt::CPU::Nematus::Weights::Embeddings
Embeddings	amun/cpu/nematus/model.cpp	/^Weights::Embeddings::Embeddings(const NpzConverter& model, const std::vector<std::pair<std::string, bool>> keys)$/;"	f	class:amunmt::CPU::Nematus::Weights::Embeddings
Embeddings	amun/cpu/nematus/model.h	/^  struct Embeddings {$/;"	s	struct:amunmt::CPU::Nematus::Weights
Embeddings	amun/fpga/decoder.h	/^    Embeddings(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::Decoder::Embeddings
Embeddings	amun/fpga/decoder.h	/^  class Embeddings {$/;"	c	class:amunmt::FPGA::Decoder
Embeddings	amun/fpga/encoder.h	/^    Embeddings(const Weights& model)$/;"	f	class:amunmt::FPGA::Encoder::Embeddings
Embeddings	amun/fpga/encoder.h	/^  class Embeddings {$/;"	c	class:amunmt::FPGA::Encoder
Embeddings	amun/gpu/dl4mt/decoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::GPU::Decoder::Embeddings
Embeddings	amun/gpu/dl4mt/decoder.h	/^    class Embeddings {$/;"	c	class:amunmt::GPU::Decoder
Embeddings	amun/gpu/dl4mt/encoder.h	/^        Embeddings(const Weights& model)$/;"	f	class:amunmt::GPU::Encoder::Embeddings
Embeddings	amun/gpu/dl4mt/encoder.h	/^    class Embeddings {$/;"	c	class:amunmt::GPU::Encoder
Emit	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Emit(EventHandler& handler) {$/;"	f	class:YAML::NodeEvents
Emit	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Emit(const detail::node& node, EventHandler& handler,$/;"	f	class:YAML::NodeEvents
EmitBeginDoc	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginDoc() {$/;"	f	class:YAML::Emitter
EmitBeginMap	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginMap() {$/;"	f	class:YAML::Emitter
EmitBeginSeq	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginSeq() {$/;"	f	class:YAML::Emitter
EmitEndDoc	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndDoc() {$/;"	f	class:YAML::Emitter
EmitEndMap	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndMap() {$/;"	f	class:YAML::Emitter
EmitEndSeq	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndSeq() {$/;"	f	class:YAML::Emitter
EmitFromEvents	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^EmitFromEvents::EmitFromEvents(Emitter& emitter) : m_emitter(emitter) {}$/;"	f	class:YAML::EmitFromEvents
EmitFromEvents	amun/3rd_party/yaml-cpp/emitfromevents.h	/^class EmitFromEvents : public EventHandler {$/;"	c	namespace:YAML
EmitKindTag	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitKindTag() { Write(LocalTag("")); }$/;"	f	class:YAML::Emitter
EmitNewline	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitNewline() {$/;"	f	class:YAML::Emitter
EmitNonAscii	amun/3rd_party/yaml-cpp/emittermanip.h	/^  EmitNonAscii,$/;"	e	enum:YAML::EMITTER_MANIP
EmitProps	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::EmitProps(const std::string& tag, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
EmitSeq	amun/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& EmitSeq(Emitter& emitter, const Seq& seq) {$/;"	f	namespace:YAML
Emitter	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::Emitter() : m_pState(new EmitterState) {}$/;"	f	class:YAML::Emitter
Emitter	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::Emitter(std::ostream& stream)$/;"	f	class:YAML::Emitter
Emitter	amun/3rd_party/yaml-cpp/emitter.h	/^class YAML_CPP_API Emitter : private noncopyable {$/;"	c	namespace:YAML
EmitterException	amun/3rd_party/yaml-cpp/exceptions.h	/^  EmitterException(const std::string& msg_)$/;"	f	class:YAML::EmitterException
EmitterException	amun/3rd_party/yaml-cpp/exceptions.h	/^class EmitterException : public Exception {$/;"	c	namespace:YAML
EmitterNodeType	amun/3rd_party/yaml-cpp/emitterdef.h	/^struct EmitterNodeType {$/;"	s	namespace:YAML
EmitterState	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterState::EmitterState()$/;"	f	class:YAML::EmitterState
EmitterState	amun/3rd_party/yaml-cpp/emitterstate.h	/^class EmitterState {$/;"	c	namespace:YAML
EmitterStyle	amun/3rd_party/yaml-cpp/emitterstyle.h	/^struct EmitterStyle {$/;"	s	namespace:YAML
Empty	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Empty() {$/;"	f	namespace:YAML::Exp
EmptyEmbedding	amun/cpu/dl4mt/decoder.h	/^    void EmptyEmbedding(mblas::Tensor& Embedding,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
EmptyEmbedding	amun/cpu/nematus/decoder.h	/^    void EmptyEmbedding(mblas::Tensor& Embedding,$/;"	f	class:amunmt::CPU::Nematus::Decoder
EmptyEmbedding	amun/fpga/decoder.cpp	/^void Decoder::EmptyEmbedding(mblas::Tensor& Embedding, size_t batchSize) {$/;"	f	class:amunmt::FPGA::Decoder
EmptyEmbedding	amun/gpu/dl4mt/decoder.h	/^    void EmptyEmbedding(mblas::Tensor& Embedding, unsigned batchSize = 1) {$/;"	f	class:amunmt::GPU::Decoder
EmptySpec	amun/3rd_party/spdlog/details/format.h	/^struct EmptySpec$/;"	s	namespace:fmt
EmptySpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct EmptySpec$/;"	s	namespace:fmt
EmptyState	amun/cpu/dl4mt/decoder.h	/^    void EmptyState(mblas::Tensor& State,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
EmptyState	amun/cpu/nematus/decoder.h	/^    void EmptyState(mblas::Tensor& State,$/;"	f	class:amunmt::CPU::Nematus::Decoder
EmptyState	amun/fpga/decoder.cpp	/^void Decoder::EmptyState(mblas::Tensor& State,$/;"	f	class:amunmt::FPGA::Decoder
EmptyState	amun/gpu/dl4mt/decoder.h	/^    void EmptyState(CellState& State,$/;"	f	class:amunmt::GPU::Decoder
EmptyType	amun/3rd_party/blaze/util/EmptyType.h	/^struct EmptyType$/;"	s	namespace:blaze
EnableIf	amun/3rd_party/blaze/util/EnableIf.h	/^struct EnableIf : public EnableIfTrue<Condition::value,T>$/;"	s	namespace:blaze
EnableIf	amun/3rd_party/spdlog/details/format.h	/^struct EnableIf$/;"	s	namespace:fmt::internal
EnableIf	amun/3rd_party/spdlog/details/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
EnableIf	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct EnableIf$/;"	s	namespace:fmt::internal
EnableIf	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
EnableIfTrue	amun/3rd_party/blaze/util/EnableIf.h	/^struct EnableIfTrue$/;"	s	namespace:blaze
EnableIfTrue	amun/3rd_party/blaze/util/EnableIf.h	/^struct EnableIfTrue<false,T>$/;"	s	namespace:blaze
EncBackwardGRU	amun/fpga/model.h	/^    EncBackwardGRU(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::EncBackwardGRU
EncBackwardGRU	amun/fpga/model.h	/^  struct EncBackwardGRU {$/;"	s	struct:amunmt::FPGA::Weights
EncBackwardGRU	amun/gpu/dl4mt/model.h	/^  struct EncBackwardGRU {$/;"	s	struct:amunmt::GPU::Weights
EncBackwardLSTM	amun/gpu/dl4mt/model.h	/^  struct EncBackwardLSTM {$/;"	s	struct:amunmt::GPU::Weights
EncEmbeddings	amun/fpga/model.h	/^    EncEmbeddings(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::EncEmbeddings
EncEmbeddings	amun/fpga/model.h	/^  struct EncEmbeddings {$/;"	s	struct:amunmt::FPGA::Weights
EncEmbeddings	amun/gpu/dl4mt/model.h	/^  struct EncEmbeddings {$/;"	s	struct:amunmt::GPU::Weights
EncForwardGRU	amun/fpga/model.h	/^    EncForwardGRU(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	struct:amunmt::FPGA::Weights::EncForwardGRU
EncForwardGRU	amun/fpga/model.h	/^  struct EncForwardGRU {$/;"	s	struct:amunmt::FPGA::Weights
EncForwardGRU	amun/gpu/dl4mt/model.h	/^  struct EncForwardGRU {$/;"	s	struct:amunmt::GPU::Weights
EncForwardLSTM	amun/gpu/dl4mt/model.h	/^  struct EncForwardLSTM {$/;"	s	struct:amunmt::GPU::Weights
Encode	amun/common/processor/bpe.cpp	/^std::vector<bpeFactors> BPE::Encode(const std::vector<bpeFactors>& words) const {$/;"	f	class:amunmt::BPE
Encode	amun/common/processor/bpe.cpp	/^std::vector<std::string> BPE::Encode(const std::vector<std::string>& words) const {$/;"	f	class:amunmt::BPE
Encode	amun/common/processor/bpe.cpp	/^std::vector<std::string>& BPE::Encode(const std::string& word) const {$/;"	f	class:amunmt::BPE
Encode	amun/common/search.cpp	/^States Search::Encode(const Sentences& sentences) {$/;"	f	class:amunmt::Search
Encode	amun/cpu/dl4mt/encoder.cpp	/^void Encoder::Encode(const std::vector<unsigned>& words,$/;"	f	class:amunmt::CPU::dl4mt::Encoder
Encode	amun/cpu/dl4mt/encoder.h	/^        void Encode(It it, It end,$/;"	f	class:amunmt::CPU::dl4mt::Encoder::RNN
Encode	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::Encode(const Sentences& sources) {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
Encode	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::Encode(const Sentences& sources) {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
Encode	amun/fpga/encoder.cpp	/^void Encoder::Encode(const Sentences& source, size_t tab, mblas::Tensor& context,$/;"	f	class:amunmt::FPGA::Encoder
Encode	amun/fpga/encoder.h	/^    void Encode(It it, It end, mblas::Tensor& Context, size_t batchSize, bool invert,$/;"	f	class:amunmt::FPGA::Encoder::RNN
Encode	amun/fpga/encoder_decoder.cpp	/^void EncoderDecoder::Encode(const Sentences& sources)$/;"	f	class:amunmt::FPGA::EncoderDecoder
Encode	amun/gpu/dl4mt/encoder.h	/^        void Encode(It it, It end, mblas::Tensor& Context,$/;"	f	class:amunmt::GPU::Encoder::RNN
EncodeBase64	amun/3rd_party/yaml-cpp/binary.cpp	/^std::string EncodeBase64(const unsigned char *data, std::size_t size) {$/;"	f	namespace:YAML
Encoder	amun/cpu/dl4mt/encoder.h	/^    Encoder(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Encoder
Encoder	amun/cpu/dl4mt/encoder.h	/^class Encoder {$/;"	c	namespace:amunmt::CPU::dl4mt
Encoder	amun/cpu/nematus/encoder.h	/^    Encoder(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Encoder
Encoder	amun/cpu/nematus/encoder.h	/^class Encoder {$/;"	c	namespace:amunmt::CPU::Nematus
Encoder	amun/cpu/nematus/model.h	/^      enum class TransitionType {Encoder, Decoder};$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition::TransitionType
Encoder	amun/fpga/encoder.cpp	/^Encoder::Encoder(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::Encoder
Encoder	amun/fpga/encoder.h	/^class Encoder {$/;"	c	namespace:amunmt::FPGA
Encoder	amun/gpu/dl4mt/encoder.h	/^class Encoder {$/;"	c	namespace:amunmt::GPU
EncoderDecoder	amun/cpu/dl4mt/encoder_decoder.cpp	/^EncoderDecoder::EncoderDecoder(const God &god,$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
EncoderDecoder	amun/cpu/dl4mt/encoder_decoder.h	/^class EncoderDecoder : public CPUEncoderDecoderBase {$/;"	c	namespace:amunmt::CPU::dl4mt
EncoderDecoder	amun/cpu/nematus/encoder_decoder.cpp	/^EncoderDecoder::EncoderDecoder(const God &god,$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
EncoderDecoder	amun/cpu/nematus/encoder_decoder.h	/^class EncoderDecoder : public CPUEncoderDecoderBase {$/;"	c	namespace:amunmt::CPU::Nematus
EncoderDecoder	amun/fpga/encoder_decoder.cpp	/^EncoderDecoder::EncoderDecoder($/;"	f	class:amunmt::FPGA::EncoderDecoder
EncoderDecoder	amun/fpga/encoder_decoder.h	/^class EncoderDecoder : public Scorer {$/;"	c	namespace:amunmt::FPGA
EncoderDecoder	amun/gpu/decoder/encoder_decoder.h	/^class EncoderDecoder : public Scorer {$/;"	c	namespace:amunmt::GPU
EncoderDecoderLoader	amun/cpu/decoder/encoder_decoder_loader.cpp	/^EncoderDecoderLoader::EncoderDecoderLoader($/;"	f	class:amunmt::CPU::EncoderDecoderLoader
EncoderDecoderLoader	amun/cpu/decoder/encoder_decoder_loader.h	/^class EncoderDecoderLoader : public Loader {$/;"	c	namespace:amunmt::CPU
EncoderDecoderLoader	amun/fpga/encoder_decoder_loader.cpp	/^EncoderDecoderLoader::EncoderDecoderLoader(const std::string name,$/;"	f	class:amunmt::FPGA::EncoderDecoderLoader
EncoderDecoderLoader	amun/fpga/encoder_decoder_loader.h	/^class EncoderDecoderLoader : public Loader {$/;"	c	namespace:amunmt::FPGA
EncoderDecoderLoader	amun/gpu/decoder/encoder_decoder_loader.h	/^class EncoderDecoderLoader : public Loader {$/;"	c	namespace:amunmt::GPU
EncoderDecoderState	amun/cpu/decoder/encoder_decoder_state.cpp	/^EncoderDecoderState::EncoderDecoderState()$/;"	f	class:amunmt::CPU::EncoderDecoderState
EncoderDecoderState	amun/cpu/decoder/encoder_decoder_state.h	/^class EncoderDecoderState : public State {$/;"	c	namespace:amunmt::CPU
EncoderDecoderState	amun/fpga/encoder_decoder_state.cpp	/^EncoderDecoderState::EncoderDecoderState(const OpenCLInfo &openCLInfo)$/;"	f	class:amunmt::FPGA::EncoderDecoderState
EncoderDecoderState	amun/fpga/encoder_decoder_state.h	/^class EncoderDecoderState : public State {$/;"	c	namespace:amunmt::FPGA
EncoderDecoderState	amun/gpu/decoder/encoder_decoder_state.h	/^	EncoderDecoderState() {}$/;"	f	class:amunmt::GPU::EncoderDecoderState
EncoderDecoderState	amun/gpu/decoder/encoder_decoder_state.h	/^class EncoderDecoderState : public State {$/;"	c	namespace:amunmt::GPU
EncoderRNN	amun/cpu/nematus/encoder.h	/^        EncoderRNN(const WeightsGRU& modelGRU, const WeightsTrans& modelTrans)$/;"	f	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
EncoderRNN	amun/cpu/nematus/encoder.h	/^    class EncoderRNN {$/;"	c	class:amunmt::CPU::Nematus::Encoder
EndDoc	amun/3rd_party/yaml-cpp/emittermanip.h	/^  EndDoc,$/;"	e	enum:YAML::EMITTER_MANIP
EndMap	amun/3rd_party/yaml-cpp/emittermanip.h	/^  EndMap,$/;"	e	enum:YAML::EMITTER_MANIP
EndScalar	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EndScalar() {$/;"	f	namespace:YAML::Exp
EndScalarInFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EndScalarInFlow() {$/;"	f	namespace:YAML::Exp
EndSeq	amun/3rd_party/yaml-cpp/emittermanip.h	/^  EndSeq,$/;"	e	enum:YAML::EMITTER_MANIP
EndStream	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::EndStream() {$/;"	f	class:YAML::Scanner
EndedDoc	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::EndedDoc() {$/;"	f	class:YAML::EmitterState
EndedGroup	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::EndedGroup(GroupType::value type) {$/;"	f	class:YAML::EmitterState
EndsWith	amun/common/processor/bpe.cpp	/^bool BPE::EndsWith(std::string const &fullString, std::string const suffix) const {$/;"	f	class:amunmt::BPE
EnsureNodeExists	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::EnsureNodeExists() const {$/;"	f	class:YAML::Node
EnsureSize	amun/3rd_party/fast_align/src/atools.cc	/^  void EnsureSize(const Array2D<bool>& a, const Array2D<bool>& b, Array2D<bool>* x) {$/;"	f	struct:Command
EnsureTokensInQueue	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::EnsureTokensInQueue() {$/;"	f	class:YAML::Scanner
Epsilon	amun/3rd_party/blaze/math/Epsilon.h	/^class Epsilon$/;"	c	namespace:blaze
Epsilon	amun/3rd_party/blaze/math/Epsilon.h	/^inline Epsilon::Epsilon()$/;"	f	class:blaze::Epsilon
Equal	amun/3rd_party/blaze/util/mpl/Equal.h	/^struct Equal : public Bool< ( T1::value == T2::value ) >$/;"	s	namespace:blaze
Erase	amun/3rd_party/blaze/util/TypeList.h	/^struct Erase< NullType, Type >$/;"	s	namespace:blaze
Erase	amun/3rd_party/blaze/util/TypeList.h	/^struct Erase< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
Erase	amun/3rd_party/blaze/util/TypeList.h	/^struct Erase< TypeList<Type,Tail>, Type >$/;"	s	namespace:blaze
EraseAll	amun/3rd_party/blaze/util/TypeList.h	/^struct EraseAll< NullType, Type >$/;"	s	namespace:blaze
EraseAll	amun/3rd_party/blaze/util/TypeList.h	/^struct EraseAll< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
EraseAll	amun/3rd_party/blaze/util/TypeList.h	/^struct EraseAll< TypeList<Type,Tail>, Type >$/;"	s	namespace:blaze
Erf	amun/3rd_party/blaze/math/functors/Erf.h	/^struct Erf$/;"	s	namespace:blaze
Erfc	amun/3rd_party/blaze/math/functors/Erfc.h	/^struct Erfc$/;"	s	namespace:blaze
ErrnoException	amun/3rd_party/extract_lex/exception.cpp	/^ErrnoException::ErrnoException() throw() : errno_(errno) {$/;"	f	class:util::ErrnoException
ErrnoException	amun/3rd_party/extract_lex/exception.h	/^class ErrnoException : public Exception {$/;"	c	namespace:util
ErrnoException	amun/common/exception.cpp	/^ErrnoException::ErrnoException() throw() : errno_(errno) {$/;"	f	class:amunmt::util::ErrnoException
ErrnoException	amun/common/exception.h	/^class ErrnoException : public Exception {$/;"	c	namespace:amunmt::util
Error	amun/3rd_party/extract_lex/exception.h	/^    int Error() const throw() { return errno_; }$/;"	f	class:util::ErrnoException
Error	amun/common/exception.h	/^    int Error() const throw() { return errno_; }$/;"	f	class:amunmt::util::ErrnoException
ErrorMsg	amun/3rd_party/yaml-cpp/exceptions.h	/^namespace ErrorMsg {$/;"	n	namespace:YAML
Es_	amun/gpu/dl4mt/model.h	/^    std::vector<std::shared_ptr<mblas::Tensor>> Es_;$/;"	m	struct:amunmt::GPU::Weights::EncEmbeddings
EscBreak	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EscBreak() {$/;"	f	namespace:YAML::Exp
EscSingleQuote	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EscSingleQuote() {$/;"	f	namespace:YAML::Exp
Escape	amun/3rd_party/yaml-cpp/exp.cpp	/^std::string Escape(Stream& in) {$/;"	f	namespace:YAML::Exp
Escape	amun/3rd_party/yaml-cpp/exp.cpp	/^std::string Escape(Stream& in, int codeLength) {$/;"	f	namespace:YAML::Exp
EscapeNonAscii	amun/3rd_party/yaml-cpp/emittermanip.h	/^  EscapeNonAscii,$/;"	e	enum:YAML::EMITTER_MANIP
Eval	amun/3rd_party/blaze/math/functors/Eval.h	/^struct Eval$/;"	s	namespace:blaze
EvalExpr	amun/3rd_party/blaze/math/expressions/EvalExpr.h	/^struct EvalExpr : private Expression$/;"	s	namespace:blaze
EvalExprTrait	amun/3rd_party/blaze/math/traits/EvalExprTrait.h	/^struct EvalExprTrait$/;"	s	namespace:blaze
EventHandler	amun/3rd_party/yaml-cpp/eventhandler.h	/^class EventHandler {$/;"	c	namespace:YAML
Exception	amun/3rd_party/extract_lex/exception.cpp	/^Exception::Exception() throw() {}$/;"	f	class:util::Exception
Exception	amun/3rd_party/extract_lex/exception.cpp	/^Exception::Exception(const Exception& o) throw() {$/;"	f	class:util::Exception
Exception	amun/3rd_party/extract_lex/exception.h	/^class Exception : public std::exception {$/;"	c	namespace:util
Exception	amun/3rd_party/yaml-cpp/exceptions.h	/^  Exception(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::Exception
Exception	amun/3rd_party/yaml-cpp/exceptions.h	/^class Exception : public std::runtime_error {$/;"	c	namespace:YAML
Exception	amun/common/exception.cpp	/^Exception::Exception() throw() {}$/;"	f	class:amunmt::util::Exception
Exception	amun/common/exception.cpp	/^Exception::Exception(const Exception& o) throw() : what_(o.what_) {}$/;"	f	class:amunmt::util::Exception
Exception	amun/common/exception.h	/^class Exception : public std::exception {$/;"	c	namespace:amunmt::util
ExceptionTag	amun/3rd_party/extract_lex/exception.h	/^    template <class T> struct ExceptionTag {$/;"	s	class:util::Exception
ExceptionTag	amun/common/exception.h	/^    template <class T> struct ExceptionTag {$/;"	s	class:amunmt::util::Exception
ExistsActiveSimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::ExistsActiveSimpleKey() const {$/;"	f	class:YAML::Scanner
Exp	amun/3rd_party/blaze/math/functors/Exp.h	/^struct Exp$/;"	s	namespace:blaze
Exp	amun/3rd_party/yaml-cpp/exp.cpp	/^namespace Exp {$/;"	n	namespace:YAML	file:
Exp	amun/3rd_party/yaml-cpp/exp.h	/^namespace Exp {$/;"	n	namespace:YAML
Exp	amun/cpu/mblas/phoenix_functions.h	/^  struct Exp {$/;"	s	namespace:amunmt::CPU::mblas
Exp	amun/gpu/mblas/thrust_functions.h	/^      Exp(const actor<Eval> &_1) {$/;"	f	namespace:thrust::detail::functional
ExportToFile	amun/3rd_party/fast_align/src/ttables.h	/^  void ExportToFile(const char* filename, Dict& d, double BEAM_THRESHOLD) const {$/;"	f	class:TTable
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatDMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatDMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef DivExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::DMatScalarDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef MultExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::DMatScalarMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatTDMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatTDMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatTSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DMatTSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecDVecAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef SubExprTrait_< MultExprTrait_<RN1,RN2>, MultExprTrait_<RN1,RN2> >  ExprReturnType;$/;"	t	class:blaze::DVecDVecCrossExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef DivExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecDVecDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecDVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecDVecSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecSVecAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef SubExprTrait_< MultExprTrait_<RN1,RN2>, MultExprTrait_<RN1,RN2> >  ExprReturnType;$/;"	t	class:blaze::DVecSVecCrossExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecSVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecSVecSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef DivExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::DVecScalarDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef MultExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::DVecScalarMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecTDVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::DVecTSVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatDMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef DivExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::SMatScalarDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef MultExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::SMatScalarMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatTDMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatTSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SMatTSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef SubExprTrait_< MultExprTrait_<RN1,RN2>, MultExprTrait_<RN1,RN2> >  ExprReturnType;$/;"	t	class:blaze::SVecDVecCrossExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef DivExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecDVecDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecDVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecDVecSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecSVecAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef SubExprTrait_< MultExprTrait_<RN1,RN2>, MultExprTrait_<RN1,RN2> >  ExprReturnType;$/;"	t	class:blaze::SVecSVecCrossExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecSVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecSVecSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef DivExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::SVecScalarDivExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef MultExprTrait_<RN,ST>  ExprReturnType;$/;"	t	class:blaze::SVecScalarMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecTDVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef MultExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::SVecTSVecMultExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TDMatSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TDMatSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TSMatDMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TSMatSMatSubExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef AddExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TSMatTSMatAddExpr
ExprReturnType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef SubExprTrait_<RN1,RN2>  ExprReturnType;$/;"	t	class:blaze::TSMatTSMatSubExpr
Expression	amun/3rd_party/blaze/math/expressions/Expression.h	/^struct Expression$/;"	s	namespace:blaze
Extent	amun/3rd_party/blaze/util/typetraits/Extent.h	/^struct Extent$/;"	s	namespace:blaze
Extent	amun/3rd_party/blaze/util/typetraits/Extent.h	/^struct Extent<T[E],0U>$/;"	s	namespace:blaze
Extent	amun/3rd_party/blaze/util/typetraits/Extent.h	/^struct Extent<T[E],N>$/;"	s	namespace:blaze
Extent	amun/3rd_party/blaze/util/typetraits/Extent.h	/^struct Extent<T[],0UL>$/;"	s	namespace:blaze
Extent	amun/3rd_party/blaze/util/typetraits/Extent.h	/^struct Extent<T[],N>$/;"	s	namespace:blaze
ExtractLex	amun/3rd_party/extract_lex/extract-lex.h	/^class ExtractLex$/;"	c	namespace:extract
FAST_ALIGN_PORT_H_	amun/3rd_party/fast_align/src/port.h	16;"	d
FIOC_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor FIOC_;$/;"	m	class:amunmt::GPU::SlowLSTM
FIO_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor FIO_;$/;"	m	class:amunmt::GPU::SlowLSTM
FLOW_END	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const FLOW_END = "illegal flow end";$/;"	m	namespace:YAML::ErrorMsg
FLOW_ENTRY	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_ENTRY,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP	amun/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	e	enum:YAML::Scanner::FLOW_MARKER
FLOW_MAP_COMPACT	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_COMPACT,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP_END	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_END,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP_START	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_START,$/;"	e	enum:YAML::Token::TYPE
FLOW_MARKER	amun/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	g	class:YAML::Scanner
FLOW_SEQ	amun/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	e	enum:YAML::Scanner::FLOW_MARKER
FLOW_SEQ_END	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_SEQ_END,$/;"	e	enum:YAML::Token::TYPE
FLOW_SEQ_START	amun/3rd_party/yaml-cpp/token.h	/^    FLOW_SEQ_START,$/;"	e	enum:YAML::Token::TYPE
FMT_API	amun/3rd_party/spdlog/details/format.h	79;"	d
FMT_API	amun/3rd_party/spdlog/details/format.h	81;"	d
FMT_API	amun/3rd_party/spdlog/details/format.h	85;"	d
FMT_API	amun/3rd_party/spdlog/fmt/bundled/format.h	72;"	d
FMT_API	amun/3rd_party/spdlog/fmt/bundled/format.h	74;"	d
FMT_API	amun/3rd_party/spdlog/fmt/bundled/format.h	78;"	d
FMT_ARG_TYPE_DEFAULT	amun/3rd_party/spdlog/details/format.h	2455;"	d
FMT_ARG_TYPE_DEFAULT	amun/3rd_party/spdlog/fmt/bundled/format.h	2705;"	d
FMT_ASSERT	amun/3rd_party/spdlog/details/format.h	230;"	d
FMT_ASSERT	amun/3rd_party/spdlog/fmt/bundled/format.h	277;"	d
FMT_ASSIGN_char	amun/3rd_party/spdlog/details/format.h	2507;"	d
FMT_ASSIGN_char	amun/3rd_party/spdlog/fmt/bundled/format.h	2720;"	d
FMT_ASSIGN_wchar_t	amun/3rd_party/spdlog/details/format.h	2509;"	d
FMT_ASSIGN_wchar_t	amun/3rd_party/spdlog/fmt/bundled/format.h	2722;"	d
FMT_BUILTIN_CLZ	amun/3rd_party/spdlog/details/format.h	235;"	d
FMT_BUILTIN_CLZ	amun/3rd_party/spdlog/details/format.h	266;"	d
FMT_BUILTIN_CLZ	amun/3rd_party/spdlog/fmt/bundled/format.h	281;"	d
FMT_BUILTIN_CLZ	amun/3rd_party/spdlog/fmt/bundled/format.h	312;"	d
FMT_BUILTIN_CLZLL	amun/3rd_party/spdlog/details/format.h	239;"	d
FMT_BUILTIN_CLZLL	amun/3rd_party/spdlog/details/format.h	293;"	d
FMT_BUILTIN_CLZLL	amun/3rd_party/spdlog/fmt/bundled/format.h	285;"	d
FMT_BUILTIN_CLZLL	amun/3rd_party/spdlog/fmt/bundled/format.h	339;"	d
FMT_CATCH	amun/3rd_party/spdlog/details/format.cc	57;"	d	file:
FMT_CATCH	amun/3rd_party/spdlog/fmt/bundled/format.cc	57;"	d	file:
FMT_CONCAT	amun/3rd_party/spdlog/fmt/bundled/format.h	1460;"	d
FMT_CONCAT_	amun/3rd_party/spdlog/fmt/bundled/format.h	1476;"	d
FMT_DEFINE_INT_FORMATTERS	amun/3rd_party/spdlog/details/format.h	1981;"	d
FMT_DEFINE_INT_FORMATTERS	amun/3rd_party/spdlog/fmt/bundled/format.h	2208;"	d
FMT_DELETED_OR_UNDEFINED	amun/3rd_party/spdlog/details/format.h	208;"	d
FMT_DELETED_OR_UNDEFINED	amun/3rd_party/spdlog/details/format.h	213;"	d
FMT_DELETED_OR_UNDEFINED	amun/3rd_party/spdlog/fmt/bundled/format.h	238;"	d
FMT_DELETED_OR_UNDEFINED	amun/3rd_party/spdlog/fmt/bundled/format.h	243;"	d
FMT_DETECTED_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	189;"	d
FMT_DETECTED_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	191;"	d
FMT_DISABLE_CONVERSION_TO_INT	amun/3rd_party/spdlog/details/format.h	1287;"	d
FMT_DISABLE_CONVERSION_TO_INT	amun/3rd_party/spdlog/fmt/bundled/format.h	1380;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	amun/3rd_party/spdlog/details/format.h	209;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	amun/3rd_party/spdlog/details/format.h	214;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	amun/3rd_party/spdlog/fmt/bundled/format.h	239;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	amun/3rd_party/spdlog/fmt/bundled/format.h	244;"	d
FMT_DISPATCH	amun/3rd_party/spdlog/details/format.h	1544;"	d
FMT_DISPATCH	amun/3rd_party/spdlog/fmt/bundled/format.h	1818;"	d
FMT_DTOR_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ~FormatError() FMT_DTOR_NOEXCEPT;$/;"	m	class:fmt::FormatError
FMT_DTOR_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ~RuntimeError() FMT_DTOR_NOEXCEPT;$/;"	m	class:fmt::internal::RuntimeError
FMT_DTOR_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ~SystemError() FMT_DTOR_NOEXCEPT;$/;"	m	class:SystemError
FMT_DTOR_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	205;"	d
FMT_DTOR_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	207;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/details/format.h	164;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/details/format.h	167;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/details/format.h	170;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/fmt/bundled/format.h	164;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/fmt/bundled/format.h	167;"	d
FMT_EXCEPTIONS	amun/3rd_party/spdlog/fmt/bundled/format.h	170;"	d
FMT_FORMAT_H_	amun/3rd_party/spdlog/details/format.h	29;"	d
FMT_FORMAT_H_	amun/3rd_party/spdlog/fmt/bundled/format.h	29;"	d
FMT_FOR_EACH1	amun/3rd_party/spdlog/details/format.h	2582;"	d
FMT_FOR_EACH1	amun/3rd_party/spdlog/fmt/bundled/format.h	2795;"	d
FMT_FOR_EACH10	amun/3rd_party/spdlog/details/format.h	2599;"	d
FMT_FOR_EACH10	amun/3rd_party/spdlog/fmt/bundled/format.h	2812;"	d
FMT_FOR_EACH2	amun/3rd_party/spdlog/details/format.h	2583;"	d
FMT_FOR_EACH2	amun/3rd_party/spdlog/fmt/bundled/format.h	2796;"	d
FMT_FOR_EACH3	amun/3rd_party/spdlog/details/format.h	2585;"	d
FMT_FOR_EACH3	amun/3rd_party/spdlog/fmt/bundled/format.h	2798;"	d
FMT_FOR_EACH4	amun/3rd_party/spdlog/details/format.h	2587;"	d
FMT_FOR_EACH4	amun/3rd_party/spdlog/fmt/bundled/format.h	2800;"	d
FMT_FOR_EACH5	amun/3rd_party/spdlog/details/format.h	2589;"	d
FMT_FOR_EACH5	amun/3rd_party/spdlog/fmt/bundled/format.h	2802;"	d
FMT_FOR_EACH6	amun/3rd_party/spdlog/details/format.h	2591;"	d
FMT_FOR_EACH6	amun/3rd_party/spdlog/fmt/bundled/format.h	2804;"	d
FMT_FOR_EACH7	amun/3rd_party/spdlog/details/format.h	2593;"	d
FMT_FOR_EACH7	amun/3rd_party/spdlog/fmt/bundled/format.h	2806;"	d
FMT_FOR_EACH8	amun/3rd_party/spdlog/details/format.h	2595;"	d
FMT_FOR_EACH8	amun/3rd_party/spdlog/fmt/bundled/format.h	2808;"	d
FMT_FOR_EACH9	amun/3rd_party/spdlog/details/format.h	2597;"	d
FMT_FOR_EACH9	amun/3rd_party/spdlog/fmt/bundled/format.h	2810;"	d
FMT_FUNC	amun/3rd_party/spdlog/details/format.cc	64;"	d	file:
FMT_GCC_EXTENSION	amun/3rd_party/spdlog/details/format.h	107;"	d
FMT_GCC_EXTENSION	amun/3rd_party/spdlog/details/format.h	90;"	d
FMT_GCC_EXTENSION	amun/3rd_party/spdlog/fmt/bundled/format.h	100;"	d
FMT_GCC_EXTENSION	amun/3rd_party/spdlog/fmt/bundled/format.h	83;"	d
FMT_GCC_VERSION	amun/3rd_party/spdlog/details/format.h	89;"	d
FMT_GCC_VERSION	amun/3rd_party/spdlog/fmt/bundled/format.h	82;"	d
FMT_GEN	amun/3rd_party/spdlog/details/format.h	2373;"	d
FMT_GEN	amun/3rd_party/spdlog/fmt/bundled/format.h	2619;"	d
FMT_GEN1	amun/3rd_party/spdlog/details/format.h	2374;"	d
FMT_GEN1	amun/3rd_party/spdlog/fmt/bundled/format.h	2620;"	d
FMT_GEN10	amun/3rd_party/spdlog/details/format.h	2383;"	d
FMT_GEN10	amun/3rd_party/spdlog/fmt/bundled/format.h	2629;"	d
FMT_GEN11	amun/3rd_party/spdlog/details/format.h	2384;"	d
FMT_GEN11	amun/3rd_party/spdlog/fmt/bundled/format.h	2630;"	d
FMT_GEN12	amun/3rd_party/spdlog/details/format.h	2385;"	d
FMT_GEN12	amun/3rd_party/spdlog/fmt/bundled/format.h	2631;"	d
FMT_GEN13	amun/3rd_party/spdlog/details/format.h	2386;"	d
FMT_GEN13	amun/3rd_party/spdlog/fmt/bundled/format.h	2632;"	d
FMT_GEN14	amun/3rd_party/spdlog/details/format.h	2387;"	d
FMT_GEN14	amun/3rd_party/spdlog/fmt/bundled/format.h	2633;"	d
FMT_GEN15	amun/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt
FMT_GEN15	amun/3rd_party/spdlog/details/format.h	2388;"	d
FMT_GEN15	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt
FMT_GEN15	amun/3rd_party/spdlog/fmt/bundled/format.h	2634;"	d
FMT_GEN2	amun/3rd_party/spdlog/details/format.h	2375;"	d
FMT_GEN2	amun/3rd_party/spdlog/fmt/bundled/format.h	2621;"	d
FMT_GEN3	amun/3rd_party/spdlog/details/format.h	2376;"	d
FMT_GEN3	amun/3rd_party/spdlog/fmt/bundled/format.h	2622;"	d
FMT_GEN4	amun/3rd_party/spdlog/details/format.h	2377;"	d
FMT_GEN4	amun/3rd_party/spdlog/fmt/bundled/format.h	2623;"	d
FMT_GEN5	amun/3rd_party/spdlog/details/format.h	2378;"	d
FMT_GEN5	amun/3rd_party/spdlog/fmt/bundled/format.h	2624;"	d
FMT_GEN6	amun/3rd_party/spdlog/details/format.h	2379;"	d
FMT_GEN6	amun/3rd_party/spdlog/fmt/bundled/format.h	2625;"	d
FMT_GEN7	amun/3rd_party/spdlog/details/format.h	2380;"	d
FMT_GEN7	amun/3rd_party/spdlog/fmt/bundled/format.h	2626;"	d
FMT_GEN8	amun/3rd_party/spdlog/details/format.h	2381;"	d
FMT_GEN8	amun/3rd_party/spdlog/fmt/bundled/format.h	2627;"	d
FMT_GEN9	amun/3rd_party/spdlog/details/format.h	2382;"	d
FMT_GEN9	amun/3rd_party/spdlog/fmt/bundled/format.h	2628;"	d
FMT_GNUC_LIBSTD_VERSION	amun/3rd_party/spdlog/details/format.h	116;"	d
FMT_GNUC_LIBSTD_VERSION	amun/3rd_party/spdlog/fmt/bundled/format.h	116;"	d
FMT_HAS_BUILTIN	amun/3rd_party/spdlog/details/format.h	126;"	d
FMT_HAS_BUILTIN	amun/3rd_party/spdlog/details/format.h	128;"	d
FMT_HAS_BUILTIN	amun/3rd_party/spdlog/fmt/bundled/format.h	126;"	d
FMT_HAS_BUILTIN	amun/3rd_party/spdlog/fmt/bundled/format.h	128;"	d
FMT_HAS_CPP_ATTRIBUTE	amun/3rd_party/spdlog/details/format.h	132;"	d
FMT_HAS_CPP_ATTRIBUTE	amun/3rd_party/spdlog/details/format.h	134;"	d
FMT_HAS_CPP_ATTRIBUTE	amun/3rd_party/spdlog/fmt/bundled/format.h	132;"	d
FMT_HAS_CPP_ATTRIBUTE	amun/3rd_party/spdlog/fmt/bundled/format.h	134;"	d
FMT_HAS_FEATURE	amun/3rd_party/spdlog/details/format.h	120;"	d
FMT_HAS_FEATURE	amun/3rd_party/spdlog/details/format.h	122;"	d
FMT_HAS_FEATURE	amun/3rd_party/spdlog/fmt/bundled/format.h	120;"	d
FMT_HAS_FEATURE	amun/3rd_party/spdlog/fmt/bundled/format.h	122;"	d
FMT_HAS_GXX_CXX11	amun/3rd_party/spdlog/details/format.h	104;"	d
FMT_HAS_GXX_CXX11	amun/3rd_party/spdlog/fmt/bundled/format.h	97;"	d
FMT_HEADER_ONLY	amun/3rd_party/spdlog/details/format.h	33;"	d
FMT_HEADER_ONLY	amun/3rd_party/spdlog/fmt/fmt.h	16;"	d
FMT_ICC_VERSION	amun/3rd_party/spdlog/fmt/bundled/format.h	104;"	d
FMT_ICC_VERSION	amun/3rd_party/spdlog/fmt/bundled/format.h	106;"	d
FMT_MAKE_ARG	amun/3rd_party/spdlog/details/format.h	2506;"	d
FMT_MAKE_ARG	amun/3rd_party/spdlog/fmt/bundled/format.h	2719;"	d
FMT_MAKE_ARG_TYPE	amun/3rd_party/spdlog/details/format.h	2505;"	d
FMT_MAKE_ARG_TYPE	amun/3rd_party/spdlog/fmt/bundled/format.h	2718;"	d
FMT_MAKE_STR_VALUE	amun/3rd_party/spdlog/details/format.h	1453;"	d
FMT_MAKE_STR_VALUE	amun/3rd_party/spdlog/fmt/bundled/format.h	1606;"	d
FMT_MAKE_TEMPLATE_ARG	amun/3rd_party/spdlog/details/format.h	2504;"	d
FMT_MAKE_TEMPLATE_ARG	amun/3rd_party/spdlog/fmt/bundled/format.h	2717;"	d
FMT_MAKE_VALUE	amun/3rd_party/spdlog/details/format.h	1397;"	d
FMT_MAKE_VALUE	amun/3rd_party/spdlog/fmt/bundled/format.h	1550;"	d
FMT_MAKE_VALUE_	amun/3rd_party/spdlog/details/format.h	1393;"	d
FMT_MAKE_VALUE_	amun/3rd_party/spdlog/fmt/bundled/format.h	1546;"	d
FMT_MAKE_WSTR_VALUE	amun/3rd_party/spdlog/details/format.h	1465;"	d
FMT_MAKE_WSTR_VALUE	amun/3rd_party/spdlog/fmt/bundled/format.h	1620;"	d
FMT_MSC_VER	amun/3rd_party/spdlog/fmt/bundled/format.h	57;"	d
FMT_MSC_VER	amun/3rd_party/spdlog/fmt/bundled/format.h	59;"	d
FMT_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	/^                                  fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	/^                                 fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	191;"	d
FMT_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	193;"	d
FMT_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	196;"	d
FMT_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^                                  fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	196;"	d
FMT_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	198;"	d
FMT_NULL	amun/3rd_party/spdlog/fmt/bundled/format.h	224;"	d
FMT_NULL	amun/3rd_party/spdlog/fmt/bundled/format.h	226;"	d
FMT_OSTREAM_H_	amun/3rd_party/spdlog/fmt/bundled/ostream.h	11;"	d
FMT_OVERRIDE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FMT_API void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:fmt::internal::FixedBuffer
FMT_OVERRIDE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:fmt::internal::MemoryBuffer
FMT_OVERRIDE	amun/3rd_party/spdlog/fmt/bundled/format.h	214;"	d
FMT_OVERRIDE	amun/3rd_party/spdlog/fmt/bundled/format.h	216;"	d
FMT_POWERS_OF_10	amun/3rd_party/spdlog/details/format.cc	568;"	d	file:
FMT_POWERS_OF_10	amun/3rd_party/spdlog/fmt/bundled/format.cc	292;"	d	file:
FMT_PRINTF_H_	amun/3rd_party/spdlog/fmt/bundled/printf.h	11;"	d
FMT_SECURE_SCL	amun/3rd_party/spdlog/details/format.h	60;"	d
FMT_SECURE_SCL	amun/3rd_party/spdlog/details/format.h	62;"	d
FMT_SECURE_SCL	amun/3rd_party/spdlog/fmt/bundled/format.h	47;"	d
FMT_SECURE_SCL	amun/3rd_party/spdlog/fmt/bundled/format.h	49;"	d
FMT_SNPRINTF	amun/3rd_party/spdlog/details/format.cc	93;"	d	file:
FMT_SNPRINTF	amun/3rd_party/spdlog/fmt/bundled/format.cc	95;"	d	file:
FMT_SPECIALIZE_MAKE_UNSIGNED	amun/3rd_party/spdlog/details/format.h	626;"	d
FMT_SPECIALIZE_MAKE_UNSIGNED	amun/3rd_party/spdlog/fmt/bundled/format.h	673;"	d
FMT_STATIC_ASSERT	amun/3rd_party/spdlog/fmt/bundled/format.h	1474;"	d
FMT_STATIC_ASSERT	amun/3rd_party/spdlog/fmt/bundled/format.h	1477;"	d
FMT_SWPRINTF	amun/3rd_party/spdlog/details/format.cc	107;"	d	file:
FMT_SWPRINTF	amun/3rd_party/spdlog/fmt/bundled/format.cc	109;"	d	file:
FMT_THROW	amun/3rd_party/spdlog/details/format.h	175;"	d
FMT_THROW	amun/3rd_party/spdlog/details/format.h	177;"	d
FMT_THROW	amun/3rd_party/spdlog/fmt/bundled/format.h	175;"	d
FMT_THROW	amun/3rd_party/spdlog/fmt/bundled/format.h	177;"	d
FMT_TRY	amun/3rd_party/spdlog/details/format.cc	56;"	d	file:
FMT_TRY	amun/3rd_party/spdlog/fmt/bundled/format.cc	56;"	d	file:
FMT_UNUSED	amun/3rd_party/spdlog/fmt/bundled/format.h	1463;"	d
FMT_UNUSED	amun/3rd_party/spdlog/fmt/bundled/format.h	1465;"	d
FMT_USE_DELETED_FUNCTIONS	amun/3rd_party/spdlog/details/format.h	203;"	d
FMT_USE_DELETED_FUNCTIONS	amun/3rd_party/spdlog/fmt/bundled/format.h	233;"	d
FMT_USE_EXTERN_TEMPLATES	amun/3rd_party/spdlog/fmt/bundled/format.h	265;"	d
FMT_USE_EXTERN_TEMPLATES	amun/3rd_party/spdlog/fmt/bundled/format.h	272;"	d
FMT_USE_EXTERN_TEMPLATES	amun/3rd_party/spdlog/fmt/bundled/format.h	273;"	d
FMT_USE_IOSTREAMS	amun/3rd_party/spdlog/details/format.h	52;"	d
FMT_USE_NOEXCEPT	amun/3rd_party/spdlog/details/format.h	183;"	d
FMT_USE_NOEXCEPT	amun/3rd_party/spdlog/fmt/bundled/format.h	183;"	d
FMT_USE_RVALUE_REFERENCES	amun/3rd_party/spdlog/details/format.h	150;"	d
FMT_USE_RVALUE_REFERENCES	amun/3rd_party/spdlog/details/format.h	152;"	d
FMT_USE_RVALUE_REFERENCES	amun/3rd_party/spdlog/fmt/bundled/format.h	150;"	d
FMT_USE_RVALUE_REFERENCES	amun/3rd_party/spdlog/fmt/bundled/format.h	152;"	d
FMT_USE_STATIC_ASSERT	amun/3rd_party/spdlog/fmt/bundled/format.h	1469;"	d
FMT_USE_USER_DEFINED_LITERALS	amun/3rd_party/spdlog/details/format.h	223;"	d
FMT_USE_USER_DEFINED_LITERALS	amun/3rd_party/spdlog/fmt/bundled/format.h	254;"	d
FMT_USE_VARIADIC_TEMPLATES	amun/3rd_party/spdlog/details/format.h	141;"	d
FMT_USE_VARIADIC_TEMPLATES	amun/3rd_party/spdlog/fmt/bundled/format.h	141;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/details/format.h	1064;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/details/format.h	1066;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/details/format.h	37;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/fmt/bundled/format.h	1178;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/fmt/bundled/format.h	1180;"	d
FMT_USE_WINDOWS_H	amun/3rd_party/spdlog/fmt/fmt.h	19;"	d
FMT_VARIADIC_CTOR	amun/3rd_party/spdlog/details/format.h	2524;"	d
FMT_VARIADIC_CTOR	amun/3rd_party/spdlog/fmt/bundled/format.h	2737;"	d
FMT_VARIADIC_VOID	amun/3rd_party/spdlog/details/format.h	2514;"	d
FMT_VARIADIC_VOID	amun/3rd_party/spdlog/fmt/bundled/format.h	2727;"	d
FMT_VERSION	amun/3rd_party/spdlog/fmt/bundled/format.h	44;"	d
FMeasureCommand	amun/3rd_party/fast_align/src/atools.cc	/^  FMeasureCommand() : matches(), num_predicted(), num_in_ref() {}$/;"	f	struct:FMeasureCommand
FMeasureCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct FMeasureCommand : public Command {$/;"	s	file:
FOLD	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	g	namespace:YAML
FOLD_BLOCK	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
FOLD_FLOW	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
FPGA	amun/fpga/array.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/best_hyps.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/best_hyps.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/decoder.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/decoder.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/encoder.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/encoder.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/encoder_decoder.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/encoder_decoder.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/encoder_decoder_loader.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/encoder_decoder_loader.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/encoder_decoder_state.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/encoder_decoder_state.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/gru.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/hello_world.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/hello_world.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/kernel.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/kernel.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/matrix.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/matrix.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/matrix_functions.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/matrix_functions.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/model.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/model.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/npz_converter.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/npz_converter.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGA	amun/fpga/nth_element.cpp	/^namespace FPGA {$/;"	n	namespace:amunmt	file:
FPGA	amun/fpga/nth_element.h	/^namespace FPGA {$/;"	n	namespace:amunmt
FPGADevice	amun/common/types.h	/^	FPGADevice = 13$/;"	e	enum:amunmt::DeviceType
FPUtil	amun/3rd_party/spdlog/details/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal
FPUtil	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal
F_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor F_;$/;"	m	class:amunmt::GPU::SlowLSTM
F_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class F_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
FactWord	amun/common/types.h	/^typedef std::vector<Factor> FactWord;$/;"	t	namespace:amunmt
FactWords	amun/common/types.h	/^typedef std::vector<FactWord> FactWords;$/;"	t	namespace:amunmt
Factor	amun/common/types.h	/^typedef unsigned Factor;$/;"	t	namespace:amunmt
FactorCount	amun/gpu/dl4mt/encoder.h	/^        unsigned FactorCount() {$/;"	f	class:amunmt::GPU::Encoder::Embeddings
FactorVocab	amun/common/factor_vocab.cpp	/^  FactorVocab::FactorVocab(const std::string& path) {$/;"	f	class:amunmt::FactorVocab
FactorVocab	amun/common/factor_vocab.cpp	/^  FactorVocab::FactorVocab(const std::vector<std::string>& paths) {$/;"	f	class:amunmt::FactorVocab
FactorVocab	amun/common/factor_vocab.h	/^class FactorVocab {$/;"	c	namespace:amunmt
Failure	amun/3rd_party/blaze/math/traits/AddExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::AddExprTrait
Failure	amun/3rd_party/blaze/math/traits/CTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::CTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/ColumnExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::ColumnExprTrait
Failure	amun/3rd_party/blaze/math/traits/ColumnTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::ColumnTrait
Failure	amun/3rd_party/blaze/math/traits/CrossExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::CrossExprTrait
Failure	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^   struct Failure { typedef INVALID_TYPE  Type; };$/;"	s	struct:blaze::DMatCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/DVecCTransExprTrait.h	/^   struct Failure { typedef INVALID_TYPE  Type; };$/;"	s	struct:blaze::DVecCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/DivExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::DivExprTrait
Failure	amun/3rd_party/blaze/math/traits/EvalExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::EvalExprTrait
Failure	amun/3rd_party/blaze/math/traits/ForEachExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::ForEachExprTrait
Failure	amun/3rd_party/blaze/math/traits/ForEachTrait.h	/^   struct Failure {$/;"	s	struct:blaze::ForEachTrait
Failure	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^   struct Failure {$/;"	s	struct:blaze::ImagTrait
Failure	amun/3rd_party/blaze/math/traits/InvExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::InvExprTrait
Failure	amun/3rd_party/blaze/math/traits/MathTrait.h	/^   struct Failure {$/;"	s	struct:blaze::MathTrait
Failure	amun/3rd_party/blaze/math/traits/MultExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::MultExprTrait
Failure	amun/3rd_party/blaze/math/traits/RealTrait.h	/^   struct Failure {$/;"	s	struct:blaze::RealTrait
Failure	amun/3rd_party/blaze/math/traits/RowExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::RowExprTrait
Failure	amun/3rd_party/blaze/math/traits/RowTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::RowTrait
Failure	amun/3rd_party/blaze/math/traits/SMatCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SMatCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/SVecCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SVecCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/SerialExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SerialExprTrait
Failure	amun/3rd_party/blaze/math/traits/SubExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SubExprTrait
Failure	amun/3rd_party/blaze/math/traits/SubmatrixExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SubmatrixExprTrait
Failure	amun/3rd_party/blaze/math/traits/SubmatrixTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SubmatrixTrait
Failure	amun/3rd_party/blaze/math/traits/SubvectorExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SubvectorExprTrait
Failure	amun/3rd_party/blaze/math/traits/SubvectorTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::SubvectorTrait
Failure	amun/3rd_party/blaze/math/traits/TDMatCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::TDMatCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/TDVecCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::TDVecCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/TSMatCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::TSMatCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/TSVecCTransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::TSVecCTransExprTrait
Failure	amun/3rd_party/blaze/math/traits/TransExprTrait.h	/^   struct Failure { using Type = INVALID_TYPE; };$/;"	s	struct:blaze::TransExprTrait
False	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct False$/;"	s	namespace:fmt::internal
FastGRU	amun/fpga/gru.h	/^  FastGRU(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::FastGRU
FastGRU	amun/fpga/gru.h	/^class FastGRU {$/;"	c	namespace:amunmt::FPGA
FastGRU	amun/gpu/dl4mt/gru.h	/^    FastGRU(const Weights& model)$/;"	f	class:amunmt::GPU::FastGRU
FastGRU	amun/gpu/dl4mt/gru.h	/^class FastGRU: public Cell {$/;"	c	namespace:amunmt::GPU
Feature	amun/3rd_party/fast_align/src/da.h	/^  inline static double Feature(const unsigned i, const unsigned j, const unsigned m, const unsigned n) {$/;"	f	struct:DiagonalAlignment
FileOpenException	amun/3rd_party/extract_lex/exception.h	/^	FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
FileOpenException	amun/3rd_party/extract_lex/exception.h	/^class FileOpenException : public Exception {$/;"	c	namespace:util
FileOpenException	amun/common/exception.h	/^	FileOpenException() throw() {}$/;"	f	class:amunmt::util::FileOpenException
FileOpenException	amun/common/exception.h	/^class FileOpenException : public Exception {$/;"	c	namespace:amunmt::util
Fill	amun/fpga/matrix_functions.cpp	/^void Fill($/;"	f	namespace:amunmt::FPGA::mblas
FillDummyFactors	amun/common/sentence.cpp	/^void Sentence::FillDummyFactors(const Words& line) {$/;"	f	class:amunmt::Sentence
Filter	amun/common/filter.cpp	/^Filter::Filter(const Vocab& srcVocab,$/;"	f	class:amunmt::Filter
Filter	amun/common/filter.cpp	/^Filter::Filter(const unsigned numFirstWords) : numFirstWords_(numFirstWords) {}$/;"	f	class:amunmt::Filter
Filter	amun/common/filter.h	/^class Filter {$/;"	c	namespace:amunmt
Filter	amun/cpu/dl4mt/decoder.h	/^        void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Softmax
Filter	amun/cpu/dl4mt/decoder.h	/^    void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder
Filter	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::Filter(const std::vector<unsigned>& filterIds) {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
Filter	amun/cpu/nematus/decoder.h	/^        void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Softmax
Filter	amun/cpu/nematus/decoder.h	/^    void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::Nematus::Decoder
Filter	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::Filter(const std::vector<unsigned>& filterIds) {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
Filter	amun/fpga/encoder_decoder.cpp	/^void EncoderDecoder::Filter(const std::vector<uint>&)$/;"	f	class:amunmt::FPGA::EncoderDecoder
Filter	amun/gpu/decoder/ape_penalty.h	/^	  void Filter(const std::vector<size_t>&) {}$/;"	f	class:GPU::ApePenalty
Filter	amun/gpu/dl4mt/decoder.h	/^        void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::GPU::Decoder::Softmax
Filter	amun/gpu/dl4mt/decoder.h	/^    void Filter(const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::GPU::Decoder
FilterPtr	amun/common/filter.h	/^typedef std::unique_ptr<Filter> FilterPtr;$/;"	t	namespace:amunmt
FilterTargetVocab	amun/common/search.cpp	/^void Search::FilterTargetVocab(const Sentences& sentences) {$/;"	f	class:amunmt::Search
FilteredB4_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor FilteredB4_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
FilteredB4_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor FilteredB4_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
FilteredB4_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor FilteredB4_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
FilteredW4_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor FilteredW4_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
FilteredW4_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor FilteredW4_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
FilteredW4_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor FilteredW4_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
FindBestBigram	amun/common/processor/bpe.cpp	/^const BPE::BPEPair* BPE::FindBestBigram(const std::set<BPEPair>& pairs) const {$/;"	f	class:amunmt::BPE
FindBests	amun/fpga/best_hyps.cpp	/^void BestHyps::FindBests(const std::vector<uint>& beamSizes, mblas::Tensor& Probs,$/;"	f	class:amunmt::FPGA::BestHyps
FixedBuffer	amun/3rd_party/spdlog/details/format.h	/^    FixedBuffer(Char *array, std::size_t size): fmt::Buffer<Char>(array, size)$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	amun/3rd_party/spdlog/details/format.h	/^class FixedBuffer: public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
FixedBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FixedBuffer(Char *array, std::size_t size): fmt::Buffer<Char>(array, size)$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class FixedBuffer: public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
FloatPrecision	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision FloatPrecision(int n) { return _Precision(n, -1); }$/;"	f	namespace:YAML
Floor	amun/3rd_party/blaze/math/functors/Floor.h	/^struct Floor$/;"	s	namespace:blaze
Flow	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Flow,$/;"	e	enum:YAML::EMITTER_MANIP
Flow	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
Flow	amun/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
FlowEntry	amun/3rd_party/yaml-cpp/exp.h	/^const char FlowEntry = ',';$/;"	m	namespace:YAML::Keys
FlowMap	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
FlowMap	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
FlowMapEnd	amun/3rd_party/yaml-cpp/exp.h	/^const char FlowMapEnd = '}';$/;"	m	namespace:YAML::Keys
FlowMapPrepareLongKey	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareLongKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareLongKeyValue	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareLongKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareSimpleKey	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareSimpleKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareSimpleKeyValue	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareSimpleKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapStart	amun/3rd_party/yaml-cpp/exp.h	/^const char FlowMapStart = '{';$/;"	m	namespace:YAML::Keys
FlowSeq	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
FlowSeq	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
FlowSeqEnd	amun/3rd_party/yaml-cpp/exp.h	/^const char FlowSeqEnd = ']';$/;"	m	namespace:YAML::Keys
FlowSeqPrepareNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowSeqPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowSeqStart	amun/3rd_party/yaml-cpp/exp.h	/^const char FlowSeqStart = '[';$/;"	m	namespace:YAML::Keys
FlowType	amun/3rd_party/yaml-cpp/emitterstate.h	/^struct FlowType {$/;"	s	namespace:YAML
FmtScope	amun/3rd_party/yaml-cpp/emitterstate.h	/^struct FmtScope {$/;"	s	namespace:YAML
FoldedScalar	amun/3rd_party/yaml-cpp/exp.h	/^const char FoldedScalar = '>';$/;"	m	namespace:YAML::Keys
ForEachExpr	amun/3rd_party/blaze/math/expressions/ForEachExpr.h	/^struct ForEachExpr : private Expression$/;"	s	namespace:blaze
ForEachExprTrait	amun/3rd_party/blaze/math/traits/ForEachExprTrait.h	/^struct ForEachExprTrait$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct ForEachTrait< DiagonalMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Acos >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Acosh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Cbrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Cos >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Cosh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Erfc >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Exp >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, InvCbrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, InvSqrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Log >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Log10 >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Pow<ET> >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Sqrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct ForEachTrait< HermitianMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct ForEachTrait< LowerMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct ForEachTrait< StrictlyLowerMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct ForEachTrait< StrictlyUpperMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Acos >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Acosh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Cbrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Cos >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Cosh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Erfc >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Exp >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, InvCbrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Log >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Log10 >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Pow<ET> >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Sqrt >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct ForEachTrait< SymmetricMatrix<MT,SO,DF,NF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct ForEachTrait< UniLowerMatrix<MT,SO,DF>, Pow<ET> >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct ForEachTrait< UniUpperMatrix<MT,SO,DF>, Pow<ET> >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Abs >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Asin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Asinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Atan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Atanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Ceil >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Conj >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Erf >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Floor >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Imag >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Real >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Sin >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Sinh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Tan >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct ForEachTrait< UpperMatrix<MT,SO,DF>, Tanh >$/;"	s	namespace:blaze
ForEachTrait	amun/3rd_party/blaze/math/traits/ForEachTrait.h	/^struct ForEachTrait$/;"	s	namespace:blaze
ForceFlow	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::ForceFlow() {$/;"	f	class:YAML::EmitterState
FormatBuf	amun/3rd_party/spdlog/details/format.h	/^    FormatBuf(Buffer<Char> &buffer): buffer_(buffer), start_(&buffer[0])$/;"	f	class:fmt::FormatBuf
FormatBuf	amun/3rd_party/spdlog/details/format.h	/^class FormatBuf: public std::basic_streambuf<Char>$/;"	c	namespace:fmt
FormatBuf	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    FormatBuf(Buffer<Char> &buffer): buffer_(buffer), start_(&buffer[0])$/;"	f	class:fmt::internal::FormatBuf
FormatBuf	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^class FormatBuf: public std::basic_streambuf<Char>$/;"	c	namespace:fmt::internal
FormatError	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	amun/3rd_party/spdlog/details/format.h	/^class FormatError: public std::runtime_error$/;"	c	namespace:fmt
FormatError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FormatError(const FormatError &ferr): std::runtime_error(ferr)$/;"	f	class:fmt::FormatError
FormatError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class FormatError: public std::runtime_error$/;"	c	namespace:fmt
FormatFunc	amun/3rd_party/spdlog/details/format.cc	/^		typedef void(*FormatFunc)(fmt::Writer &, int, fmt::StringRef);$/;"	t	namespace:fmt::__anon30	file:
FormatFunc	amun/3rd_party/spdlog/details/format.h	/^    typedef void(*FormatFunc)($/;"	t	struct:fmt::internal::Value
FormatFunc	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^		typedef void(*FormatFunc)(Writer &, int, StringRef);$/;"	t	namespace:fmt::__anon64	file:
FormatFunc	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef void(*FormatFunc)($/;"	t	struct:fmt::internal::Value
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(ULongLong value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(unsigned long value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(unsigned value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/details/format.h	/^class FormatInt$/;"	c
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(ULongLong value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned long value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class FormatInt$/;"	c
FormatSigned	amun/3rd_party/spdlog/details/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSigned	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSpec	amun/3rd_party/spdlog/details/format.h	/^    FormatSpec($/;"	f	struct:fmt::FormatSpec
FormatSpec	amun/3rd_party/spdlog/details/format.h	/^struct FormatSpec: AlignSpec$/;"	s	namespace:fmt
FormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FormatSpec($/;"	f	struct:fmt::FormatSpec
FormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct FormatSpec: AlignSpec$/;"	s	namespace:fmt
FormatterBase	amun/3rd_party/spdlog/details/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	amun/3rd_party/spdlog/details/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
FormatterBase	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
FreeObject	amun/3rd_party/blaze/util/MemoryPool.h	/^   union FreeObject {$/;"	u	class:blaze::MemoryPool
Freeze	amun/3rd_party/fast_align/src/ttables.h	/^  void Freeze() {$/;"	f	class:TTable
FunctionTrace	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^class FunctionTrace : private NonCopyable$/;"	c	namespace:blaze::logging
GDCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct GDCommand : public DiagCommand {$/;"	s	file:
GDFACommand	amun/3rd_party/fast_align/src/atools.cc	/^struct GDFACommand : public DiagCommand {$/;"	s	file:
GDFCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct GDFCommand : public DiagCommand {$/;"	s	file:
GPU	amun/gpu/decoder/ape_penalty.h	/^namespace GPU {$/;"	n
GPU	amun/gpu/decoder/best_hyps.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/decoder/class_language_model.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/decoder/encoder_decoder.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/decoder/encoder_decoder_loader.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/decoder/encoder_decoder_state.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/cell.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/cellstate.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/decoder.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/encoder.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/gru.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/lstm.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/model.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/dl4mt/multiplicative.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/handles.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/nth_element.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/nth_element_kernels.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/tensor.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/tensor_functions.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/tensor_wrapper.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/vector.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/mblas/vector_wrapper.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/npz_converter.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPU	amun/gpu/types-gpu.h	/^namespace GPU {$/;"	n	namespace:amunmt
GPUDevice	amun/common/types.h	/^	GPUDevice = 11,$/;"	e	enum:amunmt::DeviceType
GRAPHBUILDERADAPTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	2;"	d
GRAPHBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	2;"	d
GREEN	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
GREEN	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
GRU	amun/cpu/dl4mt/gru.h	/^    GRU(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::GRU
GRU	amun/cpu/dl4mt/gru.h	/^class GRU {$/;"	c	namespace:amunmt::CPU::dl4mt
GRU	amun/cpu/dl4mt/model.cpp	/^Weights::GRU::GRU(const NpzConverter& model, const std::vector<std::string> &keys)$/;"	f	class:amunmt::CPU::dl4mt::Weights::GRU
GRU	amun/cpu/dl4mt/model.h	/^  struct GRU {$/;"	s	struct:amunmt::CPU::dl4mt::Weights
GRU	amun/cpu/nematus/gru.h	/^    GRU(const Weights& model)$/;"	f	class:amunmt::CPU::GRU
GRU	amun/cpu/nematus/gru.h	/^class GRU {$/;"	c	namespace:amunmt::CPU
GRU	amun/cpu/nematus/model.cpp	/^Weights::GRU::GRU(const NpzConverter& model, std::string prefix, std::vector<std::string> keys)$/;"	f	class:amunmt::CPU::Nematus::Weights::GRU
GRU	amun/cpu/nematus/model.h	/^  struct GRU {$/;"	s	struct:amunmt::CPU::Nematus::Weights
Gamma_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecInit
Gamma_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_;$/;"	m	struct:amunmt::FPGA::Weights::DecInit
Gamma_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_;$/;"	m	struct:amunmt::GPU::Weights::DecInit
Gamma_0_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_0_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
Gamma_0_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_0_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
Gamma_0_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_0_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
Gamma_1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
Gamma_1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Gamma_1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
Gamma_1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Gamma_1_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_1_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM1
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM2
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardLSTM
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Gamma_1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_1_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardLSTM
Gamma_2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
Gamma_2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Gamma_2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
Gamma_2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Gamma_2_	amun/fpga/model.h	/^    const mblas::Tensor Gamma_2_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM1
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM2
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardLSTM
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Gamma_2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Gamma_2_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardLSTM
Get	amun/3rd_party/yaml-cpp/contrib/anchordict.h	/^  T Get(anchor_t anchor) const { return m_data[anchor - 1]; }$/;"	f	class:YAML::AnchorDict
Get	amun/common/config.cpp	/^YAML::Node Config::Get(const std::string& key) const {$/;"	f	class:amunmt::Config
Get	amun/common/config.cpp	/^const YAML::Node& Config::Get() const {$/;"	f	class:amunmt::Config
Get	amun/common/config.h	/^    T Get(const std::string& key) const {$/;"	f	class:amunmt::Config
Get	amun/common/god.h	/^    T Get(const std::string& key) const {$/;"	f	class:amunmt::God
Get	amun/common/god.h	/^    YAML::Node Get(const std::string& key) const {$/;"	f	class:amunmt::God
Get	amun/common/loader.h	/^    T Get(const std::string& key) const {$/;"	f	class:amunmt::Loader
Get	amun/common/sentences.cpp	/^const Sentence &Sentences::Get(unsigned id) const$/;"	f	class:amunmt::Sentences
Get	amun/fpga/array.h	/^  void Get(T *arr, size_t size) const$/;"	f	class:amunmt::FPGA::Array
GetActive	amun/common/history.cpp	/^bool History::GetActive() const$/;"	f	class:amunmt::History
GetAlignedSourceContext	amun/cpu/dl4mt/decoder.h	/^        void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Attention
GetAlignedSourceContext	amun/cpu/dl4mt/decoder.h	/^    void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetAlignedSourceContext	amun/cpu/nematus/decoder.h	/^        void GetAlignedSourceContext($/;"	f	class:amunmt::CPU::Nematus::Decoder::Attention
GetAlignedSourceContext	amun/cpu/nematus/decoder.h	/^    void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetAlignedSourceContext	amun/fpga/decoder.cpp	/^void Decoder::GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::FPGA::Decoder
GetAlignedSourceContext	amun/fpga/decoder.h	/^    void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::FPGA::Decoder::Alignment
GetAlignedSourceContext	amun/gpu/dl4mt/decoder.h	/^        void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::GPU::Decoder::Alignment
GetAlignedSourceContext	amun/gpu/dl4mt/decoder.h	/^    void GetAlignedSourceContext(mblas::Tensor& AlignedSourceContext,$/;"	f	class:amunmt::GPU::Decoder
GetAlignment	amun/common/hypothesis.h	/^    SoftAlignmentPtr GetAlignment(unsigned i) {$/;"	f	class:amunmt::Hypothesis
GetAlignment	amun/common/printer.cpp	/^std::vector<unsigned> GetAlignment(const HypothesisPtr& hypothesis) {$/;"	f	namespace:amunmt
GetAlignmentString	amun/common/printer.cpp	/^std::string GetAlignmentString(const std::vector<unsigned>& alignment) {$/;"	f	namespace:amunmt
GetAlignments	amun/common/hypothesis.h	/^    std::vector<SoftAlignmentPtr>& GetAlignments() {$/;"	f	class:amunmt::Hypothesis
GetAttention	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Attention
GetAttention	amun/cpu/dl4mt/decoder.h	/^        void GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Attention
GetAttention	amun/cpu/dl4mt/decoder.h	/^    mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetAttention	amun/cpu/dl4mt/decoder.h	/^    void GetAttention(mblas::Tensor& attention) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetAttention	amun/cpu/dl4mt/encoder_decoder.cpp	/^mblas::Tensor& EncoderDecoder::GetAttention() {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
GetAttention	amun/cpu/dl4mt/encoder_decoder.cpp	/^void EncoderDecoder::GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
GetAttention	amun/cpu/nematus/decoder.h	/^        mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Attention
GetAttention	amun/cpu/nematus/decoder.h	/^        void GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Attention
GetAttention	amun/cpu/nematus/decoder.h	/^    mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetAttention	amun/cpu/nematus/decoder.h	/^    void GetAttention(mblas::Tensor& attention) {$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetAttention	amun/cpu/nematus/encoder_decoder.cpp	/^mblas::Tensor& EncoderDecoder::GetAttention() {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
GetAttention	amun/cpu/nematus/encoder_decoder.cpp	/^void EncoderDecoder::GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
GetAttention	amun/fpga/decoder.h	/^    mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::FPGA::Decoder::Alignment
GetAttention	amun/fpga/decoder.h	/^  mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::FPGA::Decoder
GetAttention	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::GPU::Decoder::Alignment
GetAttention	amun/gpu/dl4mt/decoder.h	/^        void GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::GPU::Decoder::Alignment
GetAttention	amun/gpu/dl4mt/decoder.h	/^    mblas::Tensor& GetAttention() {$/;"	f	class:amunmt::GPU::Decoder
GetAttention	amun/gpu/dl4mt/decoder.h	/^    void GetAttention(mblas::Tensor& Attention) {$/;"	f	class:amunmt::GPU::Decoder
GetBatchInput	amun/fpga/encoder.cpp	/^std::vector<std::vector<size_t>> GetBatchInput(const Sentences& source, size_t tab, size_t maxLen) {$/;"	f	namespace:amunmt::FPGA
GetBestHyps	amun/common/god.cpp	/^BaseBestHypsPtr God::GetBestHyps(const DeviceInfo &deviceInfo) const {$/;"	f	class:amunmt::God
GetBestHyps	amun/cpu/decoder/encoder_decoder_loader.cpp	/^BaseBestHypsPtr EncoderDecoderLoader::GetBestHyps(const God &god, const DeviceInfo &deviceInfo) const {$/;"	f	class:amunmt::CPU::EncoderDecoderLoader
GetBestHyps	amun/fpga/encoder_decoder_loader.cpp	/^BaseBestHypsPtr EncoderDecoderLoader::GetBestHyps(const God &god, const DeviceInfo &deviceInfo) const$/;"	f	class:amunmt::FPGA::EncoderDecoderLoader
GetBias	amun/cpu/decoder/encoder_decoder.h	/^    virtual const BaseTensor *GetBias() const$/;"	f	class:amunmt::CPU::CPUEncoderDecoderBase
GetBias	amun/gpu/dl4mt/decoder.h	/^    const mblas::Tensor *GetBias() const {$/;"	f	class:amunmt::GPU::Decoder
GetBoolCaseFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolCaseFormat() const { return m_boolCaseFmt.get(); }$/;"	f	class:YAML::EmitterState
GetBoolFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolFormat() const { return m_boolFmt.get(); }$/;"	f	class:YAML::EmitterState
GetBoolLengthFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolLengthFormat() const { return m_boolLengthFmt.get(); }$/;"	f	class:YAML::EmitterState
GetColl	amun/3rd_party/extract_lex/extract-lex.h	/^  const std::map<const std::string*, WordCount> &GetColl() const {$/;"	f	class:extract::WordCount
GetColl	amun/3rd_party/extract_lex/extract-lex.h	/^  std::map<const std::string*, WordCount> &GetColl() {$/;"	f	class:extract::WordCount
GetCols	amun/cpu/dl4mt/decoder.h	/^        size_t GetCols() {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Embeddings
GetCols	amun/cpu/nematus/decoder.h	/^        size_t GetCols() {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Embeddings
GetCols	amun/fpga/decoder.h	/^    size_t GetCols() {$/;"	f	class:amunmt::FPGA::Decoder::Embeddings
GetCols	amun/gpu/dl4mt/decoder.h	/^        unsigned GetCols() {$/;"	f	class:amunmt::GPU::Decoder::Embeddings
GetContext	amun/cpu/nematus/encoder.cpp	/^void Encoder::GetContext(const std::vector<unsigned>& words, mblas::Tensor& context) {$/;"	f	class:amunmt::CPU::Nematus::Encoder
GetContext	amun/cpu/nematus/encoder.h	/^        void GetContext(It it, It end, mblas::Tensor& Context, bool invert) {$/;"	f	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
GetCost	amun/common/hypothesis.h	/^    float GetCost() const {$/;"	f	class:amunmt::Hypothesis
GetCostBreakdown	amun/common/hypothesis.h	/^    std::vector<float>& GetCostBreakdown() {$/;"	f	class:amunmt::Hypothesis
GetCount	amun/3rd_party/extract_lex/extract-lex.h	/^  const float GetCount() const {$/;"	f	class:extract::WordCount
GetCurCollectionType	amun/3rd_party/yaml-cpp/collectionstack.h	/^  CollectionType::value GetCurCollectionType() const {$/;"	f	class:YAML::CollectionStack
GetCurrentParent	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void *GraphBuilderAdapter::GetCurrentParent() const {$/;"	f	class:YAML::GraphBuilderAdapter
GetDevice	amun/cpu/dl4mt/model.h	/^  size_t GetDevice() {$/;"	f	struct:amunmt::CPU::dl4mt::Weights
GetDevice	amun/cpu/nematus/model.h	/^  size_t GetDevice() {$/;"	f	struct:amunmt::CPU::Nematus::Weights
GetDevice	amun/gpu/dl4mt/model.h	/^  unsigned GetDevice() {$/;"	f	struct:amunmt::GPU::Weights
GetDoublePrecision	amun/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::GetDoublePrecision() const {$/;"	f	class:YAML::Emitter
GetDoublePrecision	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetDoublePrecision() const { return m_doublePrecision.get(); }$/;"	f	class:YAML::EmitterState
GetEmbeddings	amun/cpu/decoder/encoder_decoder_state.cpp	/^CPU::mblas::Tensor& EncoderDecoderState::GetEmbeddings() {$/;"	f	class:amunmt::CPU::EncoderDecoderState
GetEmbeddings	amun/cpu/decoder/encoder_decoder_state.cpp	/^const CPU::mblas::Tensor& EncoderDecoderState::GetEmbeddings() const {$/;"	f	class:amunmt::CPU::EncoderDecoderState
GetEmbeddings	amun/fpga/encoder_decoder_state.cpp	/^const mblas::Tensor& EncoderDecoderState::GetEmbeddings() const {$/;"	f	class:amunmt::FPGA::EncoderDecoderState
GetEmbeddings	amun/fpga/encoder_decoder_state.cpp	/^mblas::Tensor& EncoderDecoderState::GetEmbeddings() {$/;"	f	class:amunmt::FPGA::EncoderDecoderState
GetFactors	amun/common/sentence.cpp	/^const FactWords& Sentence::GetFactors(unsigned index) const {$/;"	f	class:amunmt::Sentence
GetFilter	amun/common/god.cpp	/^std::shared_ptr<const Filter> God::GetFilter() const {$/;"	f	class:amunmt::God
GetFilteredVocab	amun/common/filter.h	/^    Words GetFilteredVocab(const T& srcWords, const unsigned maxVocabSize) const {$/;"	f	class:amunmt::Filter
GetFirstHyps	amun/common/histories.h	/^    Beam GetFirstHyps() {$/;"	f	class:amunmt::Histories
GetFloatPrecision	amun/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::GetFloatPrecision() const {$/;"	f	class:YAML::Emitter
GetFloatPrecision	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetFloatPrecision() const { return m_floatPrecision.get(); }$/;"	f	class:YAML::EmitterState
GetFlowLevel	amun/3rd_party/yaml-cpp/scanner.h	/^  std::size_t GetFlowLevel() const { return m_flows.size(); }$/;"	f	class:YAML::Scanner
GetFlowType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^EMITTER_MANIP EmitterState::GetFlowType(GroupType::value groupType) const {$/;"	f	class:YAML::EmitterState
GetGod	amun/plugin/nmt.h	/^    const amunmt::God &GetGod() const$/;"	f	class:amunmt::MosesPlugin
GetHandle	amun/gpu/mblas/handles.h	/^    static cublasHandle_t &GetHandle() {$/;"	f	class:amunmt::GPU::mblas::CublasHandler
GetHiddenState	amun/cpu/dl4mt/decoder.h	/^    void GetHiddenState(mblas::Tensor& HiddenState,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetHiddenState	amun/cpu/nematus/decoder.h	/^    void GetHiddenState(mblas::Tensor& HiddenState,$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetHiddenState	amun/fpga/decoder.cpp	/^void Decoder::GetHiddenState(mblas::Tensor& HiddenState,$/;"	f	class:amunmt::FPGA::Decoder
GetHiddenState	amun/gpu/dl4mt/decoder.h	/^    void GetHiddenState(CellState& HiddenState,$/;"	f	class:amunmt::GPU::Decoder
GetIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  int GetIndent() const { return m_indent.get(); }$/;"	f	class:YAML::EmitterState
GetIndex	amun/plugin/nbest.h	/^    size_t GetIndex(const size_t index) const {$/;"	f	class:NBest
GetInputStream	amun/common/god.cpp	/^std::istream& God::GetInputStream() const {$/;"	f	class:amunmt::God
GetIntFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetIntFormat() const { return m_intFmt.get(); }$/;"	f	class:YAML::EmitterState
GetLastError	amun/3rd_party/yaml-cpp/emitter.cpp	/^const std::string Emitter::GetLastError() const {$/;"	f	class:YAML::Emitter
GetLastError	amun/3rd_party/yaml-cpp/emitterstate.h	/^  const std::string GetLastError() const { return m_lastError; }$/;"	f	class:YAML::EmitterState
GetLineNum	amun/common/history.h	/^    unsigned GetLineNum() const$/;"	f	class:amunmt::History
GetLineNum	amun/common/sentence.cpp	/^unsigned Sentence::GetLineNum() const {$/;"	f	class:amunmt::Sentence
GetMapKeyFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetMapKeyFormat() const { return m_mapKeyFmt.get(); }$/;"	f	class:YAML::EmitterState
GetMatrix	amun/fpga/npz_converter.cpp	/^mblas::Tensor NpzConverter::GetMatrix($/;"	f	class:amunmt::FPGA::NpzConverter
GetMaxLength	amun/common/history.h	/^    unsigned GetMaxLength() const$/;"	f	class:amunmt::History
GetMaxLength	amun/common/sentences.cpp	/^unsigned Sentences::GetMaxLength() const {$/;"	f	class:amunmt::Sentences
GetMaxLength	amun/fpga/encoder.cpp	/^size_t GetMaxLength(const Sentences& source, size_t tab) {$/;"	f	namespace:amunmt::FPGA
GetMaxLength	amun/gpu/dl4mt/decoder.h	/^        unsigned GetMaxLength(const std::vector<unsigned>& h_sentenceLengths, const std::vector<unsigned>& beamSizes) const$/;"	f	class:amunmt::GPU::Decoder::Alignment
GetNBest	amun/cpu/decoder/encoder_decoder.h	/^    virtual void *GetNBest()$/;"	f	class:amunmt::CPU::CPUEncoderDecoderBase
GetNBest	amun/gpu/dl4mt/decoder.h	/^    mblas::Vector<NthOutBatch>& GetNBest() {$/;"	f	class:amunmt::GPU::Decoder
GetName	amun/common/loader.h	/^    const std::string& GetName() const {$/;"	f	class:amunmt::Loader
GetName	amun/common/scorer.h	/^    virtual const std::string& GetName() const {$/;"	f	class:amunmt::Scorer
GetNematusAlignmentString	amun/common/printer.cpp	/^std::string GetNematusAlignmentString(const HypothesisPtr& hypothesis, std::string best, std::string source, unsigned linenum) {$/;"	f	namespace:amunmt
GetNextByte	amun/3rd_party/yaml-cpp/stream.cpp	/^unsigned char Stream::GetNextByte() const {$/;"	f	class:YAML::Stream
GetNextCodePointAndAdvance	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool GetNextCodePointAndAdvance(int& codePoint,$/;"	f	namespace:YAML::Utils::__anon67
GetNextDevice	amun/common/god.cpp	/^DeviceInfo God::GetNextDevice() const$/;"	f	class:amunmt::God
GetNextState	amun/cpu/dl4mt/decoder.h	/^        void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::Decoder::RNNFinal
GetNextState	amun/cpu/dl4mt/decoder.h	/^        void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
GetNextState	amun/cpu/dl4mt/decoder.h	/^    void GetNextState(mblas::Tensor& State,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetNextState	amun/cpu/dl4mt/encoder.h	/^        void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::Encoder::RNN
GetNextState	amun/cpu/dl4mt/gru.h	/^    void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::dl4mt::GRU
GetNextState	amun/cpu/dl4mt/transition.h	/^    void GetNextState(mblas::Matrix& state) const$/;"	f	class:amunmt::CPU::Transition
GetNextState	amun/cpu/nematus/decoder.h	/^        void GetNextState($/;"	f	class:amunmt::CPU::Nematus::Decoder::RNNFinal
GetNextState	amun/cpu/nematus/decoder.h	/^        void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::CPU::Nematus::Decoder::RNNHidden
GetNextState	amun/cpu/nematus/decoder.h	/^    void GetNextState(mblas::Tensor& State,$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetNextState	amun/cpu/nematus/encoder.h	/^        void GetNextState(mblas::Tensor& nextState,$/;"	f	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
GetNextState	amun/cpu/nematus/gru.h	/^    void GetNextState($/;"	f	class:amunmt::CPU::GRU
GetNextState	amun/cpu/nematus/transition.cpp	/^void Transition::GetNextState(mblas::Tensor& state) const$/;"	f	class:amunmt::CPU::Nematus::Transition
GetNextState	amun/fpga/decoder.cpp	/^void Decoder::GetNextState(mblas::Tensor& State,$/;"	f	class:amunmt::FPGA::Decoder
GetNextState	amun/fpga/decoder.h	/^    void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::Decoder::RNNFinal
GetNextState	amun/fpga/decoder.h	/^    void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::Decoder::RNNHidden
GetNextState	amun/fpga/encoder.h	/^    void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::Encoder::RNN
GetNextState	amun/fpga/gru.h	/^  void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::FastGRU
GetNextState	amun/fpga/gru.h	/^  void GetNextState(mblas::Tensor& NextState,$/;"	f	class:amunmt::FPGA::SlowGRU
GetNextState	amun/gpu/dl4mt/decoder.h	/^        void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::Decoder::RNNFinal
GetNextState	amun/gpu/dl4mt/decoder.h	/^        void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::Decoder::RNNHidden
GetNextState	amun/gpu/dl4mt/decoder.h	/^    void GetNextState(CellState& State,$/;"	f	class:amunmt::GPU::Decoder
GetNextState	amun/gpu/dl4mt/encoder.h	/^        void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::Encoder::RNN
GetNextState	amun/gpu/dl4mt/gru.h	/^    virtual void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::FastGRU
GetNextState	amun/gpu/dl4mt/gru.h	/^    virtual void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::SlowGRU
GetNextState	amun/gpu/dl4mt/lstm.h	/^    virtual void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::SlowLSTM
GetNextState	amun/gpu/dl4mt/multiplicative.h	/^    virtual void GetNextState(CellState& NextState,$/;"	f	class:amunmt::GPU::Multiplicative
GetNumFirstWords	amun/common/filter.cpp	/^unsigned Filter::GetNumFirstWords() const {$/;"	f	class:amunmt::Filter
GetOpenCLInfo	amun/fpga/array.h	/^  const OpenCLInfo &GetOpenCLInfo() const$/;"	f	class:amunmt::FPGA::Array
GetOpenCLInfo	amun/fpga/matrix.h	/^  const OpenCLInfo &GetOpenCLInfo() const$/;"	f	class:amunmt::FPGA::mblas::Matrix
GetOrAdd	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^const std::string *extract::Vocab::GetOrAdd(const std::string &word)$/;"	f	class:extract::Vocab
GetOutputCharset	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetOutputCharset() const { return m_charset.get(); }$/;"	f	class:YAML::EmitterState
GetOutputCollector	amun/common/god.cpp	/^OutputCollector& God::GetOutputCollector() const {$/;"	f	class:amunmt::God
GetPairs	amun/common/processor/bpe.cpp	/^std::set<BPE::BPEPair> BPE::GetPairs(const std::vector<std::string>& word) const {$/;"	f	class:amunmt::BPE
GetPostCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  int GetPostCommentIndent() const { return m_postCommentIndent.get(); }$/;"	f	class:YAML::EmitterState
GetPreCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  int GetPreCommentIndent() const { return m_preCommentIndent.get(); }$/;"	f	class:YAML::EmitterState
GetPrevHyp	amun/common/hypothesis.h	/^    const HypothesisPtr GetPrevHyp() const {$/;"	f	class:amunmt::Hypothesis
GetPrevStateIndex	amun/common/hypothesis.h	/^    unsigned GetPrevStateIndex() const {$/;"	f	class:amunmt::Hypothesis
GetProbs	amun/cpu/dl4mt/decoder.h	/^        void GetProbs(mblas::ArrayMatrix& Probs,$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Softmax
GetProbs	amun/cpu/dl4mt/decoder.h	/^    mblas::ArrayMatrix& GetProbs() {$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetProbs	amun/cpu/dl4mt/decoder.h	/^    void GetProbs(const mblas::Tensor& State,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetProbs	amun/cpu/dl4mt/encoder_decoder.cpp	/^BaseTensor& EncoderDecoder::GetProbs() {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
GetProbs	amun/cpu/nematus/decoder.h	/^        void GetProbs(mblas::ArrayMatrix& Probs,$/;"	f	class:amunmt::CPU::Nematus::Decoder::Softmax
GetProbs	amun/cpu/nematus/decoder.h	/^    mblas::ArrayMatrix& GetProbs() {$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetProbs	amun/cpu/nematus/decoder.h	/^    void GetProbs(const mblas::Tensor& State,$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetProbs	amun/cpu/nematus/encoder_decoder.cpp	/^BaseTensor& EncoderDecoder::GetProbs() {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
GetProbs	amun/fpga/decoder.cpp	/^void Decoder::GetProbs(const mblas::Tensor& State,$/;"	f	class:amunmt::FPGA::Decoder
GetProbs	amun/fpga/decoder.h	/^    void GetProbs(mblas::Tensor& Probs,$/;"	f	class:amunmt::FPGA::Decoder::Softmax
GetProbs	amun/fpga/decoder.h	/^  mblas::Tensor& GetProbs() {$/;"	f	class:amunmt::FPGA::Decoder
GetProbs	amun/fpga/encoder_decoder.cpp	/^BaseTensor& EncoderDecoder::GetProbs()$/;"	f	class:amunmt::FPGA::EncoderDecoder
GetProbs	amun/gpu/dl4mt/decoder.h	/^        void GetProbs(mblas::Tensor& Probs,$/;"	f	class:amunmt::GPU::Decoder::Softmax
GetProbs	amun/gpu/dl4mt/decoder.h	/^    mblas::Tensor& GetProbs() {$/;"	f	class:amunmt::GPU::Decoder
GetProbs	amun/gpu/dl4mt/decoder.h	/^    void GetProbs(const CellState& State,$/;"	f	class:amunmt::GPU::Decoder
GetRows	amun/cpu/dl4mt/decoder.h	/^        size_t GetRows() const {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Embeddings
GetRows	amun/cpu/nematus/decoder.h	/^        size_t GetRows() const {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Embeddings
GetRows	amun/fpga/decoder.h	/^    size_t GetRows() const {$/;"	f	class:amunmt::FPGA::Decoder::Embeddings
GetRows	amun/gpu/dl4mt/decoder.h	/^        unsigned GetRows() const {$/;"	f	class:amunmt::GPU::Decoder::Embeddings
GetScorerNames	amun/common/god.cpp	/^std::vector<std::string> God::GetScorerNames() const {$/;"	f	class:amunmt::God
GetScorerWeights	amun/common/god.cpp	/^const std::map<std::string, float>& God::GetScorerWeights() const {$/;"	f	class:amunmt::God
GetScorers	amun/common/god.cpp	/^std::vector<ScorerPtr> God::GetScorers(const DeviceInfo &deviceInfo) const {$/;"	f	class:amunmt::God
GetSearch	amun/common/god.cpp	/^Search &God::GetSearch() const$/;"	f	class:amunmt::God
GetSoftAlignmentString	amun/common/printer.cpp	/^std::string GetSoftAlignmentString(const HypothesisPtr& hypothesis) {$/;"	f	namespace:amunmt
GetSourceVocab	amun/common/god.cpp	/^Vocab& God::GetSourceVocab(unsigned tab, unsigned factor) const {$/;"	f	class:amunmt::God
GetSourceVocabs	amun/common/god.cpp	/^FactorVocab& God::GetSourceVocabs(unsigned tab) const {$/;"	f	class:amunmt::God
GetStartTokenFor	amun/3rd_party/yaml-cpp/scanner.cpp	/^Token::TYPE Scanner::GetStartTokenFor(IndentMarker::INDENT_TYPE type) const {$/;"	f	class:YAML::Scanner
GetStateLength	amun/cpu/dl4mt/encoder.h	/^        size_t GetStateLength() const {$/;"	f	class:amunmt::CPU::dl4mt::Encoder::RNN
GetStateLength	amun/cpu/dl4mt/gru.h	/^    size_t GetStateLength() const {$/;"	f	class:amunmt::CPU::dl4mt::GRU
GetStateLength	amun/cpu/dl4mt/transition.h	/^    size_t GetStateLength() const {$/;"	f	class:amunmt::CPU::Transition
GetStateLength	amun/cpu/nematus/encoder.h	/^        size_t GetStateLength() const {$/;"	f	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
GetStateLength	amun/cpu/nematus/gru.h	/^    size_t GetStateLength() const {$/;"	f	class:amunmt::CPU::GRU
GetStateLength	amun/fpga/encoder.h	/^    size_t GetStateLength() const {$/;"	f	class:amunmt::FPGA::Encoder::RNN
GetStateLength	amun/fpga/gru.h	/^  size_t GetStateLength() const {$/;"	f	class:amunmt::FPGA::FastGRU
GetStateLength	amun/fpga/gru.h	/^  size_t GetStateLength() const {$/;"	f	class:amunmt::FPGA::SlowGRU
GetStateLength	amun/gpu/dl4mt/encoder.h	/^        CellLength GetStateLength() const {$/;"	f	class:amunmt::GPU::Encoder::RNN
GetStateLength	amun/gpu/dl4mt/gru.h	/^    virtual CellLength GetStateLength() const {$/;"	f	class:amunmt::GPU::FastGRU
GetStateLength	amun/gpu/dl4mt/gru.h	/^    virtual CellLength GetStateLength() const {$/;"	f	class:amunmt::GPU::SlowGRU
GetStateLength	amun/gpu/dl4mt/lstm.h	/^    virtual CellLength GetStateLength() const {$/;"	f	class:amunmt::GPU::SlowLSTM
GetStateLength	amun/gpu/dl4mt/multiplicative.h	/^    virtual CellLength GetStateLength() const {$/;"	f	class:amunmt::GPU::Multiplicative
GetStates	amun/cpu/decoder/encoder_decoder_state.cpp	/^CPU::mblas::Tensor& EncoderDecoderState::GetStates() {$/;"	f	class:amunmt::CPU::EncoderDecoderState
GetStates	amun/cpu/decoder/encoder_decoder_state.cpp	/^const CPU::mblas::Tensor& EncoderDecoderState::GetStates() const {$/;"	f	class:amunmt::CPU::EncoderDecoderState
GetStates	amun/fpga/encoder_decoder_state.cpp	/^const mblas::Tensor& EncoderDecoderState::GetStates() const {$/;"	f	class:amunmt::FPGA::EncoderDecoderState
GetStates	amun/fpga/encoder_decoder_state.cpp	/^mblas::Tensor& EncoderDecoderState::GetStates() {$/;"	f	class:amunmt::FPGA::EncoderDecoderState
GetStates	amun/gpu/decoder/language_model.h	/^    const std::vector<KenlmState>& GetStates() const {$/;"	f	class:LanguageModelState
GetStates	amun/gpu/decoder/language_model.h	/^    std::vector<KenlmState>& GetStates() {$/;"	f	class:LanguageModelState
GetStream	amun/gpu/mblas/handles.h	/^  static const cudaStream_t& GetStream() {$/;"	f	class:amunmt::GPU::mblas::CudaStreamHandler
GetStringFormat	amun/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetStringFormat() const { return m_strFmt.get(); }$/;"	f	class:YAML::EmitterState
GetTargetVocab	amun/common/god.cpp	/^Vocab& God::GetTargetVocab() const {$/;"	f	class:amunmt::God
GetThreadPool	amun/common/god.h	/^    ThreadPool &GetThreadPool()$/;"	f	class:amunmt::God
GetTopIndent	amun/3rd_party/yaml-cpp/scanner.cpp	/^int Scanner::GetTopIndent() const {$/;"	f	class:YAML::Scanner
GetTotalThreads	amun/common/god.cpp	/^unsigned God::GetTotalThreads() const$/;"	f	class:amunmt::God
GetValueRegex	amun/3rd_party/yaml-cpp/scanner.cpp	/^const RegEx& Scanner::GetValueRegex() const {$/;"	f	class:YAML::Scanner
GetVocab	amun/common/factor_vocab.cpp	/^  Vocab& FactorVocab::GetVocab(size_t factorIdx) const {$/;"	f	class:amunmt::FactorVocab
GetVocabSize	amun/cpu/dl4mt/decoder.h	/^    size_t GetVocabSize() const {$/;"	f	class:amunmt::CPU::dl4mt::Decoder
GetVocabSize	amun/cpu/dl4mt/encoder_decoder.cpp	/^unsigned EncoderDecoder::GetVocabSize() const {$/;"	f	class:amunmt::CPU::dl4mt::EncoderDecoder
GetVocabSize	amun/cpu/nematus/decoder.h	/^    size_t GetVocabSize() const {$/;"	f	class:amunmt::CPU::Nematus::Decoder
GetVocabSize	amun/cpu/nematus/encoder_decoder.cpp	/^unsigned EncoderDecoder::GetVocabSize() const {$/;"	f	class:amunmt::CPU::Nematus::EncoderDecoder
GetVocabSize	amun/fpga/decoder.h	/^  size_t GetVocabSize() const {$/;"	f	class:amunmt::FPGA::Decoder
GetVocabSize	amun/fpga/encoder_decoder.cpp	/^unsigned EncoderDecoder::GetVocabSize() const$/;"	f	class:amunmt::FPGA::EncoderDecoder
GetVocabSize	amun/gpu/dl4mt/decoder.h	/^    unsigned GetVocabSize() const {$/;"	f	class:amunmt::GPU::Decoder
GetWord	amun/common/hypothesis.h	/^    unsigned GetWord() const {$/;"	f	class:amunmt::Hypothesis
GetWords	amun/common/sentence.cpp	/^const Words& Sentence::GetWords(unsigned index) const {$/;"	f	class:amunmt::Sentence
Global	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	e	enum:YAML::FmtScope::value
God	amun/common/god.cpp	/^God::God()$/;"	f	class:amunmt::God
God	amun/common/god.h	/^class God {$/;"	c	namespace:amunmt
GraphBuilder	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  GraphBuilder(Impl &impl) : m_impl(impl) {$/;"	f	class:YAML::GraphBuilder
GraphBuilder	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^class GraphBuilder : public GraphBuilderInterface {$/;"	c	namespace:YAML
GraphBuilderAdapter	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  GraphBuilderAdapter(GraphBuilderInterface& builder)$/;"	f	class:YAML::GraphBuilderAdapter
GraphBuilderAdapter	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^class GraphBuilderAdapter : public EventHandler {$/;"	c	namespace:YAML
GraphBuilderInterface	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^class GraphBuilderInterface {$/;"	c	namespace:YAML
Greater	amun/3rd_party/blaze/util/mpl/Greater.h	/^struct Greater : public Bool< ( T1::value > T2::value ) >$/;"	s	namespace:blaze
Group	amun/3rd_party/yaml-cpp/emitterstate.h	/^    explicit Group(GroupType::value type_)$/;"	f	struct:YAML::EmitterState::Group
Group	amun/3rd_party/yaml-cpp/emitterstate.h	/^  struct Group {$/;"	s	class:YAML::EmitterState
GroupType	amun/3rd_party/yaml-cpp/emitterstate.h	/^struct GroupType {$/;"	s	namespace:YAML
Grow	amun/3rd_party/fast_align/src/atools.cc	/^  void Grow(Predicate pred, bool idempotent, const Array2D<bool>& adds) {$/;"	f	struct:RefineCommand
GrowthPolicy	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef G                     GrowthPolicy;        \/\/!< Type of the growth policy.$/;"	t	class:blaze::PtrVector
HANDLE_ERROR	amun/gpu/types-gpu.h	22;"	d
HANDLE_ERROR_CUBLAS	amun/gpu/types-gpu.h	26;"	d
HASH_FLAG	amun/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon28
HASH_FLAG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon62
HIGHEST_FLOAT	amun/gpu/types-gpu.h	18;"	d
H_	amun/fpga/gru.h	/^  mutable mblas::Tensor H_;$/;"	m	class:amunmt::FPGA::SlowGRU
H_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor H_;$/;"	m	class:amunmt::GPU::SlowGRU
H_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class H_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
HandleBlockMap	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleBlockMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleBlockSequence	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleBlockSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleCompactMap	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleCompactMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleCompactMapWithNoKey	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleCompactMapWithNoKey(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleDirective	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleDirective(const Token& token) {$/;"	f	class:YAML::Parser
HandleDocument	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleDocument(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleFlowMap	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleFlowMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleFlowSequence	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleFlowSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleMap	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleNextDocument	amun/3rd_party/yaml-cpp/parser.cpp	/^bool Parser::HandleNextDocument(EventHandler& eventHandler) {$/;"	f	class:YAML::Parser
HandleNode	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleNode(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleSequence	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleStrerror	amun/3rd_party/extract_lex/exception.cpp	/^const char *HandleStrerror(const char *ret, const char * \/*buf*\/) {$/;"	f	namespace:util::__anon87
HandleStrerror	amun/3rd_party/extract_lex/exception.cpp	/^const char *HandleStrerror(int ret, const char *buf) {$/;"	f	namespace:util::__anon87
HandleStrerror	amun/common/exception.cpp	/^const char *HandleStrerror(const char *ret, const char * \/*buf*\/) {$/;"	f	namespace:amunmt::util::__anon1
HandleStrerror	amun/common/exception.cpp	/^const char *HandleStrerror(int ret, const char *buf) {$/;"	f	namespace:amunmt::util::__anon1
HandleTagDirective	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleTagDirective(const Token& token) {$/;"	f	class:YAML::Parser
HandleYamlDirective	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleYamlDirective(const Token& token) {$/;"	f	class:YAML::Parser
Has	amun/common/config.cpp	/^bool Config::Has(const std::string& key) const {$/;"	f	class:amunmt::Config
Has	amun/common/god.h	/^    bool Has(const std::string& key) const {$/;"	f	class:amunmt::God
Has	amun/common/loader.h	/^    bool Has(const std::string& key) const {$/;"	f	class:amunmt::Loader
Has1Byte	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct Has1Byte : public HasSize<T,1UL>$/;"	s	namespace:blaze
Has2Bytes	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct Has2Bytes : public HasSize<T,2UL>$/;"	s	namespace:blaze
Has4Bytes	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct Has4Bytes : public HasSize<T,4UL>$/;"	s	namespace:blaze
Has8Bytes	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct Has8Bytes : public HasSize<T,8UL>$/;"	s	namespace:blaze
HasAnchor	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasAnchor() const { return m_hasAnchor; }$/;"	f	class:YAML::EmitterState
HasBegunContent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasBegunContent() const { return m_hasAnchor || m_hasTag; }$/;"	f	class:YAML::EmitterState
HasBegunNode	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasBegunNode() const {$/;"	f	class:YAML::EmitterState
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct HasConstDataAccess< DiagonalMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct HasConstDataAccess< HermitianMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct HasConstDataAccess< LowerMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct HasConstDataAccess< StrictlyLowerMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct HasConstDataAccess< StrictlyUpperMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct HasConstDataAccess< SymmetricMatrix<MT,SO,true,NF> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct HasConstDataAccess< UniLowerMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct HasConstDataAccess< UniUpperMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct HasConstDataAccess< UpperMatrix<MT,SO,true> > : public TrueType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	/^struct HasConstDataAccess : public FalseType$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	/^struct HasConstDataAccess< const T > : public HasConstDataAccess<T>$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	/^struct HasConstDataAccess< const volatile T > : public HasConstDataAccess<T>$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	/^struct HasConstDataAccess< volatile T > : public HasConstDataAccess<T>$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/views/Column.h	/^struct HasConstDataAccess< Column<MT,SO,true,SF> >$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/views/Row.h	/^struct HasConstDataAccess< Row<MT,SO,true,SF> >$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct HasConstDataAccess< Submatrix<MT,AF,SO,true> >$/;"	s	namespace:blaze
HasConstDataAccess	amun/3rd_party/blaze/math/views/Subvector.h	/^struct HasConstDataAccess< Subvector<VT,AF,TF,true> >$/;"	s	namespace:blaze
HasCyclicDependencyHelper	amun/3rd_party/blaze/util/singleton/Singleton.h	/^struct HasCyclicDependencyHelper<TL,D,1>$/;"	s	namespace:blaze
HasCyclicDependencyHelper	amun/3rd_party/blaze/util/singleton/Singleton.h	/^struct HasCyclicDependencyHelper<TL,D,2>$/;"	s
HasCyclicDependencyHelper	amun/3rd_party/blaze/util/singleton/Singleton.h	/^struct HasCyclicDependencyHelper<TL,NullType,N>$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^struct HasMutableDataAccess< DMatTransposer<MT,SO> >$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	/^struct HasMutableDataAccess : public FalseType$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	/^struct HasMutableDataAccess< const T > : public HasMutableDataAccess<T>$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	/^struct HasMutableDataAccess< const volatile T > : public HasMutableDataAccess<T>$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	/^struct HasMutableDataAccess< volatile T > : public HasMutableDataAccess<T>$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/views/Column.h	/^struct HasMutableDataAccess< Column<MT,SO,true,SF> >$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/views/Row.h	/^struct HasMutableDataAccess< Row<MT,SO,true,SF> >$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct HasMutableDataAccess< Submatrix<MT,AF,SO,true> >$/;"	s	namespace:blaze
HasMutableDataAccess	amun/3rd_party/blaze/math/views/Subvector.h	/^struct HasMutableDataAccess< Subvector<VT,AF,TF,true> >$/;"	s	namespace:blaze
HasSIMDAbs	amun/3rd_party/blaze/math/typetraits/HasSIMDAbs.h	/^struct HasSIMDAbs : public BoolConstant< HasSIMDAbsHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAbsHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAbs.h	/^struct HasSIMDAbsHelper$/;"	s	namespace:blaze
HasSIMDAbsHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAbs.h	/^struct HasSIMDAbsHelper< T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, IsSigned<T> > > >$/;"	s	namespace:blaze
HasSIMDAcos	amun/3rd_party/blaze/math/typetraits/HasSIMDAcos.h	/^struct HasSIMDAcos : public BoolConstant< HasSIMDAcosHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAcosHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAcos.h	/^struct HasSIMDAcosHelper$/;"	s	namespace:blaze
HasSIMDAcosHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAcos.h	/^struct HasSIMDAcosHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDAcosh	amun/3rd_party/blaze/math/typetraits/HasSIMDAcosh.h	/^struct HasSIMDAcosh : public BoolConstant< HasSIMDAcoshHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAcoshHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAcosh.h	/^struct HasSIMDAcoshHelper$/;"	s	namespace:blaze
HasSIMDAcoshHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAcosh.h	/^struct HasSIMDAcoshHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDAdd	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAdd : public BoolConstant< HasSIMDAddHelper< Decay_<T1>, Decay_<T2> >::value >$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< T1, T2, EnableIf_< And< IsNumeric<T1>, IsIntegral<T1>$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< complex<T>, complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T> > > >$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< complex<double>, complex<double> >$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< complex<float>, complex<float> >$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< double, double >$/;"	s	namespace:blaze
HasSIMDAddHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^struct HasSIMDAddHelper< float, float >$/;"	s	namespace:blaze
HasSIMDAsin	amun/3rd_party/blaze/math/typetraits/HasSIMDAsin.h	/^struct HasSIMDAsin : public BoolConstant< HasSIMDAsinHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAsinHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAsin.h	/^struct HasSIMDAsinHelper$/;"	s	namespace:blaze
HasSIMDAsinHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAsin.h	/^struct HasSIMDAsinHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDAsinh	amun/3rd_party/blaze/math/typetraits/HasSIMDAsinh.h	/^struct HasSIMDAsinh : public BoolConstant< HasSIMDAsinhHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAsinhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAsinh.h	/^struct HasSIMDAsinhHelper$/;"	s	namespace:blaze
HasSIMDAsinhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAsinh.h	/^struct HasSIMDAsinhHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDAtan	amun/3rd_party/blaze/math/typetraits/HasSIMDAtan.h	/^struct HasSIMDAtan : public BoolConstant< HasSIMDAtanHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAtanHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAtan.h	/^struct HasSIMDAtanHelper$/;"	s	namespace:blaze
HasSIMDAtanHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAtan.h	/^struct HasSIMDAtanHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDAtanh	amun/3rd_party/blaze/math/typetraits/HasSIMDAtanh.h	/^struct HasSIMDAtanh : public BoolConstant< HasSIMDAtanhHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDAtanhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAtanh.h	/^struct HasSIMDAtanhHelper$/;"	s	namespace:blaze
HasSIMDAtanhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDAtanh.h	/^struct HasSIMDAtanhHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDCbrt	amun/3rd_party/blaze/math/typetraits/HasSIMDCbrt.h	/^struct HasSIMDCbrt : public BoolConstant< HasSIMDCbrtHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDCbrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCbrt.h	/^struct HasSIMDCbrtHelper$/;"	s	namespace:blaze
HasSIMDCbrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCbrt.h	/^struct HasSIMDCbrtHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDCeil	amun/3rd_party/blaze/math/typetraits/HasSIMDCeil.h	/^struct HasSIMDCeil : public BoolConstant< HasSIMDCeilHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDCeilHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCeil.h	/^struct HasSIMDCeilHelper$/;"	s	namespace:blaze
HasSIMDCeilHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCeil.h	/^struct HasSIMDCeilHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDConj	amun/3rd_party/blaze/math/typetraits/HasSIMDConj.h	/^struct HasSIMDConj : public BoolConstant< HasSIMDConjHelper< Decay_<T> >::value >$/;"	s
HasSIMDConjHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDConj.h	/^struct HasSIMDConjHelper$/;"	s	namespace:blaze
HasSIMDConjHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDConj.h	/^struct HasSIMDConjHelper< complex<T> >$/;"	s	namespace:blaze
HasSIMDCos	amun/3rd_party/blaze/math/typetraits/HasSIMDCos.h	/^struct HasSIMDCos : public BoolConstant< HasSIMDCosHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDCosHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCos.h	/^struct HasSIMDCosHelper$/;"	s	namespace:blaze
HasSIMDCosHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCos.h	/^struct HasSIMDCosHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDCosh	amun/3rd_party/blaze/math/typetraits/HasSIMDCosh.h	/^struct HasSIMDCosh : public BoolConstant< HasSIMDCoshHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDCoshHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCosh.h	/^struct HasSIMDCoshHelper$/;"	s	namespace:blaze
HasSIMDCoshHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDCosh.h	/^struct HasSIMDCoshHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDDiv	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDiv : public BoolConstant< HasSIMDDivHelper< Decay_<T1>, Decay_<T2> >::value >$/;"	s	namespace:blaze
HasSIMDDivHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDivHelper$/;"	s	namespace:blaze
HasSIMDDivHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDivHelper< T1, T2, EnableIf_< And< IsNumeric<T1>, IsIntegral<T1>, IsSigned<T1>$/;"	s	namespace:blaze
HasSIMDDivHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDivHelper< complex<T>, T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, IsSigned<T> > > >$/;"	s	namespace:blaze
HasSIMDDivHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDivHelper< double, double >$/;"	s	namespace:blaze
HasSIMDDivHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^struct HasSIMDDivHelper< float, float >$/;"	s	namespace:blaze
HasSIMDErf	amun/3rd_party/blaze/math/typetraits/HasSIMDErf.h	/^struct HasSIMDErf : public BoolConstant< HasSIMDErfHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDErfHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDErf.h	/^struct HasSIMDErfHelper$/;"	s	namespace:blaze
HasSIMDErfHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDErf.h	/^struct HasSIMDErfHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDErfc	amun/3rd_party/blaze/math/typetraits/HasSIMDErfc.h	/^struct HasSIMDErfc : public BoolConstant< HasSIMDErfcHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDErfcHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDErfc.h	/^struct HasSIMDErfcHelper$/;"	s	namespace:blaze
HasSIMDErfcHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDErfc.h	/^struct HasSIMDErfcHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDExp	amun/3rd_party/blaze/math/typetraits/HasSIMDExp.h	/^struct HasSIMDExp : public BoolConstant< HasSIMDExpHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDExpHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDExp.h	/^struct HasSIMDExpHelper$/;"	s	namespace:blaze
HasSIMDExpHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDExp.h	/^struct HasSIMDExpHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDFloor	amun/3rd_party/blaze/math/typetraits/HasSIMDFloor.h	/^struct HasSIMDFloor : public BoolConstant< HasSIMDFloorHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDFloorHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDFloor.h	/^struct HasSIMDFloorHelper$/;"	s	namespace:blaze
HasSIMDFloorHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDFloor.h	/^struct HasSIMDFloorHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDInvCbrt	amun/3rd_party/blaze/math/typetraits/HasSIMDInvCbrt.h	/^struct HasSIMDInvCbrt : public BoolConstant< HasSIMDInvCbrtHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDInvCbrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDInvCbrt.h	/^struct HasSIMDInvCbrtHelper$/;"	s	namespace:blaze
HasSIMDInvCbrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDInvCbrt.h	/^struct HasSIMDInvCbrtHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDInvSqrt	amun/3rd_party/blaze/math/typetraits/HasSIMDInvSqrt.h	/^struct HasSIMDInvSqrt : public BoolConstant< HasSIMDInvSqrtHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDInvSqrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDInvSqrt.h	/^struct HasSIMDInvSqrtHelper$/;"	s	namespace:blaze
HasSIMDInvSqrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDInvSqrt.h	/^struct HasSIMDInvSqrtHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDLog	amun/3rd_party/blaze/math/typetraits/HasSIMDLog.h	/^struct HasSIMDLog : public BoolConstant< HasSIMDLogHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDLog10	amun/3rd_party/blaze/math/typetraits/HasSIMDLog10.h	/^struct HasSIMDLog10 : public BoolConstant< HasSIMDLog10Helper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDLog10Helper	amun/3rd_party/blaze/math/typetraits/HasSIMDLog10.h	/^struct HasSIMDLog10Helper$/;"	s	namespace:blaze
HasSIMDLog10Helper	amun/3rd_party/blaze/math/typetraits/HasSIMDLog10.h	/^struct HasSIMDLog10Helper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDLogHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDLog.h	/^struct HasSIMDLogHelper$/;"	s	namespace:blaze
HasSIMDLogHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDLog.h	/^struct HasSIMDLogHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDMult	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMult : public BoolConstant< HasSIMDMultHelper< Decay_<T1>, Decay_<T2> >::value >$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< T1, T2, EnableIf_< And< IsNumeric<T1>, IsIntegral<T1>$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< complex<T>, complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T> > > >$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< complex<double>, complex<double> >$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< complex<float>, complex<float> >$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< double, double >$/;"	s	namespace:blaze
HasSIMDMultHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^struct HasSIMDMultHelper< float, float >$/;"	s	namespace:blaze
HasSIMDPow	amun/3rd_party/blaze/math/typetraits/HasSIMDPow.h	/^struct HasSIMDPow : public BoolConstant< HasSIMDPowHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDPowHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDPow.h	/^struct HasSIMDPowHelper$/;"	s	namespace:blaze
HasSIMDPowHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDPow.h	/^struct HasSIMDPowHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDSin	amun/3rd_party/blaze/math/typetraits/HasSIMDSin.h	/^struct HasSIMDSin : public BoolConstant< HasSIMDSinHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDSinHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSin.h	/^struct HasSIMDSinHelper$/;"	s	namespace:blaze
HasSIMDSinHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSin.h	/^struct HasSIMDSinHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDSinh	amun/3rd_party/blaze/math/typetraits/HasSIMDSinh.h	/^struct HasSIMDSinh : public BoolConstant< HasSIMDSinhHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDSinhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSinh.h	/^struct HasSIMDSinhHelper$/;"	s	namespace:blaze
HasSIMDSinhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSinh.h	/^struct HasSIMDSinhHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDSqrt	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	/^struct HasSIMDSqrt : public BoolConstant< HasSIMDSqrtHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDSqrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	/^struct HasSIMDSqrtHelper$/;"	s	namespace:blaze
HasSIMDSqrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	/^struct HasSIMDSqrtHelper< double >$/;"	s	namespace:blaze
HasSIMDSqrtHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	/^struct HasSIMDSqrtHelper< float >$/;"	s	namespace:blaze
HasSIMDSub	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSub : public BoolConstant< HasSIMDSubHelper< Decay_<T1>, Decay_<T2> >::value >$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< T1, T2, EnableIf_< And< IsNumeric<T1>, IsIntegral<T1>$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< complex<T>, complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T> > > >$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< complex<double>, complex<double> >$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< complex<float>, complex<float> >$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< double, double >$/;"	s	namespace:blaze
HasSIMDSubHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^struct HasSIMDSubHelper< float, float >$/;"	s	namespace:blaze
HasSIMDTan	amun/3rd_party/blaze/math/typetraits/HasSIMDTan.h	/^struct HasSIMDTan : public BoolConstant< HasSIMDTanHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDTanHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDTan.h	/^struct HasSIMDTanHelper$/;"	s	namespace:blaze
HasSIMDTanHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDTan.h	/^struct HasSIMDTanHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSIMDTanh	amun/3rd_party/blaze/math/typetraits/HasSIMDTanh.h	/^struct HasSIMDTanh : public BoolConstant< HasSIMDTanhHelper< Decay_<T> >::value >$/;"	s	namespace:blaze
HasSIMDTanhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDTanh.h	/^struct HasSIMDTanhHelper$/;"	s	namespace:blaze
HasSIMDTanhHelper	amun/3rd_party/blaze/math/typetraits/HasSIMDTanh.h	/^struct HasSIMDTanhHelper< T, EnableIf_< Or< IsFloat<T>, IsDouble<T> > > >$/;"	s	namespace:blaze
HasSize	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct HasSize : public BoolConstant< sizeof( T ) == Size >$/;"	s	namespace:blaze
HasSize	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct HasSize<const void,Size> : public BoolConstant< 0 == Size >$/;"	s	namespace:blaze
HasSize	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct HasSize<const volatile void,Size> : public BoolConstant< 0 == Size >$/;"	s	namespace:blaze
HasSize	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct HasSize<void,Size> : public BoolConstant< 0 == Size >$/;"	s	namespace:blaze
HasSize	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^struct HasSize<volatile void,Size> : public BoolConstant< 0 == Size >$/;"	s	namespace:blaze
HasTag	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasTag() const { return m_hasTag; }$/;"	f	class:YAML::EmitterState
HaveSameSize	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	/^class HaveSameSize : public BoolConstant< sizeof(T1) == sizeof(T2) >$/;"	c	namespace:blaze
HaveSameSize	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	/^class HaveSameSize<T,void> : public FalseType$/;"	c	namespace:blaze
HaveSameSize	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	/^class HaveSameSize<void,T> : public FalseType$/;"	c	namespace:blaze
HaveSameSize	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	/^class HaveSameSize<void,void> : public TrueType$/;"	c	namespace:blaze
Head	amun/3rd_party/blaze/util/TypeList.h	/^   typedef H  Head;  \/\/!< Type of the head of the type list.$/;"	t	struct:blaze::TypeList
HelloWorld	amun/fpga/hello_world.cpp	/^void HelloWorld($/;"	f	namespace:amunmt::FPGA
HermitianElement	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^class HermitianElement : private SparseElement$/;"	c	namespace:blaze
HermitianElement	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>::HermitianElement( IteratorType pos, MT* matrix, size_t idx )$/;"	f	class:blaze::HermitianElement
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/BaseTemplate.h	/^class HermitianMatrix$/;"	c	namespace:blaze
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^class HermitianMatrix<MT,SO,true>$/;"	c	namespace:blaze
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( const HermitianMatrix& m )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( size_t n )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix( size_t n, const Other* array )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>::HermitianMatrix()$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^class HermitianMatrix<MT,SO,false>$/;"	c	namespace:blaze
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix( const HermitianMatrix& m )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix( size_t n )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::HermitianMatrix
HermitianMatrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>::HermitianMatrix()$/;"	f	class:blaze::HermitianMatrix
HermitianProxy	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^class HermitianProxy : public Proxy< HermitianProxy<MT> >$/;"	c	namespace:blaze
HermitianProxy	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>::HermitianProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::HermitianProxy
HermitianProxy	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>::HermitianProxy( const HermitianProxy& hp )$/;"	f	class:blaze::HermitianProxy
HermitianValue	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^class HermitianValue : public Proxy< HermitianValue<MT> >$/;"	c	namespace:blaze
HermitianValue	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>::HermitianValue( IteratorType pos, MT* matrix, size_t index )$/;"	f	class:blaze::HermitianValue
Hex	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Hex,$/;"	e	enum:YAML::EMITTER_MANIP
Hex	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Hex() {$/;"	f	namespace:YAML::Exp
HiddenState_	amun/cpu/dl4mt/decoder.h	/^    mblas::Tensor HiddenState_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
HiddenState_	amun/cpu/nematus/decoder.h	/^    mblas::Tensor HiddenState_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
HiddenState_	amun/fpga/decoder.h	/^  mblas::Tensor HiddenState_;$/;"	m	class:amunmt::FPGA::Decoder
HiddenState_	amun/gpu/dl4mt/decoder.h	/^    CellState HiddenState_;$/;"	m	class:amunmt::GPU::Decoder
HighType	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^   typedef SymmetricMatrix< typename MathTrait<MT1,MT2>::HighType >  HighType;$/;"	t	struct:blaze::MathTrait
Histories	amun/common/histories.cpp	/^Histories::Histories(const Sentences& sentences, bool normalizeScore, float maxLengthMult)$/;"	f	class:amunmt::Histories
Histories	amun/common/histories.h	/^    Histories() {} \/\/ for all histories in translation task$/;"	f	class:amunmt::Histories
Histories	amun/common/histories.h	/^class Histories {$/;"	c	namespace:amunmt
History	amun/common/history.cpp	/^History::History(const Sentence &sentence, bool normalizeScore, unsigned maxLength)$/;"	f	class:amunmt::History
History	amun/common/history.h	/^class History {$/;"	c	namespace:amunmt
HybridMatrix	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^class HybridMatrix : public DenseMatrix< HybridMatrix<Type,M,N,SO>, SO >$/;"	c	namespace:blaze
HybridVector	amun/3rd_party/blaze/math/dense/HybridVector.h	/^class HybridVector : public DenseVector< HybridVector<Type,N,TF>, TF >$/;"	c	namespace:blaze
HypoState	amun/plugin/hypo_info.cpp	/^HypoState::HypoState()$/;"	f	class:amunmt::HypoState
HypoState	amun/plugin/hypo_info.h	/^struct HypoState$/;"	s	namespace:amunmt
HypoStates	amun/plugin/hypo_info.h	/^typedef std::vector<HypoState> HypoStates;$/;"	t	namespace:amunmt
Hypothesis	amun/common/hypothesis.h	/^    Hypothesis(const HypothesisPtr prevHyp, unsigned word, unsigned prevIndex, float cost)$/;"	f	class:amunmt::Hypothesis
Hypothesis	amun/common/hypothesis.h	/^    Hypothesis(const HypothesisPtr prevHyp, unsigned word, unsigned prevIndex, float cost,$/;"	f	class:amunmt::Hypothesis
Hypothesis	amun/common/hypothesis.h	/^    Hypothesis(const Sentence &sentence)$/;"	f	class:amunmt::Hypothesis
Hypothesis	amun/common/hypothesis.h	/^class Hypothesis {$/;"	c	namespace:amunmt
HypothesisCoord	amun/common/history.h	/^    struct HypothesisCoord {$/;"	s	class:amunmt::History
HypothesisPtr	amun/common/hypothesis.h	/^typedef std::shared_ptr<Hypothesis> HypothesisPtr;$/;"	t	namespace:amunmt
HypothesisPtr	amun/common/scorer.h	/^typedef std::shared_ptr<Hypothesis> HypothesisPtr;$/;"	t	namespace:amunmt
IF_MATCH_RETURN	amun/common/loader_factory.h	11;"	d
INCOMPLETE_SEQUENCE	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
INDENTATION_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/indentation.h	2;"	d
INDENT_TYPE	amun/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	g	struct:YAML::Scanner::IndentMarker
INLINE_BUFFER_SIZE	amun/3rd_party/spdlog/details/format.h	/^    INLINE_BUFFER_SIZE = 500$/;"	e	enum:fmt::internal::__anon16
INLINE_BUFFER_SIZE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    INLINE_BUFFER_SIZE = 500$/;"	e	enum:fmt::internal::__anon50
INPUT	amun/3rd_party/yaml-cpp/scanner.h	/^  Stream INPUT;$/;"	m	class:YAML::Scanner
INT	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
INT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
INVALID	amun/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
INVALID	amun/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
INVALID_ALIAS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ALIAS = "invalid alias";$/;"	m	namespace:YAML::ErrorMsg
INVALID_ANCHOR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ANCHOR = "invalid anchor";$/;"	m	namespace:YAML::ErrorMsg
INVALID_CODE_POINT	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
INVALID_ESCAPE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ESCAPE = "unknown escape character: ";$/;"	m	namespace:YAML::ErrorMsg
INVALID_HEX	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_HEX = "bad character found while scanning hex number";$/;"	m	namespace:YAML::ErrorMsg
INVALID_LEAD	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
INVALID_NODE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_NODE =$/;"	m	namespace:YAML::ErrorMsg
INVALID_SCALAR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_SCALAR = "invalid scalar";$/;"	m	namespace:YAML::ErrorMsg
INVALID_TAG	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_TAG = "invalid tag";$/;"	m	namespace:YAML::ErrorMsg
INVALID_UNICODE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_UNICODE = "invalid unicode: ";$/;"	m	namespace:YAML::ErrorMsg
ITERATIONS	amun/3rd_party/fast_align/src/fast_align.cc	/^int ITERATIONS = 5;$/;"	v
I_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor I_;$/;"	m	class:amunmt::GPU::SlowLSTM
I_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class I_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Id2Str	amun/common/vocab.h	/^    typedef std::vector<std::string> Id2Str;$/;"	t	class:amunmt::Vocab
Identity	amun/3rd_party/extract_lex/exception.h	/^      typedef T Identity;$/;"	t	struct:util::Exception::ExceptionTag
Identity	amun/common/exception.h	/^      typedef T Identity;$/;"	t	struct:amunmt::util::Exception::ExceptionTag
If	amun/3rd_party/blaze/util/mpl/If.h	/^struct If$/;"	s	namespace:blaze
IfTrue	amun/3rd_party/blaze/util/mpl/If.h	/^struct IfTrue$/;"	s	namespace:blaze
IfTrue	amun/3rd_party/blaze/util/mpl/If.h	/^struct IfTrue<false,T1,T2>$/;"	s	namespace:blaze
Imag	amun/3rd_party/blaze/math/functors/Imag.h	/^struct Imag$/;"	s	namespace:blaze
ImagTrait	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^struct ImagTrait$/;"	s	namespace:blaze
InBlockContext	amun/3rd_party/yaml-cpp/scanner.h	/^  bool InBlockContext() const { return m_flows.empty(); }$/;"	f	class:YAML::Scanner
InFlowContext	amun/3rd_party/yaml-cpp/scanner.h	/^  bool InFlowContext() const { return !m_flows.empty(); }$/;"	f	class:YAML::Scanner
Increment	amun/3rd_party/fast_align/src/ttables.h	/^  inline void Increment(const unsigned e, const unsigned f, const double x) {$/;"	f	class:TTable
Indent	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Indent Indent(int value) { return _Indent(value); }$/;"	f	namespace:YAML
IndentMarker	amun/3rd_party/yaml-cpp/scanner.h	/^    IndentMarker(int column_, INDENT_TYPE type_)$/;"	f	struct:YAML::Scanner::IndentMarker
IndentMarker	amun/3rd_party/yaml-cpp/scanner.h	/^  struct IndentMarker {$/;"	s	class:YAML::Scanner
IndentTo	amun/3rd_party/yaml-cpp/indentation.h	/^  IndentTo(std::size_t n_) : n(n_) {}$/;"	f	struct:YAML::IndentTo
IndentTo	amun/3rd_party/yaml-cpp/indentation.h	/^struct IndentTo {$/;"	s	namespace:YAML
Indentation	amun/3rd_party/yaml-cpp/indentation.h	/^  Indentation(std::size_t n_) : n(n_) {}$/;"	f	struct:YAML::Indentation
Indentation	amun/3rd_party/yaml-cpp/indentation.h	/^struct Indentation {$/;"	s	namespace:YAML
IndexOf	amun/3rd_party/blaze/util/TypeList.h	/^struct IndexOf< NullType, Type >$/;"	s	namespace:blaze
IndexOf	amun/3rd_party/blaze/util/TypeList.h	/^struct IndexOf< TypeList<Head,Tail>, Type >$/;"	s	namespace:blaze
IndexOf	amun/3rd_party/blaze/util/TypeList.h	/^struct IndexOf< TypeList<Type,Tail>, Type >$/;"	s	namespace:blaze
IndexType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef size_t                    IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::HermitianElement
IndexType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef size_t                IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
IndexType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef size_t                    IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::SymmetricElement
IndexType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef size_t                   IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::UniLowerElement
IndexType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef size_t                   IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::UniUpperElement
IndexType	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   typedef size_t       IndexType;       \/\/!< The index type of the value-index-pair.$/;"	t	class:blaze::ValueIndexPair
IndexType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef size_t                       IndexType;       \/\/!< The index type of the row element.$/;"	t	class:blaze::Column::ColumnElement
IndexType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef size_t                       IndexType;       \/\/!< The index type of the row element.$/;"	t	class:blaze::Row::RowElement
IndexType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef size_t                       IndexType;       \/\/!< The index type of the row element.$/;"	t	class:blaze::Submatrix::SubmatrixElement
IndexType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef size_t                       IndexType;       \/\/!< The index type of the row element.$/;"	t	class:blaze::Subvector::SubvectorElement
Indices	amun/3rd_party/blaze/util/Indices.h	/^class Indices$/;"	c	namespace:blaze
Indices	amun/3rd_party/blaze/util/Indices.h	/^inline Indices::Indices( size_t min, size_t max, size_t number )$/;"	f	class:blaze::Indices
Infinity	amun/3rd_party/blaze/math/Infinity.h	/^class Infinity$/;"	c	namespace:blaze
Infinity	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::Infinity()$/;"	f	class:blaze::Infinity
Init	amun/common/god.cpp	/^God& God::Init(const std::string& options) {$/;"	f	class:amunmt::God
Init	amun/common/god.cpp	/^God& God::Init(int argc, char** argv) {$/;"	f	class:amunmt::God
Init	amun/cpu/dl4mt/decoder.h	/^        void Init(const mblas::Tensor& SourceContext) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Attention
Init	amun/cpu/nematus/decoder.h	/^        void Init(const mblas::Tensor& SourceContext) {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Attention
Init	amun/fpga/decoder.h	/^    void Init(const mblas::Tensor& SourceContext)$/;"	f	class:amunmt::FPGA::Decoder::Alignment
Init	amun/gpu/dl4mt/decoder.h	/^        void Init(const mblas::Tensor& SourceContext) {$/;"	f	class:amunmt::GPU::Decoder::Alignment
InitCommandLine	amun/3rd_party/fast_align/src/atools.cc	/^bool InitCommandLine(int argc, char** argv) {$/;"	f
InitCommandLine	amun/3rd_party/fast_align/src/fast_align.cc	/^bool InitCommandLine(int argc, char** argv) {$/;"	f
InitFinalCell	amun/gpu/dl4mt/decoder.h	/^    std::unique_ptr<Cell> InitFinalCell(const Weights& model, const YAML::Node& config){$/;"	f	class:amunmt::GPU::Decoder
InitHiddenCell	amun/gpu/dl4mt/decoder.h	/^    std::unique_ptr<Cell> InitHiddenCell(const Weights& model, const YAML::Node& config){$/;"	f	class:amunmt::GPU::Decoder
InitRefine	amun/3rd_party/fast_align/src/atools.cc	/^  void InitRefine($/;"	f	struct:RefineCommand
InitialPass	amun/3rd_party/fast_align/src/fast_align.cc	/^void InitialPass(const unsigned kNULL, const bool use_null, TTable* s2t,$/;"	f
InitializeState	amun/cpu/dl4mt/decoder.h	/^        void InitializeState(mblas::Tensor& State,$/;"	f	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
InitializeState	amun/cpu/dl4mt/encoder.h	/^        void InitializeState(size_t batchSize = 1) {$/;"	f	class:amunmt::CPU::dl4mt::Encoder::RNN
InitializeState	amun/cpu/nematus/decoder.h	/^        void InitializeState($/;"	f	class:amunmt::CPU::Nematus::Decoder::RNNHidden
InitializeState	amun/cpu/nematus/encoder.h	/^        void InitializeState(size_t batchSize = 1) {$/;"	f	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
InitializeState	amun/fpga/decoder.h	/^    void InitializeState(mblas::Tensor& State,$/;"	f	class:amunmt::FPGA::Decoder::RNNHidden
InitializeState	amun/fpga/encoder.h	/^    void InitializeState(size_t batchSize = 1) {$/;"	f	class:amunmt::FPGA::Encoder::RNN
InitializeState	amun/gpu/dl4mt/decoder.h	/^        void InitializeState(CellState& State,$/;"	f	class:amunmt::GPU::Decoder::RNNHidden
InitializeState	amun/gpu/dl4mt/encoder.h	/^        void InitializeState(unsigned batchSize = 1) {$/;"	f	class:amunmt::GPU::Encoder::RNN
InputFileStream	amun/3rd_party/extract_lex/file_stream.h	/^    InputFileStream(const std::string& file)$/;"	f	class:InputFileStream
InputFileStream	amun/3rd_party/extract_lex/file_stream.h	/^    InputFileStream(std::istream& strm)$/;"	f	class:InputFileStream
InputFileStream	amun/3rd_party/extract_lex/file_stream.h	/^class InputFileStream {$/;"	c
InputFileStream	amun/common/file_stream.h	/^    InputFileStream(const std::string& file)$/;"	f	class:amunmt::InputFileStream
InputFileStream	amun/common/file_stream.h	/^    InputFileStream(std::istream& strm)$/;"	f	class:amunmt::InputFileStream
InputFileStream	amun/common/file_stream.h	/^class InputFileStream {$/;"	c	namespace:amunmt
InputString	amun/3rd_party/blaze/util/InputString.h	/^class InputString$/;"	c	namespace:blaze
InputString	amun/3rd_party/blaze/util/InputString.h	/^inline InputString::InputString( const InputString& s )$/;"	f	class:blaze::InputString
InputString	amun/3rd_party/blaze/util/InputString.h	/^inline InputString::InputString( const char* string )$/;"	f	class:blaze::InputString
InputString	amun/3rd_party/blaze/util/InputString.h	/^inline InputString::InputString( const std::string& string )$/;"	f	class:blaze::InputString
Insert	amun/3rd_party/fast_align/src/ttables.h	/^  inline void Insert(const unsigned e, const unsigned f) {$/;"	f	class:TTable
InsertPotentialSimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::InsertPotentialSimpleKey() {$/;"	f	class:YAML::Scanner
Int	amun/3rd_party/blaze/util/mpl/Int.h	/^struct Int : public IntegralConstant<int,N>$/;"	s	namespace:blaze
IntChecker	amun/3rd_party/spdlog/details/format.cc	/^		struct IntChecker$/;"	s	namespace:fmt::__anon30	file:
IntChecker	amun/3rd_party/spdlog/details/format.cc	/^		struct IntChecker<true>$/;"	s	namespace:fmt::__anon30	file:
IntChecker	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^struct IntChecker$/;"	s	namespace:fmt::internal
IntChecker	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^struct IntChecker<true>$/;"	s	namespace:fmt::internal
IntFormatSpec	amun/3rd_party/spdlog/details/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	amun/3rd_party/spdlog/details/format.h	/^class IntFormatSpec: public SpecT$/;"	c	namespace:fmt
IntFormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class IntFormatSpec: public SpecT$/;"	c	namespace:fmt
IntTraits	amun/3rd_party/spdlog/details/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
IntTraits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
IntegralConstant	amun/3rd_party/blaze/util/IntegralConstant.h	/^struct IntegralConstant : public std::integral_constant<T,N>$/;"	s	namespace:blaze
IntersectCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct IntersectCommand : public Command {$/;"	s	file:
IntroCharTypeOf	amun/3rd_party/yaml-cpp/stream.cpp	/^inline UtfIntroCharType IntroCharTypeOf(std::istream::int_type ch) {$/;"	f	namespace:YAML
Inv	amun/3rd_party/blaze/math/functors/Inv.h	/^struct Inv$/;"	s	namespace:blaze
InvCbrt	amun/3rd_party/blaze/math/functors/InvCbrt.h	/^struct InvCbrt$/;"	s	namespace:blaze
InvExprTrait	amun/3rd_party/blaze/math/traits/InvExprTrait.h	/^struct InvExprTrait$/;"	s	namespace:blaze
InvSqrt	amun/3rd_party/blaze/math/functors/InvSqrt.h	/^struct InvSqrt$/;"	s	namespace:blaze
InvalidNode	amun/3rd_party/yaml-cpp/exceptions.h	/^  InvalidNode()$/;"	f	class:YAML::InvalidNode
InvalidNode	amun/3rd_party/yaml-cpp/exceptions.h	/^class InvalidNode : public RepresentationException {$/;"	c	namespace:YAML
InvalidScalar	amun/3rd_party/yaml-cpp/exceptions.h	/^  InvalidScalar(const Mark& mark_)$/;"	f	class:YAML::InvalidScalar
InvalidScalar	amun/3rd_party/yaml-cpp/exceptions.h	/^class InvalidScalar : public RepresentationException {$/;"	c	namespace:YAML
Invalidate	amun/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::SimpleKey::Invalidate() {$/;"	f	class:YAML::Scanner::SimpleKey
InvalidateSimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::InvalidateSimpleKey() {$/;"	f	class:YAML::Scanner
InversionFlag	amun/3rd_party/blaze/math/InversionFlag.h	/^enum InversionFlag$/;"	g	namespace:blaze
InvertCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct InvertCommand : public Command {$/;"	s	file:
IsAdaptor	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsAdaptor< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsAdaptor< HermitianMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsAdaptor< LowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsAdaptor< StrictlyLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsAdaptor< StrictlyUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsAdaptor< SymmetricMatrix<MT,SO,DF,NF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsAdaptor< UniLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsAdaptor< UniUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsAdaptor< UpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	/^struct IsAdaptor : public FalseType$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	/^struct IsAdaptor< const T > : public IsAdaptor<T>$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	/^struct IsAdaptor< const volatile T > : public IsAdaptor<T>$/;"	s	namespace:blaze
IsAdaptor	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	/^struct IsAdaptor< volatile T > : public IsAdaptor<T>$/;"	s	namespace:blaze
IsAddExpr	amun/3rd_party/blaze/math/typetraits/IsAddExpr.h	/^struct IsAddExpr$/;"	s	namespace:blaze
IsAliased	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^bool NodeEvents::IsAliased(const detail::node& node) const {$/;"	f	class:YAML::NodeEvents
IsAligned	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsAligned< DiagonalMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsAligned< HermitianMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsAligned< LowerMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsAligned< StrictlyLowerMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsAligned< StrictlyUpperMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsAligned< SymmetricMatrix<MT,SO,DF,NF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsAligned< UniLowerMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsAligned< UniUpperMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsAligned< UpperMatrix<MT,SO,DF> > : public BoolConstant< IsAligned<MT>::value >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsAligned< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsAligned< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsAligned< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsAligned< DMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^struct IsAligned< DMatSVecMultExpr<MT,VT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsAligned< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsAligned< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsAligned< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsAligned< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsAligned< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsAligned< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsAligned	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsAligned< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^struct IsAligned< DMatTransposer<MT,SO> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^struct IsAligned< DVecDVecAddExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^struct IsAligned< DVecDVecDivExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^struct IsAligned< DVecDVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^struct IsAligned< DVecDVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^struct IsAligned< DVecEvalExpr<VT,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct IsAligned< DVecForEachExpr<VT,OP,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct IsAligned< DVecScalarDivExpr<VT,ST,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct IsAligned< DVecScalarMultExpr<VT,ST,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^struct IsAligned< DVecSerialExpr<VT,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct IsAligned< DVecTransExpr<VT,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^struct IsAligned< DVecTransposer<VT,TF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^struct IsAligned< SMatDVecMultExpr<MT,VT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsAligned< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsAligned	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^struct IsAligned< TDVecSMatMultExpr<VT,MT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^struct IsAligned< TDVecTSMatMultExpr<VT,MT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^struct IsAligned< TSMatDVecMultExpr<MT,VT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^struct IsAligned< TSVecTDMatMultExpr<VT,MT> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/typetraits/IsAligned.h	/^struct IsAligned : public FalseType$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/typetraits/IsAligned.h	/^struct IsAligned< const T > : public IsAligned<T>$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/typetraits/IsAligned.h	/^struct IsAligned< const volatile T > : public IsAligned<T>$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/typetraits/IsAligned.h	/^struct IsAligned< volatile T > : public IsAligned<T>$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/views/Column.h	/^struct IsAligned< Column<MT,SO,true,SF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/views/Row.h	/^struct IsAligned< Row<MT,SO,true,SF> >$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct IsAligned< Submatrix<MT,aligned,SO,true> > : public TrueType$/;"	s	namespace:blaze
IsAligned	amun/3rd_party/blaze/math/views/Subvector.h	/^struct IsAligned< Subvector<VT,aligned,TF,true> > : public TrueType$/;"	s	namespace:blaze
IsAnchorChar	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsAnchorChar(int ch) {  \/\/ test for ns-anchor-char$/;"	f	namespace:YAML::Utils::__anon67
IsArithmetic	amun/3rd_party/blaze/util/typetraits/IsArithmetic.h	/^struct IsArithmetic : public BoolConstant< std::is_arithmetic<T>::value >$/;"	s	namespace:blaze
IsArray	amun/3rd_party/blaze/util/typetraits/IsArray.h	/^struct IsArray : public BoolConstant< std::is_array<T>::value >$/;"	s	namespace:blaze
IsAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsAssignable$/;"	s	namespace:blaze
IsBLASCompatible	amun/3rd_party/blaze/math/typetraits/IsBLASCompatible.h	/^struct IsBLASCompatible$/;"	s	namespace:blaze
IsBaseOf	amun/3rd_party/blaze/util/typetraits/IsBaseOf.h	/^class IsBaseOf : public BoolConstant< std::is_base_of< RemoveCV_<Base>, RemoveCV_<Derived> >::value >$/;"	c	namespace:blaze
IsBoolean	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^struct IsBoolean : public FalseType$/;"	s	namespace:blaze
IsBoolean	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^struct IsBoolean<bool> : public TrueType$/;"	s	namespace:blaze
IsBoolean	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^struct IsBoolean<const bool> : public TrueType$/;"	s	namespace:blaze
IsBoolean	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^struct IsBoolean<const volatile bool> : public TrueType$/;"	s	namespace:blaze
IsBoolean	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^struct IsBoolean<volatile bool> : public TrueType$/;"	s	namespace:blaze
IsBuiltin	amun/3rd_party/blaze/util/typetraits/IsBuiltin.h	/^struct IsBuiltin : public BoolConstant< std::is_fundamental<T>::value >$/;"	s	namespace:blaze
IsCached	amun/common/processor/bpe.cpp	/^bool BPE::IsCached(const std::string& word) const {$/;"	f	class:amunmt::BPE
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter : public FalseType$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<char> : public TrueType$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<const T> : public IsCharacter<T>::Type$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<const volatile T> : public IsCharacter<T>::Type$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<signed char> : public TrueType$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<unsigned char> : public TrueType$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<volatile T> : public IsCharacter<T>::Type$/;"	s	namespace:blaze
IsCharacter	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^struct IsCharacter<wchar_t> : public TrueType$/;"	s	namespace:blaze
IsClass	amun/3rd_party/blaze/util/typetraits/IsClass.h	/^struct IsClass : public BoolConstant< std::is_class<T>::value >$/;"	s	namespace:blaze
IsColumn	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^struct IsColumn : public FalseType$/;"	s	namespace:blaze
IsColumn	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^struct IsColumn< Column<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsColumn	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^struct IsColumn< const Column<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsColumn	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^struct IsColumn< const volatile Column<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsColumn	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^struct IsColumn< volatile Column<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsColumnMajorMatrix	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	/^   enum : bool { condition = And< IsDenseMatrix<MT>, IsColumnMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TDMatScalarDivExprTrait	typeref:enum:blaze::TDMatScalarDivExprTrait::
IsColumnMajorMatrix	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	/^   enum : bool { condition = And< IsDenseMatrix<MT>, IsColumnMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TDMatScalarMultExprTrait	typeref:enum:blaze::TDMatScalarMultExprTrait::
IsColumnMajorMatrix	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	/^   enum : bool { condition = And< IsSparseMatrix<MT>, IsColumnMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TSMatScalarDivExprTrait	typeref:enum:blaze::TSMatScalarDivExprTrait::
IsColumnMajorMatrix	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	/^   enum : bool { condition = And< IsSparseMatrix<MT>, IsColumnMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TSMatScalarMultExprTrait	typeref:enum:blaze::TSMatScalarMultExprTrait::
IsColumnMajorMatrix	amun/3rd_party/blaze/math/typetraits/IsColumnMajorMatrix.h	/^struct IsColumnMajorMatrix$/;"	s	namespace:blaze
IsColumnVector	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	/^   enum : bool { condition = And< IsDenseVector<VT>, IsColumnVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::DVecScalarDivExprTrait	typeref:enum:blaze::DVecScalarDivExprTrait::
IsColumnVector	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	/^   enum : bool { condition = And< IsDenseVector<VT>, IsColumnVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::DVecScalarMultExprTrait	typeref:enum:blaze::DVecScalarMultExprTrait::
IsColumnVector	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	/^   enum : bool { condition = And< IsSparseVector<VT>, IsColumnVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::SVecScalarDivExprTrait	typeref:enum:blaze::SVecScalarDivExprTrait::
IsColumnVector	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	/^   enum : bool { condition = And< IsSparseVector<VT>, IsColumnVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::SVecScalarMultExprTrait	typeref:enum:blaze::SVecScalarMultExprTrait::
IsColumnVector	amun/3rd_party/blaze/math/typetraits/IsColumnVector.h	/^struct IsColumnVector$/;"	s	namespace:blaze
IsComplex	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^struct IsComplex : public FalseType$/;"	s	namespace:blaze
IsComplex	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^struct IsComplex< complex<T> > : public TrueType$/;"	s	namespace:blaze
IsComplex	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^struct IsComplex< const complex<T> > : public TrueType$/;"	s	namespace:blaze
IsComplex	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^struct IsComplex< const volatile complex<T> > : public TrueType$/;"	s	namespace:blaze
IsComplex	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^struct IsComplex< volatile complex<T> > : public TrueType$/;"	s	namespace:blaze
IsComplexDouble	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^struct IsComplexDouble : public FalseType$/;"	s	namespace:blaze
IsComplexDouble	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^struct IsComplexDouble< complex<double> > : public TrueType$/;"	s	namespace:blaze
IsComplexDouble	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^struct IsComplexDouble< const complex<double> > : public TrueType$/;"	s	namespace:blaze
IsComplexDouble	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^struct IsComplexDouble< const volatile complex<double> > : public TrueType$/;"	s	namespace:blaze
IsComplexDouble	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^struct IsComplexDouble< volatile complex<double> > : public TrueType$/;"	s	namespace:blaze
IsComplexFloat	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^struct IsComplexFloat : public FalseType$/;"	s	namespace:blaze
IsComplexFloat	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^struct IsComplexFloat< complex<float> > : public TrueType$/;"	s	namespace:blaze
IsComplexFloat	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^struct IsComplexFloat< const complex<float> > : public TrueType$/;"	s	namespace:blaze
IsComplexFloat	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^struct IsComplexFloat< const volatile complex<float> > : public TrueType$/;"	s	namespace:blaze
IsComplexFloat	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^struct IsComplexFloat< volatile complex<float> > : public TrueType$/;"	s	namespace:blaze
IsComputation	amun/3rd_party/blaze/math/typetraits/IsComputation.h	/^struct IsComputation$/;"	s	namespace:blaze
IsConst	amun/3rd_party/blaze/util/typetraits/IsConst.h	/^struct IsConst : public BoolConstant< std::is_const<T>::value >$/;"	s	namespace:blaze
IsConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsConstructible$/;"	s	namespace:blaze
IsConvertible	amun/3rd_party/blaze/util/typetraits/IsConvertible.h	/^struct IsConvertible : public BoolConstant< std::is_convertible<From,To>::value >$/;"	s	namespace:blaze
IsCopyAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsCopyAssignable$/;"	s	namespace:blaze
IsCopyConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsCopyConstructible$/;"	s	namespace:blaze
IsCrossExpr	amun/3rd_party/blaze/math/typetraits/IsCrossExpr.h	/^struct IsCrossExpr$/;"	s	namespace:blaze
IsCustom	amun/3rd_party/blaze/math/typetraits/IsCustom.h	/^struct IsCustom : public FalseType$/;"	s	namespace:blaze
IsCustom	amun/3rd_party/blaze/math/typetraits/IsCustom.h	/^struct IsCustom< const T > : public IsCustom<T>$/;"	s	namespace:blaze
IsCustom	amun/3rd_party/blaze/math/typetraits/IsCustom.h	/^struct IsCustom< const volatile T > : public IsCustom<T>$/;"	s	namespace:blaze
IsCustom	amun/3rd_party/blaze/math/typetraits/IsCustom.h	/^struct IsCustom< volatile T > : public IsCustom<T>$/;"	s	namespace:blaze
IsDefaultConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsDefaultConstructible$/;"	s	namespace:blaze
IsDefined	amun/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::IsDefined() const {$/;"	f	class:YAML::Node
IsDenseMatrix	amun/3rd_party/blaze/math/typetraits/IsDenseMatrix.h	/^struct IsDenseMatrix$/;"	s	namespace:blaze
IsDenseVector	amun/3rd_party/blaze/math/typetraits/IsDenseVector.h	/^struct IsDenseVector$/;"	s	namespace:blaze
IsDestructible	amun/3rd_party/blaze/util/typetraits/IsDestructible.h	/^struct IsDestructible$/;"	s	namespace:blaze
IsDiagonal	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	/^struct IsDiagonal : public BoolConstant< And< IsLower<T>, IsUpper<T> >::value >$/;"	s	namespace:blaze
IsDiagonal	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	/^struct IsDiagonal< const T > : public IsDiagonal<T>$/;"	s	namespace:blaze
IsDiagonal	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	/^struct IsDiagonal< const volatile T > : public IsDiagonal<T>$/;"	s	namespace:blaze
IsDiagonal	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	/^struct IsDiagonal< volatile T > : public IsDiagonal<T>$/;"	s	namespace:blaze
IsDivExpr	amun/3rd_party/blaze/math/typetraits/IsDivExpr.h	/^struct IsDivExpr$/;"	s	namespace:blaze
IsDouble	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^struct IsDouble : public FalseType$/;"	s	namespace:blaze
IsDouble	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^struct IsDouble<const double> : public TrueType$/;"	s	namespace:blaze
IsDouble	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^struct IsDouble<const volatile double> : public TrueType$/;"	s	namespace:blaze
IsDouble	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^struct IsDouble<double> : public TrueType$/;"	s	namespace:blaze
IsDouble	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^struct IsDouble<volatile double> : public TrueType$/;"	s	namespace:blaze
IsEmpty	amun/3rd_party/blaze/util/typetraits/IsEmpty.h	/^struct IsEmpty : public BoolConstant< std::is_empty<T>::value >$/;"	s	namespace:blaze
IsEntirely	amun/3rd_party/yaml-cpp/convert.cpp	/^bool IsEntirely(const std::string& str, T func) {$/;"	f	namespace:__anon85
IsEvalExpr	amun/3rd_party/blaze/math/typetraits/IsEvalExpr.h	/^struct IsEvalExpr$/;"	s	namespace:blaze
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::DMatDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::DMatSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::DMatTDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::DMatTSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::SMatDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::SMatSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::SMatTDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TDMatDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TDMatSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TDMatTDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TDMatTSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TSMatDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TSMatSMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TSMatTDMatMultExpr
IsEvaluationRequired	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   struct IsEvaluationRequired {$/;"	s	class:blaze::TSMatTSMatMultExpr
IsEven	amun/3rd_party/blaze/util/valuetraits/IsEven.h	/^struct IsEven : public BoolConstant< N % 2UL == 0UL >$/;"	s	namespace:blaze
IsExpression	amun/3rd_party/blaze/math/typetraits/IsExpression.h	/^struct IsExpression$/;"	s	namespace:blaze
IsFileName	amun/3rd_party/blaze/util/InputString.h	/^inline bool IsFileName( const InputString& s )$/;"	f	namespace:blaze
IsFlexibleCase	amun/3rd_party/yaml-cpp/convert.cpp	/^bool IsFlexibleCase(const std::string& str) {$/;"	f	namespace:__anon85
IsFloat	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^struct IsFloat : public FalseType$/;"	s	namespace:blaze
IsFloat	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^struct IsFloat<const float> : public TrueType$/;"	s	namespace:blaze
IsFloat	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^struct IsFloat<const volatile float> : public TrueType$/;"	s	namespace:blaze
IsFloat	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^struct IsFloat<float> : public TrueType$/;"	s	namespace:blaze
IsFloat	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^struct IsFloat<volatile float> : public TrueType$/;"	s	namespace:blaze
IsFloatingPoint	amun/3rd_party/blaze/util/typetraits/IsFloatingPoint.h	/^struct IsFloatingPoint : public BoolConstant< std::is_floating_point<T>::value >$/;"	s	namespace:blaze
IsForEachExpr	amun/3rd_party/blaze/math/typetraits/IsForEachExpr.h	/^struct IsForEachExpr$/;"	s	namespace:blaze
IsGeneral	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	/^struct IsGeneral$/;"	s	namespace:blaze
IsGeneral	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	/^struct IsGeneral< const T > : public IsGeneral<T>$/;"	s	namespace:blaze
IsGeneral	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	/^struct IsGeneral< const volatile T > : public IsGeneral<T>$/;"	s	namespace:blaze
IsGeneral	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	/^struct IsGeneral< volatile T > : public IsGeneral<T>$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsHermitian< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsHermitian< HermitianMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsHermitian< SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsHermitian< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsHermitian< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsHermitian< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Acos,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Acosh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Cbrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Cos,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Cosh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Erfc,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Exp,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,InvCbrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,InvSqrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Log,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Log10,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Sqrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsHermitian< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsHermitian< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsHermitian< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsHermitian< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsHermitian< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsHermitian< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsHermitian< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsHermitian< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsHermitian< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsHermitian< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsHermitian< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsHermitian< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsHermitian< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsHermitian< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Acos,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Acosh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Cbrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Cos,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Cosh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Erfc,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Exp,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,InvCbrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,InvSqrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Log,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Log10,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Sqrt,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsHermitian< SMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsHermitian< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsHermitian< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsHermitian< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsHermitian< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsHermitian< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsHermitian< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsHermitian< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsHermitian< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsHermitian< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsHermitian< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsHermitian< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsHermitian< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsHermitian< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsHermitian< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsHermitian< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	/^struct IsHermitian : public FalseType$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	/^struct IsHermitian< const T > : public IsHermitian<T>$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	/^struct IsHermitian< const volatile T > : public IsHermitian<T>$/;"	s	namespace:blaze
IsHermitian	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	/^struct IsHermitian< volatile T > : public IsHermitian<T>$/;"	s	namespace:blaze
IsIdentity	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	/^struct IsIdentity : public BoolConstant< And< IsUniLower<T>, IsUniUpper<T> >::value >$/;"	s	namespace:blaze
IsIdentity	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	/^struct IsIdentity< const T > : public IsIdentity<T>$/;"	s	namespace:blaze
IsIdentity	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	/^struct IsIdentity< const volatile T > : public IsIdentity<T>$/;"	s	namespace:blaze
IsIdentity	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	/^struct IsIdentity< volatile T > : public IsIdentity<T>$/;"	s	namespace:blaze
IsInfinity	amun/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsInfinity(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger : public FalseType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<const int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<const unsigned int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<const volatile int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<const volatile unsigned int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<unsigned int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<volatile int> : public TrueType$/;"	s	namespace:blaze
IsInteger	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^struct IsInteger<volatile unsigned int> : public TrueType$/;"	s	namespace:blaze
IsIntegral	amun/3rd_party/blaze/util/typetraits/IsIntegral.h	/^struct IsIntegral : public BoolConstant< std::is_integral<T>::value >$/;"	s	namespace:blaze
IsInvertible	amun/3rd_party/blaze/math/typetraits/IsInvertible.h	/^struct IsInvertible$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong : public FalseType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<const long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<const unsigned long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<const volatile long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<const volatile unsigned long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<unsigned long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<volatile long> : public TrueType$/;"	s	namespace:blaze
IsLong	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^struct IsLong<volatile unsigned long> : public TrueType$/;"	s	namespace:blaze
IsLongDouble	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^struct IsLongDouble : public FalseType$/;"	s	namespace:blaze
IsLongDouble	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^struct IsLongDouble<const long double> : public TrueType$/;"	s	namespace:blaze
IsLongDouble	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^struct IsLongDouble<const volatile long double> : public TrueType$/;"	s	namespace:blaze
IsLongDouble	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^struct IsLongDouble<long double> : public TrueType$/;"	s	namespace:blaze
IsLongDouble	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^struct IsLongDouble<volatile long double> : public TrueType$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsLower< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsLower< LowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsLower< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsLower< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsLower< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsLower< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsLower< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsLower< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsLower< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsLower< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsLower< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsLower< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsLower< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsLower< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsLower< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsLower< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsLower	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsLower< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsLower< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsLower< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsLower< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsLower< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsLower< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsLower< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsLower	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsLower< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsLower< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsLower< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsLower< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsLower< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsLower	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsLower< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsLower< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsLower< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsLower< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsLower< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsLower< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsLower< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsLower< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsLower< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsLower	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsLower< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsLower< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsLower< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsLower< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/typetraits/IsLower.h	/^struct IsLower : public BoolConstant< Or< IsUniLower<T>, IsStrictlyLower<T> >::value >$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/typetraits/IsLower.h	/^struct IsLower< const T > : public IsLower<T>$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/typetraits/IsLower.h	/^struct IsLower< const volatile T > : public IsLower<T>$/;"	s	namespace:blaze
IsLower	amun/3rd_party/blaze/math/typetraits/IsLower.h	/^struct IsLower< volatile T > : public IsLower<T>$/;"	s	namespace:blaze
IsLower	amun/3rd_party/yaml-cpp/convert.cpp	/^bool IsLower(char ch) { return 'a' <= ch && ch <= 'z'; }$/;"	f	namespace:__anon85
IsMap	amun/3rd_party/yaml-cpp/node/node.h	/^  bool IsMap() const { return Type() == NodeType::Map; }$/;"	f	class:YAML::Node
IsMatEvalExpr	amun/3rd_party/blaze/math/typetraits/IsMatEvalExpr.h	/^struct IsMatEvalExpr$/;"	s	namespace:blaze
IsMatForEachExpr	amun/3rd_party/blaze/math/typetraits/IsMatForEachExpr.h	/^struct IsMatForEachExpr$/;"	s	namespace:blaze
IsMatInvExpr	amun/3rd_party/blaze/math/typetraits/IsMatInvExpr.h	/^struct IsMatInvExpr$/;"	s	namespace:blaze
IsMatMatAddExpr	amun/3rd_party/blaze/math/typetraits/IsMatMatAddExpr.h	/^struct IsMatMatAddExpr$/;"	s	namespace:blaze
IsMatMatMultExpr	amun/3rd_party/blaze/math/typetraits/IsMatMatMultExpr.h	/^struct IsMatMatMultExpr$/;"	s	namespace:blaze
IsMatMatSubExpr	amun/3rd_party/blaze/math/typetraits/IsMatMatSubExpr.h	/^struct IsMatMatSubExpr$/;"	s	namespace:blaze
IsMatScalarDivExpr	amun/3rd_party/blaze/math/typetraits/IsMatScalarDivExpr.h	/^struct IsMatScalarDivExpr$/;"	s	namespace:blaze
IsMatScalarMultExpr	amun/3rd_party/blaze/math/typetraits/IsMatScalarMultExpr.h	/^struct IsMatScalarMultExpr$/;"	s	namespace:blaze
IsMatSerialExpr	amun/3rd_party/blaze/math/typetraits/IsMatSerialExpr.h	/^struct IsMatSerialExpr$/;"	s	namespace:blaze
IsMatTransExpr	amun/3rd_party/blaze/math/typetraits/IsMatTransExpr.h	/^struct IsMatTransExpr$/;"	s	namespace:blaze
IsMatVecMultExpr	amun/3rd_party/blaze/math/typetraits/IsMatVecMultExpr.h	/^struct IsMatVecMultExpr$/;"	s	namespace:blaze
IsMatrix	amun/3rd_party/blaze/math/typetraits/IsMatrix.h	/^struct IsMatrix$/;"	s	namespace:blaze
IsMoveAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsMoveAssignable$/;"	s	namespace:blaze
IsMoveConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsMoveConstructible$/;"	s	namespace:blaze
IsMultExpr	amun/3rd_party/blaze/math/typetraits/IsMultExpr.h	/^struct IsMultExpr$/;"	s	namespace:blaze
IsMultipleOf	amun/3rd_party/blaze/util/valuetraits/IsMultipleOf.h	/^struct IsMultipleOf : public BoolConstant< M % N == 0UL >$/;"	s	namespace:blaze
IsMultipleOf	amun/3rd_party/blaze/util/valuetraits/IsMultipleOf.h	/^struct IsMultipleOf<0,0> : public TrueType$/;"	s	namespace:blaze
IsMultipleOf	amun/3rd_party/blaze/util/valuetraits/IsMultipleOf.h	/^struct IsMultipleOf<M,0UL> : public FalseType$/;"	s	namespace:blaze
IsNaN	amun/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsNaN(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsNegativeInfinity	amun/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsNegativeInfinity(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsNeighborAligned	amun/3rd_party/fast_align/src/atools.cc	/^  bool IsNeighborAligned(int i, int j) const {$/;"	f	struct:RefineCommand
IsNeitherAligned	amun/3rd_party/fast_align/src/atools.cc	/^  bool IsNeitherAligned(int i, int j) const {$/;"	f	struct:RefineCommand
IsNothrowAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsNothrowAssignable$/;"	s	namespace:blaze
IsNothrowConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsNothrowConstructible$/;"	s	namespace:blaze
IsNothrowCopyAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsNothrowCopyAssignable$/;"	s	namespace:blaze
IsNothrowCopyConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsNothrowCopyConstructible$/;"	s	namespace:blaze
IsNothrowDefaultConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsNothrowDefaultConstructible$/;"	s	namespace:blaze
IsNothrowDestructible	amun/3rd_party/blaze/util/typetraits/IsDestructible.h	/^struct IsNothrowDestructible$/;"	s	namespace:blaze
IsNothrowMoveAssignable	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^struct IsNothrowMoveAssignable$/;"	s	namespace:blaze
IsNothrowMoveConstructible	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^struct IsNothrowMoveConstructible$/;"	s	namespace:blaze
IsNull	amun/3rd_party/yaml-cpp/node/node.h	/^  bool IsNull() const { return Type() == NodeType::Null; }$/;"	f	class:YAML::Node
IsNullString	amun/3rd_party/yaml-cpp/null.cpp	/^bool IsNullString(const std::string& str) {$/;"	f	namespace:YAML
IsNumeric	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^struct IsNumeric : public BoolConstant< IsBuiltin<T>::value && !IsBoolean<T>::value && !IsVoid<T>::value >$/;"	s	namespace:blaze
IsNumeric	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^struct IsNumeric< complex<T> > : public IsNumeric<T>::Type$/;"	s	namespace:blaze
IsNumeric	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^struct IsNumeric< const complex<T> > : public IsNumeric<T>::Type$/;"	s	namespace:blaze
IsNumeric	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^struct IsNumeric< const volatile complex<T> > : public IsNumeric<T>::Type$/;"	s	namespace:blaze
IsNumeric	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^struct IsNumeric< volatile complex<T> > : public IsNumeric<T>::Type$/;"	s	namespace:blaze
IsNumericMatrix	amun/3rd_party/blaze/math/typetraits/IsNumericMatrix.h	/^struct IsNumericMatrix$/;"	s	namespace:blaze
IsNumericVector	amun/3rd_party/blaze/math/typetraits/IsNumericVector.h	/^struct IsNumericVector$/;"	s	namespace:blaze
IsObject	amun/3rd_party/blaze/util/typetraits/IsObject.h	/^struct IsObject : public BoolConstant< std::is_object<T>::value >$/;"	s	namespace:blaze
IsOdd	amun/3rd_party/blaze/util/valuetraits/IsOdd.h	/^struct IsOdd : public BoolConstant< N % 2UL != 0UL >$/;"	s	namespace:blaze
IsOneOrBothUnaligned	amun/3rd_party/fast_align/src/atools.cc	/^  bool IsOneOrBothUnaligned(int i, int j) const {$/;"	f	struct:RefineCommand
IsOpposedView	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	/^struct IsOpposedView : public FalseType$/;"	s	namespace:blaze
IsOpposedView	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	/^struct IsOpposedView< const T > : public IsOpposedView<T>$/;"	s	namespace:blaze
IsOpposedView	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	/^struct IsOpposedView< const volatile T > : public IsOpposedView<T>$/;"	s	namespace:blaze
IsOpposedView	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	/^struct IsOpposedView< volatile T > : public IsOpposedView<T>$/;"	s	namespace:blaze
IsOpposedView	amun/3rd_party/blaze/math/views/Column.h	/^struct IsOpposedView< Column<MT,false,DF,false> >$/;"	s	namespace:blaze
IsOpposedView	amun/3rd_party/blaze/math/views/Row.h	/^struct IsOpposedView< Row<MT,false,DF,false> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsPadded< DiagonalMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsPadded< HermitianMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsPadded< LowerMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsPadded< StrictlyLowerMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsPadded< StrictlyUpperMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsPadded< SymmetricMatrix<MT,SO,DF,NF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsPadded< UniLowerMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsPadded< UniUpperMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsPadded< UpperMatrix<MT,SO,DF> > : public BoolConstant< IsPadded<MT>::value >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsPadded< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsPadded< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsPadded< DMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsPadded< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsPadded< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsPadded< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^struct IsPadded< DMatTransposer<MT,SO> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^struct IsPadded< DVecDVecAddExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^struct IsPadded< DVecDVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^struct IsPadded< DVecDVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct IsPadded< DVecForEachExpr<VT,OP,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct IsPadded< DVecScalarDivExpr<VT,ST,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct IsPadded< DVecScalarMultExpr<VT,ST,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct IsPadded< DVecTransExpr<VT,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^struct IsPadded< DVecTransposer<VT,TF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/typetraits/IsPadded.h	/^struct IsPadded : public FalseType$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/typetraits/IsPadded.h	/^struct IsPadded< const T > : public IsPadded<T>$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/typetraits/IsPadded.h	/^struct IsPadded< const volatile T > : public IsPadded<T>$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/typetraits/IsPadded.h	/^struct IsPadded< volatile T > : public IsPadded<T>$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/views/Column.h	/^struct IsPadded< Column<MT,SO,true,SF> >$/;"	s	namespace:blaze
IsPadded	amun/3rd_party/blaze/math/views/Row.h	/^struct IsPadded< Row<MT,SO,true,SF> >$/;"	s	namespace:blaze
IsPod	amun/3rd_party/blaze/util/typetraits/IsPod.h	/^struct IsPod : public BoolConstant< std::is_pod<T>::value >$/;"	s	namespace:blaze
IsPointer	amun/3rd_party/blaze/util/typetraits/IsPointer.h	/^struct IsPointer : public BoolConstant< std::is_pointer<T>::value >$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf : public BoolConstant< IsPowerOf<B,N\/B>::value >$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<0,0> : public TrueType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<0,N> : public FalseType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<1,1> : public TrueType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<1,N> : public FalseType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<2,0> : public FalseType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<2,N> : public BoolConstant< ( N & (N-1) ) == 0UL >$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<B,0> : public FalseType$/;"	s	namespace:blaze
IsPowerOf	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^struct IsPowerOf<B,1> : public TrueType$/;"	s	namespace:blaze
IsProxy	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^struct IsProxy : public BoolConstant< IsProxyHelper<T>::value >$/;"	s	namespace:blaze
IsProxyHelper	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^struct IsProxyHelper$/;"	s	namespace:blaze
IsReference	amun/3rd_party/blaze/util/typetraits/IsReference.h	/^struct IsReference : public BoolConstant< std::is_reference<T>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsResizable< DiagonalMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsResizable< HermitianMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsResizable< LowerMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsResizable< StrictlyLowerMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsResizable< StrictlyUpperMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsResizable< SymmetricMatrix<MT,SO,DF,NF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsResizable< UniLowerMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsResizable< UniUpperMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsResizable< UpperMatrix<MT,SO,DF> > : public BoolConstant< IsResizable<MT>::value >$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct IsResizable< CompressedMatrix<T,SO> > : public TrueType$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct IsResizable< CompressedVector<T,TF> > : public TrueType$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/typetraits/IsResizable.h	/^struct IsResizable : public FalseType$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/typetraits/IsResizable.h	/^struct IsResizable< const T > : public IsResizable<T>$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/typetraits/IsResizable.h	/^struct IsResizable< const volatile T > : public IsResizable<T>$/;"	s	namespace:blaze
IsResizable	amun/3rd_party/blaze/math/typetraits/IsResizable.h	/^struct IsResizable< volatile T > : public IsResizable<T>$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsRestricted< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsRestricted< HermitianMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsRestricted< LowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsRestricted< StrictlyLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsRestricted< StrictlyUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsRestricted< SymmetricMatrix<MT,SO,DF,NF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsRestricted< UniLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsRestricted< UniUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsRestricted< UpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	/^struct IsRestricted : public FalseType$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	/^struct IsRestricted< const T > : public IsRestricted<T>$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	/^struct IsRestricted< const volatile T > : public IsRestricted<T>$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	/^struct IsRestricted< volatile T > : public IsRestricted<T>$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/views/Column.h	/^struct IsRestricted< Column<MT,SO,DF,SF> > : public BoolConstant< IsRestricted<MT>::value >$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/views/Row.h	/^struct IsRestricted< Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct IsRestricted< Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
IsRestricted	amun/3rd_party/blaze/math/views/Subvector.h	/^struct IsRestricted< Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
IsRow	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^struct IsRow : public FalseType$/;"	s	namespace:blaze
IsRow	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^struct IsRow< Row<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsRow	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^struct IsRow< const Row<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsRow	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^struct IsRow< const volatile Row<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsRow	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^struct IsRow< volatile Row<MT,SO,DF,SF> > : public TrueType$/;"	s	namespace:blaze
IsRowMajorMatrix	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	/^   enum : bool { condition = And< IsDenseMatrix<MT>, IsRowMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::DMatScalarDivExprTrait	typeref:enum:blaze::DMatScalarDivExprTrait::
IsRowMajorMatrix	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	/^   enum : bool { condition = And< IsDenseMatrix<MT>, IsRowMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::DMatScalarMultExprTrait	typeref:enum:blaze::DMatScalarMultExprTrait::
IsRowMajorMatrix	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	/^   enum : bool { condition = And< IsSparseMatrix<MT>, IsRowMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::SMatScalarDivExprTrait	typeref:enum:blaze::SMatScalarDivExprTrait::
IsRowMajorMatrix	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	/^   enum : bool { condition = And< IsSparseMatrix<MT>, IsRowMajorMatrix<MT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::SMatScalarMultExprTrait	typeref:enum:blaze::SMatScalarMultExprTrait::
IsRowMajorMatrix	amun/3rd_party/blaze/math/typetraits/IsRowMajorMatrix.h	/^struct IsRowMajorMatrix$/;"	s	namespace:blaze
IsRowVector	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	/^   enum : bool { condition = And< IsDenseVector<VT>, IsRowVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TDVecScalarDivExprTrait	typeref:enum:blaze::TDVecScalarDivExprTrait::
IsRowVector	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	/^   enum : bool { condition = And< IsDenseVector<VT>, IsRowVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TDVecScalarMultExprTrait	typeref:enum:blaze::TDVecScalarMultExprTrait::
IsRowVector	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	/^   enum : bool { condition = And< IsSparseVector<VT>, IsRowVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TSVecScalarDivExprTrait	typeref:enum:blaze::TSVecScalarDivExprTrait::
IsRowVector	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	/^   enum : bool { condition = And< IsSparseVector<VT>, IsRowVector<VT>, IsNumeric<ST> >::value };$/;"	m	struct:blaze::TSVecScalarMultExprTrait	typeref:enum:blaze::TSVecScalarMultExprTrait::
IsRowVector	amun/3rd_party/blaze/math/typetraits/IsRowVector.h	/^struct IsRowVector$/;"	s	namespace:blaze
IsSIMDEnabled	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^struct IsSIMDEnabled : public BoolConstant< IsSIMDEnabledHelper<T>::value >$/;"	s	namespace:blaze
IsSIMDEnabledHelper	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^struct IsSIMDEnabledHelper$/;"	s	namespace:blaze
IsSIMDPack	amun/3rd_party/blaze/math/typetraits/IsSIMDPack.h	/^struct IsSIMDPack$/;"	s	namespace:blaze
IsSMPAssignable	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^struct IsSMPAssignable : public BoolConstant< IsSMPAssignableHelper<T>::value >$/;"	s	namespace:blaze
IsSMPAssignableHelper	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^struct IsSMPAssignableHelper$/;"	s	namespace:blaze
IsSame	amun/3rd_party/blaze/util/typetraits/IsSame.h	/^struct IsSame : public BoolConstant< IsSameHelper<A,B>::value >$/;"	s
IsSameHelper	amun/3rd_party/blaze/util/typetraits/IsSame.h	/^struct IsSameHelper$/;"	s	namespace:blaze
IsScalar	amun/3rd_party/yaml-cpp/node/node.h	/^  bool IsScalar() const { return Type() == NodeType::Scalar; }$/;"	f	class:YAML::Node
IsSequence	amun/3rd_party/yaml-cpp/node/node.h	/^  bool IsSequence() const { return Type() == NodeType::Sequence; }$/;"	f	class:YAML::Node
IsSerialExpr	amun/3rd_party/blaze/math/typetraits/IsSerialExpr.h	/^struct IsSerialExpr$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort : public FalseType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<const short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<const unsigned short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<const volatile short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<const volatile unsigned short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<unsigned short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<volatile short> : public TrueType$/;"	s	namespace:blaze
IsShort	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^struct IsShort<volatile unsigned short> : public TrueType$/;"	s	namespace:blaze
IsSigned	amun/3rd_party/blaze/util/typetraits/IsSigned.h	/^struct IsSigned : public BoolConstant< std::is_signed<T>::value >$/;"	s	namespace:blaze
IsSparseElement	amun/3rd_party/blaze/math/typetraits/IsSparseElement.h	/^struct IsSparseElement$/;"	s	namespace:blaze
IsSparseMatrix	amun/3rd_party/blaze/math/typetraits/IsSparseMatrix.h	/^struct IsSparseMatrix$/;"	s	namespace:blaze
IsSparseVector	amun/3rd_party/blaze/math/typetraits/IsSparseVector.h	/^struct IsSparseVector$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsSquare< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsSquare< HermitianMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct IsSquare< LowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsSquare< StrictlyLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsSquare< StrictlyUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsSquare< SymmetricMatrix<MT,SO,DF,NF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsSquare< UniLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsSquare< UniUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsSquare< UpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/typetraits/IsSquare.h	/^struct IsSquare : public FalseType$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/typetraits/IsSquare.h	/^struct IsSquare< const T > : public IsSquare<T>$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/typetraits/IsSquare.h	/^struct IsSquare< const volatile T > : public IsSquare<T>$/;"	s	namespace:blaze
IsSquare	amun/3rd_party/blaze/math/typetraits/IsSquare.h	/^struct IsSquare< volatile T > : public IsSquare<T>$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct IsStrictlyLower< StrictlyLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsStrictlyLower< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsStrictlyLower< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsStrictlyLower< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyLower< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsStrictlyLower< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsStrictlyLower< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsStrictlyLower< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsStrictlyLower< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsStrictlyLower< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsStrictlyLower< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsStrictlyLower< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsStrictlyLower< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsStrictlyLower< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsStrictlyLower< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsStrictlyLower< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsStrictlyLower< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsStrictlyLower< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsStrictlyLower< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsStrictlyLower< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsStrictlyLower< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsStrictlyLower< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsStrictlyLower< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsStrictlyLower< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsStrictlyLower< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsStrictlyLower< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsStrictlyLower< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsStrictlyLower< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsStrictlyLower< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsStrictlyLower< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsStrictlyLower< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsStrictlyLower< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsStrictlyLower< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsStrictlyLower< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsStrictlyLower< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsStrictlyLower< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsStrictlyLower< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsStrictlyLower< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsStrictlyLower< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	/^struct IsStrictlyLower : public FalseType$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	/^struct IsStrictlyLower< const T > : public IsStrictlyLower<T>$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	/^struct IsStrictlyLower< const volatile T > : public IsStrictlyLower<T>$/;"	s	namespace:blaze
IsStrictlyLower	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	/^struct IsStrictlyLower< volatile T > : public IsStrictlyLower<T>$/;"	s	namespace:blaze
IsStrictlySame	amun/3rd_party/blaze/util/typetraits/IsSame.h	/^struct IsStrictlySame : public FalseType$/;"	s	namespace:blaze
IsStrictlySame	amun/3rd_party/blaze/util/typetraits/IsSame.h	/^struct IsStrictlySame<T,T> : public TrueType$/;"	s	namespace:blaze
IsStrictlyTriangular	amun/3rd_party/blaze/math/typetraits/IsStrictlyTriangular.h	/^struct IsStrictlyTriangular$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct IsStrictlyUpper< StrictlyUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsStrictlyUpper< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsStrictlyUpper< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsStrictlyUpper< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsStrictlyUpper< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsStrictlyUpper< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsStrictlyUpper< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsStrictlyUpper< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsStrictlyUpper< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsStrictlyUpper< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsStrictlyUpper< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsStrictlyUpper< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsStrictlyUpper< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsStrictlyUpper< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsStrictlyUpper< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsStrictlyUpper< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsStrictlyUpper< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsStrictlyUpper< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsStrictlyUpper< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsStrictlyUpper< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsStrictlyUpper< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsStrictlyUpper< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsStrictlyUpper< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsStrictlyUpper< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsStrictlyUpper< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsStrictlyUpper< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsStrictlyUpper< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsStrictlyUpper< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsStrictlyUpper< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsStrictlyUpper< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsStrictlyUpper< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsStrictlyUpper< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsStrictlyUpper< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsStrictlyUpper< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsStrictlyUpper< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsStrictlyUpper< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsStrictlyUpper< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsStrictlyUpper< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsStrictlyUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsStrictlyUpper< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	/^struct IsStrictlyUpper : public FalseType$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	/^struct IsStrictlyUpper< const T > : public IsStrictlyUpper<T>$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	/^struct IsStrictlyUpper< const volatile T > : public IsStrictlyUpper<T>$/;"	s	namespace:blaze
IsStrictlyUpper	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	/^struct IsStrictlyUpper< volatile T > : public IsStrictlyUpper<T>$/;"	s	namespace:blaze
IsSubExpr	amun/3rd_party/blaze/math/typetraits/IsSubExpr.h	/^struct IsSubExpr$/;"	s	namespace:blaze
IsSubmatrix	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^struct IsSubmatrix : public FalseType$/;"	s	namespace:blaze
IsSubmatrix	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^struct IsSubmatrix< Submatrix<MT,AF,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubmatrix	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^struct IsSubmatrix< const Submatrix<MT,AF,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubmatrix	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^struct IsSubmatrix< const volatile Submatrix<MT,AF,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubmatrix	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^struct IsSubmatrix< volatile Submatrix<MT,AF,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubvector	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^struct IsSubvector : public FalseType$/;"	s	namespace:blaze
IsSubvector	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^struct IsSubvector< Subvector<VT,AF,TF,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubvector	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^struct IsSubvector< const Subvector<VT,AF,TF,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubvector	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^struct IsSubvector< const volatile Subvector<VT,AF,TF,DF> > : public TrueType$/;"	s	namespace:blaze
IsSubvector	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^struct IsSubvector< volatile Subvector<VT,AF,TF,DF> > : public TrueType$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsSymmetric< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct IsSymmetric< HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct IsSymmetric< SymmetricMatrix<MT,SO,DF,NF> > : public TrueType$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsSymmetric< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsSymmetric< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsSymmetric< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Acos,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Acosh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Cbrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Cos,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Cosh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Erfc,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Exp,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,InvCbrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,InvSqrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Log,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Log10,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Sqrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsSymmetric< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsSymmetric< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsSymmetric< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsSymmetric< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsSymmetric< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsSymmetric< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsSymmetric< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsSymmetric< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsSymmetric< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsSymmetric< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsSymmetric< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsSymmetric< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsSymmetric< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsSymmetric< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Acos,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Acosh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Cbrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Cos,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Cosh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Erfc,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Exp,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,InvCbrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,InvSqrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Log,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Log10,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Sqrt,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsSymmetric< SMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsSymmetric< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsSymmetric< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsSymmetric< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsSymmetric< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsSymmetric< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsSymmetric< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsSymmetric< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsSymmetric< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsSymmetric< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsSymmetric< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsSymmetric< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsSymmetric< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsSymmetric< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsSymmetric< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsSymmetric< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	/^struct IsSymmetric : public FalseType$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	/^struct IsSymmetric< const T > : public IsSymmetric<T>$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	/^struct IsSymmetric< const volatile T > : public IsSymmetric<T>$/;"	s	namespace:blaze
IsSymmetric	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	/^struct IsSymmetric< volatile T > : public IsSymmetric<T>$/;"	s	namespace:blaze
IsTVecMatMultExpr	amun/3rd_party/blaze/math/typetraits/IsTVecMatMultExpr.h	/^struct IsTVecMatMultExpr$/;"	s	namespace:blaze
IsTemporary	amun/3rd_party/blaze/math/typetraits/IsTemporary.h	/^struct IsTemporary$/;"	s	namespace:blaze
IsTrailingByte	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsTrailingByte(char ch) { return (ch & 0xC0) == 0x80; }$/;"	f	namespace:YAML::Utils::__anon67
IsTransExpr	amun/3rd_party/blaze/math/typetraits/IsTransExpr.h	/^struct IsTransExpr$/;"	s	namespace:blaze
IsTriangular	amun/3rd_party/blaze/math/typetraits/IsTriangular.h	/^struct IsTriangular : public BoolConstant< Or< IsLower<T>, IsUpper<T> >::value >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct IsUniLower< UniLowerMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsUniLower< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsUniLower< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsUniLower< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUniLower< DMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsUniLower< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsUniLower< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsUniLower< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsUniLower< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsUniLower< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsUniLower< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsUniLower< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsUniLower< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsUniLower< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsUniLower< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsUniLower< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsUniLower< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsUniLower< SMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsUniLower< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsUniLower< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsUniLower< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsUniLower< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsUniLower< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsUniLower< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsUniLower< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsUniLower< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsUniLower< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsUniLower< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsUniLower< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsUniLower< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsUniLower< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsUniLower< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsUniLower< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsUniLower< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsUniLower< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUniLower	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsUniLower< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	/^struct IsUniLower : public FalseType$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	/^struct IsUniLower< const T > : public IsUniLower<T>$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	/^struct IsUniLower< const volatile T > : public IsUniLower<T>$/;"	s	namespace:blaze
IsUniLower	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	/^struct IsUniLower< volatile T > : public IsUniLower<T>$/;"	s	namespace:blaze
IsUniTriangular	amun/3rd_party/blaze/math/typetraits/IsUniTriangular.h	/^struct IsUniTriangular : public BoolConstant< Or< IsUniLower<T>, IsUniUpper<T> >::value >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct IsUniUpper< UniUpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsUniUpper< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsUniUpper< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsUniUpper< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUniUpper< DMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsUniUpper< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsUniUpper< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsUniUpper< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsUniUpper< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsUniUpper< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsUniUpper< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsUniUpper< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsUniUpper< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsUniUpper< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsUniUpper< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsUniUpper< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsUniUpper< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsUniUpper< SMatForEachExpr<MT,Pow<ET>,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsUniUpper< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsUniUpper< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsUniUpper< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsUniUpper< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsUniUpper< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsUniUpper< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsUniUpper< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsUniUpper< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsUniUpper< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsUniUpper< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsUniUpper< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsUniUpper< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsUniUpper< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsUniUpper< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsUniUpper< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsUniUpper< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsUniUpper< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUniUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsUniUpper< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	/^struct IsUniUpper : public FalseType$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	/^struct IsUniUpper< const T > : public IsUniUpper<T>$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	/^struct IsUniUpper< const volatile T > : public IsUniUpper<T>$/;"	s	namespace:blaze
IsUniUpper	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	/^struct IsUniUpper< volatile T > : public IsUniUpper<T>$/;"	s	namespace:blaze
IsUnion	amun/3rd_party/blaze/util/typetraits/IsUnion.h	/^struct IsUnion : public BoolConstant< std::is_union<T>::value >$/;"	s	namespace:blaze
IsUnsigned	amun/3rd_party/blaze/util/typetraits/IsUnsigned.h	/^struct IsUnsigned : public BoolConstant< std::is_unsigned<T>::value >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct IsUpper< DiagonalMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct IsUpper< UpperMatrix<MT,SO,DF> > : public TrueType$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct IsUpper< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct IsUpper< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct IsUpper< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Abs,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Asin,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Asinh,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Atan,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Atanh,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Ceil,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Conj,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Erf,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Floor,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Imag,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Real,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Sin,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Sinh,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Tan,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct IsUpper< DMatForEachExpr<MT,Tanh,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct IsUpper< DMatInvExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct IsUpper< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct IsUpper< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct IsUpper< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct IsUpper< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct IsUpper< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct IsUpper< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct IsUpper< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct IsUpper< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct IsUpper< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct IsUpper< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct IsUpper< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct IsUpper< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct IsUpper< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct IsUpper< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct IsUpper< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct IsUpper< SMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUpper	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct IsUpper< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct IsUpper< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct IsUpper< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct IsUpper< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct IsUpper< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct IsUpper< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct IsUpper< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct IsUpper< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct IsUpper< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct IsUpper< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct IsUpper< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct IsUpper< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct IsUpper< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct IsUpper< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct IsUpper< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct IsUpper< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct IsUpper< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
IsUpper	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct IsUpper< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/typetraits/IsUpper.h	/^struct IsUpper : public BoolConstant< Or< IsUniUpper<T>, IsStrictlyUpper<T> >::value >$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/typetraits/IsUpper.h	/^struct IsUpper< const T > : public IsUpper<T>$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/typetraits/IsUpper.h	/^struct IsUpper< const volatile T > : public IsUpper<T>$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/blaze/math/typetraits/IsUpper.h	/^struct IsUpper< volatile T > : public IsUpper<T>$/;"	s	namespace:blaze
IsUpper	amun/3rd_party/yaml-cpp/convert.cpp	/^bool IsUpper(char ch) { return 'A' <= ch && ch <= 'Z'; }$/;"	f	namespace:__anon85
IsValid	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^struct IsValid : public TrueType$/;"	s	namespace:blaze
IsValid	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^struct IsValid<INVALID_TYPE> : public FalseType$/;"	s	namespace:blaze
IsValid	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^struct IsValid<const INVALID_TYPE> : public FalseType$/;"	s	namespace:blaze
IsValid	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^struct IsValid<const volatile INVALID_TYPE> : public FalseType$/;"	s	namespace:blaze
IsValid	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^struct IsValid<volatile INVALID_TYPE> : public FalseType$/;"	s	namespace:blaze
IsValidLiteralScalar	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidLiteralScalar(const std::string& str, FlowType::value flowType,$/;"	f	namespace:YAML::Utils::__anon67
IsValidPlainScalar	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidPlainScalar(const std::string& str, FlowType::value flowType,$/;"	f	namespace:YAML::Utils::__anon67
IsValidSingleQuotedScalar	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidSingleQuotedScalar(const std::string& str, bool escapeNonAscii) {$/;"	f	namespace:YAML::Utils::__anon67
IsValidSource	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::IsValidSource(const Source& source) const {$/;"	f	class:YAML::RegEx
IsValidSource	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::IsValidSource<StringCharSource>($/;"	f	class:YAML::RegEx
IsVecEvalExpr	amun/3rd_party/blaze/math/typetraits/IsVecEvalExpr.h	/^struct IsVecEvalExpr$/;"	s	namespace:blaze
IsVecForEachExpr	amun/3rd_party/blaze/math/typetraits/IsVecForEachExpr.h	/^struct IsVecForEachExpr$/;"	s	namespace:blaze
IsVecScalarDivExpr	amun/3rd_party/blaze/math/typetraits/IsVecScalarDivExpr.h	/^struct IsVecScalarDivExpr$/;"	s	namespace:blaze
IsVecScalarMultExpr	amun/3rd_party/blaze/math/typetraits/IsVecScalarMultExpr.h	/^struct IsVecScalarMultExpr$/;"	s	namespace:blaze
IsVecSerialExpr	amun/3rd_party/blaze/math/typetraits/IsVecSerialExpr.h	/^struct IsVecSerialExpr$/;"	s	namespace:blaze
IsVecTVecMultExpr	amun/3rd_party/blaze/math/typetraits/IsVecTVecMultExpr.h	/^struct IsVecTVecMultExpr$/;"	s	namespace:blaze
IsVecTransExpr	amun/3rd_party/blaze/math/typetraits/IsVecTransExpr.h	/^struct IsVecTransExpr$/;"	s	namespace:blaze
IsVecVecAddExpr	amun/3rd_party/blaze/math/typetraits/IsVecVecAddExpr.h	/^struct IsVecVecAddExpr$/;"	s	namespace:blaze
IsVecVecDivExpr	amun/3rd_party/blaze/math/typetraits/IsVecVecDivExpr.h	/^struct IsVecVecDivExpr$/;"	s	namespace:blaze
IsVecVecMultExpr	amun/3rd_party/blaze/math/typetraits/IsVecVecMultExpr.h	/^struct IsVecVecMultExpr$/;"	s	namespace:blaze
IsVecVecSubExpr	amun/3rd_party/blaze/math/typetraits/IsVecVecSubExpr.h	/^struct IsVecVecSubExpr$/;"	s	namespace:blaze
IsVector	amun/3rd_party/blaze/math/typetraits/IsVector.h	/^struct IsVector$/;"	s	namespace:blaze
IsVectorizable	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^struct IsVectorizable : public BoolConstant< IsVectorizableHelper< RemoveCV_<T> >::value >$/;"	s	namespace:blaze
IsVectorizableHelper	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^struct IsVectorizableHelper$/;"	s	namespace:blaze
IsVectorizableHelper	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^struct IsVectorizableHelper<void>$/;"	s	namespace:blaze
IsView	amun/3rd_party/blaze/math/typetraits/IsView.h	/^struct IsView : public BoolConstant< And< IsBaseOf<View,T>, Not< IsBaseOf<T,View> > >::value >$/;"	s	namespace:blaze
IsVoid	amun/3rd_party/blaze/util/typetraits/IsVoid.h	/^struct IsVoid : public BoolConstant< std::is_void<T>::value >$/;"	s	namespace:blaze
IsVolatile	amun/3rd_party/blaze/util/typetraits/IsVolatile.h	/^struct IsVolatile : public BoolConstant< std::is_volatile<T>::value  >$/;"	s	namespace:blaze
IsWhitespaceToBeEaten	amun/3rd_party/yaml-cpp/scanner.cpp	/^bool Scanner::IsWhitespaceToBeEaten(char ch) {$/;"	f	class:YAML::Scanner
IsZeroInt	amun/3rd_party/spdlog/details/format.cc	/^		class IsZeroInt: public fmt::internal::ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fmt::__anon30	file:
IsZeroInt	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class IsZeroInt: public ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fmt::internal
Iterator	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::DiagonalMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef Iterator_<MT>                 Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DiagonalMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::HermitianMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline Iterator( IteratorType pos, MT& matrix, size_t index )$/;"	f	class:blaze::HermitianMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline Iterator()$/;"	f	class:blaze::HermitianMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   class Iterator$/;"	c	class:blaze::HermitianMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::LowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef Iterator_<MT>              Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::LowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::StrictlyLowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef Iterator_<MT>                     Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::StrictlyLowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::StrictlyUpperMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef Iterator_<MT>                      Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::StrictlyUpperMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef MatrixIterator<MT>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SymmetricMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   class Iterator$/;"	c	class:blaze::SymmetricMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                         >  Iterator;$/;"	t	class:blaze::SymmetricMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline Iterator( IteratorType pos, MT& matrix, size_t index )$/;"	f	class:blaze::SymmetricMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline Iterator()$/;"	f	class:blaze::SymmetricMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   class Iterator$/;"	c	class:blaze::SymmetricMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::UniLowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline Iterator( IteratorType pos, size_t index )$/;"	f	class:blaze::UniLowerMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline Iterator()$/;"	f	class:blaze::UniLowerMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   class Iterator$/;"	c	class:blaze::UniLowerMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::UniUpperMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline Iterator( IteratorType pos, size_t index )$/;"	f	class:blaze::UniUpperMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline Iterator()$/;"	f	class:blaze::UniUpperMatrix::Iterator
Iterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   class Iterator$/;"	c	class:blaze::UniUpperMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   class Iterator$/;"	c	class:blaze::UpperMatrix
Iterator	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef Iterator_<MT>              Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::UpperMatrix
Iterator	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DenseIterator<Type,AF>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::CustomMatrix
Iterator	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef DenseIterator<Type,AF>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::CustomVector
Iterator	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DenseIterator<Type,usePadding>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DynamicMatrix
Iterator	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef DenseIterator<Type,aligned>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DynamicVector
Iterator	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef DenseIterator<Type,usePadding>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::HybridMatrix
Iterator	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef DenseIterator<Type,aligned>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::HybridVector
Iterator	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef DenseIterator<Type,usePadding>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::StaticMatrix
Iterator	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef DenseIterator<Type,aligned>        Iterator;       \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::StaticVector
Iterator	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef Iterator_<MT>            Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DMatTransposer
Iterator	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef Iterator_<VT>            Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DVecTransposer
Iterator	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef Iterator_<MT>            Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SMatTransposer
Iterator	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef Iterator_<MT>          Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SMatTransposer
Iterator	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef Iterator_<VT>          Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SVecTransposer
Iterator	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef Iterator_<MT>        Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DenseMatrixProxy
Iterator	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef Iterator_<VT>        Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::DenseVectorProxy
Iterator	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef Iterator_<MT>        Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SparseMatrixProxy
Iterator	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef Iterator_<VT>        Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::SparseVectorProxy
Iterator	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef Element*                      Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::CompressedMatrix
Iterator	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef Element*                    Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::CompressedMatrix
Iterator	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef Element*                    Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::CompressedVector
Iterator	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef If_< IsConst<MT>, ConstIterator, Iterator_<MT> >  Iterator;$/;"	t	class:blaze::Column
Iterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef If_< IsConst<MT>, ConstIterator, ColumnIterator< MT, Iterator_<MT> > >  Iterator;$/;"	t	class:blaze::Column
Iterator	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef If_< IsConst<MT>, ConstIterator, Iterator_<MT> >  Iterator;$/;"	t	class:blaze::Column
Iterator	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef If_< IsConst<MT>, ConstIterator, Iterator_<MT> >  Iterator;$/;"	t	class:blaze::Row
Iterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef If_< IsConst<MT>, ConstIterator, Iterator_<MT> >  Iterator;$/;"	t	class:blaze::Row
Iterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef If_< IsConst<MT>, ConstIterator, RowIterator< MT, Iterator_<MT> > >  Iterator;$/;"	t	class:blaze::Row
Iterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef If_< IsConst<MT>, ConstIterator, SubmatrixIterator< Iterator_<MT> > >  Iterator;$/;"	t	class:blaze::Submatrix
Iterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef If_< IsConst<MT>, ConstIterator, SubmatrixIterator< MT, Iterator_<MT> > >  Iterator;$/;"	t	class:blaze::Submatrix
Iterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef If_< IsConst<VT>, ConstIterator, SubvectorIterator< Iterator_<VT> > >  Iterator;$/;"	t	class:blaze::Subvector
Iterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef If_< IsConst<VT>, ConstIterator, SubvectorIterator< VT, Iterator_<VT> > >  Iterator;$/;"	t	class:blaze::Subvector
Iterator	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef Type*        Iterator;        \/\/!< Iterator over non-constant elements.$/;"	t	class:blaze::AlignedArray
Iterator	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef PtrIterator<T>        Iterator;            \/\/!< Iterator over non-const objects.$/;"	t	class:blaze::PtrVector
IteratorCategory	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DiagonalMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::HermitianMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::HermitianMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::LowerMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::UniLowerMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::UniLowerMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::UniUpperMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::UniUpperMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::UpperMatrix::Iterator
IteratorCategory	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DenseIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef std::random_access_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef std::forward_iterator_tag                                     IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef std::forward_iterator_tag  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef std::forward_iterator_tag                                     IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
IteratorCategory	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef std::forward_iterator_tag               IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::Column::ColumnIterator
IteratorCategory	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef std::forward_iterator_tag            IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::Row::RowIterator
IteratorCategory	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::iterator_category  IteratorCategory;$/;"	t	class:blaze::Submatrix::SubmatrixIterator
IteratorCategory	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef std::forward_iterator_tag                  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
IteratorCategory	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::iterator_category  IteratorCategory;$/;"	t	class:blaze::Subvector::SubvectorIterator
IteratorCategory	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef std::forward_iterator_tag                  IteratorCategory;  \/\/!< The iterator category.$/;"	t	class:blaze::Subvector::SubvectorIterator
IteratorCategory	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef std::random_access_iterator_tag  IteratorCategory;   \/\/!< The iterator category.$/;"	t	class:blaze::PtrIterator
IteratorCategory	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef std::forward_iterator_tag  IteratorCategory;   \/\/!< The iterator category.$/;"	t	class:blaze::PtrVector::CastIterator
IteratorCategory	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef std::forward_iterator_tag  IteratorCategory;   \/\/!< The iterator category.$/;"	t	class:blaze::PtrVector::ConstCastIterator
IteratorType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef Iterator_<MT>     IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::HermitianElement
IteratorType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   typedef typename MT::Iterator  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::HermitianValue
IteratorType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef Iterator_<MT>  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::HermitianMatrix::Iterator
IteratorType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef Iterator_<MT>  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::SymmetricMatrix::Iterator
IteratorType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef Iterator_<MT>     IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::SymmetricElement
IteratorType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   typedef typename MT::Iterator  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::SymmetricValue
IteratorType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef Iterator_<MT>  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::UniLowerMatrix::Iterator
IteratorType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef Iterator_<MT>     IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::UniLowerElement
IteratorType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef Iterator_<MT>  IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::UniUpperMatrix::Iterator
IteratorType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef Iterator_<MT>     IteratorType;  \/\/!< Type of the underlying sparse matrix iterators.$/;"	t	class:blaze::UniUpperElement
IteratorType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ConstIterator_<MT>  IteratorType;$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ConstIterator_<MT>  IteratorType;$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ConstIterator_<MT>  IteratorType;$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ConstIterator_<MT>  IteratorType;$/;"	t	class:blaze::DMatTransExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ConstIterator_<VT>  IteratorType;$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<RightOperand> >  IteratorType;$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ConstIterator_<VT>  IteratorType;$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ConstIterator_<VT>  IteratorType;$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<RightOperand> >  IteratorType;$/;"	t	class:ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ConstIterator_<VT>  IteratorType;$/;"	t	class:blaze::DVecTransExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ConstIterator_< RemoveReference_<Operand> >  IteratorType;$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef ConstIterator_< RemoveReference_<Operand> >  IteratorType;$/;"	t	class:blaze::SMatTransExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ConstIterator_< RemoveReference_<Operand> >  IteratorType;$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ConstIterator_< RemoveReference_<LeftOperand> >  IteratorType;$/;"	t	class:ConstIterator
IteratorType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef ConstIterator_< RemoveReference_<Operand> >  IteratorType;$/;"	t	class:blaze::SVecTransExpr::ConstIterator
IteratorType	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef ValueType const*                 IteratorType;       \/\/!< Type of the internal pointer.$/;"	t	class:blaze::PtrIterator
IteratorType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef T* const*                  IteratorType;       \/\/!< Type of the internal pointer.$/;"	t	class:blaze::PtrVector::CastIterator
IteratorType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef const T* const*            IteratorType;       \/\/!< Type of the internal pointer.$/;"	t	class:blaze::PtrVector::ConstCastIterator
Join	amun/3rd_party/extract_lex/utils.cpp	/^std::string Join(const std::vector<std::string>& words, const std::string del) {$/;"	f
Join	amun/common/utils.cpp	/^std::string Join(const std::vector<std::string>& words, const std::string del) {$/;"	f	namespace:amunmt
Join	amun/common/utils.cpp	/^std::string Join(const std::vector<std::string>& words,$/;"	f	namespace:amunmt
KEEP	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
KEY	amun/3rd_party/yaml-cpp/token.h	/^    KEY,$/;"	e	enum:YAML::Token::TYPE
KEY_NOT_FOUND	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const KEY_NOT_FOUND = "key not found";$/;"	m	namespace:YAML::ErrorMsg
KEY_NOT_FOUND_WITH_KEY	amun/3rd_party/yaml-cpp/exceptions.h	/^inline const std::string KEY_NOT_FOUND_WITH_KEY($/;"	f	namespace:YAML::ErrorMsg
KEY_NOT_FOUND_WITH_KEY	amun/3rd_party/yaml-cpp/exceptions.h	/^inline const std::string KEY_NOT_FOUND_WITH_KEY(const std::string& key) {$/;"	f	namespace:YAML::ErrorMsg
KenlmModel	amun/gpu/decoder/kenlm.h	/^    typedef lm::ngram::ProbingModel KenlmModel;$/;"	t	class:LM
KenlmState	amun/gpu/decoder/kenlm.h	/^typedef lm::ngram::State KenlmState;$/;"	t
Key	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Key,$/;"	e	enum:YAML::EMITTER_MANIP
Key	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Key() {$/;"	f	namespace:YAML::Exp
KeyInFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& KeyInFlow() {$/;"	f	namespace:YAML::Exp
KeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^  KeyNotFound(const Mark& mark_, const T& key_)$/;"	f	class:YAML::KeyNotFound
KeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^class KeyNotFound : public RepresentationException {$/;"	c	namespace:YAML
Keys	amun/3rd_party/yaml-cpp/exp.h	/^namespace Keys {$/;"	n	namespace:YAML
KoehnAligned	amun/3rd_party/fast_align/src/atools.cc	/^  bool KoehnAligned(int i, int j) const {$/;"	f	struct:RefineCommand
LAST_INTEGER_TYPE	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_INTEGER_TYPE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	amun/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LConvCheck	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    LConvCheck(int)$/;"	f	struct:fmt::internal::LConvCheck
LConvCheck	amun/3rd_party/spdlog/fmt/bundled/format.h	/^template <typename T, T> struct LConvCheck$/;"	s	namespace:fmt::internal
LEAD_OFFSET	amun/3rd_party/utf8/core.h	/^    const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);$/;"	m	namespace:utf8::internal
LEAD_SURROGATE_MAX	amun/3rd_party/utf8/core.h	/^    const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;$/;"	m	namespace:utf8::internal
LEAD_SURROGATE_MIN	amun/3rd_party/utf8/core.h	/^    const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;$/;"	m	namespace:utf8::internal
LIBCNPY_H_	amun/3rd_party/cnpy/cnpy.h	6;"	d
LM	amun/gpu/decoder/kenlm.cpp	/^LM::LM(LM&& lm)$/;"	f	class:LM
LM	amun/gpu/decoder/kenlm.cpp	/^LM::LM(const std::string& path, const Vocab& vocab) {$/;"	f	class:LM
LM	amun/gpu/decoder/kenlm.h	/^class LM {$/;"	c
LMState	amun/gpu/decoder/class_language_model.h	/^    typedef LanguageModelState LMState;$/;"	t	class:amunmt::GPU::ClassLanguageModel
LMState	amun/gpu/decoder/language_model.h	/^    typedef LanguageModelState LMState;$/;"	t	class:LanguageModel
LOG	amun/common/logging.h	8;"	d
LONG_DOUBLE	amun/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_DOUBLE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LOWEST_FLOAT	amun/gpu/types-gpu.h	17;"	d
LT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t	class:blaze::DMatSVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t	namespace:blaze
LT	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef If_< IsComputation<VT1>, const StaticVector<ET1,3UL,TF>, CT1 >  LT;$/;"	t	class:blaze::DVecDVecCrossExpr
LT	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef If_< IsComputation<VT1>, const StaticVector<ET1,3UL,TF>, CT1 >  LT;$/;"	t	class:blaze::DVecSVecCrossExpr
LT	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef If_< IsComputation<VT1>, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t	class:blaze::SMatDVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t	class:blaze::SMatSVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t	namespace:blaze
LT	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef const StaticVector<ET1,3UL,TF>  LT;$/;"	t	class:blaze::SVecDVecCrossExpr
LT	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef const StaticVector<ET1,3UL,TF>  LT;$/;"	t	class:blaze::SVecSVecCrossExpr
LT	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef If_< IsComputation<VT1>, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef If_< IsComputation<VT1>, const RT1, CT1 >  LT;$/;"	t	class:blaze::SVecTSVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t	class:blaze::TDVecSMatMultExpr
LT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t	class:blaze::TDVecTSMatMultExpr
LT	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT > LT;$/;"	t	class:blaze::TSMatDVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  LT;$/;"	t	class:blaze::TSMatSVecMultExpr
LT	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateLeft, const RT1, CT1 >  LT;$/;"	t
LT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t	class:blaze::TSVecSMatMultExpr
LT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t	class:blaze::TSVecTDMatMultExpr
LT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  LT;$/;"	t	class:blaze::TSVecTSMatMultExpr
LanguageModel	amun/gpu/decoder/language_model.h	/^class LanguageModel : public SourceIndependentScorer {$/;"	c
LanguageModelState	amun/gpu/decoder/language_model.h	/^class LanguageModelState : public State {$/;"	c
LastIndent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^int EmitterState::LastIndent() const {$/;"	f	class:YAML::EmitterState
LayerNormalization	amun/cpu/mblas/tensor.h	/^void LayerNormalization(MT& in, const MT& gamma, const MT& beta, float eps=1e-5f) {$/;"	f	namespace:amunmt::CPU::mblas
LayerNormalization	amun/cpu/mblas/tensor.h	/^void LayerNormalization(MT& in, const MT& gamma, float eps=1e-9) {$/;"	f	namespace:amunmt::CPU::mblas
LeftElement	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ET1  LeftElement;$/;"	t	class:ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ConstIterator_<MT1>  LeftIteratorType;$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ConstIterator_<MT1>  LeftIteratorType;$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ConstIterator_<VT1>  LeftIteratorType;$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ConstIterator_<VT1>  LeftIteratorType;$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ConstIterator_<VT1>  LeftIteratorType;$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ConstIterator_<VT1>  LeftIteratorType;$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
LeftIteratorType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ConstIterator_<VT1>  LeftIteratorType;$/;"	t	class:ConstIterator
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatDMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatDMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::DMatSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::DMatScalarDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::DMatScalarMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatTDMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatTDMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatTSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	namespace:blaze
LeftOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::DMatTSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecDVecAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecDVecCrossExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecDVecDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecDVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecDVecSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecSVecAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecSVecCrossExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::DVecSVecSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::DVecScalarDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::DVecScalarMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatDMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::SMatDVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	namespace:blaze
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::SMatSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::SMatScalarDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::SMatScalarMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	namespace:blaze
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatTDMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatTSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatTSMatMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::SMatTSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecDVecCrossExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecDVecDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecDVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecDVecSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecSVecAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecSVecCrossExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecSVecSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::SVecScalarDivExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::SVecScalarMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef If_< IsExpression<VT1>, const VT1, const VT1& >  LeftOperand;$/;"	t	class:blaze::SVecTSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TDMatSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TDMatSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::TDVecSMatMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::TDVecTSMatMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TSMatDMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::TSMatDVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	namespace:blaze
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TSMatSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  LeftOperand;$/;"	t	class:blaze::TSMatSVecMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TSMatTSMatAddExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	namespace:blaze
LeftOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT1>, const MT1, const MT1& >  LeftOperand;$/;"	t	class:blaze::TSMatTSMatSubExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::TSVecSMatMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::TSVecTDMatMultExpr
LeftOperand	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  LeftOperand;$/;"	t	class:blaze::TSVecTSMatMultExpr
Length	amun/3rd_party/blaze/util/TypeList.h	/^struct Length< NullType >$/;"	s	namespace:blaze
Length	amun/3rd_party/blaze/util/TypeList.h	/^struct Length< TypeList<Head,Tail> >$/;"	s	namespace:blaze
LengthOrderer	amun/common/sentences.cpp	/^class LengthOrderer {$/;"	c	namespace:amunmt	file:
Less	amun/3rd_party/blaze/util/mpl/Less.h	/^struct Less : public Bool< ( T2::value > T1::value ) >$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<char>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<double>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<float>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<int>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<long double>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<long>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<ptrdiff_t>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<short>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<signed char>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<std::size_t>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<unsigned char>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<unsigned int>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<unsigned long>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<unsigned short>$/;"	s	namespace:blaze
Limits	amun/3rd_party/blaze/util/Limits.h	/^struct Limits<wchar_t>$/;"	s	namespace:blaze
LineNumOrderer	amun/common/histories.cpp	/^class LineNumOrderer$/;"	c	namespace:amunmt	file:
LinearGrowth	amun/3rd_party/blaze/util/policies/LinearGrowth.h	/^struct LinearGrowth$/;"	s	namespace:blaze
Literal	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Literal,$/;"	e	enum:YAML::EMITTER_MANIP
Literal	amun/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
LiteralScalar	amun/3rd_party/yaml-cpp/exp.h	/^const char LiteralScalar = '|';$/;"	m	namespace:YAML::Keys
Load	amun/3rd_party/yaml-cpp/parse.cpp	/^Node Load(const char* input) {$/;"	f	namespace:YAML
Load	amun/3rd_party/yaml-cpp/parse.cpp	/^Node Load(const std::string& input) {$/;"	f	namespace:YAML
Load	amun/3rd_party/yaml-cpp/parse.cpp	/^Node Load(std::istream& input) {$/;"	f	namespace:YAML
Load	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::Load(std::istream& in) {$/;"	f	class:YAML::Parser
Load	amun/cpu/decoder/encoder_decoder_loader.cpp	/^void EncoderDecoderLoader::Load(const God&) {$/;"	f	class:amunmt::CPU::EncoderDecoderLoader
Load	amun/fpga/encoder_decoder_loader.cpp	/^void EncoderDecoderLoader::Load(const God &god)$/;"	f	class:amunmt::FPGA::EncoderDecoderLoader
LoadAll	amun/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(const char* input) {$/;"	f	namespace:YAML
LoadAll	amun/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(const std::string& input) {$/;"	f	namespace:YAML
LoadAll	amun/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(std::istream& input) {$/;"	f	namespace:YAML
LoadAllFromFile	amun/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAllFromFile(const std::string& filename) {$/;"	f	namespace:YAML
LoadFile	amun/3rd_party/yaml-cpp/parse.cpp	/^Node LoadFile(const std::string& filename) {$/;"	f	namespace:YAML
LoadFiltering	amun/common/god.cpp	/^void God::LoadFiltering() {$/;"	f	class:amunmt::God
LoadKernel	amun/fpga/kernel.cpp	/^std::string LoadKernel(const std::string &filePath)$/;"	f	namespace:amunmt::FPGA
LoadPrePostProcessing	amun/common/god.cpp	/^void God::LoadPrePostProcessing() {$/;"	f	class:amunmt::God
LoadScorers	amun/common/god.cpp	/^void God::LoadScorers() {$/;"	f	class:amunmt::God
LoadWeights	amun/common/config.cpp	/^void LoadWeights(YAML::Node& config, const std::string& path) {$/;"	f	namespace:amunmt
Loader	amun/common/loader.h	/^    Loader(const std::string& name,$/;"	f	class:amunmt::Loader
Loader	amun/common/loader.h	/^class Loader {$/;"	c	namespace:amunmt
LoaderFactory	amun/common/loader_factory.h	/^class LoaderFactory {$/;"	c	namespace:amunmt
LoaderPtr	amun/common/loader.h	/^typedef std::unique_ptr<Loader> LoaderPtr;$/;"	t	namespace:amunmt
Loaders	amun/common/god.h	/^    typedef std::map<std::string, LoaderPtr> Loaders;$/;"	t	class:amunmt::God
Local	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	e	enum:YAML::FmtScope::value
LocalTag	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag LocalTag(const std::string content) {$/;"	f	namespace:YAML
LocalTag	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag LocalTag(const std::string& prefix, const std::string content) {$/;"	f	namespace:YAML
Lock	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef LT                        Lock;           \/\/!< Type of a locking object.$/;"	t	class:blaze::ThreadPool
Log	amun/3rd_party/blaze/math/functors/Log.h	/^struct Log$/;"	s	namespace:blaze
Log	amun/cpu/mblas/phoenix_functions.h	/^  struct Log {$/;"	s	namespace:amunmt::CPU::mblas
Log	amun/gpu/mblas/thrust_functions.h	/^      Log(const actor<Eval> &_1) {$/;"	f	namespace:thrust::detail::functional
Log10	amun/3rd_party/blaze/math/functors/Log10.h	/^struct Log10$/;"	s	namespace:blaze
LogLevel	amun/3rd_party/blaze/util/logging/LogLevel.h	/^enum LogLevel$/;"	g	namespace:blaze::logging
LogOptions	amun/common/config.cpp	/^void Config::LogOptions() {$/;"	f	class:amunmt::Config
LogSection	amun/3rd_party/blaze/util/logging/LogSection.h	/^class LogSection$/;"	c	namespace:blaze::logging
LogSection	amun/3rd_party/blaze/util/logging/LogSection.h	/^inline LogSection::LogSection( const LogSection& ls )$/;"	f	class:blaze::logging::LogSection
LogSoftmax	amun/cpu/mblas/tensor.h	/^void LogSoftmax(MT& Out) {$/;"	f	namespace:amunmt::CPU::mblas
LogSoftmax	amun/fpga/matrix_functions.cpp	/^Matrix& LogSoftmax(Matrix& Out)$/;"	f	namespace:amunmt::FPGA::mblas
Logger	amun/3rd_party/blaze/util/logging/Logger.h	/^class Logger : private Singleton<Logger,SystemClock>$/;"	c	namespace:blaze::logging
Logit	amun/cpu/mblas/phoenix_functions.h	/^  struct Logit {$/;"	s	namespace:amunmt::CPU::mblas
Logit	amun/gpu/mblas/thrust_functions.h	/^      Logit(const actor<Eval> &_1) {$/;"	f	namespace:thrust::detail::functional
Long	amun/3rd_party/blaze/util/mpl/Long.h	/^struct Long : public IntegralConstant<long,N>$/;"	s	namespace:blaze
LongBool	amun/3rd_party/yaml-cpp/emittermanip.h	/^  LongBool,       \/\/ yes, On$/;"	e	enum:YAML::EMITTER_MANIP
LongKey	amun/3rd_party/yaml-cpp/emittermanip.h	/^  LongKey$/;"	e	enum:YAML::EMITTER_MANIP
LongLong	amun/3rd_party/spdlog/details/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt
LongLong	amun/3rd_party/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt
Lookup	amun/cpu/dl4mt/decoder.h	/^        void Lookup(mblas::Tensor& Rows, const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Embeddings
Lookup	amun/cpu/dl4mt/decoder.h	/^    void Lookup(mblas::Tensor& Embedding,$/;"	f	class:amunmt::CPU::dl4mt::Decoder
Lookup	amun/cpu/dl4mt/encoder.h	/^        void Lookup(mblas::Tensor& Row, size_t i) {$/;"	f	class:amunmt::CPU::dl4mt::Encoder::Embeddings
Lookup	amun/cpu/nematus/decoder.h	/^        void Lookup(mblas::Tensor& Rows, const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::CPU::Nematus::Decoder::Embeddings
Lookup	amun/cpu/nematus/decoder.h	/^    void Lookup(mblas::Tensor& Embedding,$/;"	f	class:amunmt::CPU::Nematus::Decoder
Lookup	amun/cpu/nematus/encoder.h	/^        void Lookup(mblas::Tensor& Row, size_t i) {$/;"	f	class:amunmt::CPU::Nematus::Encoder::Embeddings
Lookup	amun/fpga/decoder.cpp	/^void Decoder::Lookup(mblas::Tensor& Embedding,$/;"	f	class:amunmt::FPGA::Decoder
Lookup	amun/fpga/decoder.h	/^    void Lookup(mblas::Tensor& Rows, const std::vector<uint>& ids)$/;"	f	class:amunmt::FPGA::Decoder::Embeddings
Lookup	amun/fpga/encoder.h	/^    void Lookup(const OpenCLInfo &openCLInfo, mblas::Tensor& Row, const Words& words)$/;"	f	class:amunmt::FPGA::Encoder::Embeddings
Lookup	amun/gpu/dl4mt/decoder.h	/^        void Lookup(mblas::Tensor& Rows, const std::vector<unsigned>& ids) {$/;"	f	class:amunmt::GPU::Decoder::Embeddings
Lookup	amun/gpu/dl4mt/decoder.h	/^    void Lookup(mblas::Tensor& Embedding,$/;"	f	class:amunmt::GPU::Decoder
Lookup	amun/gpu/dl4mt/encoder.h	/^        void Lookup(mblas::Tensor& Row, const std::vector<std::vector<Word>>& words) {$/;"	f	class:amunmt::GPU::Encoder::Embeddings
LookupAnchor	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^anchor_t NodeEvents::AliasManager::LookupAnchor($/;"	f	class:YAML::NodeEvents::AliasManager
LookupAnchor	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^anchor_t SingleDocParser::LookupAnchor(const Mark& mark,$/;"	f	class:YAML::SingleDocParser
LowType	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^   typedef SymmetricMatrix< typename MathTrait<MT1,MT2>::LowType  >  LowType;$/;"	t	struct:blaze::MathTrait
LowerCase	amun/3rd_party/yaml-cpp/emittermanip.h	/^  LowerCase,      \/\/ f, yes$/;"	e	enum:YAML::EMITTER_MANIP
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/BaseTemplate.h	/^class LowerMatrix$/;"	c	namespace:blaze
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^class LowerMatrix<MT,SO,true>$/;"	c	namespace:blaze
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( const A1& a1 )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( const LowerMatrix& m )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix( size_t n, const Other* array )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>::LowerMatrix()$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^class LowerMatrix<MT,SO,false>$/;"	c	namespace:blaze
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix( const LowerMatrix& m )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix( size_t n )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::LowerMatrix
LowerMatrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline LowerMatrix<MT,SO,false>::LowerMatrix()$/;"	f	class:blaze::LowerMatrix
LowerProxy	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^class LowerProxy : public Proxy< LowerProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
LowerProxy	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline LowerProxy<MT>::LowerProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::LowerProxy
LowerProxy	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline LowerProxy<MT>::LowerProxy( const LowerProxy& lp )$/;"	f	class:blaze::LowerProxy
MAGENTA	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
MAGENTA	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
MAP	amun/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
MAP_KEY	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const MAP_KEY = "illegal map key";$/;"	m	namespace:YAML::ErrorMsg
MAP_TYPE	amun/3rd_party/fast_align/src/hashtables.h	/^typedef google::sparse_hash_map<std::string, unsigned, std::hash<std::string> > MAP_TYPE;$/;"	t
MAP_TYPE	amun/3rd_party/fast_align/src/hashtables.h	/^typedef std::unordered_map<std::string, unsigned, std::hash<std::string> > MAP_TYPE;$/;"	t
MAP_VALUE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const MAP_VALUE = "illegal map value";$/;"	m	namespace:YAML::ErrorMsg
MARK_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/mark.h	2;"	d
MAX_BLOCKS	amun/gpu/mblas/tensor_functions.h	4;"	d
MAX_PACKED_ARGS	amun/3rd_party/spdlog/details/format.h	/^        MAX_PACKED_ARGS = 16$/;"	e	enum:fmt::ArgList::__anon27
MAX_PACKED_ARGS	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        MAX_PACKED_ARGS = 16$/;"	e	enum:fmt::ArgList::__anon61
MAX_SOURCE_SIZE	amun/fpga/kernel.cpp	84;"	d	file:
MAX_THREADS	amun/gpu/mblas/tensor_functions.h	3;"	d
MCT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecDMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDVecSMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecTDMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDVecTSMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSVecMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSVecDMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSVecSMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSVecTDMatMultExpr
MCT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef CompositeType_<MT>  MCT;  \/\/!< Composite type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSVecTSMatMultExpr
MET	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDVecMultExpr
MET	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDVecMultExpr
MET	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSVecMultExpr
MET	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecDMatMultExpr
MET	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecTDMatMultExpr
MET	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef ElementType_<MRT>   MET;  \/\/!< Element type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSVecDMatMultExpr
MINUS_FLAG	amun/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon28
MINUS_FLAG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon62
MRT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecDMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDVecSMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDVecTDMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDVecTSMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSVecMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSVecDMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSVecSMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSVecTDMatMultExpr
MRT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef ResultType_<MT>     MRT;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSVecTSMatMultExpr
MT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT );$/;"	v
MT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT1 );$/;"	v
MT1	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_MATRIX_TYPE( MT1 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_MAJOR_MATRIX_TYPE( MT2 );$/;"	v
MT2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_MATRIX_TYPE( MT2 );$/;"	v
MULTIPLE_ALIASES	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_ALIASES =$/;"	m	namespace:YAML::ErrorMsg
MULTIPLE_ANCHORS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_ANCHORS =$/;"	m	namespace:YAML::ErrorMsg
MULTIPLE_TAGS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_TAGS =$/;"	m	namespace:YAML::ErrorMsg
M_E	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_E = 2.7182818284590452353602874713526625;$/;"	m	namespace:blaze
M_E	amun/3rd_party/blaze/math/Constants.h	56;"	d
M_LN10	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_LN10 = 2.3025850929940456840179914546843642;$/;"	m	namespace:blaze
M_LN10	amun/3rd_party/blaze/math/Constants.h	136;"	d
M_LN2	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_LN2 = 0.6931471805599453094172321214581766;$/;"	m	namespace:blaze
M_LN2	amun/3rd_party/blaze/math/Constants.h	116;"	d
M_LOG10E	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_LOG10E = 0.4342944819032518276511289189166051;$/;"	m	namespace:blaze
M_LOG10E	amun/3rd_party/blaze/math/Constants.h	96;"	d
M_LOG2E	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_LOG2E = 1.4426950408889634073599246810018921;$/;"	m	namespace:blaze
M_LOG2E	amun/3rd_party/blaze/math/Constants.h	76;"	d
M_PI	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_PI = 3.1415926535897932384626433832795029;$/;"	m	namespace:blaze
M_PI	amun/3rd_party/blaze/math/Constants.h	156;"	d
M_SQRT2	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_SQRT2 = 1.4142135623730950488016887242096981;$/;"	m	namespace:blaze
M_SQRT2	amun/3rd_party/blaze/math/Constants.h	176;"	d
M_SQRT3	amun/3rd_party/blaze/math/Constants.h	/^const real_t M_SQRT3 = 1.7320508075688772935274463415058724;$/;"	m	namespace:blaze
M_SQRT3	amun/3rd_party/blaze/math/Constants.h	196;"	d
M_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class M_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
MakeArg	amun/3rd_party/spdlog/details/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	amun/3rd_party/spdlog/details/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	amun/3rd_party/spdlog/details/format.h	/^class MakeArg: public Arg$/;"	c	namespace:fmt::internal
MakeArg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class MakeArg: public Arg$/;"	c	namespace:fmt::internal
MakeSigned	amun/3rd_party/blaze/util/typetraits/MakeSigned.h	/^struct MakeSigned$/;"	s	namespace:blaze
MakeTypedKeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^inline TypedKeyNotFound<T> MakeTypedKeyNotFound(const Mark& mark,$/;"	f	namespace:YAML
MakeUnsigned	amun/3rd_party/blaze/util/typetraits/MakeUnsigned.h	/^struct MakeUnsigned$/;"	s	namespace:blaze
MakeUnsigned	amun/3rd_party/spdlog/details/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeUnsigned	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue()$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue(const T &value,$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue(long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/details/format.h	/^class MakeValue: public Arg$/;"	c	namespace:fmt::internal
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue()$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArgWithType<Char_, T> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(const T &value,$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class MakeValue: public Arg$/;"	c	namespace:fmt::internal
ManagedThread	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef Thread<TT,MT,LT,CT>       ManagedThread;  \/\/!< Type of the managed threads.$/;"	t	class:blaze::ThreadPool
Map	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Map Map;$/;"	t	class:YAML::GraphBuilder
Map	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
Map	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Map	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
MapComplete	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void MapComplete(void *pMap) { (void)pMap; }$/;"	f	class:YAML::GraphBuilderInterface
MapComplete	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void MapComplete(void *pMap) { m_impl.MapComplete(AsMap(pMap)); }$/;"	f	class:YAML::GraphBuilder
MapIter	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef typename node_iterator_type<V>::map MapIter;$/;"	t	class:YAML::detail::node_iterator_base
MapMatrix	amun/fpga/matrix_functions.cpp	/^void MapMatrix(Matrix& state, const Array<int>& mapping, size_t i)$/;"	f	namespace:amunmt::FPGA::mblas
MapType	amun/3rd_party/spdlog/details/format.h	/^    typedef std::vector<std::pair<fmt::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fmt::internal::ArgMap
MapType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::pair<fmt::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fmt::internal::ArgMap
Mark	amun/3rd_party/yaml-cpp/mark.h	/^  Mark() : pos(0), line(0), column(0) {}$/;"	f	struct:YAML::Mark
Mark	amun/3rd_party/yaml-cpp/mark.h	/^  Mark(int pos_, int line_, int column_)$/;"	f	struct:YAML::Mark
Mark	amun/3rd_party/yaml-cpp/mark.h	/^struct YAML_CPP_API Mark {$/;"	s	namespace:YAML
Mark	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Mark Node::Mark() const {$/;"	f	class:YAML::Node
MatEvalExpr	amun/3rd_party/blaze/math/expressions/MatEvalExpr.h	/^struct MatEvalExpr : private EvalExpr$/;"	s	namespace:blaze
MatForEachExpr	amun/3rd_party/blaze/math/expressions/MatForEachExpr.h	/^struct MatForEachExpr : private ForEachExpr$/;"	s	namespace:blaze
MatInvExpr	amun/3rd_party/blaze/math/expressions/MatInvExpr.h	/^struct MatInvExpr : private Expression$/;"	s	namespace:blaze
MatMatAddExpr	amun/3rd_party/blaze/math/expressions/MatMatAddExpr.h	/^struct MatMatAddExpr : private AddExpr$/;"	s	namespace:blaze
MatMatMultExpr	amun/3rd_party/blaze/math/expressions/MatMatMultExpr.h	/^struct MatMatMultExpr : private MultExpr$/;"	s	namespace:blaze
MatMatSubExpr	amun/3rd_party/blaze/math/expressions/MatMatSubExpr.h	/^struct MatMatSubExpr : private SubExpr$/;"	s	namespace:blaze
MatScalarDivExpr	amun/3rd_party/blaze/math/expressions/MatScalarDivExpr.h	/^struct MatScalarDivExpr : private DivExpr$/;"	s	namespace:blaze
MatScalarMultExpr	amun/3rd_party/blaze/math/expressions/MatScalarMultExpr.h	/^struct MatScalarMultExpr : private MultExpr$/;"	s	namespace:blaze
MatSerialExpr	amun/3rd_party/blaze/math/expressions/MatSerialExpr.h	/^struct MatSerialExpr : private SerialExpr$/;"	s	namespace:blaze
MatTransExpr	amun/3rd_party/blaze/math/expressions/MatTransExpr.h	/^struct MatTransExpr : private TransExpr$/;"	s	namespace:blaze
MatVecMultExpr	amun/3rd_party/blaze/math/expressions/MatVecMultExpr.h	/^struct MatVecMultExpr : private MultExpr$/;"	s	namespace:blaze
Match	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const Source& source) const {$/;"	f	class:YAML::RegEx
Match	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const Stream& in) const {$/;"	f	class:YAML::RegEx
Match	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const std::string& str) const {$/;"	f	class:YAML::RegEx
MatchOpAnd	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpAnd(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpEmpty	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpEmpty(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpEmpty	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpEmpty<StringCharSource>($/;"	f	class:YAML::RegEx
MatchOpMatch	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpMatch(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpNot	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpNot(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpOr	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpOr(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpRange	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpRange(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpSeq	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpSeq(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchUnchecked	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchUnchecked(const Source& source) const {$/;"	f	class:YAML::RegEx
Matches	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(char ch) const {$/;"	f	class:YAML::RegEx
Matches	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const Source& source) const {$/;"	f	class:YAML::RegEx
Matches	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const Stream& in) const { return Match(in) >= 0; }$/;"	f	class:YAML::RegEx
Matches	amun/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const std::string& str) const {$/;"	f	class:YAML::RegEx
MathTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MathTrait< DiagonalMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MathTrait< HermitianMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MathTrait< LowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MathTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MathTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MathTrait< SymmetricMatrix<MT1,SO1,DF1,NF1>, SymmetricMatrix<MT2,SO2,DF2,NF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MathTrait< UniLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MathTrait< UniUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MathTrait< UpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MathTrait< CompressedMatrix<T1,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MathTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/traits/MathTrait.h	/^struct MathTrait$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/traits/MathTrait.h	/^struct MathTrait< complex<T1>, complex<T2> >$/;"	s	namespace:blaze
MathTrait	amun/3rd_party/blaze/math/traits/MathTrait.h	/^struct MathTrait<T,T>$/;"	s	namespace:blaze
Matrix	amun/3rd_party/blaze/math/expressions/Matrix.h	/^struct Matrix$/;"	s	namespace:blaze
Matrix	amun/fpga/matrix.cpp	/^Matrix::Matrix(Matrix &&other)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Matrix	amun/fpga/matrix.cpp	/^Matrix::Matrix(const Matrix &other)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Matrix	amun/fpga/matrix.cpp	/^Matrix::Matrix(const OpenCLInfo &openCLInfo)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Matrix	amun/fpga/matrix.cpp	/^Matrix::Matrix(const OpenCLInfo &openCLInfo, size_t rows, size_t cols, bool zero)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Matrix	amun/fpga/matrix.cpp	/^Matrix::Matrix(const OpenCLInfo &openCLInfo, size_t rows, size_t cols, float *val)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Matrix	amun/fpga/matrix.h	/^class Matrix : public BaseTensor {$/;"	c	namespace:amunmt::FPGA::mblas
MatrixAccessProxy	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^class MatrixAccessProxy : public Proxy< MatrixAccessProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
MatrixAccessProxy	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline MatrixAccessProxy<MT>::MatrixAccessProxy( MT& sm, size_t i, size_t j )$/;"	f	class:blaze::MatrixAccessProxy
MatrixAccessProxy	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline MatrixAccessProxy<MT>::MatrixAccessProxy( const MatrixAccessProxy& map )$/;"	f	class:blaze::MatrixAccessProxy
MatrixIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   class MatrixIterator$/;"	c	class:blaze::SymmetricMatrix
MatrixOrVector	amun/3rd_party/blaze/math/traits/ForEachTrait.h	/^   struct MatrixOrVector$/;"	s	struct:blaze::ForEachTrait
MatrixOrVector	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^   struct MatrixOrVector {$/;"	s	struct:blaze::ImagTrait
MatrixOrVector	amun/3rd_party/blaze/math/traits/RealTrait.h	/^   struct MatrixOrVector {$/;"	s	struct:blaze::RealTrait
MatrixSerializer	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^MatrixSerializer::MatrixSerializer()$/;"	f	class:blaze::MatrixSerializer
MatrixSerializer	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^class MatrixSerializer$/;"	c	namespace:blaze
MatrixType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef typename MT::template Rebind< SharedValue<ET> >::Other  MatrixType;$/;"	t	class:blaze::SymmetricMatrix
MatrixType	amun/3rd_party/blaze/math/expressions/Matrix.h	/^   typedef MT  MatrixType;  \/\/!< Type of the matrix.$/;"	t	struct:blaze::Matrix
MatrixValueMapping	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   struct MatrixValueMapping$/;"	s	class:blaze::MatrixSerializer
MatrixValueMappingHelper	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^struct MatrixSerializer::MatrixValueMappingHelper<false,false>$/;"	s	class:blaze::MatrixSerializer
MatrixValueMappingHelper	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^struct MatrixSerializer::MatrixValueMappingHelper<false,true>$/;"	s	class:blaze::MatrixSerializer
MatrixValueMappingHelper	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^struct MatrixSerializer::MatrixValueMappingHelper<true,false>$/;"	s	class:blaze::MatrixSerializer
MatrixValueMappingHelper	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^struct MatrixSerializer::MatrixValueMappingHelper<true,true>$/;"	s	class:blaze::MatrixSerializer
Max	amun/3rd_party/blaze/util/mpl/Max.h	/^struct Max : public If_< Less<T1,T2>, T2, T1 >$/;"	s	namespace:blaze
Max	amun/gpu/mblas/thrust_functions.h	/^      Max(const actor<T1> &_1, const actor<T2> &_2) {$/;"	f	namespace:thrust::detail::functional
MaxElement	amun/fpga/matrix_functions.cpp	/^void MaxElement($/;"	f	namespace:amunmt::FPGA::mblas
Md	amun/3rd_party/fast_align/src/ttables.h	/^struct Md {$/;"	s
Mean	amun/cpu/mblas/tensor.h	/^MT Mean(const MT1& in) {$/;"	f	namespace:amunmt::CPU::mblas
Mean	amun/fpga/matrix_functions.cpp	/^void Mean(Matrix& Out, const Matrix& In, const Array<int>& mapping)$/;"	f	namespace:amunmt::FPGA::mblas
MemoryBuffer	amun/3rd_party/spdlog/details/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	amun/3rd_party/spdlog/details/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	amun/3rd_party/spdlog/details/format.h	/^class MemoryBuffer: private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class MemoryBuffer: private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryPool	amun/3rd_party/blaze/util/MemoryPool.h	/^class MemoryPool : private NonCopyable$/;"	c	namespace:blaze
MemoryPool	amun/3rd_party/blaze/util/MemoryPool.h	/^inline MemoryPool<Type,Blocksize>::MemoryPool()$/;"	f	class:blaze::MemoryPool
MemoryWriter	amun/3rd_party/spdlog/details/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
MemoryWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
Min	amun/3rd_party/blaze/util/mpl/Min.h	/^struct Min : public If_< Less<T1,T2>, T1, T2 >$/;"	s	namespace:blaze
Minus	amun/3rd_party/blaze/util/mpl/Minus.h	/^struct Minus$/;"	s	namespace:blaze
Modulus	amun/3rd_party/blaze/util/mpl/Modulus.h	/^struct Modulus$/;"	s	namespace:blaze
MosesPlugin	amun/plugin/nmt.h	/^class MosesPlugin {$/;"	c	namespace:amunmt
MultAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      explicit inline MultAssigner( Target& target, const Source& source )$/;"	f	struct:blaze::ThreadBackend::MultAssigner
MultAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   struct MultAssigner$/;"	s	class:blaze::ThreadBackend
MultExpr	amun/3rd_party/blaze/math/expressions/MultExpr.h	/^struct MultExpr : private Expression$/;"	s	namespace:blaze
MultExprTrait	amun/3rd_party/blaze/math/traits/MultExprTrait.h	/^struct MultExprTrait$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< CompressedVector<T,true>, DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DiagonalMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< DynamicVector<T,true>, DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< T, DiagonalMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< CompressedVector<T,true>, HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< DynamicVector<T,true>, HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct MultTrait< T, HermitianMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< CompressedVector<T,true>, LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< DynamicVector<T,true>, LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct MultTrait< T, LowerMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< CompressedVector<T,true>, StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< DynamicVector<T,true>, StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< T, StrictlyLowerMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< CompressedVector<T,true>, StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< DynamicVector<T,true>, StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< T, StrictlyUpperMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< CompressedVector<T,true>, SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< DynamicVector<T,true>, SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO,DF,NF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO1,DF,NF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO1,DF,NF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO1,DF,NF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO1,DF,NF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT,SO1,DF,NF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF1>, SymmetricMatrix<MT2,SO2,DF2,NF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct MultTrait< T, SymmetricMatrix<MT,SO,DF,NF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< CompressedVector<T,true>, UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< DynamicVector<T,true>, UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< T, UniLowerMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< CompressedVector<T,true>, UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< DynamicVector<T,true>, UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< T, UniUpperMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UniUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< CompressedMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< CompressedVector<T,true>, UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< CustomMatrix<T,AF,PF,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< CustomVector<T,AF,PF,true>, UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< DynamicMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< DynamicVector<T,true>, UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< HermitianMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< HybridMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< HybridVector<T,N,true>, UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< LowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< StaticMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< StaticVector<T,N,true>, UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< T, UpperMatrix<MT,SO,DF>, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UniLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, CompressedVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, CustomVector<T,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, DynamicVector<T,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, HybridVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, StaticVector<T,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO,DF>, T, EnableIf_< IsNumeric<T> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct MultTrait< UpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO1>, CustomMatrix<T2,AF,PF,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO1>, DynamicMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO1>, HybridMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO1>, StaticMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, CustomVector<T2,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, DynamicVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, HybridVector<T2,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, StaticVector<T2,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedMatrix<T1,SO>, T2, EnableIf_< IsNumeric<T2> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CompressedVector<T1,true>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CustomMatrix<T1,AF,PF,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< CustomVector<T1,AF,PF,true>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< DynamicMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< DynamicVector<T1,true>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< HybridMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< HybridVector<T1,N,true>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< StaticMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< StaticVector<T1,N,true>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct MultTrait< T1, CompressedMatrix<T2,SO>, EnableIf_< IsNumeric<T1> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, CustomVector<T2,AF,PF,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, DynamicVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, HybridVector<T2,N,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, StaticVector<T2,N,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,TF>, T2, EnableIf_< IsNumeric<T2> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,false>, CompressedVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,false>, CustomVector<T2,AF,PF,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,false>, DynamicVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,false>, HybridVector<T2,N,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,false>, StaticVector<T2,N,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,true>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,true>, CustomVector<T2,AF,PF,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,true>, DynamicVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,true>, HybridVector<T2,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CompressedVector<T1,true>, StaticVector<T2,N,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CustomVector<T1,AF,PF,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CustomVector<T1,AF,PF,false>, CompressedVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< CustomVector<T1,AF,PF,true>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< DynamicVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< DynamicVector<T1,false>, CompressedVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< DynamicVector<T1,true>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< HybridVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< HybridVector<T1,N,false>, CompressedVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< HybridVector<T1,N,true>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< StaticVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< StaticVector<T1,N,false>, CompressedVector<T2,true> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< StaticVector<T1,N,true>, CompressedVector<T2,false> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct MultTrait< T1, CompressedVector<T2,TF>, EnableIf_< IsNumeric<T1> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/traits/MultTrait.h	/^struct MultTrait$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/traits/MultTrait.h	/^struct MultTrait< T1, complex<T2>, EnableIf_< IsBuiltin<T1> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/traits/MultTrait.h	/^struct MultTrait< complex<T1>, T2, EnableIf_< IsBuiltin<T2> > >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/traits/MultTrait.h	/^struct MultTrait< complex<T1>, complex<T2> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct MultTrait< Column<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct MultTrait< T, Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct MultTrait< Row<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct MultTrait< T, Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct MultTrait< Submatrix<MT,AF,SO,DF>, T >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct MultTrait< T, Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct MultTrait< Subvector<VT,AF,TF,DF>, T >$/;"	s	namespace:blaze
MultTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct MultTrait< T, Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
MultType	amun/3rd_party/blaze/math/traits/MultTrait.h	/^   struct MultType { using Type = decltype( std::declval<Type1>() * std::declval<Type2>() ); };$/;"	s	struct:blaze::MultTrait
MultWeights	amun/gpu/dl4mt/model.h	/^    MultWeights(const NpzConverter& model, const std::string& prefix)$/;"	f	struct:amunmt::GPU::Weights::MultWeights
MultWeights	amun/gpu/dl4mt/model.h	/^  struct MultWeights: public BaseWeights {$/;"	s	struct:amunmt::GPU::Weights
Multiplicative	amun/gpu/dl4mt/multiplicative.h	/^ Multiplicative(const Weights::MultWeights<InnerWeights>& model)$/;"	f	class:amunmt::GPU::Multiplicative
Multiplicative	amun/gpu/dl4mt/multiplicative.h	/^class Multiplicative: public Cell {$/;"	c	namespace:amunmt::GPU
Mutex	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef MT                        Mutex;          \/\/!< Type of the mutex.$/;"	t	class:blaze::ThreadPool
NAMED_ARG	amun/3rd_party/spdlog/details/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NAMED_ARG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NAMED_HANDLE	amun/3rd_party/yaml-cpp/tag.h	/^    NAMED_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
NBest	amun/common/history.cpp	/^NBestList History::NBest(unsigned n) const$/;"	f	class:amunmt::History
NBest	amun/plugin/nbest.h	/^class NBest {$/;"	c
NBestBatch	amun/plugin/nbest.h	/^typedef std::vector <std::vector < size_t > > NBestBatch;$/;"	t
NBestList	amun/common/hypothesis.h	/^typedef std::vector<Result> NBestList;$/;"	t	namespace:amunmt
NODE_CONVERT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/convert.h	2;"	d
NODE_DETAIL_BOOL_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	2;"	d
NODE_DETAIL_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/impl.h	2;"	d
NODE_DETAIL_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/node.h	2;"	d
NODE_EMIT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/emit.h	2;"	d
NODE_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/impl.h	2;"	d
NODE_NODEBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/nodebuilder.h	2;"	d
NODE_NODEEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/nodeevents.h	2;"	d
NODE_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/node.h	2;"	d
NOMINMAX	amun/3rd_party/blaze/util/Time.h	45;"	d
NOMINMAX	amun/3rd_party/spdlog/details/format.cc	47;"	d	file:
NOMINMAX	amun/3rd_party/spdlog/details/format.cc	49;"	d	file:
NOMINMAX	amun/3rd_party/spdlog/details/os.h	23;"	d
NOMINMAX	amun/3rd_party/spdlog/fmt/bundled/format.cc	47;"	d	file:
NOMINMAX	amun/3rd_party/spdlog/fmt/bundled/format.cc	49;"	d	file:
NONCOPYABLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/noncopyable.h	2;"	d
NONE	amun/3rd_party/spdlog/details/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NONE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NONE	amun/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
NONE	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
NON_PLAIN_SCALAR	amun/3rd_party/yaml-cpp/token.h	/^    NON_PLAIN_SCALAR$/;"	e	enum:YAML::Token::TYPE
NON_SPECIFIC	amun/3rd_party/yaml-cpp/tag.h	/^    NON_SPECIFIC$/;"	e	enum:YAML::Tag::TYPE
NOT_ENOUGH_ROOM	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
NULL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/null.h	2;"	d
NUM_BLOCKS	amun/fpga/nth_element.h	/^  const int NUM_BLOCKS;$/;"	m	class:amunmt::FPGA::NthElement
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "convert"; }$/;"	f	struct:ConvertCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "display"; }$/;"	f	struct:DisplayCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "fmeasure"; }$/;"	f	struct:FMeasureCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "grow-diag"; }$/;"	f	struct:GDCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "grow-diag-final"; }$/;"	f	struct:GDFCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "grow-diag-final-and"; }$/;"	f	struct:GDFACommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "intersect"; }$/;"	f	struct:IntersectCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "invert"; }$/;"	f	struct:InvertCommand
Name	amun/3rd_party/fast_align/src/atools.cc	/^  string Name() const { return "union"; }$/;"	f	struct:UnionCommand
NamedArg	amun/3rd_party/spdlog/details/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	amun/3rd_party/spdlog/details/format.h	/^struct NamedArg: Arg$/;"	s	namespace:fmt::internal
NamedArg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct NamedArg: Arg$/;"	s	namespace:fmt::internal
NamedArgWithType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    NamedArgWithType(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArgWithType
NamedArgWithType	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct NamedArgWithType: NamedArg<Char>$/;"	s	namespace:fmt::internal
NamedHandle	amun/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
NegativeAccuracy	amun/3rd_party/blaze/math/Accuracy.h	/^class NegativeAccuracy$/;"	c	namespace:blaze
NegativeAccuracy	amun/3rd_party/blaze/math/Accuracy.h	/^inline NegativeAccuracy<A>::NegativeAccuracy()$/;"	f	class:blaze::NegativeAccuracy
NegativeEpsilon	amun/3rd_party/blaze/math/Epsilon.h	/^class NegativeEpsilon$/;"	c	namespace:blaze
NegativeEpsilon	amun/3rd_party/blaze/math/Epsilon.h	/^inline NegativeEpsilon<E>::NegativeEpsilon()$/;"	f	class:blaze::NegativeEpsilon
NegativeInfinity	amun/3rd_party/blaze/math/Infinity.h	/^class NegativeInfinity$/;"	c	namespace:blaze
NegativeInfinity	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::NegativeInfinity()$/;"	f	class:blaze::NegativeInfinity
NegativeType	amun/3rd_party/blaze/math/Accuracy.h	/^   typedef NegativeAccuracy<Accuracy>  NegativeType;  \/\/!< The negated accuracy type.$/;"	t	class:blaze::Accuracy
NegativeType	amun/3rd_party/blaze/math/Epsilon.h	/^   typedef NegativeEpsilon<Epsilon>  NegativeType;  \/\/!< The negative epsilon type.$/;"	t	class:blaze::Epsilon
NegativeType	amun/3rd_party/blaze/math/Infinity.h	/^   typedef NegativeInfinity<Infinity>  NegativeType;  \/\/!< The negative infinity type.$/;"	t	class:blaze::Infinity
Nematus	amun/cpu/decoder/encoder_decoder_loader.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
Nematus	amun/cpu/nematus/decoder.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
Nematus	amun/cpu/nematus/encoder.cpp	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU	file:
Nematus	amun/cpu/nematus/encoder.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
Nematus	amun/cpu/nematus/encoder_decoder.cpp	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU	file:
Nematus	amun/cpu/nematus/encoder_decoder.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
Nematus	amun/cpu/nematus/model.cpp	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU	file:
Nematus	amun/cpu/nematus/model.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
Nematus	amun/cpu/nematus/transition.cpp	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU	file:
Nematus	amun/cpu/nematus/transition.h	/^namespace Nematus {$/;"	n	namespace:amunmt::CPU
NeuralPhrase	amun/plugin/neural_phrase.h	/^    NeuralPhrase() {}$/;"	f	class:amunmt::NeuralPhrase
NeuralPhrase	amun/plugin/neural_phrase.h	/^    NeuralPhrase(const std::vector<size_t>& words, std::vector<float> scores,$/;"	f	class:amunmt::NeuralPhrase
NeuralPhrase	amun/plugin/neural_phrase.h	/^class NeuralPhrase {$/;"	c	namespace:amunmt
NewMap	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewMap(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
NewNull	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewNull(const Mark &mark, void *pParentNode) {$/;"	f	class:YAML::GraphBuilder
NewScalar	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewScalar(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
NewScorer	amun/cpu/decoder/encoder_decoder_loader.cpp	/^ScorerPtr EncoderDecoderLoader::NewScorer(const God &god, const DeviceInfo&) const {$/;"	f	class:amunmt::CPU::EncoderDecoderLoader
NewScorer	amun/fpga/encoder_decoder_loader.cpp	/^ScorerPtr EncoderDecoderLoader::NewScorer(const God &god, const DeviceInfo &deviceInfo) const$/;"	f	class:amunmt::FPGA::EncoderDecoderLoader
NewSequence	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewSequence(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
NewSize	amun/gpu/mblas/tensor.h	/^    void NewSize(unsigned rows, unsigned cols, unsigned c = 1, unsigned d = 1) {$/;"	f	class:amunmt::GPU::mblas::TTensor
NewState	amun/cpu/decoder/encoder_decoder.cpp	/^State* CPUEncoderDecoderBase::NewState() const {$/;"	f	class:amunmt::CPU::CPUEncoderDecoderBase
NewState	amun/fpga/encoder_decoder.cpp	/^State* EncoderDecoder::NewState() const$/;"	f	class:amunmt::FPGA::EncoderDecoder
NewStates	amun/common/search.cpp	/^States Search::NewStates() const {$/;"	f	class:amunmt::Search
Newline	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Newline,$/;"	e	enum:YAML::EMITTER_MANIP
NextGroupType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterNodeType::value EmitterState::NextGroupType($/;"	f	class:YAML::EmitterState
NextMiniBatch	amun/common/sentences.cpp	/^SentencesPtr Sentences::NextMiniBatch(unsigned batchsize, int batchWords)$/;"	f	class:amunmt::Sentences
NextMultiple	amun/3rd_party/blaze/util/mpl/NextMultiple.h	/^struct NextMultiple$/;"	s	namespace:blaze
No	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^   typedef char (&No) [2];$/;"	t	struct:blaze::IsProxyHelper
No	amun/3rd_party/blaze/util/TypeList.h	/^   class No  {};$/;"	c	struct:blaze::ContainsRelated
No	amun/3rd_party/spdlog/details/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal
No	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal
NoCollection	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
NoDelete	amun/3rd_party/blaze/util/policies/NoDelete.h	/^struct NoDelete$/;"	s	namespace:blaze
NoThousandsSep	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct NoThousandsSep$/;"	s	namespace:fmt::internal
NoType	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
NoType	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
NoType	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
Node	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Node Node;$/;"	t	class:YAML::GraphBuilder
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node() : m_isValid(true), m_pNode(NULL) {}$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(NodeType::value type)$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const Node& rhs)$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const T& rhs)$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const detail::iterator_value& rhs)$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(detail::node& node, detail::shared_memory_holder pMemory)$/;"	f	class:YAML::Node
Node	amun/3rd_party/yaml-cpp/node/node.h	/^class YAML_CPP_API Node {$/;"	c	namespace:YAML
NodeBuilder	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^NodeBuilder::NodeBuilder()$/;"	f	class:YAML::NodeBuilder
NodeBuilder	amun/3rd_party/yaml-cpp/nodebuilder.h	/^class NodeBuilder : public EventHandler {$/;"	c	namespace:YAML
NodeEvents	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^NodeEvents::NodeEvents(const Node& node)$/;"	f	class:YAML::NodeEvents
NodeEvents	amun/3rd_party/yaml-cpp/nodeevents.h	/^class NodeEvents {$/;"	c	namespace:YAML
NodeType	amun/3rd_party/yaml-cpp/emitterstate.h	/^    EmitterNodeType::value NodeType() const {$/;"	f	struct:YAML::EmitterState::Group
NodeType	amun/3rd_party/yaml-cpp/node/type.h	/^struct NodeType {$/;"	s	namespace:YAML
Nodes	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^  typedef std::set<shared_node> Nodes;$/;"	t	class:YAML::detail::memory
Nodes	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  typedef std::vector<detail::node*> Nodes;$/;"	t	class:YAML::NodeBuilder
NonCopyable	amun/3rd_party/blaze/util/NonCopyable.h	/^   inline NonCopyable()  {}  \/\/!< Default constructor for the NonCopyable class.$/;"	f	class:blaze::NonCopyable
NonCopyable	amun/3rd_party/blaze/util/NonCopyable.h	/^class NonCopyable$/;"	c	namespace:blaze
NonCreatable	amun/3rd_party/blaze/util/NonCreatable.h	/^class NonCreatable$/;"	c	namespace:blaze
NonNumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^class NonNumericProxy : public Proxy< NonNumericProxy<MT>, ValueType_< ElementType_<MT> > >$/;"	c	namespace:blaze
NonNumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>::NonNumericProxy( MT& matrix, size_t i, size_t j )$/;"	f	class:blaze::NonNumericProxy
NonNumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>::NonNumericProxy( const NonNumericProxy& nnp )$/;"	f	class:blaze::NonNumericProxy
None	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Normalization	amun/fpga/matrix_functions.h	/^inline void Normalization(Matrix& out, const Matrix& in, const Matrix& alpha, float eps)$/;"	f	namespace:amunmt::FPGA::mblas
Normalize	amun/3rd_party/fast_align/src/ttables.h	/^  void Normalize() {$/;"	f	class:TTable
NormalizeVB	amun/3rd_party/fast_align/src/ttables.h	/^  void NormalizeVB(const double alpha) {$/;"	f	class:TTable
Not	amun/3rd_party/blaze/util/mpl/Not.h	/^struct Not : public Bool< !C::value >$/;"	s	namespace:blaze
Not	amun/3rd_party/spdlog/details/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	amun/3rd_party/spdlog/details/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
Not	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
NotPrintable	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& NotPrintable() {$/;"	f	namespace:YAML::Exp
NotSIMDEnabled	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^   struct NotSIMDEnabled { static constexpr bool value = false; };$/;"	s	struct:blaze::IsSIMDEnabledHelper
NotSMPAssignable	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^   struct NotSMPAssignable { static constexpr bool value = false; };$/;"	s	struct:blaze::IsSMPAssignableHelper
NpyArray	amun/3rd_party/cnpy/cnpy.h	/^    struct NpyArray {$/;"	s	namespace:cnpy
NpyMatrixWrapper	amun/cpu/npz_converter.h	/^        NpyMatrixWrapper(const cnpy::NpyArray& npy)$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
NpyMatrixWrapper	amun/cpu/npz_converter.h	/^    class NpyMatrixWrapper {$/;"	c	class:amunmt::CPU::NpzConverter
NpyMatrixWrapper	amun/fpga/npz_converter.h	/^    NpyMatrixWrapper(const cnpy::NpyArray& npy)$/;"	f	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
NpyMatrixWrapper	amun/fpga/npz_converter.h	/^  class NpyMatrixWrapper {$/;"	c	class:amunmt::FPGA::NpzConverter
NpyMatrixWrapper	amun/gpu/npz_converter.h	/^        NpyMatrixWrapper(const cnpy::NpyArray& npy)$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
NpyMatrixWrapper	amun/gpu/npz_converter.h	/^    class NpyMatrixWrapper {$/;"	c	class:amunmt::GPU::NpzConverter
NpzConverter	amun/cpu/npz_converter.h	/^    NpzConverter(const std::string& file)$/;"	f	class:amunmt::CPU::NpzConverter
NpzConverter	amun/cpu/npz_converter.h	/^class NpzConverter {$/;"	c	namespace:amunmt::CPU
NpzConverter	amun/fpga/npz_converter.cpp	/^NpzConverter::NpzConverter(const std::string& file)$/;"	f	class:amunmt::FPGA::NpzConverter
NpzConverter	amun/fpga/npz_converter.h	/^class NpzConverter {$/;"	c	namespace:amunmt::FPGA
NpzConverter	amun/gpu/npz_converter.h	/^class NpzConverter {$/;"	c	namespace:amunmt::GPU
NthElement	amun/fpga/matrix_functions.cpp	/^void NthElement($/;"	f	namespace:amunmt::FPGA::mblas
NthElement	amun/fpga/nth_element.cpp	/^NthElement::NthElement(const OpenCLInfo &openCLInfo, size_t maxBeamSize, size_t maxBatchSize)$/;"	f	class:amunmt::FPGA::NthElement
NthElement	amun/fpga/nth_element.h	/^class NthElement {$/;"	c	namespace:amunmt::FPGA
NthElement	amun/gpu/mblas/nth_element.h	/^class NthElement {$/;"	c	namespace:amunmt::GPU
NthOut	amun/gpu/mblas/nth_element_kernels.h	/^  NthOut() {}$/;"	f	struct:amunmt::GPU::NthOut
NthOut	amun/gpu/mblas/nth_element_kernels.h	/^  NthOut(unsigned &vInd, float vScore)$/;"	f	struct:amunmt::GPU::NthOut
NthOut	amun/gpu/mblas/nth_element_kernels.h	/^  NthOut(unsigned init)$/;"	f	struct:amunmt::GPU::NthOut
NthOut	amun/gpu/mblas/nth_element_kernels.h	/^struct NthOut$/;"	s	namespace:amunmt::GPU
NthOutBatch	amun/gpu/mblas/nth_element_kernels.h	/^  NthOutBatch() {}$/;"	f	struct:amunmt::GPU::NthOutBatch
NthOutBatch	amun/gpu/mblas/nth_element_kernels.h	/^  NthOutBatch(const float& rhs)$/;"	f	struct:amunmt::GPU::NthOutBatch
NthOutBatch	amun/gpu/mblas/nth_element_kernels.h	/^  NthOutBatch(unsigned vInd, float vScore, unsigned vHypoInd, unsigned vVocabInd)$/;"	f	struct:amunmt::GPU::NthOutBatch
NthOutBatch	amun/gpu/mblas/nth_element_kernels.h	/^struct NthOutBatch$/;"	s	namespace:amunmt::GPU
Null	amun/3rd_party/spdlog/details/format.h	/^struct Null$/;"	s	namespace:fmt::internal
Null	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Null$/;"	s	namespace:fmt::internal
Null	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
Null	amun/3rd_party/yaml-cpp/null.cpp	/^_Null Null;$/;"	m	namespace:YAML	file:
NullAnchor	amun/3rd_party/yaml-cpp/anchor.h	/^const anchor_t NullAnchor = 0;$/;"	m	namespace:YAML
NullType	amun/3rd_party/blaze/util/NullType.h	/^class NullType$/;"	c	namespace:blaze
NumActive	amun/common/histories.cpp	/^unsigned Histories::NumActive() const$/;"	f	class:amunmt::Histories
NumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^class NumericProxy : public Proxy< NumericProxy<MT> >$/;"	c	namespace:blaze
NumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>::NumericProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::NumericProxy
NumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>::NumericProxy( const NumericProxy& np )$/;"	f	class:blaze::NumericProxy
OSTREAM_WRAPPER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/ostream_wrapper.h	2;"	d
OT	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::DiagonalMatrix
OT	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::DiagonalMatrix
OT	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::HermitianMatrix
OT	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::HermitianMatrix
OT	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::LowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::LowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
OT	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
OT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
OT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
OT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
OT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
OT	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::UniLowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::UniLowerMatrix
OT	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::UniUpperMatrix
OT	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::UniUpperMatrix
OT	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the dense matrix.$/;"	t	class:blaze::UpperMatrix
OT	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef OppositeType_<MT>   OT;  \/\/!< Opposite type of the sparse matrix.$/;"	t	class:blaze::UpperMatrix
OT	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef OppositeType_<MT>  OT;  \/\/!< Opposite type of the dense matrix expression.$/;"	t	class:blaze::DMatForEachExpr
OT	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef OppositeType_<MT>  OT;  \/\/!< Opposite type of the sparse matrix expression.$/;"	t	class:blaze::SMatForEachExpr
OVERLONG_SEQUENCE	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
O_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor O_;$/;"	m	class:amunmt::GPU::SlowLSTM
Oct	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Oct,$/;"	e	enum:YAML::EMITTER_MANIP
Offset	amun/gpu/mblas/vector_wrapper.h	/^  VectorWrapper<T> Offset(unsigned offset)$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
OnAlias	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnAlias(const Mark &mark, anchor_t anchor) {$/;"	f	class:YAML::GraphBuilderAdapter
OnAlias	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnAlias(const Mark&, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
OnAlias	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnAlias(const Mark& \/* mark *\/, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
OnDocumentEnd	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  virtual void OnDocumentEnd() {}$/;"	f	class:YAML::GraphBuilderAdapter
OnDocumentEnd	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnDocumentEnd() {}$/;"	f	class:YAML::EmitFromEvents
OnDocumentEnd	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnDocumentEnd() {}$/;"	f	class:YAML::NodeBuilder
OnDocumentStart	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  virtual void OnDocumentStart(const Mark& mark) { (void)mark; }$/;"	f	class:YAML::GraphBuilderAdapter
OnDocumentStart	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnDocumentStart(const Mark&) {}$/;"	f	class:YAML::EmitFromEvents
OnDocumentStart	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnDocumentStart(const Mark&) {}$/;"	f	class:YAML::NodeBuilder
OnMapEnd	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnMapEnd() {$/;"	f	class:YAML::GraphBuilderAdapter
OnMapEnd	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnMapEnd() {$/;"	f	class:YAML::EmitFromEvents
OnMapEnd	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnMapEnd() {$/;"	f	class:YAML::NodeBuilder
OnMapStart	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnMapStart(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilderAdapter
OnMapStart	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnMapStart(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnMapStart	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnMapStart(const Mark& mark, const std::string& tag,$/;"	f	class:YAML::NodeBuilder
OnNull	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnNull(const Mark &mark, anchor_t anchor) {$/;"	f	class:YAML::GraphBuilderAdapter
OnNull	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnNull(const Mark&, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
OnNull	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnNull(const Mark& mark, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
OnOffBool	amun/3rd_party/yaml-cpp/emittermanip.h	/^  OnOffBool,      \/\/ on, off$/;"	e	enum:YAML::EMITTER_MANIP
OnScalar	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnScalar(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilderAdapter
OnScalar	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnScalar(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnScalar	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnScalar(const Mark& mark, const std::string& tag,$/;"	f	class:YAML::NodeBuilder
OnSequenceEnd	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnSequenceEnd() {$/;"	f	class:YAML::GraphBuilderAdapter
OnSequenceEnd	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnSequenceEnd() {$/;"	f	class:YAML::EmitFromEvents
OnSequenceEnd	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnSequenceEnd() { Pop(); }$/;"	f	class:YAML::NodeBuilder
OnSequenceStart	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnSequenceStart(const Mark &mark,$/;"	f	class:YAML::GraphBuilderAdapter
OnSequenceStart	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnSequenceStart(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnSequenceStart	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnSequenceStart(const Mark& mark,$/;"	f	class:YAML::NodeBuilder
Ones_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor Ones_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
OpenCLInfo	amun/fpga/types-fpga.h	/^struct OpenCLInfo$/;"	s
Operand	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::DMatEvalExpr
Operand	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::DMatForEachExpr
Operand	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::DMatInvExpr
Operand	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::DMatSerialExpr
Operand	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::DMatTransExpr
Operand	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::DVecEvalExpr
Operand	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::DVecForEachExpr
Operand	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::DVecSerialExpr
Operand	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::DVecTransExpr
Operand	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::SMatEvalExpr
Operand	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::SMatForEachExpr
Operand	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::SMatSerialExpr
Operand	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  Operand;$/;"	t	class:blaze::SMatTransExpr
Operand	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::SVecEvalExpr
Operand	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::SVecForEachExpr
Operand	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::SVecSerialExpr
Operand	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  Operand;$/;"	t	class:blaze::SVecTransExpr
Operand	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Column
Operand	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Column
Operand	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Row
Operand	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Row
Operand	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Submatrix
Operand	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef If_< IsExpression<MT>, MT, MT& >  Operand;$/;"	t	class:blaze::Submatrix
Operand	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef If_< IsExpression<VT>, VT, VT& >  Operand;$/;"	t	class:blaze::Subvector
Operand	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef If_< IsExpression<VT>, VT, VT& >  Operand;$/;"	t	class:blaze::Subvector
Operation	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef OP  Operation;$/;"	t	class:blaze::DMatForEachExpr
Operation	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef OP  Operation;$/;"	t	class:blaze::DVecForEachExpr
Operation	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef OP  Operation;$/;"	t	class:blaze::SMatForEachExpr
Operation	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef OP  Operation;$/;"	t	class:blaze::SVecForEachExpr
OppositeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef DiagonalMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef DiagonalMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef HermitianMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef HermitianMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef LowerMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef LowerMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef StrictlyLowerMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef StrictlyLowerMatrix<OT,!SO,false> OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef StrictlyUpperMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef StrictlyUpperMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef SymmetricMatrix<OT,!SO,true,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef SymmetricMatrix<OT,!SO,true,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef SymmetricMatrix<OT,!SO,false,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef SymmetricMatrix<OT,!SO,false,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef UniLowerMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef UniLowerMatrix<OT,!SO,false> OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef UniUpperMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef UniUpperMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef UpperMatrix<OT,!SO,true>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
OppositeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef UpperMatrix<OT,!SO,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
OppositeType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DynamicMatrix<Type,!SO>      OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::CustomMatrix
OppositeType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DynamicMatrix<Type,!SO>  OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DynamicMatrix
OppositeType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef HybridMatrix<Type,M,N,!SO>  OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::HybridMatrix
OppositeType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef StaticMatrix<Type,M,N,!SO>  OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::StaticMatrix
OppositeType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatDMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatDMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef OppositeType_<MT>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatEvalExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatForEachExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef OppositeType_<MT>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatInvExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatScalarDivExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef OppositeType_<ResultType>     OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatScalarMultExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef OppositeType_<MT>      OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatSerialExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTDMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTDMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	namespace:blaze
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef OppositeType_<ResultType>  OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTransExpr
OppositeType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef OppositeType_<MT>        OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DMatTransposer
OppositeType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatDMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef OppositeType_<MT>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatEvalExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatForEachExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	namespace:blaze
OppositeType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatScalarDivExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef OppositeType_<ResultType>     OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatScalarMultExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef OppositeType_<MT>      OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatSerialExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	namespace:blaze
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTDMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTSMatMultExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef OppositeType_<MT>     OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTransExpr
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef MT                       OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
OppositeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef MT                     OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
OppositeType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SVecTSVecMultExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TDMatSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TDMatSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TSMatDMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	namespace:blaze
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TSMatSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatAddExpr
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	namespace:blaze
OppositeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef OppositeType_<ResultType>   OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatSubExpr
OppositeType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef OppositeType_<MT>    OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::DenseMatrixProxy
OppositeType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef OppositeType_<MT>    OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::SparseMatrixProxy
OppositeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,!SO>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
OppositeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,false>  OppositeType;    \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
OppositeType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef OppositeType_<ResultType>           OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::Submatrix
OppositeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef OppositeType_<ResultType>     OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::Submatrix
OppositeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef OppositeType_<ResultType>    OppositeType;   \/\/!< Result type with opposite storage order for expression template evaluations.$/;"	t	class:blaze::Submatrix
OptimalGrowth	amun/3rd_party/blaze/util/policies/OptimalGrowth.h	/^struct OptimalGrowth$/;"	s	namespace:blaze
Or	amun/3rd_party/blaze/util/mpl/Or.h	/^struct Or$/;"	s	namespace:blaze
OrHelper	amun/3rd_party/blaze/util/mpl/Or.h	/^struct OrHelper$/;"	s	namespace:blaze
OrHelper	amun/3rd_party/blaze/util/mpl/Or.h	/^struct OrHelper<T>$/;"	s	namespace:blaze
Other	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef DiagonalMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::DiagonalMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   explicit inline DiagonalMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::DiagonalMatrix
Other	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline DiagonalMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::DiagonalMatrix
Other	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^      typedef DiagonalMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::DiagonalMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef HermitianMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::HermitianMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   explicit inline HermitianMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::HermitianMatrix
Other	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline HermitianMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::HermitianMatrix
Other	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef HermitianMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::HermitianMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef LowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::LowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   explicit inline LowerMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::LowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline LowerMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::LowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^      typedef LowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::LowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef StrictlyLowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::StrictlyLowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   explicit inline StrictlyLowerMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::StrictlyLowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline StrictlyLowerMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::StrictlyLowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^      typedef StrictlyLowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::StrictlyLowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef StrictlyUpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::StrictlyUpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   explicit inline StrictlyUpperMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::StrictlyUpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline StrictlyUpperMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::StrictlyUpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^      typedef StrictlyUpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::StrictlyUpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef SymmetricMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::SymmetricMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef SymmetricMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::SymmetricMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   explicit inline SymmetricMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::SymmetricMatrix
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline SymmetricMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::SymmetricMatrix
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef SymmetricMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::SymmetricMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef SymmetricMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::SymmetricMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef UniLowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UniLowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   explicit inline UniLowerMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::UniLowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline UniLowerMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::UniLowerMatrix
Other	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef UniLowerMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UniLowerMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef UniUpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UniUpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   explicit inline UniUpperMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::UniUpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline UniUpperMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::UniUpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef UniUpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UniUpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef UpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   explicit inline UpperMatrix( const Other (&array)[N][N] );$/;"	m	class:blaze::UpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline UpperMatrix& operator=( const Other (&array)[N][N] );$/;"	m	class:blaze::UpperMatrix
Other	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^      typedef UpperMatrix< typename MT::template Rebind<ET>::Other >  Other;$/;"	t	struct:blaze::UpperMatrix::Rebind
Other	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^      typedef CustomMatrix<ET,AF,PF,SO>  Other;  \/\/!< The type of the other CustomMatrix.$/;"	t	struct:blaze::CustomMatrix::Rebind
Other	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline CustomMatrix& operator=( const Other (&array)[M][N] );$/;"	m	class:blaze::CustomMatrix
Other	amun/3rd_party/blaze/math/dense/CustomVector.h	/^      typedef CustomVector<ET,AF,PF,TF>  Other;  \/\/!< The type of the other CustomVector.$/;"	t	struct:blaze::CustomVector::Rebind
Other	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline CustomVector& operator=( const Other (&array)[N] );$/;"	m	class:blaze::CustomVector
Other	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^      typedef DynamicMatrix<ET,SO>  Other;  \/\/!< The type of the other DynamicMatrix.$/;"	t	struct:blaze::DynamicMatrix::Rebind
Other	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   explicit inline DynamicMatrix( const Other (&array)[M][N] );$/;"	m	class:blaze::DynamicMatrix
Other	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline DynamicMatrix& operator=( const Other (&array)[M][N] );$/;"	m	class:blaze::DynamicMatrix
Other	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^      typedef DynamicVector<ET,TF>  Other;  \/\/!< The type of the other DynamicVector.$/;"	t	struct:blaze::DynamicVector::Rebind
Other	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   explicit inline DynamicVector( const Other (&array)[N] );$/;"	m	class:blaze::DynamicVector
Other	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline DynamicVector& operator=( const Other (&array)[N] );$/;"	m	class:blaze::DynamicVector
Other	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^      typedef HybridMatrix<ET,M,N,SO>  Other;  \/\/!< The type of the other HybridMatrix.$/;"	t	struct:blaze::HybridMatrix::Rebind
Other	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   explicit inline HybridMatrix( const Other (&array)[M2][N2] );$/;"	m	class:blaze::HybridMatrix
Other	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline HybridMatrix& operator=( const Other (&array)[M2][N2] );$/;"	m	class:blaze::HybridMatrix
Other	amun/3rd_party/blaze/math/dense/HybridVector.h	/^      typedef HybridVector<ET,N,TF>  Other;  \/\/!< The type of the other HybridVector.$/;"	t	struct:blaze::HybridVector::Rebind
Other	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   explicit inline HybridVector( const Other (&array)[M] );$/;"	m	class:blaze::HybridVector
Other	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline HybridVector& operator=( const Other (&array)[M] );$/;"	m	class:blaze::HybridVector
Other	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^      typedef StaticMatrix<ET,M,N,SO>  Other;  \/\/!< The type of the other StaticMatrix.$/;"	t	struct:blaze::StaticMatrix::Rebind
Other	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   explicit inline StaticMatrix( const Other (&array)[M][N] );$/;"	m	class:blaze::StaticMatrix
Other	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline StaticMatrix& operator=( const Other (&array)[M][N] );$/;"	m	class:blaze::StaticMatrix
Other	amun/3rd_party/blaze/math/dense/StaticVector.h	/^      typedef StaticVector<ET,N,TF>  Other;  \/\/!< The type of the other StaticVector.$/;"	t	struct:blaze::StaticVector::Rebind
Other	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   explicit inline StaticVector( const Other (&array)[N] );$/;"	m	class:blaze::StaticVector
Other	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline StaticVector& operator=( const Other (&array)[N] );$/;"	m	class:blaze::StaticVector
Other	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^      typedef CompressedMatrix<ET,SO>  Other;  \/\/!< The type of the other CompressedMatrix.$/;"	t	struct:blaze::CompressedMatrix::Rebind
Other	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^      typedef CompressedMatrix<ET,true>  Other;  \/\/!< The type of the other CompressedMatrix.$/;"	t	struct:blaze::CompressedMatrix::Rebind
Other	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^      typedef CompressedVector<ET,TF>  Other;  \/\/!< The type of the other CompressedVector.$/;"	t	struct:blaze::CompressedVector::Rebind
Other	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Other { typedef typename UnderlyingBuiltin<typename T2::ElementType>::Type  Type; };$/;"	s	struct:blaze::UnderlyingBuiltin
Other	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Other { typedef typename T2::ElementType  Type; };$/;"	s	struct:blaze::UnderlyingElement
Other	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^   struct Other { typedef typename UnderlyingNumeric<typename T2::ElementType>::Type  Type; };$/;"	s	struct:blaze::UnderlyingNumeric
Output	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::Output(const std::map<const std::string*, extract::WordCount> &coll, std::ofstream &outStream)$/;"	f	class:extract::ExtractLex
Output	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::Output(std::ofstream &streamLexS2T, std::ofstream &streamLexT2S)$/;"	f	class:extract::ExtractLex
OutputCollector	amun/common/output_collector.cpp	/^OutputCollector::OutputCollector()$/;"	f	class:amunmt::OutputCollector
OutputCollector	amun/common/output_collector.h	/^class OutputCollector {$/;"	c	namespace:amunmt
OutputRec	amun/common/config.cpp	/^void OutputRec(const YAML::Node node, YAML::Emitter& out) {$/;"	f	namespace:amunmt
Outputs	amun/common/output_collector.h	/^  typedef std::map<long, std::string> Outputs;$/;"	t	class:amunmt::OutputCollector
OverflowException	amun/3rd_party/extract_lex/exception.cpp	/^OverflowException::OverflowException() throw() {}$/;"	f	class:util::OverflowException
OverflowException	amun/3rd_party/extract_lex/exception.h	/^class OverflowException : public Exception {$/;"	c	namespace:util
OverflowException	amun/common/exception.cpp	/^OverflowException::OverflowException() throw() {}$/;"	f	class:amunmt::util::OverflowException
OverflowException	amun/common/exception.h	/^class OverflowException : public Exception {$/;"	c	namespace:amunmt::util
OverwriteBPE	amun/common/config.cpp	/^void OverwriteBPE(YAML::Node& config, std::vector<std::string>& bpePaths) {$/;"	f	namespace:amunmt
OverwriteModels	amun/common/config.cpp	/^void OverwriteModels(YAML::Node& config, std::vector<std::string>& modelPaths) {$/;"	f	namespace:amunmt
OverwriteSourceVocabs	amun/common/config.cpp	/^void OverwriteSourceVocabs(YAML::Node& config, std::vector<std::string>& sourceVocabPaths) {$/;"	f	namespace:amunmt
OverwriteTargetVocab	amun/common/config.cpp	/^void OverwriteTargetVocab(YAML::Node& config, std::string& targetVocabPath) {$/;"	f	namespace:amunmt
PARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/parser.h	2;"	d
PAUSE_TIMER	amun/gpu/types-gpu.h	31;"	d
PAUSE_TIMER_CPU	amun/common/utils.h	49;"	d
PLAIN_SCALAR	amun/3rd_party/yaml-cpp/token.h	/^    PLAIN_SCALAR,$/;"	e	enum:YAML::Token::TYPE
PLUS_FLAG	amun/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon28
PLUS_FLAG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon62
POINTER	amun/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
POINTER	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
POWERS_OF_10_32	amun/3rd_party/spdlog/details/format.cc	/^const uint32_t fmt::internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_32	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	const uint32_t internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_64	amun/3rd_party/spdlog/details/format.cc	/^const uint64_t fmt::internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_64	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	const uint64_t internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData	file:
PRIMARY_HANDLE	amun/3rd_party/yaml-cpp/tag.h	/^    PRIMARY_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
PTR_VECTOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/ptr_vector.h	2;"	d
Pair	amun/3rd_party/spdlog/details/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap
Pair	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap
PairHash	amun/3rd_party/fast_align/src/fast_align.cc	/^struct PairHash {$/;"	s	file:
ParallelSection	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^class ParallelSection$/;"	c	namespace:blaze
ParallelSection	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^inline ParallelSection<T>::ParallelSection( bool activate )$/;"	f	class:blaze::ParallelSection
Parent	amun/cpu/mblas/tensor.h	/^	typedef BlazeMatrix<float, blaze::rowMajor> Parent;$/;"	t	class:amunmt::CPU::mblas::ArrayMatrix
Parent	amun/cpu/mblas/tensor.h	/^  typedef blaze::DynamicMatrix<float, blaze::rowMajor> Parent;$/;"	t	class:amunmt::CPU::mblas::Tensor
ParseAlignmentFile	amun/common/filter.cpp	/^std::vector<Words> Filter::ParseAlignmentFile(const Vocab& srcVocab,$/;"	f	class:amunmt::Filter
ParseAnchor	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseAnchor(anchor_t& anchor) {$/;"	f	class:YAML::SingleDocParser
ParseDirectives	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::ParseDirectives() {$/;"	f	class:YAML::Parser
ParseHex	amun/3rd_party/yaml-cpp/exp.cpp	/^unsigned ParseHex(const std::string& str, const Mark& mark) {$/;"	f	namespace:YAML::Exp
ParseLine	amun/3rd_party/fast_align/src/fast_align.cc	/^void ParseLine(const string& line,$/;"	f
ParseProperties	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseProperties(std::string& tag, anchor_t& anchor) {$/;"	f	class:YAML::SingleDocParser
ParseTag	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseTag(std::string& tag) {$/;"	f	class:YAML::SingleDocParser
Parser	amun/3rd_party/yaml-cpp/parser.cpp	/^Parser::Parser() {}$/;"	f	class:YAML::Parser
Parser	amun/3rd_party/yaml-cpp/parser.cpp	/^Parser::Parser(std::istream& in) { Load(in); }$/;"	f	class:YAML::Parser
Parser	amun/3rd_party/yaml-cpp/parser.h	/^class YAML_CPP_API Parser : private noncopyable {$/;"	c	namespace:YAML
ParserException	amun/3rd_party/yaml-cpp/exceptions.h	/^  ParserException(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::ParserException
ParserException	amun/3rd_party/yaml-cpp/exceptions.h	/^class ParserException : public Exception {$/;"	c	namespace:YAML
PasteRows	amun/fpga/matrix_functions.cpp	/^void PasteRows(Matrix& Out, const Matrix& In, const size_t rowNo, size_t colNo, size_t sparse)$/;"	f	namespace:amunmt::FPGA::mblas
Penalties	amun/gpu/decoder/ape_penalty.h	/^typedef std::vector<float> Penalties;$/;"	t	namespace:GPU
Plain	amun/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
PlainScalar	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& PlainScalar() {$/;"	f	namespace:YAML::Exp
PlainScalarInFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& PlainScalarInFlow() {$/;"	f	namespace:YAML::Exp
Plus	amun/3rd_party/blaze/util/mpl/Plus.h	/^struct Plus$/;"	s	namespace:blaze
Pointer	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef Pointer_<MT>                 Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef Pointer_<MT>                  Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::HermitianMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef HermitianElement*         Pointer;         \/\/!< Pointer return type.$/;"	t	class:blaze::HermitianElement
Pointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   typedef HermitianProxy*        Pointer;          \/\/!< Pointer to the represented element.$/;"	t	class:blaze::HermitianProxy
Pointer	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef Pointer_<MT>              Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::LowerMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef Pointer_<MT>                      Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef Pointer_<MT>                      Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef Pointer_<MT>                        Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef Pointer_<MT>                       Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   typedef NumericProxy*        Pointer;          \/\/!< Pointer to the represented element.$/;"	t	class:blaze::NumericProxy
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to the shared value.$/;"	t	class:blaze::SharedValue
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef SharedElement*        Pointer;         \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
Pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef SymmetricElement*         Pointer;         \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricElement
Pointer	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef Pointer_<MT>                 Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef UniLowerElement*         Pointer;         \/\/!< Pointer return type.$/;"	t	class:blaze::UniLowerElement
Pointer	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef Pointer_<MT>                 Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
Pointer	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef UniUpperElement*         Pointer;         \/\/!< Pointer return type.$/;"	t	class:blaze::UniUpperElement
Pointer	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef Pointer_<MT>              Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::UpperMatrix
Pointer	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::CustomMatrix
Pointer	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::CustomVector
Pointer	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::DynamicMatrix
Pointer	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::DynamicVector
Pointer	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::HybridMatrix
Pointer	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::HybridVector
Pointer	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::StaticMatrix
Pointer	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::StaticVector
Pointer	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef Pointer_<MT>             Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::DMatTransposer
Pointer	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef Pointer_<VT>             Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::DVecTransposer
Pointer	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef Pointer_<MT>         Pointer;         \/\/!< Pointer to a non-constant matrix value.$/;"	t	class:blaze::DenseMatrixProxy
Pointer	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef Pointer_<VT>         Pointer;         \/\/!< Pointer to a non-constant vector value.$/;"	t	class:blaze::DenseVectorProxy
Pointer	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef If_< Or< IsConst<MT>, Not< HasMutableDataAccess<MT> > >, ConstPointer, ElementType* >  Pointer;$/;"	t	class:blaze::Column
Pointer	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef If_< Or< IsConst<MT>, Not< HasMutableDataAccess<MT> > >, ConstPointer, ElementType* >  Pointer;$/;"	t	class:blaze::Row
Pointer	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef If_< Or< IsConst<MT>, Not< HasMutableDataAccess<MT> > >, ConstPointer, ElementType* >  Pointer;$/;"	t	class:blaze::Submatrix
Pointer	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef If_< Or< IsConst<VT>, Not< HasMutableDataAccess<VT> > >, ConstPointer, ElementType* >  Pointer;$/;"	t	class:blaze::Subvector
Pointer	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef Type*           Pointer;          \/\/!< Type of a pointer to the allocated values.$/;"	t	class:blaze::AlignedAllocator
Pointer	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef Type*        Pointer;         \/\/!< Pointer to a non-constant array element.$/;"	t	class:blaze::AlignedArray
PointerType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef DiagonalProxy<MT>                PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DiagonalMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef HermitianProxy<MT>               PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef ValueType                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef LowerProxy<MT>                   PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::LowerMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef StrictlyLowerProxy<MT>           PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef StrictlyUpperProxy<MT>           PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef ValueType*                       PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
PointerType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef NumericProxy<MT>                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef SparseElementType          PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
PointerType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef ValueType                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef UniLowerProxy<MT>                PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef ValueType                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef UniUpperProxy<MT>                PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef ValueType                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef UpperProxy<MT>                   PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::UpperMatrix::Iterator
PointerType	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef Type*                            PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DenseIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ElementType*                     PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::pointer          PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ValueType*                 PointerType;       \/\/!< Pointer return type.$/;"	t	class:ConstIterator
PointerType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::pointer          PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
PointerType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ValueType                               PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::Column::ColumnIterator
PointerType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ValueType                            PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::Row::RowIterator
PointerType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::pointer  PointerType;$/;"	t	class:blaze::Submatrix::SubmatrixIterator
PointerType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ValueType                                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
PointerType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::pointer  PointerType;$/;"	t	class:blaze::Subvector::SubvectorIterator
PointerType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ValueType                                  PointerType;       \/\/!< Pointer return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
PointerType	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef Type*                            PointerType;        \/\/!< Pointer return type.$/;"	t	class:blaze::PtrIterator
PointerType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef C*                         PointerType;        \/\/!< Pointer return type.$/;"	t	class:blaze::PtrVector::CastIterator
PointerType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef T*                    PointerType;         \/\/!< Pointer to a non-const object.$/;"	t	class:blaze::PtrVector
PointerType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef const C*                   PointerType;        \/\/!< Pointer return type.$/;"	t	class:blaze::PtrVector::ConstCastIterator
Pop	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::Pop() {$/;"	f	class:YAML::NodeBuilder
PopAllIndents	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopAllIndents() {$/;"	f	class:YAML::Scanner
PopAllSimpleKeys	amun/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::PopAllSimpleKeys() {$/;"	f	class:YAML::Scanner
PopCollectionType	amun/3rd_party/yaml-cpp/collectionstack.h	/^  void PopCollectionType(CollectionType::value type) {$/;"	f	class:YAML::CollectionStack
PopIndent	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopIndent() {$/;"	f	class:YAML::Scanner
PopIndentToHere	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopIndentToHere() {$/;"	f	class:YAML::Scanner
PositiveType	amun/3rd_party/blaze/math/Accuracy.h	/^   typedef A  PositiveType;  \/\/!< The positive accuracy type.$/;"	t	class:blaze::NegativeAccuracy
PositiveType	amun/3rd_party/blaze/math/Epsilon.h	/^   typedef E  PositiveType;  \/\/!< The positive epsilon type.$/;"	t	class:blaze::NegativeEpsilon
PositiveType	amun/3rd_party/blaze/math/Infinity.h	/^   typedef I  PositiveType;  \/\/!< The positive infinity type.$/;"	t	class:blaze::NegativeInfinity
Postprocess	amun/common/god.cpp	/^std::vector<std::string> God::Postprocess(const std::vector<std::string>& input) const {$/;"	f	class:amunmt::God
Postprocess	amun/common/processor/bpe.cpp	/^std::vector<std::string> BPE::Postprocess(const std::vector<std::string> input) const {$/;"	f	class:amunmt::BPE
Postprocessor	amun/common/processor/processor.h	/^class Postprocessor {$/;"	c	namespace:amunmt
Pow	amun/3rd_party/blaze/math/functors/Pow.h	/^   explicit inline Pow( ET exp )$/;"	f	struct:blaze::Pow
Pow	amun/3rd_party/blaze/math/functors/Pow.h	/^struct Pow$/;"	s	namespace:blaze
Precision	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision Precision(int n) { return _Precision(n, n); }$/;"	f	namespace:YAML
PrecisionHandler	amun/3rd_party/spdlog/details/format.cc	/^		class PrecisionHandler:$/;"	c	namespace:fmt::__anon30	file:
PrecisionHandler	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class PrecisionHandler: public ArgVisitor<PrecisionHandler, int>$/;"	c	namespace:fmt::internal
PrepareIntegralStream	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareIntegralStream(std::stringstream& stream) const {$/;"	f	class:YAML::Emitter
PrepareNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
PrepareTopNode	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareTopNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
Preprocess	amun/common/god.cpp	/^std::vector<std::string> God::Preprocess(unsigned i, const std::vector<std::string>& input) const {$/;"	f	class:amunmt::God
Preprocess	amun/common/god.cpp	/^std::vector<std::vector<std::string>> God::Preprocess ($/;"	f	class:amunmt::God
Preprocess	amun/common/processor/bpe.cpp	/^std::vector<bpeFactors> BPE::Preprocess(const std::vector<bpeFactors> input) const {$/;"	f	class:amunmt::BPE
Preprocess	amun/common/processor/bpe.cpp	/^std::vector<std::string> BPE::Preprocess(const std::vector<std::string> input) const {$/;"	f	class:amunmt::BPE
Preprocessor	amun/common/processor/processor.h	/^class Preprocessor {$/;"	c	namespace:amunmt
PrimaryHandle	amun/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
PrintSegment	amun/common/processor/bpe.cpp	/^void BPE::PrintSegment(const std::string& sentence) {$/;"	f	class:amunmt::BPE
PrintTokens	amun/3rd_party/yaml-cpp/parser.cpp	/^void Parser::PrintTokens(std::ostream& out) {$/;"	f	class:YAML::Parser
Printer	amun/common/printer.h	/^void Printer(const God &god, const Histories& histories, OStream& out, const Sentence& sentence) {$/;"	f	namespace:amunmt
Printer	amun/common/printer.h	/^void Printer(const God &god, const History& history, OStream& out, const Sentence& sentence)$/;"	f	namespace:amunmt
PrintfArgFormatter	amun/3rd_party/spdlog/details/format.cc	/^			PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::PrintfArgFormatter
PrintfArgFormatter	amun/3rd_party/spdlog/details/format.cc	/^		class PrintfArgFormatter:$/;"	c	namespace:fmt::internal	file:
PrintfArgFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::PrintfArgFormatter
PrintfArgFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class PrintfArgFormatter$/;"	c	namespace:fmt
PrintfFormatter	amun/3rd_party/spdlog/details/format.h	/^    explicit PrintfFormatter(const ArgList &args): FormatterBase(args)$/;"	f	class:fmt::internal::PrintfFormatter
PrintfFormatter	amun/3rd_party/spdlog/details/format.h	/^class PrintfFormatter: private FormatterBase$/;"	c	namespace:fmt::internal
PrintfFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    explicit PrintfFormatter(const ArgList &al, BasicWriter<Char> &w)$/;"	f	class:fmt::PrintfFormatter
PrintfFormatter	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class PrintfFormatter: private internal::FormatterBase$/;"	c	namespace:fmt
ProbCompare	amun/cpu/decoder/best_hyps.cpp	/^  ProbCompare(const float* data) : data_(data) {}$/;"	f	struct:amunmt::CPU::ProbCompare
ProbCompare	amun/cpu/decoder/best_hyps.cpp	/^struct ProbCompare {$/;"	s	namespace:amunmt::CPU	file:
Probs_	amun/cpu/dl4mt/decoder.h	/^    mblas::ArrayMatrix Probs_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
Probs_	amun/cpu/nematus/decoder.h	/^    mblas::ArrayMatrix Probs_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
Probs_	amun/fpga/decoder.h	/^  mblas::Tensor Probs_;$/;"	m	class:amunmt::FPGA::Decoder
Probs_	amun/gpu/decoder/ape_penalty.h	/^    mblas::Tensor Probs_;$/;"	m	class:GPU::ApePenalty
Probs_	amun/gpu/dl4mt/decoder.h	/^    mblas::Tensor Probs_;$/;"	m	class:amunmt::GPU::Decoder
Process	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::Process(const std::string *target, const std::string *source)$/;"	f	class:extract::ExtractLex
Process	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::Process(extract::WordCount &wcIn, const std::string *out)$/;"	f	class:extract::ExtractLex
Process	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::Process(std::vector<std::string> &toksTarget,$/;"	f	class:extract::ExtractLex
ProcessPaths	amun/common/config.cpp	/^void ProcessPaths(YAML::Node& node, const boost::filesystem::path& configPath, bool isPath) {$/;"	f	namespace:amunmt
ProcessUnaligned	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void extract::ExtractLex::ProcessUnaligned(std::vector<std::string> &toksTarget,$/;"	f	class:extract::ExtractLex
Processor	amun/common/processor/processor.h	/^class Processor : public Preprocessor, public Postprocessor {$/;"	c	namespace:amunmt
Prod	amun/fpga/matrix_functions.cpp	/^Matrix& Prod(Matrix& C, const Matrix& A, const Matrix& B,$/;"	f	namespace:amunmt::FPGA::mblas
Property	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
Proxy	amun/3rd_party/blaze/math/proxy/Proxy.h	/^class Proxy : public If_< IsVector<RT>$/;"	c	namespace:blaze
PtrDelete	amun/3rd_party/blaze/util/policies/PtrDelete.h	/^struct PtrDelete$/;"	s	namespace:blaze
PtrIterator	amun/3rd_party/blaze/util/PtrIterator.h	/^class PtrIterator$/;"	c	namespace:blaze
PtrIterator	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>::PtrIterator( const IteratorType& it )$/;"	f	class:blaze::PtrIterator
PtrIterator	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>::PtrIterator( const PtrIterator<Other>& it )$/;"	f	class:blaze::PtrIterator
PtrIterator	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>::PtrIterator()$/;"	f	class:blaze::PtrIterator
PtrVector	amun/3rd_party/blaze/util/PtrVector.h	/^class PtrVector$/;"	c	namespace:blaze
PtrVector	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::PtrVector( SizeType initCapacity )$/;"	f	class:blaze::PtrVector
PtrVector	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::PtrVector( const PtrVector& pv )$/;"	f	class:blaze::PtrVector
PtrVector	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::PtrVector( const PtrVector<T2,D2,G2>& pv )$/;"	f	class:blaze::PtrVector
Push	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^detail::node& NodeBuilder::Push(const Mark& mark, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
Push	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::Push(detail::node& node) {$/;"	f	class:YAML::NodeBuilder
PushCollectionType	amun/3rd_party/yaml-cpp/collectionstack.h	/^  void PushCollectionType(CollectionType::value type) {$/;"	f	class:YAML::CollectionStack
PushIndentTo	amun/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::IndentMarker* Scanner::PushIndentTo(int column,$/;"	f	class:YAML::Scanner
PushToken	amun/3rd_party/yaml-cpp/scanner.cpp	/^Token* Scanner::PushToken(Token::TYPE type) {$/;"	f	class:YAML::Scanner
PushedKey	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  typedef std::pair<detail::node*, bool> PushedKey;$/;"	t	class:YAML::NodeBuilder
QueueUnicodeCodepoint	amun/3rd_party/yaml-cpp/stream.cpp	/^inline void QueueUnicodeCodepoint(std::deque<char>& q, unsigned long ch) {$/;"	f	namespace:YAML
RE1	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ResultType_<VT1>     RE1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
RE2	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ResultType_<VT2>     RE2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
RED	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
RED	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
RED	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink
REGEXIMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/regeximpl.h	2;"	d
REGEX_AND	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_AND,$/;"	e	enum:YAML::REGEX_OP
REGEX_EMPTY	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_EMPTY,$/;"	e	enum:YAML::REGEX_OP
REGEX_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/regex_yaml.h	2;"	d
REGEX_MATCH	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_MATCH,$/;"	e	enum:YAML::REGEX_OP
REGEX_NOT	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_NOT,$/;"	e	enum:YAML::REGEX_OP
REGEX_OP	amun/3rd_party/yaml-cpp/regex_yaml.h	/^enum REGEX_OP {$/;"	g	namespace:YAML
REGEX_OR	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_OR,$/;"	e	enum:YAML::REGEX_OP
REGEX_RANGE	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_RANGE,$/;"	e	enum:YAML::REGEX_OP
REGEX_SEQ	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_SEQ$/;"	e	enum:YAML::REGEX_OP
REPEATED_TAG_DIRECTIVE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const REPEATED_TAG_DIRECTIVE = "repeated TAG directive";$/;"	m	namespace:YAML::ErrorMsg
REPEATED_YAML_DIRECTIVE	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const REPEATED_YAML_DIRECTIVE = "repeated YAML directive";$/;"	m	namespace:YAML::ErrorMsg
REPLACEMENT_CHARACTER	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^enum { REPLACEMENT_CHARACTER = 0xFFFD };$/;"	e	enum:YAML::Utils::__anon67::__anon68	file:
RESET_COLOR	amun/3rd_party/spdlog/details/format.cc	/^		const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fmt::__anon30	file:
RESET_COLOR	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^		const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fmt::__anon64	file:
RN	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef ReturnType_<MT>    RN;  \/\/!< Return type of the dense matrix expression.$/;"	t	class:blaze::DMatForEachExpr
RN	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef ReturnType_<MT>     RN;  \/\/!< Return type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarDivExpr
RN	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef ReturnType_<MT>     RN;  \/\/!< Return type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarMultExpr
RN	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef ReturnType_<VT>   RN;  \/\/!< Return type of the dense vector expression.$/;"	t	class:blaze::DVecForEachExpr
RN	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef ReturnType_<VT>     RN;  \/\/!< Return type of the dense vector expression.$/;"	t	class:blaze::DVecScalarDivExpr
RN	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef ReturnType_<VT>     RN;  \/\/!< Return type of the dense vector expression.$/;"	t	class:blaze::DVecScalarMultExpr
RN	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef ReturnType_<MT>    RN;  \/\/!< Return type of the sparse matrix expression.$/;"	t	class:blaze::SMatForEachExpr
RN	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef ReturnType_<MT>     RN;  \/\/!< Return type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarDivExpr
RN	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef ReturnType_<MT>     RN;  \/\/!< Return type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarMultExpr
RN	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef ReturnType_<VT>  RN;  \/\/!< Return type of the sparse vector expression.$/;"	t	class:blaze::SVecForEachExpr
RN	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef ReturnType_<VT>     RN;  \/\/!< Return type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarDivExpr
RN	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef ReturnType_<VT>     RN;  \/\/!< Return type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarMultExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< ReturnType type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTDMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Evaluation type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef ReturnType_<VT1>     RN1;  \/\/!< Return type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
RN1	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef ReturnType_<MT1>  RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
RN1	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
RN1	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef ReturnType_<MT1>     RN1;  \/\/!< Return type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatDMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< ReturnType type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatTDMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Evaluation type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef ReturnType_<VT2>     RN2;  \/\/!< Return type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
RN2	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef ReturnType_<MT2>  RN2;  \/\/!< Return type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatDMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
RN2	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
RN2	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef ReturnType_<MT2>     RN2;  \/\/!< Return type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
RNG	amun/3rd_party/blaze/config/Random.h	/^typedef std::mt19937  RNG;$/;"	t	namespace:blaze
RNN	amun/cpu/dl4mt/encoder.h	/^        RNN(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Encoder::RNN
RNN	amun/cpu/dl4mt/encoder.h	/^    class RNN {$/;"	c	class:amunmt::CPU::dl4mt::Encoder
RNN	amun/fpga/encoder.h	/^      RNN(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::Encoder::RNN
RNN	amun/fpga/encoder.h	/^  class RNN {$/;"	c	class:amunmt::FPGA::Encoder
RNN	amun/gpu/dl4mt/encoder.h	/^        RNN(std::unique_ptr<Cell> cell)$/;"	f	class:amunmt::GPU::Encoder::RNN
RNN	amun/gpu/dl4mt/encoder.h	/^    class RNN {$/;"	c	class:amunmt::GPU::Encoder
RNNFinal	amun/cpu/dl4mt/decoder.h	/^        RNNFinal(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Decoder::RNNFinal
RNNFinal	amun/cpu/dl4mt/decoder.h	/^    class RNNFinal {$/;"	c	class:amunmt::CPU::dl4mt::Decoder
RNNFinal	amun/cpu/nematus/decoder.h	/^        RNNFinal(const WeightsGRU& modelGRU, const WeightsTrans& modelTrans)$/;"	f	class:amunmt::CPU::Nematus::Decoder::RNNFinal
RNNFinal	amun/cpu/nematus/decoder.h	/^    class RNNFinal {$/;"	c	class:amunmt::CPU::Nematus::Decoder
RNNFinal	amun/fpga/decoder.h	/^    RNNFinal(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::Decoder::RNNFinal
RNNFinal	amun/fpga/decoder.h	/^  class RNNFinal {$/;"	c	class:amunmt::FPGA::Decoder
RNNFinal	amun/gpu/dl4mt/decoder.h	/^        RNNFinal(std::unique_ptr<Cell> cell)$/;"	f	class:amunmt::GPU::Decoder::RNNFinal
RNNFinal	amun/gpu/dl4mt/decoder.h	/^    class RNNFinal {$/;"	c	class:amunmt::GPU::Decoder
RNNHidden	amun/cpu/dl4mt/decoder.h	/^        RNNHidden(const Weights1& initModel, const Weights2& gruModel)$/;"	f	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
RNNHidden	amun/cpu/dl4mt/decoder.h	/^    class RNNHidden {$/;"	c	class:amunmt::CPU::dl4mt::Decoder
RNNHidden	amun/cpu/nematus/decoder.h	/^        RNNHidden(const Weights1& initModel, const Weights2& gruModel)$/;"	f	class:amunmt::CPU::Nematus::Decoder::RNNHidden
RNNHidden	amun/cpu/nematus/decoder.h	/^    class RNNHidden {$/;"	c	class:amunmt::CPU::Nematus::Decoder
RNNHidden	amun/fpga/decoder.h	/^    RNNHidden(const OpenCLInfo &openCLInfo, const Weights1& initModel, const Weights2& gruModel)$/;"	f	class:amunmt::FPGA::Decoder::RNNHidden
RNNHidden	amun/fpga/decoder.h	/^  class RNNHidden {$/;"	c	class:amunmt::FPGA::Decoder
RNNHidden	amun/gpu/dl4mt/decoder.h	/^        RNNHidden(const Weights& initModel, std::unique_ptr<Cell> cell)$/;"	f	class:amunmt::GPU::Decoder::RNNHidden
RNNHidden	amun/gpu/dl4mt/decoder.h	/^    class RNNHidden {$/;"	c	class:amunmt::GPU::Decoder
RT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef ResultType_<MT>    RT;  \/\/!< Result type of the dense matrix expression.$/;"	t	class:blaze::DMatForEachExpr
RT	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the dense matrix expression.$/;"	t	class:blaze::DMatInvExpr
RT	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t	class:blaze::DMatSVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarDivExpr
RT	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the dense matrix expression.$/;"	t	class:blaze::DMatScalarMultExpr
RT	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t	namespace:blaze
RT	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the dense matrix expression.$/;"	t	class:blaze::DMatTransExpr
RT	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef If_< IsComputation<VT2>, const StaticVector<ET2,3UL,TF>, CT2 >  RT;$/;"	t	class:blaze::DVecDVecCrossExpr
RT	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef ResultType_<VT>   RT;  \/\/!< Result type of the dense vector expression.$/;"	t	class:blaze::DVecForEachExpr
RT	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef const StaticVector<ET2,3UL,TF>  RT;$/;"	t	class:blaze::DVecSVecCrossExpr
RT	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef ResultType_<VT>     RT;  \/\/!< Result type of the dense vector expression.$/;"	t	class:blaze::DVecScalarDivExpr
RT	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef ResultType_<VT>     RT;  \/\/!< Result type of the dense vector expression.$/;"	t	class:blaze::DVecScalarMultExpr
RT	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef If_< IsComputation<VT2>, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t	class:blaze::SMatDVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef ResultType_<MT>    RT;  \/\/!< Result type of the sparse matrix expression.$/;"	t	class:blaze::SMatForEachExpr
RT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t	class:blaze::SMatSVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarDivExpr
RT	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the sparse matrix expression.$/;"	t	class:blaze::SMatScalarMultExpr
RT	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t	namespace:blaze
RT	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef ResultType_<MT>     RT;  \/\/!< Result type of the sparse matrix expression.$/;"	t	class:blaze::SMatTransExpr
RT	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef If_< IsComputation<VT2>, const StaticVector<ET2,3UL,TF>, CT2 >  RT;$/;"	t	class:blaze::SVecDVecCrossExpr
RT	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef ResultType_<VT>  RT;  \/\/!< Result type of the sparse vector expression.$/;"	t	class:blaze::SVecForEachExpr
RT	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef const StaticVector<ET2,3UL,TF>  RT;$/;"	t	class:blaze::SVecSVecCrossExpr
RT	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef ResultType_<VT>     RT;  \/\/!< Result type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarDivExpr
RT	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef ResultType_<VT>     RT;  \/\/!< Result type of the sparse vector expression.$/;"	t	class:blaze::SVecScalarMultExpr
RT	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef If_< IsComputation<VT2>, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef If_< IsComputation<VT2>, const RT2, CT2 >  RT;$/;"	t	class:blaze::SVecTSVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t	class:blaze::TDVecSMatMultExpr
RT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t	class:blaze::TDVecTSMatMultExpr
RT	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t	class:blaze::TSMatDVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef IfTrue_< evaluateVector, const VRT, VCT >  RT;$/;"	t	class:blaze::TSMatSVecMultExpr
RT	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef IfTrue_< evaluateRight, const RT2, CT2 >  RT;$/;"	t
RT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t	class:blaze::TSVecSMatMultExpr
RT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t	class:blaze::TSVecTDMatMultExpr
RT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef IfTrue_< evaluateMatrix, const MRT, MCT >  RT;$/;"	t	class:blaze::TSVecTSMatMultExpr
RT	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef Reference_<SET>       RT;   \/\/!< Reference type of the underlying sparse element.$/;"	t	class:blaze::Column::ColumnElement
RT	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef Reference_<SET>       RT;   \/\/!< Reference type of the underlying sparse element.$/;"	t	class:blaze::Row::RowElement
RT	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef Reference_<SET>       RT;   \/\/!< Reference type of the underlying sparse element.$/;"	t	class:blaze::Submatrix::SubmatrixElement
RT	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef Reference_<SET>       RT;   \/\/!< Reference type of the underlying sparse element.$/;"	t	class:blaze::Subvector::SubvectorElement
RT1	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::DMatTSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatDMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTDMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef ResultType_<VT1>     RT1;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef ResultType_<MT1>  RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatDMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatMultExpr
RT1	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef ResultType_<MT1>     RT1;  \/\/!< Result type of the left-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatDMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::DMatTDMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::DMatTSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecCrossExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecDivExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecDVecSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecCrossExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DVecTDVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecTSVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatDMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatTDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::SMatTDMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::SMatTSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecCrossExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecDivExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecAddExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecCrossExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecSVecSubExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecTDVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef ResultType_<VT2>     RT2;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SVecTSVecMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TDMatTDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TDMatTSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef ResultType_<MT2>  RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatDMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatSMatSubExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side dense matrix expression.$/;"	t	class:blaze::TSMatTDMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatAddExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatMultExpr
RT2	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef ResultType_<MT2>     RT2;  \/\/!< Result type of the right-hand side sparse matrix expression.$/;"	t	class:blaze::TSMatTSMatSubExpr
RUH_	amun/cpu/dl4mt/gru.h	/^    mutable mblas::Tensor RUH_;$/;"	m	class:amunmt::CPU::dl4mt::GRU
RUH_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix RUH_;$/;"	m	class:amunmt::CPU::Transition
RUH_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor RUH_;$/;"	m	class:amunmt::CPU::GRU
RUH_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor RUH_;$/;"	m	class:amunmt::CPU::Nematus::Transition
RUH_	amun/fpga/gru.h	/^  mutable mblas::Tensor RUH_;$/;"	m	class:amunmt::FPGA::FastGRU
RUH_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor RUH_;$/;"	m	class:amunmt::GPU::FastGRU
RUH_1_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix RUH_1_;$/;"	m	class:amunmt::CPU::Transition
RUH_1_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor RUH_1_;$/;"	m	class:amunmt::CPU::GRU
RUH_1_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor RUH_1_;$/;"	m	class:amunmt::CPU::Nematus::Transition
RUH_2_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix RUH_2_;$/;"	m	class:amunmt::CPU::Transition
RUH_2_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor RUH_2_;$/;"	m	class:amunmt::CPU::GRU
RUH_2_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor RUH_2_;$/;"	m	class:amunmt::CPU::Nematus::Transition
RU_	amun/fpga/gru.h	/^  mutable mblas::Tensor RU_;$/;"	m	class:amunmt::FPGA::SlowGRU
RU_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor RU_;$/;"	m	class:amunmt::GPU::SlowGRU
R_	amun/fpga/gru.h	/^  mutable mblas::Tensor R_;$/;"	m	class:amunmt::FPGA::SlowGRU
R_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor R_;$/;"	m	class:amunmt::GPU::SlowGRU
R_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class R_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Rand	amun/3rd_party/blaze/math/Column.h	/^class Rand< Column<MT,SO,false,SF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Column.h	/^class Rand< Column<MT,SO,true,SF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/CompressedMatrix.h	/^class Rand< CompressedMatrix<Type,SO> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/CompressedVector.h	/^class Rand< CompressedVector<Type,TF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/CustomMatrix.h	/^class Rand< CustomMatrix<Type,AF,PF,SO> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/CustomVector.h	/^class Rand< CustomVector<Type,AF,PF,TF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^class Rand< DiagonalMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/DynamicMatrix.h	/^class Rand< DynamicMatrix<Type,SO> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/DynamicVector.h	/^class Rand< DynamicVector<Type,TF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/HermitianMatrix.h	/^class Rand< HermitianMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/HybridMatrix.h	/^class Rand< HybridMatrix<Type,M,N,SO> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/HybridVector.h	/^class Rand< HybridVector<Type,N,TF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/LowerMatrix.h	/^class Rand< LowerMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Row.h	/^class Rand< Row<MT,SO,false,SF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Row.h	/^class Rand< Row<MT,SO,true,SF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/StaticMatrix.h	/^class Rand< StaticMatrix<Type,M,N,SO> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/StaticVector.h	/^class Rand< StaticVector<Type,N,TF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^class Rand< StrictlyLowerMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^class Rand< StrictlyUpperMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Submatrix.h	/^class Rand< Submatrix<MT,AF,SO,false> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Submatrix.h	/^class Rand< Submatrix<MT,AF,SO,true> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Subvector.h	/^class Rand< Subvector<VT,AF,TF,false> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/Subvector.h	/^class Rand< Subvector<VT,AF,TF,true> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^class Rand< SymmetricMatrix<MT,SO,DF,NF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^class Rand< UniLowerMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^class Rand< UniUpperMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/math/UpperMatrix.h	/^class Rand< UpperMatrix<MT,SO,DF> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/util/Random.h	/^class Rand$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/util/Random.h	/^class Rand< complex<T> >$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/util/Random.h	/^class Rand<double>$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/util/Random.h	/^class Rand<float>$/;"	c	namespace:blaze
Rand	amun/3rd_party/blaze/util/Random.h	/^class Rand<long double>$/;"	c	namespace:blaze
Random	amun/3rd_party/blaze/util/Random.h	/^class Random : private NonCreatable$/;"	c	namespace:blaze
Rank	amun/3rd_party/blaze/util/typetraits/Rank.h	/^struct Rank : public IntegralConstant<size_t,0UL>$/;"	s	namespace:blaze
Rank	amun/3rd_party/blaze/util/typetraits/Rank.h	/^struct Rank<T[N]> : public IntegralConstant<size_t,1UL+Rank<T>::value>$/;"	s	namespace:blaze
Rank	amun/3rd_party/blaze/util/typetraits/Rank.h	/^struct Rank<T[]> : public IntegralConstant<size_t,1UL+Rank<T>::value>$/;"	s	namespace:blaze
RawReference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   typedef AddReference_<ReferenceType>  RawReference;     \/\/!< Reference-to-non-const to the represented element.$/;"	t	class:blaze::DiagonalProxy
RawReference	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   typedef AddReference_<ReferenceType>  RawReference;     \/\/!< Reference-to-non-const to the represented element.$/;"	t	class:blaze::LowerProxy
RawReference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   typedef AddReference_<ReferenceType>  RawReference;     \/\/!< Reference-to-non-const to the represented element.$/;"	t	class:blaze::StrictlyLowerProxy
RawReference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   typedef AddReference_<ReferenceType>  RawReference;     \/\/!< Reference-to-non-const to the represented element.$/;"	t	class:blaze::StrictlyUpperProxy
RawReference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   typedef Reference_<ET>  RawReference;     \/\/!< Raw reference to the represented element.$/;"	t	class:blaze::NonNumericProxy
RawReference	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   typedef AddReference_<ReferenceType>  RawReference;     \/\/!< Reference-to-non-const to the represented element.$/;"	t	class:blaze::UpperProxy
RawReference	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   typedef RepresentedType&  RawReference;     \/\/!< Raw reference to the represented element.$/;"	t	class:blaze::MatrixAccessProxy
RawReference	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   typedef RepresentedType&  RawReference;     \/\/!< Raw reference to the represented element.$/;"	t	class:blaze::VectorAccessProxy
ReadAheadTo	amun/3rd_party/yaml-cpp/stream.h	/^inline bool Stream::ReadAheadTo(size_t i) const {$/;"	f	class:YAML::Stream
ReadBuffer	amun/3rd_party/yaml-cpp/stream.cpp	/^inline char* ReadBuffer(unsigned char* pBuffer) {$/;"	f	namespace:YAML
ReadFromFile	amun/3rd_party/fast_align/src/corpus.h	/^inline void ReadFromFile(const std::string& filename,$/;"	f
ReadPharaohAlignmentGrid	amun/3rd_party/fast_align/src/alignment_io.cc	/^std::shared_ptr<Array2D<bool> > AlignmentIO::ReadPharaohAlignmentGrid(const string& al) {$/;"	f	class:AlignmentIO
Real	amun/3rd_party/blaze/math/functors/Real.h	/^struct Real$/;"	s	namespace:blaze
RealTrait	amun/3rd_party/blaze/math/traits/RealTrait.h	/^struct RealTrait$/;"	s	namespace:blaze
Rebind	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::DiagonalMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::DiagonalMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::HermitianMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::HermitianMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::LowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::LowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::StrictlyLowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::StrictlyLowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::StrictlyUpperMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::StrictlyUpperMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   struct Rebind {$/;"	s	class:blaze::SymmetricMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   struct Rebind {$/;"	s	class:blaze::SymmetricMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   struct Rebind {$/;"	s	class:blaze::SymmetricMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   struct Rebind {$/;"	s	class:blaze::SymmetricMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::UniLowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::UniLowerMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::UniUpperMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::UniUpperMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   struct Rebind {$/;"	s	class:blaze::UpperMatrix
Rebind	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   struct Rebind {$/;"	s	class:blaze::UpperMatrix
Rebind	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   struct Rebind {$/;"	s	class:blaze::CustomMatrix
Rebind	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   struct Rebind {$/;"	s	class:blaze::CustomVector
Rebind	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   struct Rebind {$/;"	s	class:blaze::DynamicMatrix
Rebind	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   struct Rebind {$/;"	s	class:blaze::DynamicVector
Rebind	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   struct Rebind {$/;"	s	class:blaze::HybridMatrix
Rebind	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   struct Rebind {$/;"	s	class:blaze::HybridVector
Rebind	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   struct Rebind {$/;"	s	class:blaze::StaticMatrix
Rebind	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   struct Rebind {$/;"	s	class:blaze::StaticVector
Rebind	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   struct Rebind {$/;"	s	class:blaze::CompressedMatrix
Rebind	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   struct Rebind {$/;"	s	class:blaze::CompressedVector
RefCount	amun/3rd_party/yaml-cpp/nodeevents.h	/^  typedef std::map<const detail::node_ref*, int> RefCount;$/;"	t	class:YAML::NodeEvents
Reference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef DiagonalProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
Reference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef DiagonalProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::DiagonalMatrix
Reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef HermitianProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::HermitianMatrix
Reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef HermitianValue<MT>        Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::HermitianElement
Reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   typedef Reference_<MT>         Reference;        \/\/!< Reference to the represented element.$/;"	t	class:blaze::HermitianProxy
Reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef HermitianProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::HermitianMatrix
Reference	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef LowerProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::LowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef LowerProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::LowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef StrictlyLowerProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef StrictlyLowerProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::StrictlyLowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef StrictlyUpperProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
Reference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef StrictlyUpperProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::StrictlyUpperMatrix
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                 , Reference_<MatrixType> >  Reference;$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef Reference_<MT>                      Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef NumericProxy<MT>                   Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   typedef Reference_<MT>       Reference;        \/\/!< Reference to the represented element.$/;"	t	class:blaze::NumericProxy
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   typedef Type&        Reference;       \/\/!< Reference to the shared value.$/;"	t	class:blaze::SharedValue
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef ValueType&            Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef NonNumericProxy<MatrixType>          Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef NumericProxy<MT>                    Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SymmetricMatrix
Reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef SymmetricValue<MT>        Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricElement
Reference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef UniLowerProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef UniLowerProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UniLowerMatrix
Reference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef UniLowerValue<MT>        Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::UniLowerElement
Reference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef UniUpperProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
Reference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef UniUpperProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UniUpperMatrix
Reference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef UniUpperValue<MT>        Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::UniUpperElement
Reference	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef UpperProxy<MT>            Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UpperMatrix
Reference	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef UpperProxy<MT>             Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::UpperMatrix
Reference	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::CustomMatrix
Reference	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::CustomVector
Reference	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::DynamicMatrix
Reference	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::DynamicVector
Reference	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::HybridMatrix
Reference	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::HybridVector
Reference	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::StaticMatrix
Reference	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::StaticVector
Reference	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef Reference_<MT>           Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::DMatTransposer
Reference	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef Reference_<VT>           Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::DVecTransposer
Reference	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef Reference_<MT>           Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SMatTransposer
Reference	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef Reference_<MT>         Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SMatTransposer
Reference	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef Reference_<VT>         Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SVecTransposer
Reference	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef Reference_<MT>       Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::DenseMatrixProxy
Reference	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef Reference_<VT>       Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::DenseVectorProxy
Reference	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef Reference_<MT>       Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::SparseMatrixProxy
Reference	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef Reference_<VT>       Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::SparseVectorProxy
Reference	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef MatrixAccessProxy<This>       Reference;       \/\/!< Reference to a non-constant matrix value.$/;"	t	class:blaze::CompressedMatrix
Reference	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef MatrixAccessProxy<This>     Reference;       \/\/!< Reference to a sparse matrix value.$/;"	t	class:blaze::CompressedMatrix
Reference	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef VectorAccessProxy<This>     Reference;       \/\/!< Reference to a non-constant vector value.$/;"	t	class:blaze::CompressedVector
Reference	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   typedef Type&        Reference;       \/\/!< Reference return type.$/;"	t	class:blaze::ValueIndexPair
Reference	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Column
Reference	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef IfTrue_<returnConst,CRT,RT>  Reference;       \/\/!< Reference return type$/;"	t	class:blaze::Column::ColumnElement
Reference	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Column
Reference	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Row
Reference	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef IfTrue_<returnConst,CRT,RT>  Reference;       \/\/!< Reference return type$/;"	t	class:blaze::Row::RowElement
Reference	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Row
Reference	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Submatrix
Reference	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef IfTrue_<returnConst,CRT,RT>  Reference;       \/\/!< Reference return type$/;"	t	class:blaze::Submatrix::SubmatrixElement
Reference	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef If_< IsConst<MT>, ConstReference, Reference_<MT> >  Reference;$/;"	t	class:blaze::Submatrix
Reference	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef If_< IsConst<VT>, ConstReference, Reference_<VT> >  Reference;$/;"	t	class:blaze::Subvector
Reference	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef IfTrue_<returnConst,CRT,RT>  Reference;       \/\/!< Reference return type$/;"	t	class:blaze::Subvector::SubvectorElement
Reference	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef If_< IsConst<VT>, ConstReference, Reference_<VT> >  Reference;$/;"	t	class:blaze::Subvector
Reference	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef Type&           Reference;        \/\/!< Type of a reference to the allocated values.$/;"	t	class:blaze::AlignedAllocator
Reference	amun/3rd_party/blaze/util/AlignedArray.h	/^   typedef Type&        Reference;       \/\/!< Reference to a non-constant array element.$/;"	t	class:blaze::AlignedArray
ReferenceType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef DiagonalProxy<MT>                ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DiagonalMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   typedef AddConst_< typename MT::Reference >  ReferenceType;$/;"	t	class:blaze::DiagonalProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef HermitianProxy<MT>               ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef ValueType                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef LowerProxy<MT>                   ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::LowerMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   typedef AddConst_< Reference_<MT> >  ReferenceType;$/;"	t	class:blaze::LowerProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef StrictlyLowerProxy<MT>           ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   typedef AddConst_< Reference_<MT> >  ReferenceType;$/;"	t	class:blaze::StrictlyLowerProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef StrictlyUpperProxy<MT>           ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   typedef AddConst_< Reference_<MT> >  ReferenceType;$/;"	t	class:blaze::StrictlyUpperProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef Reference                        ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef NumericProxy<MT>                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef SparseElementType          ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef ValueType                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef UniLowerProxy<MT>                ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef ValueType                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   typedef typename MT::Reference  ReferenceType;$/;"	t	class:blaze::UniLowerProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef UniUpperProxy<MT>                ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef ValueType                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   typedef typename MT::Reference  ReferenceType;$/;"	t	class:blaze::UniUpperProxy
ReferenceType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef UpperProxy<MT>                   ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::UpperMatrix::Iterator
ReferenceType	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   typedef AddConst_< typename MT::Reference >  ReferenceType;$/;"	t	class:blaze::UpperProxy
ReferenceType	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef Type&                            ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DenseIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ElementType&                     ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::reference        ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ValueType&                 ReferenceType;     \/\/!< Reference return type.$/;"	t	class:ConstIterator
ReferenceType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::reference        ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
ReferenceType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ValueType                               ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::Column::ColumnIterator
ReferenceType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ValueType                            ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::Row::RowIterator
ReferenceType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::reference  ReferenceType;$/;"	t	class:blaze::Submatrix::SubmatrixIterator
ReferenceType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ValueType                                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
ReferenceType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::reference  ReferenceType;$/;"	t	class:blaze::Subvector::SubvectorIterator
ReferenceType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ValueType                                  ReferenceType;     \/\/!< Reference return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
ReferenceType	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef ValueType const&                 ReferenceType;      \/\/!< Reference return type.$/;"	t	class:blaze::PtrIterator
ReferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef C* const&                  ReferenceType;      \/\/!< Reference return type.$/;"	t	class:blaze::PtrVector::CastIterator
ReferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef T*&                   ReferenceType;       \/\/!< Reference to a non-const object.$/;"	t	class:blaze::PtrVector
ReferenceType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef const C* const&            ReferenceType;      \/\/!< Reference return type.$/;"	t	class:blaze::PtrVector::ConstCastIterator
RefineCommand	amun/3rd_party/fast_align/src/atools.cc	/^  RefineCommand() {$/;"	f	struct:RefineCommand
RefineCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct RefineCommand : public Command {$/;"	s	file:
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx() : m_op(REGEX_EMPTY) {}$/;"	f	class:YAML::RegEx
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(REGEX_OP op) : m_op(op) {}$/;"	f	class:YAML::RegEx
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(char a, char z) : m_op(REGEX_RANGE), m_a(a), m_z(z) {}$/;"	f	class:YAML::RegEx
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(char ch) : m_op(REGEX_MATCH), m_a(ch) {}$/;"	f	class:YAML::RegEx
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(const std::string& str, REGEX_OP op) : m_op(op) {$/;"	f	class:YAML::RegEx
RegEx	amun/3rd_party/yaml-cpp/regex_yaml.h	/^class RegEx {$/;"	c	namespace:YAML
Register	amun/3rd_party/yaml-cpp/contrib/anchordict.h	/^  void Register(anchor_t anchor, T value) {$/;"	f	class:YAML::AnchorDict
RegisterAnchor	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::RegisterAnchor(anchor_t anchor, void *pNode) {$/;"	f	class:YAML::GraphBuilderAdapter
RegisterAnchor	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::RegisterAnchor(anchor_t anchor, detail::node& node) {$/;"	f	class:YAML::NodeBuilder
RegisterAnchor	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^anchor_t SingleDocParser::RegisterAnchor(const std::string& name) {$/;"	f	class:YAML::SingleDocParser
RegisterReference	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::AliasManager::RegisterReference(const detail::node& node) {$/;"	f	class:YAML::NodeEvents::AliasManager
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct RemoveAdaptor< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct RemoveAdaptor< HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct RemoveAdaptor< LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct RemoveAdaptor< StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct RemoveAdaptor< StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct RemoveAdaptor< SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct RemoveAdaptor< UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct RemoveAdaptor< UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct RemoveAdaptor< UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^struct RemoveAdaptor$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^struct RemoveAdaptor< const T >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^struct RemoveAdaptor< const volatile T >$/;"	s	namespace:blaze
RemoveAdaptor	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^struct RemoveAdaptor< volatile T >$/;"	s	namespace:blaze
RemoveAllExtents	amun/3rd_party/blaze/util/typetraits/RemoveAllExtents.h	/^struct RemoveAllExtents$/;"	s	namespace:blaze
RemoveCV	amun/3rd_party/blaze/util/typetraits/RemoveCV.h	/^struct RemoveCV$/;"	s	namespace:blaze
RemoveConst	amun/3rd_party/blaze/util/typetraits/RemoveConst.h	/^struct RemoveConst$/;"	s	namespace:blaze
RemoveExtent	amun/3rd_party/blaze/util/typetraits/RemoveExtent.h	/^struct RemoveExtent$/;"	s	namespace:blaze
RemovePointer	amun/3rd_party/blaze/util/typetraits/RemovePointer.h	/^struct RemovePointer$/;"	s	namespace:blaze
RemoveReference	amun/3rd_party/blaze/util/typetraits/RemoveReference.h	/^struct RemoveReference$/;"	s	namespace:blaze
RemoveVolatile	amun/3rd_party/blaze/util/typetraits/RemoveVolatile.h	/^struct RemoveVolatile$/;"	s	namespace:blaze
RepresentationException	amun/3rd_party/yaml-cpp/exceptions.h	/^  RepresentationException(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::RepresentationException
RepresentationException	amun/3rd_party/yaml-cpp/exceptions.h	/^class RepresentationException : public Exception {$/;"	c	namespace:YAML
RepresentedType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   typedef ElementType_<MT>              RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::DiagonalProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   typedef ElementType_<MT>       RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::HermitianProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   typedef ElementType_<MT>  RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::HermitianValue
RepresentedType	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   typedef ElementType_<MT>              RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::LowerProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   typedef ElementType_<MT>              RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::StrictlyLowerProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   typedef ElementType_<MT>              RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::StrictlyUpperProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   typedef ValueType_<ET>  RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::NonNumericProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   typedef ElementType_<MT>     RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::NumericProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   typedef ElementType_<MT>  RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::SymmetricValue
RepresentedType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   typedef ElementType_<MT>  RepresentedType;$/;"	t	class:blaze::UniLowerProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   typedef ElementType_<MT>  RepresentedType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::UniLowerValue
RepresentedType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   typedef ElementType_<MT>  RepresentedType;$/;"	t	class:blaze::UniUpperProxy
RepresentedType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   typedef ElementType_<MT>  RepresentedType;   \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::UniUpperValue
RepresentedType	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   typedef ElementType_<MT>              RepresentedType;  \/\/!< Type of the represented matrix element.$/;"	t	class:blaze::UpperProxy
RepresentedType	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   typedef ElementType_<MT>  RepresentedType;  \/\/!< Type of the represented sparse matrix element.$/;"	t	class:blaze::MatrixAccessProxy
RepresentedType	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   typedef ElementType_<VT>  RepresentedType;  \/\/!< Type of the represented sparse vector element.$/;"	t	class:blaze::VectorAccessProxy
RequiresEvaluation	amun/3rd_party/blaze/math/typetraits/RequiresEvaluation.h	/^struct RequiresEvaluation$/;"	s	namespace:blaze
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return false; }$/;"	f	struct:ConvertCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return false; }$/;"	f	struct:DisplayCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return false; }$/;"	f	struct:InvertCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return true; }$/;"	f	struct:FMeasureCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return true; }$/;"	f	struct:IntersectCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return true; }$/;"	f	struct:RefineCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  bool RequiresTwoOperands() const { return true; }$/;"	f	struct:UnionCommand
RequiresTwoOperands	amun/3rd_party/fast_align/src/atools.cc	/^  virtual bool RequiresTwoOperands() const { return true; }$/;"	f	struct:Command
ResetColumn	amun/3rd_party/yaml-cpp/stream.h	/^  void ResetColumn() { m_mark.column = 0; }$/;"	f	class:YAML::Stream
Reshape	amun/cpu/mblas/tensor.h	/^void Reshape(MT& m, unsigned rows, unsigned cols) {$/;"	f	namespace:amunmt::CPU::mblas
Reshape	amun/fpga/matrix.cpp	/^void Matrix::Reshape(size_t rows, size_t cols, size_t beam, size_t batches)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Reshape2D	amun/fpga/matrix.cpp	/^void Matrix::Reshape2D()$/;"	f	class:amunmt::FPGA::mblas::Matrix
Resize	amun/cpu/mblas/tensor.h	/^    virtual void Resize(unsigned rows, unsigned columns, unsigned beam = 1, unsigned batches = 1)$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
Resize	amun/cpu/mblas/tensor.h	/^  virtual void Resize(unsigned rows, unsigned cols, unsigned beam = 1, unsigned batches = 1)$/;"	f	class:amunmt::CPU::mblas::Tensor
Resize	amun/fpga/matrix.cpp	/^void Matrix::Resize(size_t rows, size_t cols, size_t beam, size_t batches)$/;"	f	class:amunmt::FPGA::mblas::Matrix
Resize	amun/gpu/mblas/tensor.h	/^    void Resize(unsigned rows, unsigned cols, unsigned c = 1, unsigned d = 1) {$/;"	f	class:amunmt::GPU::mblas::TTensor
Result	amun/3rd_party/blaze/math/traits/ColumnExprTrait.h	/^   struct Result {$/;"	s	struct:blaze::ColumnExprTrait
Result	amun/3rd_party/blaze/math/traits/RowExprTrait.h	/^   struct Result {$/;"	s	struct:blaze::RowExprTrait
Result	amun/3rd_party/blaze/math/traits/SubmatrixExprTrait.h	/^   struct Result { using Type = Submatrix<T,AF,IsColumnMajorMatrix<T>::value,IsDenseMatrix<T>::value>; };$/;"	s	struct:blaze::SubmatrixExprTrait
Result	amun/3rd_party/blaze/math/traits/SubvectorExprTrait.h	/^   struct Result { using Type = Subvector<T,AF,IsRowVector<T>::value,IsDenseVector<T>::value>; };$/;"	s	struct:blaze::SubvectorExprTrait
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef BLAZE_TYPELIST_1( Type )  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Append
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef Head  Result;  \/\/!< Data type at index 0.$/;"	t	struct:blaze::TypeAt
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef NullType  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Append
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef NullType  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Erase
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef NullType  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::EraseAll
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef NullType  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::TypeAt
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef NullType  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Unique
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef Tail  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Erase
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef TypeList< Head, typename Append<Tail,Type>::Result >  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Append
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef TypeList<Head,TL2>  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Unique
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef TypeList<Head,Tail>  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Append
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef TypeList<Head,typename Erase<Tail,Type>::Result>  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::Erase
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef TypeList<Head,typename EraseAll<Tail,Type>::Result>  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::EraseAll
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef typename EraseAll<Tail,Type>::Result  Result;  \/\/!< The resulting data type.$/;"	t	struct:blaze::EraseAll
Result	amun/3rd_party/blaze/util/TypeList.h	/^   typedef typename TypeAt< Tail, Index-1 >::Result  Result;  \/\/!< Data type at indexed position.$/;"	t	struct:blaze::TypeAt
Result	amun/3rd_party/fast_align/src/atools.cc	/^  int Result() const { return 2; }$/;"	f	struct:FMeasureCommand
Result	amun/3rd_party/fast_align/src/atools.cc	/^  virtual int Result() const { return 1; }$/;"	f	struct:Command
Result	amun/common/hypothesis.h	/^typedef std::pair<Words, HypothesisPtr> Result;$/;"	t	namespace:amunmt
ResultType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef This                         ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef This                          ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef This                          ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef This                           ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef This                      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef This                       ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef This                              ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef This                              ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef This                              ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef This                               ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef This                                ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef This                               ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef This                                 ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef This                                ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef This                         ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef This                         ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef This                         ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef This                          ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef This                      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
ResultType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef This                       ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
ResultType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DynamicMatrix<Type,SO>       ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::CustomMatrix
ResultType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef DynamicVector<Type,TF>       ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::CustomVector
ResultType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef This                     ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DynamicMatrix
ResultType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef This                     ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DynamicVector
ResultType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef This                        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::HybridMatrix
ResultType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef This                      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::HybridVector
ResultType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef This                        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StaticMatrix
ResultType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef This                      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::StaticVector
ResultType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatDMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatDMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef ResultType_<MT>      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatEvalExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef ForEachTrait_<MT,OP>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatForEachExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef ResultType_<MT>     ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatInvExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef DivTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatScalarDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef MultTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatScalarMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef ResultType_<MT>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatSerialExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTDMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTDMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	namespace:blaze
ResultType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef TransposeType_<MT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTransExpr
ResultType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef TransposeType_<MT>       ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DMatTransposer
ResultType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef AddTrait_<RE1,RE2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecDVecAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef CrossTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecDVecCrossExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef DivTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecDVecDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecDVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecDVecSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef ResultType_<VT>      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecEvalExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef ForEachTrait_<VT,OP>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecForEachExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef AddTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecSVecAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef CrossTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecSVecCrossExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecSVecSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef DivTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecScalarDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef MultTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecScalarMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef ResultType_<VT>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecSerialExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef TransposeType_<VT>       ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecTransExpr
ResultType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef TransposeType_<VT>       ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DVecTransposer
ResultType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatDMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatDVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef ResultType_<MT>      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatEvalExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef ForEachTrait_<MT,OP>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatForEachExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	namespace:blaze
ResultType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef MultTrait_<RT,ST>            ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatScalarDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef MultTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatScalarMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef ResultType_<MT>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatSerialExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	namespace:blaze
ResultType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTDMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef TransposeType_<MT>    ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTransExpr
ResultType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef TransposeType_<MT>       ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
ResultType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef TransposeType_<MT>     ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
ResultType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef CrossTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecDVecCrossExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef DivTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecDVecDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecDVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecDVecSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef ResultType_<VT>      ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecEvalExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef ForEachTrait_<VT,OP>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecForEachExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef AddTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecSVecAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef CrossTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecSVecCrossExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef SubTrait_<RT1,RT2>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecSVecSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef DivTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecScalarDivExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef MultTrait_<RT,ST>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecScalarMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef ResultType_<VT>        ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecSerialExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecTSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef TransposeType_<VT>    ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecTransExpr
ResultType	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef TransposeType_<VT>     ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SVecTransposer
ResultType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TDMatSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TDMatSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TDVecSMatMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TDVecTSMatMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatDMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatDVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	namespace:blaze
ResultType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef MultTrait_<MRT,VRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatSVecMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t
ResultType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef AddTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatAddExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef MultTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	namespace:blaze
ResultType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef SubTrait_<RT1,RT2>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatSubExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSVecSMatMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSVecTDMatMultExpr
ResultType	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef MultTrait_<VRT,MRT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::TSVecTSMatMultExpr
ResultType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ResultType_<MT>      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DenseMatrixProxy
ResultType	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ResultType_<VT>      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::DenseVectorProxy
ResultType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef ResultType_<MT>      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SparseMatrixProxy
ResultType	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef ResultType_<VT>      ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::SparseVectorProxy
ResultType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef This                          ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
ResultType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef This                        ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
ResultType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef This                        ResultType;      \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::CompressedVector
ResultType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef ColumnTrait_<MT>            ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Column
ResultType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ColumnTrait_<MT>              ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Column
ResultType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ColumnTrait_<MT>             ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Column
ResultType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ColumnTrait_<MT>            ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Column
ResultType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef RowTrait_<MT>               ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Row
ResultType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef RowTrait_<MT>               ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Row
ResultType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef SubmatrixTrait_<MT>                 ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Submatrix
ResultType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef SubmatrixTrait_<MT>           ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Submatrix
ResultType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef SubmatrixTrait_<MT>          ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Submatrix
ResultType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef SubvectorTrait_<VT>              ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Subvector
ResultType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef SubvectorTrait_<VT>         ResultType;     \/\/!< Result type for expression template evaluations.$/;"	t	class:blaze::Subvector
ReturnNBestList	amun/common/god.h	/^    bool ReturnNBestList() const$/;"	f	class:amunmt::God
ReturnType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef ReturnType_<MT>              ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef ReturnType_<MT>               ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef ReturnType_<MT>               ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef ReturnType_<MT>                ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef ReturnType_<MT>           ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef ReturnType_<MT>            ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef ReturnType_<MT>                   ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef ReturnType_<MT>                   ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef ReturnType_<MT>                   ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef ReturnType_<MT>                    ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef ReturnType_<MT>                     ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef ReturnType_<MT>                    ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef ReturnType_<MT>                      ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef ReturnType_<MT>                     ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef ReturnType_<MT>              ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef ReturnType_<MT>              ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef ReturnType_<MT>              ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef ReturnType_<MT>               ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef ReturnType_<MT>           ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
ReturnType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef ReturnType_<MT>            ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
ReturnType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef const Type&                  ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::CustomMatrix
ReturnType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef const Type&                  ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::CustomVector
ReturnType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef const Type&              ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DynamicMatrix
ReturnType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef const Type&              ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::DynamicVector
ReturnType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef const Type&                 ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::HybridMatrix
ReturnType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef const Type&               ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::HybridVector
ReturnType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef const Type&                 ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StaticMatrix
ReturnType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef const Type&               ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::StaticVector
ReturnType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatDMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatDMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef ReturnType_<MT>      ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatEvalExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef decltype( std::declval<OP>()( std::declval<RN>() ) )  ReturnType;$/;"	t	class:blaze::DMatForEachExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef ReturnType_<MT>     ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatInvExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatScalarDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatScalarMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef ReturnType_<MT>        ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatSerialExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatTDMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatTDMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatTSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	namespace:blaze
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DMatTSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef ReturnType_<MT>            ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatTransExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ReturnType_<MT>          ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DMatTransposer
ReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecDVecAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecDVecCrossExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecDVecDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecDVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecDVecSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef ReturnType_<VT>      ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DVecEvalExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef decltype( std::declval<OP>()( std::declval<RN>() ) )  ReturnType;$/;"	t	class:blaze::DVecForEachExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecSVecAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecSVecCrossExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecSVecSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecScalarDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::DVecScalarMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef ReturnType_<VT>        ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DVecSerialExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef ReturnType_<VT>          ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DVecTransExpr
ReturnType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ReturnType_<VT>          ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DVecTransposer
ReturnType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatDMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatDVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef ReturnType_<MT>      ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatEvalExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef decltype( std::declval<OP>()( std::declval<RN>() ) )  ReturnType;$/;"	t	class:blaze::SMatForEachExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	namespace:blaze
ReturnType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatScalarDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatScalarMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef ReturnType_<MT>        ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatSerialExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	namespace:blaze
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatTDMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatTSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SMatTSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef ReturnType_<MT>       ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatTransExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ReturnType_<MT>          ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
ReturnType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ReturnType_<MT>        ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
ReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecDVecCrossExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecDVecDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecDVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecDVecSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef ReturnType_<VT>      ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SVecEvalExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef decltype( std::declval<OP>()( std::declval<RN>() ) )  ReturnType;$/;"	t	class:blaze::SVecForEachExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecSVecAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecSVecCrossExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecSVecSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecScalarDivExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecScalarMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef ReturnType_<VT>        ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SVecSerialExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::SVecTSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef ReturnType_<VT>       ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SVecTransExpr
ReturnType	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef ReturnType_<VT>        ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SVecTransposer
ReturnType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TDMatSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TDMatSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TDVecSMatMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TDVecTSMatMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TSMatDMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TSMatDVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	namespace:blaze
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TSMatSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TSMatSVecMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef const ElementType            ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TSMatTSMatAddExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef const ElementType            ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	namespace:blaze
ReturnType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef const IfTrue_< returnExpr, ExprReturnType, ElementType >  ReturnType;$/;"	t	class:blaze::TSMatTSMatSubExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TSVecSMatMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TSVecTDMatMultExpr
ReturnType	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef const ElementType           ReturnType;     \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::TSVecTSMatMultExpr
ReturnType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef ReturnType_<MT>      ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::DenseMatrixProxy
ReturnType	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef ReturnType_<VT>      ReturnType;      \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::DenseVectorProxy
ReturnType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef ReturnType_<MT>      ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SparseMatrixProxy
ReturnType	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef ReturnType_<VT>      ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::SparseVectorProxy
ReturnType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Type&                   ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
ReturnType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef const Type&                 ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
ReturnType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef const Type&                 ReturnType;      \/\/!< Return type for expression template evaluations.$/;"	t	class:blaze::CompressedVector
ReturnType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef ReturnType_<MT>             ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Column
ReturnType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ReturnType_<MT>               ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Column
ReturnType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ReturnType_<MT>              ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Column
ReturnType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef ReturnType_<MT>             ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Column
ReturnType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef ReturnType_<MT>             ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Row
ReturnType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef ReturnType_<MT>             ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Row
ReturnType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef ReturnType_<MT>                     ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Submatrix
ReturnType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef ReturnType_<MT>               ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Submatrix
ReturnType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef ReturnType_<MT>              ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Submatrix
ReturnType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef ReturnType_<VT>                  ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Subvector
ReturnType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef ReturnType_<VT>             ReturnType;     \/\/!< Return type for expression template evaluations$/;"	t	class:blaze::Subvector
RightElement	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ET2  RightElement;$/;"	t	class:ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ConstIterator_<MT2>  RightIteratorType;$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ConstIterator_<MT2>  RightIteratorType;$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ConstIterator_<VT2>  RightIteratorType;$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ConstIterator_<VT2>  RightIteratorType;$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ConstIterator_<VT2>  RightIteratorType;$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ConstIterator_<VT2>  RightIteratorType;$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
RightIteratorType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ConstIterator_<VT2>  RightIteratorType;$/;"	t	class:ConstIterator
RightOperand	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatDMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatDMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t	class:blaze::DMatSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::DMatScalarDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::DMatScalarMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatTDMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatTDMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatTSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	namespace:blaze
RightOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::DMatTSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecDVecAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecDVecCrossExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecDVecDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecDVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecDVecSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecSVecAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecSVecCrossExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::DVecSVecSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::DVecScalarDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::DVecScalarMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatDMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t	class:blaze::SMatDVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	namespace:blaze
RightOperand	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t	class:blaze::SMatSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::SMatScalarDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::SMatScalarMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	namespace:blaze
RightOperand	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatTDMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatTSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatTSMatMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::SMatTSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecDVecCrossExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecDVecDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecDVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecDVecSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecSVecAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecSVecCrossExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecSVecSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::SVecScalarDivExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef ST  RightOperand;$/;"	t	class:blaze::SVecScalarMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef If_< IsExpression<VT2>, const VT2, const VT2& >  RightOperand;$/;"	t	class:blaze::SVecTSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TDMatSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TDMatSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t	class:blaze::TDVecSMatMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t	class:blaze::TDVecTSMatMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TSMatDMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t	class:blaze::TSMatDVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	namespace:blaze
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TSMatSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef If_< IsExpression<VT>, const VT, const VT& >  RightOperand;$/;"	t	class:blaze::TSMatSVecMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TSMatTSMatAddExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	namespace:blaze
RightOperand	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef If_< IsExpression<MT2>, const MT2, const MT2& >  RightOperand;$/;"	t	class:blaze::TSMatTSMatSubExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t	class:blaze::TSVecSMatMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t	class:blaze::TSVecTDMatMultExpr
RightOperand	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef If_< IsExpression<MT>, const MT, const MT& >  RightOperand;$/;"	t	class:blaze::TSVecTSMatMultExpr
Root	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^Node NodeBuilder::Root() {$/;"	f	class:YAML::NodeBuilder
RootNode	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* RootNode() const { return m_pRootNode; }$/;"	f	class:YAML::GraphBuilderAdapter
Row	amun/3rd_party/blaze/math/views/row/BaseTemplate.h	/^class Row$/;"	c	namespace:blaze
Row	amun/3rd_party/blaze/math/views/row/Dense.h	/^class Row<MT,true,true,SF>$/;"	c	namespace:blaze
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^class Row<MT,false,false,false>$/;"	c	namespace:blaze
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^class Row<MT,false,false,true>$/;"	c	namespace:blaze
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^class Row<MT,true,false,SF>$/;"	c	namespace:blaze
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>::Row( MT& matrix, size_t index )$/;"	f	class:blaze::Row
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,true>::Row( MT& matrix, size_t index )$/;"	f	class:blaze::Row
Row	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>::Row( MT& matrix, size_t index )$/;"	f	class:blaze::Row
Row	amun/gpu/mblas/tensor_wrapper.h	/^  VectorWrapper<T> Row(unsigned row)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
RowElement	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowElement( IteratorType pos, size_t column )$/;"	f	class:blaze::Row::RowElement
RowElement	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   class RowElement : private SparseElement$/;"	c	class:blaze::Row
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct RowExprTrait< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct RowExprTrait< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct RowExprTrait< DMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct RowExprTrait< DMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct RowExprTrait< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct RowExprTrait< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct RowExprTrait< DMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct RowExprTrait< DMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct RowExprTrait< DMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct RowExprTrait< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct RowExprTrait< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct RowExprTrait< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct RowExprTrait< DMatTSMatMultExpr<MT1,MT2> >$/;"	s
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct RowExprTrait< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct RowExprTrait< DMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct RowExprTrait< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct RowExprTrait< SMatEvalExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct RowExprTrait< SMatForEachExpr<MT,OP,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct RowExprTrait< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct RowExprTrait< SMatSMatMultExpr<MT1,MT2> >$/;"	s
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct RowExprTrait< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct RowExprTrait< SMatScalarDivExpr<MT,ST,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct RowExprTrait< SMatScalarMultExpr<MT,ST,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct RowExprTrait< SMatSerialExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct RowExprTrait< SMatTDMatMultExpr<MT1,MT2> >$/;"	s
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct RowExprTrait< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct RowExprTrait< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct RowExprTrait< SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct RowExprTrait< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct RowExprTrait< SMatTransExpr<MT,SO> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^struct RowExprTrait< SVecTSVecMultExpr<VT1,VT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct RowExprTrait< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct RowExprTrait< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct RowExprTrait< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct RowExprTrait< TSMatSMatMultExpr<MT1,MT2> >$/;"	s
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct RowExprTrait< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct RowExprTrait< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct RowExprTrait< TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
RowExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct RowExprTrait< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
RowExprTrait	amun/3rd_party/blaze/math/traits/RowExprTrait.h	/^struct RowExprTrait$/;"	s	namespace:blaze
RowIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowIterator( MatrixType& matrix, size_t row, size_t column )$/;"	f	class:blaze::Row::RowIterator
RowIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowIterator( MatrixType& matrix, size_t row, size_t column, IteratorType pos )$/;"	f	class:blaze::Row::RowIterator
RowIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowIterator( const RowIterator<MatrixType2,IteratorType2>& it )$/;"	f	class:blaze::Row::RowIterator
RowIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowIterator()$/;"	f	class:blaze::Row::RowIterator
RowIterator	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   class RowIterator$/;"	c	class:blaze::Row
RowPair	amun/cpu/mblas/tensor.h	/^typedef std::pair<unsigned, unsigned> RowPair;$/;"	t	namespace:amunmt::CPU::mblas
RowPairs	amun/cpu/mblas/tensor.h	/^typedef std::vector<RowPair> RowPairs;$/;"	t	namespace:amunmt::CPU::mblas
RowTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct RowTrait< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct RowTrait< HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct RowTrait< LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct RowTrait< StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct RowTrait< StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct RowTrait< SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct RowTrait< UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct RowTrait< UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct RowTrait< UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct RowTrait< CompressedMatrix<T1,SO> >$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/traits/RowTrait.h	/^struct RowTrait$/;"	s	namespace:blaze
RowTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct RowTrait< Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct Rows< DiagonalMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct Rows< HermitianMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct Rows< LowerMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct Rows< StrictlyLowerMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct Rows< StrictlyUpperMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct Rows< SymmetricMatrix<MT,SO,DF,NF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct Rows< UniLowerMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct Rows< UniUpperMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct Rows< UpperMatrix<MT,SO,DF> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct Rows< DMatDMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct Rows< DMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct Rows< DMatEvalExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct Rows< DMatForEachExpr<MT,OP,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct Rows< DMatInvExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct Rows< DMatSMatAddExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct Rows< DMatSMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct Rows< DMatScalarDivExpr<MT,ST,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct Rows< DMatScalarMultExpr<MT,ST,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct Rows< DMatSerialExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct Rows< DMatTDMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct Rows< DMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct Rows< DMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct Rows< DMatTSMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s
Rows	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct Rows< DMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct Rows< DMatTransExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct Rows< SMatDMatSubExpr<MT1,MT2,SO> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct Rows< SMatEvalExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct Rows< SMatForEachExpr<MT,OP,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct Rows< SMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct Rows< SMatSMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s
Rows	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct Rows< SMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct Rows< SMatScalarDivExpr<MT,ST,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct Rows< SMatScalarMultExpr<MT,ST,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct Rows< SMatSerialExpr<MT,SO> > : public Rows<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct Rows< SMatTDMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s
Rows	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct Rows< SMatTDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct Rows< SMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct Rows< SMatTSMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct Rows< SMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct Rows< SMatTransExpr<MT,SO> > : public Columns<MT>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^struct Rows< SVecTSVecMultExpr<VT1,VT2> > : public Size<VT1>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct Rows< TDMatSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct Rows< TDMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct Rows< TSMatDMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct Rows< TSMatSMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s
Rows	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct Rows< TSMatSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct Rows< TSMatTSMatAddExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct Rows< TSMatTSMatMultExpr<MT1,MT2> > : public Rows<MT1>$/;"	s
Rows	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct Rows< TSMatTSMatSubExpr<MT1,MT2> >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/typetraits/Rows.h	/^struct Rows : public SizeT<0UL>$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/typetraits/Rows.h	/^struct Rows< const T > : public SizeT< Rows<T>::value >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/typetraits/Rows.h	/^struct Rows< const volatile T > : public SizeT< Rows<T>::value >$/;"	s	namespace:blaze
Rows	amun/3rd_party/blaze/math/typetraits/Rows.h	/^struct Rows< volatile T > : public SizeT< Rows<T>::value >$/;"	s	namespace:blaze
RuntimeError	amun/3rd_party/spdlog/details/format.h	/^    RuntimeError(): std::runtime_error("")$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	amun/3rd_party/spdlog/details/format.h	/^class RuntimeError: public std::runtime_error$/;"	c	namespace:fmt::internal
RuntimeError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    RuntimeError(): std::runtime_error("")$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    RuntimeError(const RuntimeError &rerr): std::runtime_error(rerr)$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class RuntimeError: public std::runtime_error$/;"	c	namespace:fmt::internal
SCANNER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/scanner.h	2;"	d
SCANSCALAR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/scanscalar.h	2;"	d
SCANTAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/scantag.h	2;"	d
SCU_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor SCU_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
SCU_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor SCU_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
SCU_	amun/fpga/decoder.h	/^      mblas::Tensor SCU_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
SCU_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor SCU_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
SECONDARY_HANDLE	amun/3rd_party/yaml-cpp/tag.h	/^    SECONDARY_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
SEQ	amun/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
SET	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  SET;$/;"	t	class:blaze::Column::ColumnElement
SET	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  SET;$/;"	t	class:blaze::Row::RowElement
SET	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  SET;$/;"	t	class:blaze::Submatrix::SubmatrixElement
SET	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  SET;$/;"	t	class:blaze::Subvector::SubvectorElement
SETTING_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/setting.h	2;"	d
SET_OPTION	amun/common/config.cpp	12;"	d	file:
SET_OPTION_NONDEFAULT	amun/common/config.cpp	17;"	d	file:
SHAPE_SIZE	amun/common/base_tensor.h	/^const unsigned SHAPE_SIZE = 4;$/;"	m	namespace:amunmt
SIGN_FLAG	amun/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon28
SIGN_FLAG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon62
SIMDET	amun/3rd_party/blaze/math/functors/Pow.h	/^   typedef SIMDTrait_<ET>  SIMDET;  \/\/!< The SIMD exponent type.$/;"	t	struct:blaze::Pow
SIMDPack	amun/3rd_party/blaze/math/simd/SIMDPack.h	/^struct SIMDPack$/;"	s	namespace:blaze
SIMDSIZE	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDSIZE	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	e	enum:size_t
SIMDTrait	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^class SIMDTrait : public SIMDTraitBase< RemoveCV_<T> >$/;"	c	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has1Byte<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has2Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has4Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< T, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has8Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has1Byte<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has2Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has4Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<T>, EnableIf_< And< IsNumeric<T>, IsIntegral<T>, Has8Bytes<T> > > >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<double> >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase< complex<float> >$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase<double>$/;"	s	namespace:blaze
SIMDTraitBase	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^struct SIMDTraitBase<float>$/;"	s	namespace:blaze
SIMDType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef SIMDType_<MT>                SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::DiagonalMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef SIMDType_<MT>                 SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::HermitianMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef SIMDType_<MT>             SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::LowerMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef SIMDType_<MT>                     SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::StrictlyLowerMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef SIMDType_<MT>                     SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::StrictlyUpperMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef SIMDType_<MT>                      SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::SymmetricMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef SIMDType_<MT>                SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::UniLowerMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef SIMDType_<MT>                SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::UniUpperMatrix
SIMDType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef SIMDType_<MT>             SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::UpperMatrix
SIMDType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef SIMDTrait_<ElementType>      SIMDType;       \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::CustomMatrix
SIMDType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef SIMDTrait_<ElementType>      SIMDType;       \/\/!< SIMD type of the vector elements.$/;"	t	class:blaze::CustomVector
SIMDType	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef SIMDTrait_<Type>  SIMDType;$/;"	t	class:blaze::DenseIterator
SIMDType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef SIMDTrait_<ElementType>  SIMDType;       \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::DynamicMatrix
SIMDType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef SIMDTrait_<ElementType>  SIMDType;       \/\/!< SIMD type of the vector elements.$/;"	t	class:blaze::DynamicVector
SIMDType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::HybridMatrix
SIMDType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef SIMDTrait_<ElementType>   SIMDType;       \/\/!< SIMD type of the vector elements.$/;"	t	class:blaze::HybridVector
SIMDType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::StaticMatrix
SIMDType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef SIMDTrait_<ElementType>   SIMDType;       \/\/!< SIMD type of the vector elements.$/;"	t	class:blaze::StaticVector
SIMDType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef SIMDTrait_<ElementType>  SIMDType;        \/\/!< SIMD type of the matrix elements.$/;"	t	class:blaze::DMatTransposer
SIMDType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef SIMDTrait_<ElementType>  SIMDType;        \/\/!< SIMD type of the vector elements.$/;"	t	class:blaze::DVecTransposer
SIMDType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< Resulting SIMD element type.$/;"	t
SIMDType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< SIMD type of the column elements.$/;"	t	class:blaze::Column
SIMDType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef SIMDTrait_<ElementType>     SIMDType;       \/\/!< SIMD type of the row elements.$/;"	t	class:blaze::Row
SIMDType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef SIMDTrait_<ElementType>             SIMDType;       \/\/!< SIMD type of the submatrix elements.$/;"	t	class:blaze::Submatrix
SIMDType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef SIMDTrait_<ElementType>          SIMDType;       \/\/!< SIMD type of the subvector elements.$/;"	t	class:blaze::Subvector
SIMD_MATH_PRIMS_H	amun/cpu/mblas/simd_math_prims.h	28;"	d
SIMDcchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<char> >::Type  SIMDcchar;$/;"	t	namespace:blaze
SIMDchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<char>::Type  SIMDchar;$/;"	t	namespace:blaze
SIMDcint	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<int> >::Type  SIMDcint;$/;"	t	namespace:blaze
SIMDclong	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<long> >::Type  SIMDclong;$/;"	t	namespace:blaze
SIMDcschar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<signed char> >::Type  SIMDcschar;$/;"	t	namespace:blaze
SIMDcshort	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<short> >::Type  SIMDcshort;$/;"	t	namespace:blaze
SIMDcuchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<unsigned char> >::Type  SIMDcuchar;$/;"	t	namespace:blaze
SIMDcuint	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<unsigned int> >::Type  SIMDcuint;$/;"	t	namespace:blaze
SIMDculong	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<unsigned long> >::Type  SIMDculong;$/;"	t	namespace:blaze
SIMDcushort	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<unsigned short> >::Type  SIMDcushort;$/;"	t	namespace:blaze
SIMDcwchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait< complex<wchar_t> >::Type  SIMDcwchar;$/;"	t	namespace:blaze
SIMDf32FmaddExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf32FmaddExpr( const T1& a, const T2& b, const T3& c )$/;"	f	struct:blaze::SIMDf32FmaddExpr
SIMDf32FmaddExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^struct SIMDf32FmaddExpr : public SIMDf32< SIMDf32FmaddExpr<T1,T2,T3> >$/;"	s	namespace:blaze
SIMDf32FmsubExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf32FmsubExpr( const T1& a, const T2& b, const T3& c )$/;"	f	struct:blaze::SIMDf32FmsubExpr
SIMDf32FmsubExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^struct SIMDf32FmsubExpr : public SIMDf32< SIMDf32FmsubExpr<T1,T2,T3> >$/;"	s	namespace:blaze
SIMDf32MultExpr	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf32MultExpr( const T1& a, const T2& b )$/;"	f	struct:blaze::SIMDf32MultExpr
SIMDf32MultExpr	amun/3rd_party/blaze/math/simd/Multiplication.h	/^struct SIMDf32MultExpr : public SIMDf32< SIMDf32MultExpr<T1,T2> >$/;"	s	namespace:blaze
SIMDf64FmaddExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf64FmaddExpr( const T1& a, const T2& b, const T3& c )$/;"	f	struct:blaze::SIMDf64FmaddExpr
SIMDf64FmaddExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^struct SIMDf64FmaddExpr : public SIMDf64< SIMDf64FmaddExpr<T1,T2,T3> >$/;"	s	namespace:blaze
SIMDf64FmsubExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf64FmsubExpr( const T1& a, const T2& b, const T3& c )$/;"	f	struct:blaze::SIMDf64FmsubExpr
SIMDf64FmsubExpr	amun/3rd_party/blaze/math/simd/FMA.h	/^struct SIMDf64FmsubExpr : public SIMDf64< SIMDf64FmsubExpr<T1,T2,T3> >$/;"	s	namespace:blaze
SIMDf64MultExpr	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   explicit BLAZE_ALWAYS_INLINE SIMDf64MultExpr( const T1& a, const T2& b )$/;"	f	struct:blaze::SIMDf64MultExpr
SIMDf64MultExpr	amun/3rd_party/blaze/math/simd/Multiplication.h	/^struct SIMDf64MultExpr : public SIMDf64< SIMDf64MultExpr<T1,T2> >$/;"	s	namespace:blaze
SIMDi8	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^struct SIMDi8 : public SIMDPack< T >$/;"	s	namespace:blaze
SIMDint	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<int>::Type  SIMDint;$/;"	t	namespace:blaze
SIMDint8	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^struct SIMDint8 : public SIMDi8< SIMDint8 >$/;"	s	namespace:blaze
SIMDlong	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<long>::Type  SIMDlong;$/;"	t	namespace:blaze
SIMDschar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<signed char>::Type  SIMDschar;$/;"	t	namespace:blaze
SIMDshort	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<short>::Type  SIMDshort;$/;"	t	namespace:blaze
SIMDuchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<unsigned char>::Type  SIMDuchar;$/;"	t	namespace:blaze
SIMDuint	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<unsigned int>::Type  SIMDuint;$/;"	t	namespace:blaze
SIMDuint8	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^struct SIMDuint8 : public SIMDi8< SIMDuint8 >$/;"	s
SIMDulong	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<unsigned long>::Type  SIMDulong;$/;"	t	namespace:blaze
SIMDushort	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<unsigned short>::Type  SIMDushort;$/;"	t	namespace:blaze
SIMDwchar	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^typedef SIMDTrait<wchar_t>::Type  SIMDwchar;$/;"	t	namespace:blaze
SINGLEDOCPARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/singledocparser.h	2;"	d
SINGLE_QUOTED_CHAR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const SINGLE_QUOTED_CHAR =$/;"	m	namespace:YAML::ErrorMsg
SMP_DMATASSIGN_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATASSIGN_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATASSIGN_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATASSIGN_THRESHOLD     = ( BLAZE_DEBUG_MODE ? SMP_DMATASSIGN_DEBUG_THRESHOLD     : SMP_DMATASSIGN_USER_THRESHOLD     );$/;"	m	namespace:blaze
SMP_DMATASSIGN_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATASSIGN_USER_THRESHOLD = 220UL;$/;"	m	namespace:blaze
SMP_DMATDMATADD_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATADD_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATDMATADD_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATADD_THRESHOLD    = ( BLAZE_DEBUG_MODE ? SMP_DMATDMATADD_DEBUG_THRESHOLD    : SMP_DMATDMATADD_USER_THRESHOLD    );$/;"	m	namespace:blaze
SMP_DMATDMATADD_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATDMATADD_USER_THRESHOLD = 190UL;$/;"	m	namespace:blaze
SMP_DMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATDMATMULT_DEBUG_THRESHOLD   : SMP_DMATDMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATDMATMULT_USER_THRESHOLD = 55UL;$/;"	m	namespace:blaze
SMP_DMATDMATSUB_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATSUB_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATDMATSUB_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDMATSUB_THRESHOLD    = ( BLAZE_DEBUG_MODE ? SMP_DMATDMATSUB_DEBUG_THRESHOLD    : SMP_DMATDMATSUB_USER_THRESHOLD    );$/;"	m	namespace:blaze
SMP_DMATDMATSUB_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATDMATSUB_USER_THRESHOLD = 190UL;$/;"	m	namespace:blaze
SMP_DMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATDVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATDVECMULT_DEBUG_THRESHOLD   : SMP_DMATDVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATDVECMULT_USER_THRESHOLD = 330UL;$/;"	m	namespace:blaze
SMP_DMATSCALARMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSCALARMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATSCALARMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSCALARMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_DMATSCALARMULT_DEBUG_THRESHOLD : SMP_DMATSCALARMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_DMATSCALARMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATSCALARMULT_USER_THRESHOLD = 220UL;$/;"	m	namespace:blaze
SMP_DMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATSMATMULT_DEBUG_THRESHOLD   : SMP_DMATSMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATSMATMULT_USER_THRESHOLD = 64UL;$/;"	m	namespace:blaze
SMP_DMATSVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATSVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATSVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATSVECMULT_DEBUG_THRESHOLD   : SMP_DMATSVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATSVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATSVECMULT_USER_THRESHOLD = 480UL;$/;"	m	namespace:blaze
SMP_DMATTDMATADD_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATADD_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATTDMATADD_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATADD_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATTDMATADD_DEBUG_THRESHOLD   : SMP_DMATTDMATADD_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATTDMATADD_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATTDMATADD_USER_THRESHOLD = 175UL;$/;"	m	namespace:blaze
SMP_DMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_DMATTDMATMULT_DEBUG_THRESHOLD  : SMP_DMATTDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_DMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATTDMATMULT_USER_THRESHOLD = 55UL;$/;"	m	namespace:blaze
SMP_DMATTDMATSUB_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATSUB_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATTDMATSUB_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTDMATSUB_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DMATTDMATSUB_DEBUG_THRESHOLD   : SMP_DMATTDMATSUB_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DMATTDMATSUB_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATTDMATSUB_USER_THRESHOLD = 175UL;$/;"	m	namespace:blaze
SMP_DMATTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DMATTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DMATTSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_DMATTSMATMULT_DEBUG_THRESHOLD  : SMP_DMATTSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_DMATTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DMATTSMATMULT_USER_THRESHOLD = 68UL;$/;"	m	namespace:blaze
SMP_DVECASSIGN_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECASSIGN_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECASSIGN_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECASSIGN_THRESHOLD     = ( BLAZE_DEBUG_MODE ? SMP_DVECASSIGN_DEBUG_THRESHOLD     : SMP_DVECASSIGN_USER_THRESHOLD     );$/;"	m	namespace:blaze
SMP_DVECASSIGN_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECASSIGN_USER_THRESHOLD = 38000UL;$/;"	m	namespace:blaze
SMP_DVECDVECADD_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECADD_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECDVECADD_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECADD_THRESHOLD    = ( BLAZE_DEBUG_MODE ? SMP_DVECDVECADD_DEBUG_THRESHOLD    : SMP_DVECDVECADD_USER_THRESHOLD    );$/;"	m	namespace:blaze
SMP_DVECDVECADD_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECDVECADD_USER_THRESHOLD = 38000UL;$/;"	m	namespace:blaze
SMP_DVECDVECDIV_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECDIV_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECDVECDIV_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECDIV_THRESHOLD    = ( BLAZE_DEBUG_MODE ? SMP_DVECDVECDIV_DEBUG_THRESHOLD    : SMP_DVECDVECDIV_USER_THRESHOLD    );$/;"	m	namespace:blaze
SMP_DVECDVECDIV_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECDVECDIV_USER_THRESHOLD = 38000UL;$/;"	m	namespace:blaze
SMP_DVECDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECMULT_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_DVECDVECMULT_DEBUG_THRESHOLD   : SMP_DVECDVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_DVECDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECDVECMULT_USER_THRESHOLD = 38000UL;$/;"	m	namespace:blaze
SMP_DVECDVECSUB_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECSUB_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECDVECSUB_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECDVECSUB_THRESHOLD    = ( BLAZE_DEBUG_MODE ? SMP_DVECDVECSUB_DEBUG_THRESHOLD    : SMP_DVECDVECSUB_USER_THRESHOLD    );$/;"	m	namespace:blaze
SMP_DVECDVECSUB_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECDVECSUB_USER_THRESHOLD = 38000UL;$/;"	m	namespace:blaze
SMP_DVECSCALARMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECSCALARMULT_DEBUG_THRESHOLD = 32UL;$/;"	m	namespace:blaze
SMP_DVECSCALARMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECSCALARMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_DVECSCALARMULT_DEBUG_THRESHOLD : SMP_DVECSCALARMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_DVECSCALARMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECSCALARMULT_USER_THRESHOLD = 51000UL;$/;"	m	namespace:blaze
SMP_DVECTDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECTDVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_DVECTDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_DVECTDVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_DVECTDVECMULT_DEBUG_THRESHOLD  : SMP_DVECTDVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_DVECTDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_DVECTDVECMULT_USER_THRESHOLD = 290UL;$/;"	m	namespace:blaze
SMP_SMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_SMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATDMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_SMATDMATMULT_DEBUG_THRESHOLD   : SMP_SMATDMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_SMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATDMATMULT_USER_THRESHOLD = 88UL;$/;"	m	namespace:blaze
SMP_SMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATDVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_SMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATDVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_SMATDVECMULT_DEBUG_THRESHOLD   : SMP_SMATDVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_SMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATDVECMULT_USER_THRESHOLD = 600UL;$/;"	m	namespace:blaze
SMP_SMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_SMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATSMATMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_SMATSMATMULT_DEBUG_THRESHOLD   : SMP_SMATSMATMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_SMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATSMATMULT_USER_THRESHOLD = 150UL;$/;"	m	namespace:blaze
SMP_SMATSVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATSVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_SMATSVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATSVECMULT_THRESHOLD   = ( BLAZE_DEBUG_MODE ? SMP_SMATSVECMULT_DEBUG_THRESHOLD   : SMP_SMATSVECMULT_USER_THRESHOLD   );$/;"	m	namespace:blaze
SMP_SMATSVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATSVECMULT_USER_THRESHOLD = 260UL;$/;"	m	namespace:blaze
SMP_SMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATTDMATMULT_DEBUG_THRESHOLD = 72UL;$/;"	m	namespace:blaze
SMP_SMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATTDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_SMATTDMATMULT_DEBUG_THRESHOLD  : SMP_SMATTDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_SMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATTDMATMULT_USER_THRESHOLD = 72UL;$/;"	m	namespace:blaze
SMP_SMATTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_SMATTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_SMATTSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_SMATTSMATMULT_DEBUG_THRESHOLD  : SMP_SMATTSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_SMATTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_SMATTSMATMULT_USER_THRESHOLD = 140UL;$/;"	m	namespace:blaze
SMP_TDMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDMATDMATMULT_DEBUG_THRESHOLD  : SMP_TDMATDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATDMATMULT_USER_THRESHOLD = 55UL;$/;"	m	namespace:blaze
SMP_TDMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATDVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATDVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDMATDVECMULT_DEBUG_THRESHOLD  : SMP_TDMATDVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATDVECMULT_USER_THRESHOLD = 360UL;$/;"	m	namespace:blaze
SMP_TDMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDMATSMATMULT_DEBUG_THRESHOLD  : SMP_TDMATSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATSMATMULT_USER_THRESHOLD = 90UL;$/;"	m	namespace:blaze
SMP_TDMATSVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATSVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATSVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATSVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDMATSVECMULT_DEBUG_THRESHOLD  : SMP_TDMATSVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDMATSVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATSVECMULT_USER_THRESHOLD = 910UL;$/;"	m	namespace:blaze
SMP_TDMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATTDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TDMATTDMATMULT_DEBUG_THRESHOLD : SMP_TDMATTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TDMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATTDMATMULT_USER_THRESHOLD = 55UL;$/;"	m	namespace:blaze
SMP_TDMATTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDMATTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDMATTSMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TDMATTSMATMULT_DEBUG_THRESHOLD : SMP_TDMATTSMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TDMATTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDMATTSMATMULT_USER_THRESHOLD = 90UL;$/;"	m	namespace:blaze
SMP_TDVECDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDVECDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDVECDMATMULT_DEBUG_THRESHOLD  : SMP_TDVECDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDVECDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDVECDMATMULT_USER_THRESHOLD = 370UL;$/;"	m	namespace:blaze
SMP_TDVECSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDVECSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TDVECSMATMULT_DEBUG_THRESHOLD  : SMP_TDVECSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TDVECSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDVECSMATMULT_USER_THRESHOLD = 1190UL;$/;"	m	namespace:blaze
SMP_TDVECTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECTDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDVECTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TDVECTDMATMULT_DEBUG_THRESHOLD : SMP_TDVECTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TDVECTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDVECTDMATMULT_USER_THRESHOLD = 340UL;$/;"	m	namespace:blaze
SMP_TDVECTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TDVECTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TDVECTSMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TDVECTSMATMULT_DEBUG_THRESHOLD : SMP_TDVECTSMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TDVECTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TDVECTSMATMULT_USER_THRESHOLD = 530UL;$/;"	m	namespace:blaze
SMP_TSMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSMATDMATMULT_DEBUG_THRESHOLD  : SMP_TSMATDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATDMATMULT_USER_THRESHOLD = 66UL;$/;"	m	namespace:blaze
SMP_TSMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATDVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATDVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSMATDVECMULT_DEBUG_THRESHOLD  : SMP_TSMATDVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATDVECMULT_USER_THRESHOLD = 1250UL;$/;"	m	namespace:blaze
SMP_TSMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSMATSMATMULT_DEBUG_THRESHOLD  : SMP_TSMATSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATSMATMULT_USER_THRESHOLD = 140UL;$/;"	m	namespace:blaze
SMP_TSMATSVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATSVECMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATSVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATSVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSMATSVECMULT_DEBUG_THRESHOLD  : SMP_TSMATSVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSMATSVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATSVECMULT_USER_THRESHOLD = 2160UL;$/;"	m	namespace:blaze
SMP_TSMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATTDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TSMATTDMATMULT_DEBUG_THRESHOLD : SMP_TSMATTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TSMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATTDMATMULT_USER_THRESHOLD = 66UL;$/;"	m	namespace:blaze
SMP_TSMATTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSMATTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSMATTSMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TSMATTSMATMULT_DEBUG_THRESHOLD : SMP_TSMATTSMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TSMATTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSMATTSMATMULT_USER_THRESHOLD = 150UL;$/;"	m	namespace:blaze
SMP_TSVECDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSVECDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSVECDMATMULT_DEBUG_THRESHOLD  : SMP_TSVECDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSVECDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSVECDMATMULT_USER_THRESHOLD = 910UL;$/;"	m	namespace:blaze
SMP_TSVECSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSVECSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? SMP_TSVECSMATMULT_DEBUG_THRESHOLD  : SMP_TSVECSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
SMP_TSVECSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSVECSMATMULT_USER_THRESHOLD = 2160UL;$/;"	m	namespace:blaze
SMP_TSVECTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECTDMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSVECTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TSVECTDMATMULT_DEBUG_THRESHOLD : SMP_TSVECTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TSVECTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSVECTDMATMULT_USER_THRESHOLD = 480UL;$/;"	m	namespace:blaze
SMP_TSVECTSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECTSMATMULT_DEBUG_THRESHOLD = 16UL;$/;"	m	namespace:blaze
SMP_TSVECTSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t SMP_TSVECTSMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? SMP_TSVECTSMATMULT_DEBUG_THRESHOLD : SMP_TSVECTSMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
SMP_TSVECTSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t SMP_TSVECTSMATMULT_USER_THRESHOLD = 260UL;$/;"	m	namespace:blaze
SMatCTransExprTrait	amun/3rd_party/blaze/math/traits/SMatCTransExprTrait.h	/^struct SMatCTransExprTrait$/;"	s	namespace:blaze
SMatDMatAddExprTrait	amun/3rd_party/blaze/math/traits/SMatDMatAddExprTrait.h	/^struct SMatDMatAddExprTrait$/;"	s	namespace:blaze
SMatDMatMultExpr	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^class SMatDMatMultExpr : public DenseMatrix< SMatDMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct SMatDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
SMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct SMatDMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,false>, DMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
SMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatDMatMultExprTrait< SMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
SMatDMatMultExprTrait	amun/3rd_party/blaze/math/traits/SMatDMatMultExprTrait.h	/^struct SMatDMatMultExprTrait$/;"	s	namespace:blaze
SMatDMatSubExpr	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^class SMatDMatSubExpr : public DenseMatrix< SMatDMatSubExpr<MT1,MT2,SO>, SO >$/;"	c	namespace:blaze
SMatDMatSubExprTrait	amun/3rd_party/blaze/math/traits/SMatDMatSubExprTrait.h	/^struct SMatDMatSubExprTrait$/;"	s	namespace:blaze
SMatDVecMultExpr	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^class SMatDVecMultExpr : public DenseVector< SMatDVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SMatDVecMultExprTrait< MT, DVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct SMatDVecMultExprTrait< SMatSMatMultExpr<MT1,MT2>, VT >$/;"	s
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatDVecMultExprTrait< SMatScalarMultExpr<MT,ST,false>, VT >$/;"	s	namespace:blaze
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatDVecMultExprTrait< SMatScalarMultExpr<MT,ST1,false>, DVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct SMatDVecMultExprTrait< SMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s	namespace:blaze
SMatDVecMultExprTrait	amun/3rd_party/blaze/math/traits/SMatDVecMultExprTrait.h	/^struct SMatDVecMultExprTrait$/;"	s	namespace:blaze
SMatEvalExpr	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^class SMatEvalExpr : public SparseMatrix< SMatEvalExpr<MT,SO>, SO >$/;"	c	namespace:blaze
SMatEvalExprTrait	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct SMatEvalExprTrait< SMatEvalExpr<MT,false> >$/;"	s	namespace:blaze
SMatEvalExprTrait	amun/3rd_party/blaze/math/traits/SMatEvalExprTrait.h	/^struct SMatEvalExprTrait$/;"	s	namespace:blaze
SMatForEachExpr	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^class SMatForEachExpr : public SparseMatrix< SMatForEachExpr<MT,OP,SO>, SO >$/;"	c	namespace:blaze
SMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct SMatForEachExprTrait< SMatForEachExpr<MT,Abs,false>, Abs >$/;"	s	namespace:blaze
SMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct SMatForEachExprTrait< SMatForEachExpr<MT,Conj,false>, Conj >$/;"	s	namespace:blaze
SMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct SMatForEachExprTrait< SMatForEachExpr<MT,Real,false>, Real >$/;"	s	namespace:blaze
SMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct SMatForEachExprTrait< SMatTransExpr< SMatForEachExpr<MT,Conj,true>, false >, Conj >$/;"	s	namespace:blaze
SMatForEachExprTrait	amun/3rd_party/blaze/math/traits/SMatForEachExprTrait.h	/^struct SMatForEachExprTrait$/;"	s	namespace:blaze
SMatSMatAddExpr	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^class SMatSMatAddExpr : public SparseMatrix< SMatSMatAddExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatSMatAddExprTrait	amun/3rd_party/blaze/math/traits/SMatSMatAddExprTrait.h	/^struct SMatSMatAddExprTrait$/;"	s	namespace:blaze
SMatSMatMultExpr	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^class SMatSMatMultExpr : public SparseMatrix< SMatSMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
SMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatSMatMultExprTrait< SMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
SMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatSMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,false>, SMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
SMatSMatMultExprTrait	amun/3rd_party/blaze/math/traits/SMatSMatMultExprTrait.h	/^struct SMatSMatMultExprTrait$/;"	s	namespace:blaze
SMatSMatSubExpr	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^class SMatSMatSubExpr : public SparseMatrix< SMatSMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatSMatSubExprTrait	amun/3rd_party/blaze/math/traits/SMatSMatSubExprTrait.h	/^struct SMatSMatSubExprTrait$/;"	s	namespace:blaze
SMatSVecMultExpr	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^class SMatSVecMultExpr : public SparseVector< SMatSVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct SMatSVecMultExprTrait< SMatSMatMultExpr<MT1,MT2>, VT >$/;"	s
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatSVecMultExprTrait< SMatScalarMultExpr<MT,ST,false>, VT >$/;"	s	namespace:blaze
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatSVecMultExprTrait< SMatScalarMultExpr<MT,ST1,false>, SVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct SMatSVecMultExprTrait< SMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s	namespace:blaze
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SMatSVecMultExprTrait< MT, SVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
SMatSVecMultExprTrait	amun/3rd_party/blaze/math/traits/SMatSVecMultExprTrait.h	/^struct SMatSVecMultExprTrait$/;"	s	namespace:blaze
SMatScalarDivExpr	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^class SMatScalarDivExpr : public SparseMatrix< SMatScalarDivExpr<MT,ST,SO>, SO >$/;"	c	namespace:blaze
SMatScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatScalarDivExprTrait< SMatScalarMultExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SMatScalarDivExprTrait	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	/^struct SMatScalarDivExprTrait$/;"	s	namespace:blaze
SMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	/^struct SMatScalarDivExprTraitHelper$/;"	s	namespace:blaze
SMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	/^struct SMatScalarDivExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
SMatScalarMultExpr	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^class SMatScalarMultExpr : public SparseMatrix< SMatScalarMultExpr<MT,ST,SO>, SO >$/;"	c	namespace:blaze
SMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct SMatScalarMultExprTrait< SMatScalarDivExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatScalarMultExprTrait< SMatScalarMultExpr<MT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SMatScalarMultExprTrait	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	/^struct SMatScalarMultExprTrait$/;"	s	namespace:blaze
SMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	/^struct SMatScalarMultExprTraitHelper$/;"	s	namespace:blaze
SMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	/^struct SMatScalarMultExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
SMatSerialExpr	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^class SMatSerialExpr : public SparseMatrix< SMatSerialExpr<MT,SO>, SO >$/;"	c	namespace:blaze
SMatSerialExprTrait	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct SMatSerialExprTrait< SMatSerialExpr<MT,false> >$/;"	s	namespace:blaze
SMatSerialExprTrait	amun/3rd_party/blaze/math/traits/SMatSerialExprTrait.h	/^struct SMatSerialExprTrait$/;"	s	namespace:blaze
SMatTDMatAddExprTrait	amun/3rd_party/blaze/math/traits/SMatTDMatAddExprTrait.h	/^struct SMatTDMatAddExprTrait$/;"	s	namespace:blaze
SMatTDMatMultExpr	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^class SMatTDMatMultExpr : public DenseMatrix< SMatTDMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct SMatTDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
SMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct SMatTDMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,false>, DMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
SMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatTDMatMultExprTrait< SMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
SMatTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/SMatTDMatMultExprTrait.h	/^struct SMatTDMatMultExprTrait$/;"	s	namespace:blaze
SMatTDMatSubExpr	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^class SMatTDMatSubExpr : public DenseMatrix< SMatTDMatSubExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
SMatTDMatSubExprTrait	amun/3rd_party/blaze/math/traits/SMatTDMatSubExprTrait.h	/^struct SMatTDMatSubExprTrait$/;"	s	namespace:blaze
SMatTSMatAddExpr	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^class SMatTSMatAddExpr : public SparseMatrix< SMatTSMatAddExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatTSMatAddExprTrait	amun/3rd_party/blaze/math/traits/SMatTSMatAddExprTrait.h	/^struct SMatTSMatAddExprTrait$/;"	s	namespace:blaze
SMatTSMatMultExpr	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^class SMatTSMatMultExpr : public SparseMatrix< SMatTSMatMultExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatTSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
SMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatTSMatMultExprTrait< SMatScalarMultExpr<MT1,ST,false>, MT2 >$/;"	s	namespace:blaze
SMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SMatTSMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,false>, SMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
SMatTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/SMatTSMatMultExprTrait.h	/^struct SMatTSMatMultExprTrait$/;"	s	namespace:blaze
SMatTSMatSubExpr	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^class SMatTSMatSubExpr : public SparseMatrix< SMatTSMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
SMatTSMatSubExprTrait	amun/3rd_party/blaze/math/traits/SMatTSMatSubExprTrait.h	/^struct SMatTSMatSubExprTrait$/;"	s	namespace:blaze
SMatTransExpr	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^class SMatTransExpr : public SparseMatrix< SMatTransExpr<MT,SO>, SO >$/;"	c	namespace:blaze
SMatTransExprTrait	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct SMatTransExprTrait< SMatTransExpr<MT,false> >$/;"	s	namespace:blaze
SMatTransExprTrait	amun/3rd_party/blaze/math/traits/SMatTransExprTrait.h	/^struct SMatTransExprTrait$/;"	s	namespace:blaze
SMatTransposer	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^class SMatTransposer : public SparseMatrix< SMatTransposer<MT,SO>, SO >$/;"	c	namespace:blaze
SMatTransposer	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^class SMatTransposer<MT,true> : public SparseMatrix< SMatTransposer<MT,true>, true >$/;"	c	namespace:blaze
SPDLOG_CONSTEXPR	amun/3rd_party/spdlog/common.h	26;"	d
SPDLOG_CONSTEXPR	amun/3rd_party/spdlog/common.h	29;"	d
SPDLOG_DEBUG	amun/3rd_party/spdlog/spdlog.h	169;"	d
SPDLOG_DEBUG	amun/3rd_party/spdlog/spdlog.h	171;"	d
SPDLOG_DEPRECATED	amun/3rd_party/spdlog/common.h	33;"	d
SPDLOG_DEPRECATED	amun/3rd_party/spdlog/common.h	35;"	d
SPDLOG_DEPRECATED	amun/3rd_party/spdlog/common.h	37;"	d
SPDLOG_EOL	amun/3rd_party/spdlog/details/os.h	136;"	d
SPDLOG_EOL	amun/3rd_party/spdlog/details/os.h	138;"	d
SPDLOG_FILENAME_T	amun/3rd_party/spdlog/details/os.h	353;"	d
SPDLOG_FILENAME_T	amun/3rd_party/spdlog/details/os.h	360;"	d
SPDLOG_NOEXCEPT	amun/3rd_party/spdlog/common.h	25;"	d
SPDLOG_NOEXCEPT	amun/3rd_party/spdlog/common.h	28;"	d
SPDLOG_NOEXCEPT	amun/3rd_party/spdlog/details/async_log_helper.h	/^async_msg(async_msg&& other) SPDLOG_NOEXCEPT:$/;"	m	struct:spdlog::details::async_log_helper::async_msg
SPDLOG_STR_H	amun/3rd_party/spdlog/spdlog.h	161;"	d
SPDLOG_STR_HELPER	amun/3rd_party/spdlog/spdlog.h	162;"	d
SPDLOG_TRACE	amun/3rd_party/spdlog/spdlog.h	163;"	d
SPDLOG_TRACE	amun/3rd_party/spdlog/spdlog.h	165;"	d
SPDLOG_VERSION	amun/3rd_party/spdlog/spdlog.h	10;"	d
SRC_HASHTABLES_H	amun/3rd_party/fast_align/src/hashtables.h	2;"	d
STATUS	amun/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	g	struct:YAML::Scanner::IndentMarker
STATUS	amun/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	g	struct:YAML::Token
STLEMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/stlemitter.h	2;"	d
STREAMCHARSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/streamcharsource.h	2;"	d
STREAM_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/stream.h	2;"	d
STRING	amun/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
STRING	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
STRINGSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/stringsource.h	2;"	d
STRIP	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
SURROGATE_OFFSET	amun/3rd_party/utf8/core.h	/^    const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;$/;"	m	namespace:utf8::internal
SVecCTransExprTrait	amun/3rd_party/blaze/math/traits/SVecCTransExprTrait.h	/^struct SVecCTransExprTrait$/;"	s	namespace:blaze
SVecDVecAddExprTrait	amun/3rd_party/blaze/math/traits/SVecDVecAddExprTrait.h	/^struct SVecDVecAddExprTrait$/;"	s	namespace:blaze
SVecDVecCrossExpr	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^class SVecDVecCrossExpr : public DenseVector< SVecDVecCrossExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecDVecCrossExprTrait	amun/3rd_party/blaze/math/traits/SVecDVecCrossExprTrait.h	/^struct SVecDVecCrossExprTrait$/;"	s	namespace:blaze
SVecDVecDivExpr	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^class SVecDVecDivExpr : public SparseVector< SVecDVecDivExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecDVecDivExprTrait	amun/3rd_party/blaze/math/traits/SVecDVecDivExprTrait.h	/^struct SVecDVecDivExprTrait$/;"	s	namespace:blaze
SVecDVecMultExpr	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^class SVecDVecMultExpr : public SparseVector< SVecDVecMultExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SVecDVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,false>, DVecScalarMultExpr<VT2,ST2,false> >$/;"	s	namespace:blaze
SVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SVecDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,false> >$/;"	s	namespace:blaze
SVecDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecDVecMultExprTrait< SVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
SVecDVecMultExprTrait	amun/3rd_party/blaze/math/traits/SVecDVecMultExprTrait.h	/^struct SVecDVecMultExprTrait$/;"	s	namespace:blaze
SVecDVecSubExpr	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^class SVecDVecSubExpr : public DenseVector< SVecDVecSubExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecDVecSubExprTrait	amun/3rd_party/blaze/math/traits/SVecDVecSubExprTrait.h	/^struct SVecDVecSubExprTrait$/;"	s	namespace:blaze
SVecEvalExpr	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^class SVecEvalExpr : public SparseVector< SVecEvalExpr<VT,TF>, TF >$/;"	c	namespace:blaze
SVecEvalExprTrait	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^struct SVecEvalExprTrait< SVecEvalExpr<VT,false> >$/;"	s	namespace:blaze
SVecEvalExprTrait	amun/3rd_party/blaze/math/traits/SVecEvalExprTrait.h	/^struct SVecEvalExprTrait$/;"	s	namespace:blaze
SVecForEachExpr	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^class SVecForEachExpr : public SparseVector< SVecForEachExpr<VT,OP,TF>, TF >$/;"	c	namespace:blaze
SVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct SVecForEachExprTrait< SVecForEachExpr<VT,Abs,false>, Abs >$/;"	s	namespace:blaze
SVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct SVecForEachExprTrait< SVecForEachExpr<VT,Conj,false>, Conj >$/;"	s	namespace:blaze
SVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct SVecForEachExprTrait< SVecForEachExpr<VT,Real,false>, Real >$/;"	s	namespace:blaze
SVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct SVecForEachExprTrait< SVecTransExpr< SVecForEachExpr<VT,Conj,true>, false >, Conj >$/;"	s	namespace:blaze
SVecForEachExprTrait	amun/3rd_party/blaze/math/traits/SVecForEachExprTrait.h	/^struct SVecForEachExprTrait$/;"	s	namespace:blaze
SVecSVecAddExpr	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^class SVecSVecAddExpr : public SparseVector< SVecSVecAddExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecSVecAddExprTrait	amun/3rd_party/blaze/math/traits/SVecSVecAddExprTrait.h	/^struct SVecSVecAddExprTrait$/;"	s	namespace:blaze
SVecSVecCrossExpr	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^class SVecSVecCrossExpr : public DenseVector< SVecSVecCrossExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecSVecCrossExprTrait	amun/3rd_party/blaze/math/traits/SVecSVecCrossExprTrait.h	/^struct SVecSVecCrossExprTrait$/;"	s	namespace:blaze
SVecSVecMultExpr	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^class SVecSVecMultExpr : public SparseVector< SVecSVecMultExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecSVecMultExprTrait< SVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
SVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecSVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,false>, SVecScalarMultExpr<VT2,ST2,false> >$/;"	s	namespace:blaze
SVecSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,false> >$/;"	s	namespace:blaze
SVecSVecMultExprTrait	amun/3rd_party/blaze/math/traits/SVecSVecMultExprTrait.h	/^struct SVecSVecMultExprTrait$/;"	s	namespace:blaze
SVecSVecSubExpr	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^class SVecSVecSubExpr : public SparseVector< SVecSVecSubExpr<VT1,VT2,TF>, TF >$/;"	c	namespace:blaze
SVecSVecSubExprTrait	amun/3rd_party/blaze/math/traits/SVecSVecSubExprTrait.h	/^struct SVecSVecSubExprTrait$/;"	s	namespace:blaze
SVecScalarDivExpr	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^class SVecScalarDivExpr : public SparseVector< SVecScalarDivExpr<VT,ST,TF>, TF >$/;"	c	namespace:blaze
SVecScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecScalarDivExprTrait< SVecScalarMultExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SVecScalarDivExprTrait	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	/^struct SVecScalarDivExprTrait$/;"	s	namespace:blaze
SVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	/^struct SVecScalarDivExprTraitHelper$/;"	s	namespace:blaze
SVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	/^struct SVecScalarDivExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
SVecScalarMultExpr	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^class SVecScalarMultExpr : public SparseVector< SVecScalarMultExpr<VT,ST,TF>, TF >$/;"	c	namespace:blaze
SVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^struct SVecScalarMultExprTrait< SVecScalarDivExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecScalarMultExprTrait< SVecScalarMultExpr<VT,ST1,false>, ST2 >$/;"	s	namespace:blaze
SVecScalarMultExprTrait	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	/^struct SVecScalarMultExprTrait$/;"	s	namespace:blaze
SVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	/^struct SVecScalarMultExprTraitHelper$/;"	s	namespace:blaze
SVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	/^struct SVecScalarMultExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
SVecSerialExpr	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^class SVecSerialExpr : public SparseVector< SVecSerialExpr<VT,TF>, TF >$/;"	c	namespace:blaze
SVecSerialExprTrait	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^struct SVecSerialExprTrait< SVecSerialExpr<VT,false> >$/;"	s	namespace:blaze
SVecSerialExprTrait	amun/3rd_party/blaze/math/traits/SVecSerialExprTrait.h	/^struct SVecSerialExprTrait$/;"	s	namespace:blaze
SVecTDVecMultExpr	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^class SVecTDVecMultExpr : public SparseMatrix< SVecTDVecMultExpr<VT1,VT2>, true >$/;"	c	namespace:blaze
SVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SVecTDVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,false>, DVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
SVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SVecTDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
SVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecTDVecMultExprTrait< SVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
SVecTDVecMultExprTrait	amun/3rd_party/blaze/math/traits/SVecTDVecMultExprTrait.h	/^struct SVecTDVecMultExprTrait$/;"	s	namespace:blaze
SVecTSVecMultExpr	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^class SVecTSVecMultExpr : public SparseMatrix< SVecTSVecMultExpr<VT1,VT2>, false >$/;"	c	namespace:blaze
SVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecTSVecMultExprTrait< SVecScalarMultExpr<VT1,ST,false>, VT2 >$/;"	s	namespace:blaze
SVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecTSVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,false>, SVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
SVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SVecTSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
SVecTSVecMultExprTrait	amun/3rd_party/blaze/math/traits/SVecTSVecMultExprTrait.h	/^struct SVecTSVecMultExprTrait$/;"	s	namespace:blaze
SVecTransExpr	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^class SVecTransExpr : public SparseVector< SVecTransExpr<VT,TF>, TF >$/;"	c	namespace:blaze
SVecTransExprTrait	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^struct SVecTransExprTrait< SVecTransExpr<VT,false> >$/;"	s	namespace:blaze
SVecTransExprTrait	amun/3rd_party/blaze/math/traits/SVecTransExprTrait.h	/^struct SVecTransExprTrait$/;"	s	namespace:blaze
SVecTransposer	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^class SVecTransposer : public SparseVector< SVecTransposer<VT,TF>, TF >$/;"	c	namespace:blaze
S_ARRAY_END	amun/3rd_party/yaml-cpp/stream.cpp	10;"	d	file:
S_ARRAY_SIZE	amun/3rd_party/yaml-cpp/stream.cpp	9;"	d	file:
S_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class S_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Safe	amun/3rd_party/fast_align/src/atools.cc	/^  static bool Safe(const Array2D<bool>& a, int i, int j) {$/;"	f	struct:Command
SafeSoftmax	amun/cpu/mblas/tensor.h	/^void SafeSoftmax(MT& Out) {$/;"	f	namespace:amunmt::CPU::mblas
Scalar	amun/3rd_party/blaze/math/traits/InvExprTrait.h	/^   struct Scalar { using Type = T; };$/;"	s	struct:blaze::InvExprTrait
Scalar	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
Scalar	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const std::string& Node::Scalar() const {$/;"	f	class:YAML::Node
Scalar	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
ScalarType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef DivTrait_<ST2,ST1>  ScalarType;$/;"	t	struct:blaze::DMatScalarMultExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef DivTrait_<ST2,ST1>  ScalarType;$/;"	t	struct:blaze::TDMatScalarMultExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef DivTrait_<ST1,ST2>  ScalarType;$/;"	t	struct:blaze::DMatScalarDivExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef DivTrait_<ST1,ST2>  ScalarType;$/;"	t	struct:blaze::TDMatScalarDivExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef DivTrait_<ST2,ST1>  ScalarType;$/;"	t	struct:blaze::DVecScalarMultExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef DivTrait_<ST2,ST1>  ScalarType;$/;"	t	struct:blaze::TDVecScalarMultExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef DivTrait_<ST1,ST2>  ScalarType;$/;"	t	struct:blaze::DVecScalarDivExprTrait
ScalarType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef DivTrait_<ST1,ST2>  ScalarType;$/;"	t	struct:blaze::TDVecScalarDivExprTrait
ScanAnchorOrAlias	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanAnchorOrAlias() {$/;"	f	class:YAML::Scanner
ScanBlockEntry	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanBlockEntry() {$/;"	f	class:YAML::Scanner
ScanBlockScalar	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanBlockScalar() {$/;"	f	class:YAML::Scanner
ScanDirective	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDirective() {$/;"	f	class:YAML::Scanner
ScanDocEnd	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDocEnd() {$/;"	f	class:YAML::Scanner
ScanDocStart	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDocStart() {$/;"	f	class:YAML::Scanner
ScanFlowEnd	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowEnd() {$/;"	f	class:YAML::Scanner
ScanFlowEntry	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowEntry() {$/;"	f	class:YAML::Scanner
ScanFlowStart	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowStart() {$/;"	f	class:YAML::Scanner
ScanKey	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanKey() {$/;"	f	class:YAML::Scanner
ScanNextToken	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ScanNextToken() {$/;"	f	class:YAML::Scanner
ScanPlainScalar	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanPlainScalar() {$/;"	f	class:YAML::Scanner
ScanQuotedScalar	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanQuotedScalar() {$/;"	f	class:YAML::Scanner
ScanScalar	amun/3rd_party/yaml-cpp/scanscalar.cpp	/^std::string ScanScalar(Stream& INPUT, ScanScalarParams& params) {$/;"	f	namespace:YAML
ScanScalarEnd	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ScanScalarEnd() {$/;"	f	namespace:YAML::Exp
ScanScalarEndInFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ScanScalarEndInFlow() {$/;"	f	namespace:YAML::Exp
ScanScalarParams	amun/3rd_party/yaml-cpp/scanscalar.h	/^  ScanScalarParams()$/;"	f	struct:YAML::ScanScalarParams
ScanScalarParams	amun/3rd_party/yaml-cpp/scanscalar.h	/^struct ScanScalarParams {$/;"	s	namespace:YAML
ScanTag	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanTag() {$/;"	f	class:YAML::Scanner
ScanTagHandle	amun/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanTagHandle(Stream& INPUT, bool& canBeHandle) {$/;"	f	namespace:YAML
ScanTagSuffix	amun/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanTagSuffix(Stream& INPUT) {$/;"	f	namespace:YAML
ScanToNextToken	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ScanToNextToken() {$/;"	f	class:YAML::Scanner
ScanValue	amun/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanValue() {$/;"	f	class:YAML::Scanner
ScanVerbatimTag	amun/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanVerbatimTag(Stream& INPUT) {$/;"	f	namespace:YAML
Scanner	amun/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::Scanner(std::istream& in)$/;"	f	class:YAML::Scanner
Scanner	amun/3rd_party/yaml-cpp/scanner.h	/^class Scanner {$/;"	c	namespace:YAML
Score	amun/gpu/decoder/class_language_model.h	/^    virtual void Score(const God &god, const State& in,$/;"	f	class:amunmt::GPU::ClassLanguageModel
Score	amun/gpu/decoder/kenlm.cpp	/^float LM::Score(const KenlmState& in, lm::WordIndex index, KenlmState& out) const {$/;"	f	class:LM
Scorer	amun/common/scorer.cpp	/^Scorer::Scorer(const God &god,$/;"	f	class:amunmt::Scorer
Scorer	amun/common/scorer.h	/^class Scorer {$/;"	c	namespace:amunmt
ScorerPtr	amun/common/scorer.h	/^typedef std::shared_ptr<Scorer> ScorerPtr;$/;"	t	namespace:amunmt
Search	amun/common/search.cpp	/^Search::Search(const God &god)$/;"	f	class:amunmt::Search
Search	amun/common/search.h	/^class Search {$/;"	c	namespace:amunmt
SecondaryTag	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag SecondaryTag(const std::string content) {$/;"	f	namespace:YAML
Segment	amun/common/processor/bpe.cpp	/^std::vector<std::string> BPE::Segment(const std::string& sentence) {$/;"	f	class:amunmt::BPE
Sentence	amun/common/sentence.cpp	/^Sentence::Sentence(God&, unsigned lineNum, const std::vector<unsigned>& words)$/;"	f	class:amunmt::Sentence
Sentence	amun/common/sentence.cpp	/^Sentence::Sentence(const God &god, unsigned lineNum, const std::vector<std::string>& words)$/;"	f	class:amunmt::Sentence
Sentence	amun/common/sentence.cpp	/^Sentence::Sentence(const God &god, unsigned vLineNum, const std::string& line)$/;"	f	class:amunmt::Sentence
Sentence	amun/common/sentence.h	/^class Sentence {$/;"	c	namespace:amunmt
Sentences	amun/common/sentences.cpp	/^Sentences::Sentences()$/;"	f	class:amunmt::Sentences
Sentences	amun/common/sentences.h	/^class Sentences {$/;"	c	namespace:amunmt
Seq	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
SeqIter	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef typename node_iterator_type<V>::seq SeqIter;$/;"	t	class:YAML::detail::node_iterator_base
Sequence	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Sequence Sequence;$/;"	t	class:YAML::GraphBuilder
Sequence	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Sequence	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
SequenceComplete	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void SequenceComplete(void *pSequence) { (void)pSequence; }$/;"	f	class:YAML::GraphBuilderInterface
SequenceComplete	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void SequenceComplete(void *pSequence) {$/;"	f	class:YAML::GraphBuilder
Serial	amun/3rd_party/blaze/math/functors/Serial.h	/^struct Serial$/;"	s	namespace:blaze
SerialExpr	amun/3rd_party/blaze/math/expressions/SerialExpr.h	/^struct SerialExpr : private Expression$/;"	s	namespace:blaze
SerialExprTrait	amun/3rd_party/blaze/math/traits/SerialExprTrait.h	/^struct SerialExprTrait$/;"	s	namespace:blaze
SerialSection	amun/3rd_party/blaze/math/smp/SerialSection.h	/^class SerialSection$/;"	c	namespace:blaze
SerialSection	amun/3rd_party/blaze/math/smp/SerialSection.h	/^inline SerialSection<T>::SerialSection( bool activate )$/;"	f	class:blaze::SerialSection
SerializePharaohFormat	amun/3rd_party/fast_align/src/alignment_io.cc	/^void AlignmentIO::SerializePharaohFormat(const Array2D<bool>& alignment, ostream* o) {$/;"	f	class:AlignmentIO
SerializeTypedAlignment	amun/3rd_party/fast_align/src/alignment_io.cc	/^void AlignmentIO::SerializeTypedAlignment(const Array2D<AlignmentType>& alignment, ostream* o) {$/;"	f	class:AlignmentIO
Set	amun/common/config.h	/^    void Set(const std::string& key, T value) {$/;"	f	class:amunmt::Config
Set	amun/fpga/array.h	/^  void Set(const T &val)$/;"	f	class:amunmt::FPGA::Array
Set	amun/fpga/array.h	/^  void Set(const T *arr, size_t size)$/;"	f	class:amunmt::FPGA::Array
Set	amun/fpga/array.h	/^  void Set(const std::vector<T> &vec)$/;"	f	class:amunmt::FPGA::Array
Set	amun/fpga/matrix.cpp	/^void Matrix::Set(const float *data)$/;"	f	class:amunmt::FPGA::mblas::Matrix
SetActive	amun/common/histories.cpp	/^void Histories::SetActive(bool active)$/;"	f	class:amunmt::Histories
SetActive	amun/common/histories.cpp	/^void Histories::SetActive(unsigned id, bool active)$/;"	f	class:amunmt::Histories
SetActive	amun/common/history.cpp	/^void History::SetActive(bool active)$/;"	f	class:amunmt::History
SetAllowUnk	amun/common/god.cpp	/^void God::SetAllowUnk(int option){$/;"	f	class:amunmt::God
SetAnchor	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetAnchor() { m_hasAnchor = true; }$/;"	f	class:YAML::EmitterState
SetBoolCaseFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolCaseFormat(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetBoolFormat	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetBoolFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetBoolFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetBoolLengthFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolLengthFormat(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetColumn	amun/fpga/matrix_functions.cpp	/^void SetColumn(Matrix& In, int noColumn, float value)$/;"	f	namespace:amunmt::FPGA::mblas
SetDoublePrecision	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetDoublePrecision(std::size_t n) {$/;"	f	class:YAML::Emitter
SetDoublePrecision	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetDoublePrecision(int value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetError	amun/3rd_party/yaml-cpp/emitterstate.h	/^  void SetError(const std::string& error) {$/;"	f	class:YAML::EmitterState
SetFloatPrecision	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetFloatPrecision(std::size_t n) {$/;"	f	class:YAML::Emitter
SetFloatPrecision	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetFloatPrecision(int value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetFlowType	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetFlowType(GroupType::value groupType, EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetIndent	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetIndent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetIndent(std::size_t value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetIntBase	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetIntBase(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetIntFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetIntFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetKernelArg	amun/fpga/matrix_functions.cpp	/^void SetKernelArg(cl_kernel kernel, cl_uint argNum, const T &t)$/;"	f	namespace:amunmt::FPGA::mblas
SetKernelArg	amun/fpga/matrix_functions.cpp	/^void SetKernelArg(cl_kernel kernel, cl_uint argNum, const T &t, Args... args) \/\/ recursive variadic function$/;"	f	namespace:amunmt::FPGA::mblas
SetLocalIndent	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalIndent(const _Indent& indent) {$/;"	f	class:YAML::Emitter
SetLocalPrecision	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalPrecision(const _Precision& precision) {$/;"	f	class:YAML::Emitter
SetLocalValue	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalValue(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetLocalValue	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetLocalValue(EMITTER_MANIP value) {$/;"	f	class:YAML::EmitterState
SetLocation	amun/3rd_party/extract_lex/exception.cpp	/^void Exception::SetLocation(const char *file, unsigned int line, const char *func, const char *child_name, const char *condition) {$/;"	f	class:util::Exception
SetLocation	amun/common/exception.cpp	/^void Exception::SetLocation(const char *file, unsigned int line, const char *func, const char *child_name, const char *condition) {$/;"	f	class:amunmt::util::Exception
SetLongKey	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetLongKey() {$/;"	f	class:YAML::EmitterState
SetMapFormat	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetMapFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetMapKeyFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetMapKeyFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetMaxE	amun/3rd_party/fast_align/src/ttables.h	/^  inline void SetMaxE(const unsigned e) {$/;"	f	class:TTable
SetNonContent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetNonContent() { m_hasNonContent = true; }$/;"	f	class:YAML::EmitterState
SetNumFirstWords	amun/common/filter.cpp	/^void Filter::SetNumFirstWords(const unsigned numFirstWords) {$/;"	f	class:amunmt::Filter
SetOutputCharset	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetOutputCharset(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetOutputCharset	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetOutputCharset(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetPostCommentIndent	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetPostCommentIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetPostCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetPostCommentIndent(std::size_t value,$/;"	f	class:YAML::EmitterState
SetPreCommentIndent	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetPreCommentIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetPreCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetPreCommentIndent(std::size_t value,$/;"	f	class:YAML::EmitterState
SetSeqFormat	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetSeqFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetSource	amun/common/scorer.h	/^    virtual void SetSource(const Sentences&) {}$/;"	f	class:amunmt::SourceIndependentScorer
SetStreamablePrecision	amun/3rd_party/yaml-cpp/emitter.h	/^  void SetStreamablePrecision(std::stringstream&) {}$/;"	f	class:YAML::Emitter
SetStreamablePrecision	amun/3rd_party/yaml-cpp/emitter.h	/^inline void Emitter::SetStreamablePrecision<double>(std::stringstream& stream) {$/;"	f	class:YAML::Emitter
SetStreamablePrecision	amun/3rd_party/yaml-cpp/emitter.h	/^inline void Emitter::SetStreamablePrecision<float>(std::stringstream& stream) {$/;"	f	class:YAML::Emitter
SetStringFormat	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetStringFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetStringFormat	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetStringFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetStyle	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::SetStyle(EmitterStyle::value style) {$/;"	f	class:YAML::Node
SetTag	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetTag() { m_hasTag = true; }$/;"	f	class:YAML::EmitterState
SetTag	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::SetTag(const std::string& tag) {$/;"	f	class:YAML::Node
Setting	amun/3rd_party/yaml-cpp/setting.h	/^  Setting() : m_value() {}$/;"	f	class:YAML::Setting
Setting	amun/3rd_party/yaml-cpp/setting.h	/^class Setting {$/;"	c	namespace:YAML
SettingChange	amun/3rd_party/yaml-cpp/setting.h	/^  SettingChange(Setting<T>* pSetting) : m_pCurSetting(pSetting) {$/;"	f	class:YAML::SettingChange
SettingChange	amun/3rd_party/yaml-cpp/setting.h	/^class SettingChange : public SettingChangeBase {$/;"	c	namespace:YAML
SettingChangeBase	amun/3rd_party/yaml-cpp/setting.h	/^class SettingChangeBase {$/;"	c	namespace:YAML
SettingChanges	amun/3rd_party/yaml-cpp/setting.h	/^  SettingChanges() {}$/;"	f	class:YAML::SettingChanges
SettingChanges	amun/3rd_party/yaml-cpp/setting.h	/^class SettingChanges : private noncopyable {$/;"	c	namespace:YAML
Setup	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Setup(const detail::node& node) {$/;"	f	class:YAML::NodeEvents
SharedElement	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline SharedElement( IteratorType pos )$/;"	f	class:blaze::SymmetricMatrix::SharedElement
SharedElement	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   class SharedElement : private SparseElement$/;"	c	class:blaze::SymmetricMatrix
SharedIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline SharedIterator( IteratorType pos )$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
SharedIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline SharedIterator( const SharedIterator<SparseElementType2,IteratorType2>& it )$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
SharedIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline SharedIterator()$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
SharedIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   class SharedIterator$/;"	c	class:blaze::SymmetricMatrix
SharedValue	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^class SharedValue$/;"	c	namespace:blaze
SharedValue	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline SharedValue<Type>::SharedValue( const Type& value )$/;"	f	class:blaze::SharedValue
SharedValue	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline SharedValue<Type>::SharedValue()$/;"	f	class:blaze::SharedValue
ShortBool	amun/3rd_party/yaml-cpp/emittermanip.h	/^  ShortBool,      \/\/ y, t$/;"	e	enum:YAML::EMITTER_MANIP
SignChecker	amun/3rd_party/spdlog/details/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	amun/3rd_party/spdlog/details/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
SignChecker	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
SimpleKey	amun/3rd_party/yaml-cpp/scanner.h	/^  struct SimpleKey {$/;"	s	class:YAML::Scanner
SimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^Scanner::SimpleKey::SimpleKey(const Mark& mark_, std::size_t flowLevel_)$/;"	f	class:YAML::Scanner::SimpleKey
Sin	amun/3rd_party/blaze/math/functors/Sin.h	/^struct Sin$/;"	s	namespace:blaze
SingleDocParser	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^SingleDocParser::SingleDocParser(Scanner& scanner, const Directives& directives)$/;"	f	class:YAML::SingleDocParser
SingleDocParser	amun/3rd_party/yaml-cpp/singledocparser.h	/^class SingleDocParser : private noncopyable {$/;"	c	namespace:YAML
SingleQuoted	amun/3rd_party/yaml-cpp/emittermanip.h	/^  SingleQuoted,$/;"	e	enum:YAML::EMITTER_MANIP
SingleQuoted	amun/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
Sinh	amun/3rd_party/blaze/math/functors/Sinh.h	/^struct Sinh$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^struct Size< DMatSVecMultExpr<MT,VT> > : public Rows<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^struct Size< DVecDVecAddExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^struct Size< DVecDVecCrossExpr<VT1,VT2,TF> > : public SizeT<3UL>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^struct Size< DVecDVecDivExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^struct Size< DVecDVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^struct Size< DVecDVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^struct Size< DVecEvalExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct Size< DVecForEachExpr<VT,OP,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct Size< DVecSVecAddExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^struct Size< DVecSVecCrossExpr<VT1,VT2,TF> > : public SizeT<3UL>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^struct Size< DVecSVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct Size< DVecSVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct Size< DVecScalarDivExpr<VT,ST,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct Size< DVecScalarMultExpr<VT,ST,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^struct Size< DVecSerialExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct Size< DVecTransExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^struct Size< SMatDVecMultExpr<MT,VT> > : public Rows<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^struct Size< SMatSVecMultExpr<MT,VT> > : public Rows<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^struct Size< SVecDVecCrossExpr<VT1,VT2,TF> > : public SizeT<3UL>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^struct Size< SVecDVecDivExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^struct Size< SVecDVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct Size< SVecDVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^struct Size< SVecEvalExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct Size< SVecForEachExpr<VT,OP,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^struct Size< SVecSVecAddExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^struct Size< SVecSVecCrossExpr<VT1,VT2,TF> > : public SizeT<3UL>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^struct Size< SVecSVecMultExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^struct Size< SVecSVecSubExpr<VT1,VT2,TF> >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^struct Size< SVecScalarDivExpr<VT,ST,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct Size< SVecScalarMultExpr<VT,ST,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^struct Size< SVecSerialExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^struct Size< SVecTransExpr<VT,TF> > : public Size<VT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^struct Size< TDVecSMatMultExpr<VT,MT> > : public Columns<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^struct Size< TDVecTSMatMultExpr<VT,MT> > : public Columns<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^struct Size< TSMatDVecMultExpr<MT,VT> > : public Rows<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^struct Size< TSMatSVecMultExpr<MT,VT> > : public Rows<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^struct Size< TSVecSMatMultExpr<VT,MT> > : public Columns<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^struct Size< TSVecTDMatMultExpr<VT,MT> > : public Columns<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^struct Size< TSVecTSMatMultExpr<VT,MT> > : public Columns<MT>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/typetraits/Size.h	/^struct Size : public SizeT<0UL>$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/typetraits/Size.h	/^struct Size< const T > : public SizeT< Size<T>::value >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/typetraits/Size.h	/^struct Size< const volatile T > : public SizeT< Size<T>::value >$/;"	s	namespace:blaze
Size	amun/3rd_party/blaze/math/typetraits/Size.h	/^struct Size< volatile T > : public SizeT< Size<T>::value >$/;"	s	namespace:blaze
SizeT	amun/3rd_party/blaze/util/mpl/SizeT.h	/^struct SizeT : public IntegralConstant<size_t,N>$/;"	s	namespace:blaze
SizeType	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef std::size_t     SizeType;         \/\/!< Size type of the aligned allocator.$/;"	t	class:blaze::AlignedAllocator
SizeType	amun/3rd_party/blaze/util/InputString.h	/^   typedef std::string::size_type SizeType;  \/\/!< Size type of the InputString.$/;"	t	class:blaze::InputString
SizeType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef size_t                SizeType;            \/\/!< Size type of the pointer vector.$/;"	t	class:blaze::PtrVector
SizeType	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^   typedef Tasks::size_type  SizeType;  \/\/!< Size type of the task queue.$/;"	t	class:blaze::threadpool::TaskQueue
Slice	amun/fpga/matrix_functions.cpp	/^Matrix& Slice(Matrix& Out,$/;"	f	namespace:amunmt::FPGA::mblas
SlowGRU	amun/fpga/gru.h	/^  SlowGRU(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::SlowGRU
SlowGRU	amun/fpga/gru.h	/^class SlowGRU {$/;"	c	namespace:amunmt::FPGA
SlowGRU	amun/gpu/dl4mt/gru.h	/^    SlowGRU(const Weights& model)$/;"	f	class:amunmt::GPU::SlowGRU
SlowGRU	amun/gpu/dl4mt/gru.h	/^class SlowGRU: public Cell {$/;"	c	namespace:amunmt::GPU
SlowLSTM	amun/gpu/dl4mt/lstm.h	/^    SlowLSTM(const Weights& model)$/;"	f	class:amunmt::GPU::SlowLSTM
SlowLSTM	amun/gpu/dl4mt/lstm.h	/^class SlowLSTM: public Cell {$/;"	c	namespace:amunmt::GPU
Softmax	amun/cpu/dl4mt/decoder.h	/^        Softmax(const Weights& model)$/;"	f	class:amunmt::CPU::dl4mt::Decoder::Softmax
Softmax	amun/cpu/dl4mt/decoder.h	/^    class Softmax {$/;"	c	class:amunmt::CPU::dl4mt::Decoder
Softmax	amun/cpu/mblas/tensor.h	/^void Softmax(MT& Out) {$/;"	f	namespace:amunmt::CPU::mblas
Softmax	amun/cpu/nematus/decoder.h	/^        Softmax(const Weights& model)$/;"	f	class:amunmt::CPU::Nematus::Decoder::Softmax
Softmax	amun/cpu/nematus/decoder.h	/^    class Softmax {$/;"	c	class:amunmt::CPU::Nematus::Decoder
Softmax	amun/fpga/decoder.h	/^    Softmax(const OpenCLInfo &openCLInfo, const Weights& model)$/;"	f	class:amunmt::FPGA::Decoder::Softmax
Softmax	amun/fpga/decoder.h	/^  class Softmax {$/;"	c	class:amunmt::FPGA::Decoder
Softmax	amun/fpga/matrix_functions.cpp	/^Matrix& Softmax(Matrix& Out, const Array<int>& batchIds, const Array<int>& srcMapping,size_t srcSize)$/;"	f	namespace:amunmt::FPGA::mblas
Softmax	amun/gpu/dl4mt/decoder.h	/^        Softmax(const Weights& model)$/;"	f	class:amunmt::GPU::Decoder::Softmax
Softmax	amun/gpu/dl4mt/decoder.h	/^    class Softmax {$/;"	c	class:amunmt::GPU::Decoder
SortByLength	amun/common/sentences.cpp	/^void Sentences::SortByLength() {$/;"	f	class:amunmt::Sentences
SortByLineNum	amun/common/histories.cpp	/^void Histories::SortByLineNum()$/;"	f	class:amunmt::Histories
SourceContext_	amun/cpu/decoder/encoder_decoder.h	/^    mblas::Tensor SourceContext_;$/;"	m	class:amunmt::CPU::CPUEncoderDecoderBase
SourceContext_	amun/gpu/decoder/encoder_decoder.h	/^    std::unique_ptr<mblas::Tensor> SourceContext_;$/;"	m	class:amunmt::GPU::EncoderDecoder
SourceIndependentScorer	amun/common/scorer.h	/^    SourceIndependentScorer(const God &god, const std::string& name,$/;"	f	class:amunmt::SourceIndependentScorer
SourceIndependentScorer	amun/common/scorer.h	/^class SourceIndependentScorer : public Scorer {$/;"	c	namespace:amunmt
Space	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Space() {$/;"	f	namespace:YAML::Exp
SpaceOrIndentTo	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::SpaceOrIndentTo(bool requireSpace, std::size_t indent) {$/;"	f	class:YAML::Emitter
SparseElement	amun/3rd_party/blaze/math/sparse/SparseElement.h	/^struct SparseElement$/;"	s	namespace:blaze
SparseMatrix	amun/3rd_party/blaze/math/expressions/SparseMatrix.h	/^struct SparseMatrix : public Matrix<MT,SO>$/;"	s	namespace:blaze
SparseMatrixProxy	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^class SparseMatrixProxy : public SparseMatrix< PT, IsColumnMajorMatrix<MT>::value >$/;"	c	namespace:blaze
SparseVector	amun/3rd_party/blaze/math/expressions/SparseVector.h	/^struct SparseVector : public Vector<VT,TF>$/;"	s	namespace:blaze
SparseVectorProxy	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^class SparseVectorProxy : public SparseVector< PT, IsRowVector<VT>::value >$/;"	c	namespace:blaze
Split	amun/3rd_party/extract_lex/utils.cpp	/^void Split(const std::string& line, std::vector<std::string>& pieces, const std::string del) {$/;"	f
Split	amun/common/utils.cpp	/^void Split(const std::string& line, std::vector<std::string>& pieces, const std::string del) {$/;"	f	namespace:amunmt
SplitWordIntoLetters	amun/common/processor/bpe.cpp	/^std::vector<std::string> BPE::SplitWordIntoLetters(const std::string& word) const {$/;"	f	class:amunmt::BPE
Sqrt	amun/3rd_party/blaze/math/functors/Sqrt.h	/^struct Sqrt$/;"	s	namespace:blaze
SrcTrgMap	amun/gpu/decoder/ape_penalty.h	/^typedef std::vector<Word> SrcTrgMap;$/;"	t	namespace:GPU
StartStream	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::StartStream() {$/;"	f	class:YAML::Scanner
StartedDoc	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedDoc() {$/;"	f	class:YAML::EmitterState
StartedGroup	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedGroup(GroupType::value type) {$/;"	f	class:YAML::EmitterState
StartedNode	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedNode() {$/;"	f	class:YAML::EmitterState
StartedScalar	amun/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::StartedScalar() { m_pState->StartedScalar(); }$/;"	f	class:YAML::Emitter
StartedScalar	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedScalar() {$/;"	f	class:YAML::EmitterState
State	amun/3rd_party/yaml-cpp/emitfromevents.h	/^  struct State {$/;"	s	class:YAML::EmitFromEvents
State	amun/common/scorer.h	/^	State() {}$/;"	f	class:amunmt::State
State	amun/common/scorer.h	/^class State {$/;"	c	namespace:amunmt
StatePtr	amun/common/scorer.h	/^typedef std::shared_ptr<State> StatePtr;$/;"	t	namespace:amunmt
State_	amun/cpu/dl4mt/encoder.h	/^        mblas::Tensor State_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder::RNN
State_	amun/cpu/nematus/encoder.h	/^        mblas::Tensor State_;$/;"	m	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
State_	amun/fpga/encoder.h	/^      mblas::Tensor State_;$/;"	m	class:amunmt::FPGA::Encoder::RNN
State_	amun/gpu/dl4mt/encoder.h	/^        CellState State_;$/;"	m	class:amunmt::GPU::Encoder::RNN
States	amun/common/scorer.h	/^typedef std::vector<StatePtr> States;$/;"	t	namespace:amunmt
StaticMatrix	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^class StaticMatrix : public DenseMatrix< StaticMatrix<Type,M,N,SO>, SO >$/;"	c	namespace:blaze
StaticVector	amun/3rd_party/blaze/math/dense/StaticVector.h	/^class StaticVector : public DenseVector< StaticVector<Type,N,TF>, TF >$/;"	c	namespace:blaze
StorageOrder	amun/3rd_party/blaze/math/typetraits/StorageOrder.h	/^struct StorageOrder : public BoolConstant< ( IsRowMajorMatrix<T>::value ? rowMajor : columnMajor ) >$/;"	s	namespace:blaze
Str	amun/3rd_party/yaml-cpp/exp.cpp	/^std::string Str(unsigned ch) { return std::string(1, static_cast<char>(ch)); }$/;"	f	namespace:YAML::Exp
Str2Id	amun/common/vocab.h	/^    typedef std::map<std::string, unsigned> Str2Id;$/;"	t	class:amunmt::Vocab
StrFormatSpec	amun/3rd_party/spdlog/details/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	amun/3rd_party/spdlog/details/format.h	/^class StrFormatSpec: public AlignSpec$/;"	c	namespace:fmt
StrFormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class StrFormatSpec: public AlignSpec$/;"	c	namespace:fmt
Stream	amun/3rd_party/yaml-cpp/stream.cpp	/^Stream::Stream(std::istream& input)$/;"	f	class:YAML::Stream
Stream	amun/3rd_party/yaml-cpp/stream.h	/^class Stream : private noncopyable {$/;"	c	namespace:YAML
StreamCharSource	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  StreamCharSource(const Stream& stream) : m_offset(0), m_stream(stream) {}$/;"	f	class:YAML::StreamCharSource
StreamCharSource	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  StreamCharSource(const StreamCharSource& source)$/;"	f	class:YAML::StreamCharSource
StreamCharSource	amun/3rd_party/yaml-cpp/streamcharsource.h	/^class StreamCharSource {$/;"	c	namespace:YAML
StreamInUtf16	amun/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf16() const {$/;"	f	class:YAML::Stream
StreamInUtf32	amun/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf32() const {$/;"	f	class:YAML::Stream
StreamInUtf8	amun/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf8() const {$/;"	f	class:YAML::Stream
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/BaseTemplate.h	/^class StrictlyLowerMatrix$/;"	c	namespace:blaze
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^class StrictlyLowerMatrix<MT,SO,true>$/;"	c	namespace:blaze
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( const A1& a1 )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( const StrictlyLowerMatrix& m )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix( size_t n, const Other* array )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline StrictlyLowerMatrix<MT,SO,true>::StrictlyLowerMatrix()$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^class StrictlyLowerMatrix<MT,SO,false>$/;"	c	namespace:blaze
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix( const StrictlyLowerMatrix& m )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix( size_t n )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerMatrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline StrictlyLowerMatrix<MT,SO,false>::StrictlyLowerMatrix()$/;"	f	class:blaze::StrictlyLowerMatrix
StrictlyLowerProxy	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^class StrictlyLowerProxy : public Proxy< StrictlyLowerProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
StrictlyLowerProxy	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline StrictlyLowerProxy<MT>::StrictlyLowerProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::StrictlyLowerProxy
StrictlyLowerProxy	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline StrictlyLowerProxy<MT>::StrictlyLowerProxy( const StrictlyLowerProxy& slp )$/;"	f	class:blaze::StrictlyLowerProxy
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/BaseTemplate.h	/^class StrictlyUpperMatrix$/;"	c	namespace:blaze
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^class StrictlyUpperMatrix<MT,SO,true>$/;"	c	namespace:blaze
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( const A1& a1 )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( const StrictlyUpperMatrix& m )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix( size_t n, const Other* array )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline StrictlyUpperMatrix<MT,SO,true>::StrictlyUpperMatrix()$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^class StrictlyUpperMatrix<MT,SO,false>$/;"	c	namespace:blaze
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix( const StrictlyUpperMatrix& m )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix( size_t n )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperMatrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline StrictlyUpperMatrix<MT,SO,false>::StrictlyUpperMatrix()$/;"	f	class:blaze::StrictlyUpperMatrix
StrictlyUpperProxy	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^class StrictlyUpperProxy : public Proxy< StrictlyUpperProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
StrictlyUpperProxy	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline StrictlyUpperProxy<MT>::StrictlyUpperProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::StrictlyUpperProxy
StrictlyUpperProxy	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline StrictlyUpperProxy<MT>::StrictlyUpperProxy( const StrictlyUpperProxy& uup )$/;"	f	class:blaze::StrictlyUpperProxy
StringCharSource	amun/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource(const char* str, std::size_t size)$/;"	f	class:YAML::StringCharSource
StringCharSource	amun/3rd_party/yaml-cpp/stringsource.h	/^class StringCharSource {$/;"	c	namespace:YAML
StringFormat	amun/3rd_party/yaml-cpp/emitterutils.h	/^struct StringFormat {$/;"	s	namespace:YAML
StringRef	amun/3rd_party/spdlog/details/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt
StringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt
StringValue	amun/3rd_party/spdlog/details/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
StringValue	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
Style	amun/3rd_party/yaml-cpp/node/impl.h	/^inline EmitterStyle::value Node::Style() const {$/;"	f	class:YAML::Node
SubAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      explicit inline SubAssigner( Target& target, const Source& source )$/;"	f	struct:blaze::ThreadBackend::SubAssigner
SubAssigner	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   struct SubAssigner$/;"	s	class:blaze::ThreadBackend
SubExpr	amun/3rd_party/blaze/math/expressions/SubExpr.h	/^struct SubExpr : private Expression$/;"	s	namespace:blaze
SubExprTrait	amun/3rd_party/blaze/math/traits/SubExprTrait.h	/^struct SubExprTrait$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DiagonalMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, DiagonalMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, DiagonalMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, HermitianMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, LowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, StrictlyLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, StrictlyUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< StrictlyUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, SymmetricMatrix<MT,SO2,DF,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT,SO1,DF,NF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT,SO1,DF,NF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT,SO1,DF,NF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT,SO1,DF,NF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT,SO1,DF,NF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF1>, SymmetricMatrix<MT2,SO2,DF2,NF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, UniLowerMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, UniUpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UniUpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, UniUpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< CompressedMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< CustomMatrix<T,AF,PF,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< DynamicMatrix<T,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< HermitianMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< HybridMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< LowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< StaticMatrix<T,M,N,SO1>, UpperMatrix<MT,SO2,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< StrictlyLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< SymmetricMatrix<MT1,SO1,DF1,NF>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UniLowerMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT,SO1,DF>, CompressedMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT,SO1,DF>, CustomMatrix<T,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT,SO1,DF>, DynamicMatrix<T,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT,SO1,DF>, HybridMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT,SO1,DF>, StaticMatrix<T,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, HermitianMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, LowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, StrictlyLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, SymmetricMatrix<MT2,SO2,DF2,NF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, UniLowerMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubTrait< UpperMatrix<MT1,SO1,DF1>, UpperMatrix<MT2,SO2,DF2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO1>, CustomMatrix<T2,AF,PF,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO1>, DynamicMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO1>, HybridMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO1>, StaticMatrix<T2,M,N,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO>, CustomMatrix<T2,AF,PF,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO>, DynamicMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO>, HybridMatrix<T2,M,N,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CompressedMatrix<T1,SO>, StaticMatrix<T2,M,N,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CustomMatrix<T1,AF,PF,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< CustomMatrix<T1,AF,PF,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< DynamicMatrix<T1,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< DynamicMatrix<T1,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< HybridMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< HybridMatrix<T1,M,N,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< StaticMatrix<T1,M,N,SO1>, CompressedMatrix<T2,SO2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubTrait< StaticMatrix<T1,M,N,SO>, CompressedMatrix<T2,SO> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CompressedVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CompressedVector<T1,TF>, CustomVector<T2,AF,PF,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CompressedVector<T1,TF>, DynamicVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CompressedVector<T1,TF>, HybridVector<T2,N,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CompressedVector<T1,TF>, StaticVector<T2,N,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< CustomVector<T1,AF,PF,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< DynamicVector<T1,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< HybridVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubTrait< StaticVector<T1,N,TF>, CompressedVector<T2,TF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/traits/SubTrait.h	/^struct SubTrait$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/traits/SubTrait.h	/^struct SubTrait< T1, complex<T2>, EnableIf_< IsBuiltin<T1> > >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/traits/SubTrait.h	/^struct SubTrait< complex<T1>, T2, EnableIf_< IsBuiltin<T2> > >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/traits/SubTrait.h	/^struct SubTrait< complex<T1>, complex<T2> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct SubTrait< Column<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct SubTrait< T, Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct SubTrait< Row<MT,SO,DF,SF>, T >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct SubTrait< T, Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubTrait< Submatrix<MT,AF,SO,DF>, T >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubTrait< T, Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubTrait< Subvector<VT,AF,TF,DF>, T >$/;"	s	namespace:blaze
SubTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubTrait< T, Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
SubType	amun/3rd_party/blaze/math/traits/SubTrait.h	/^   struct SubType { using Type = decltype( std::declval<Type1>() - std::declval<Type2>() ); };$/;"	s	struct:blaze::SubTrait
Submatrix	amun/3rd_party/blaze/math/views/submatrix/BaseTemplate.h	/^class Submatrix$/;"	c	namespace:blaze
Submatrix	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^class Submatrix<MT,unaligned,false,true>$/;"	c	namespace:blaze
Submatrix	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^class Submatrix<MT,AF,false,false>$/;"	c	namespace:blaze
Submatrix	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^class Submatrix<MT,AF,true,false>$/;"	c	namespace:blaze
Submatrix	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,false,false>::Submatrix( Operand matrix, size_t rindex, size_t cindex, size_t m, size_t n )$/;"	f	class:blaze::Submatrix
Submatrix	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,true,false>::Submatrix( Operand matrix, size_t rindex, size_t cindex, size_t m, size_t n )$/;"	f	class:blaze::Submatrix
SubmatrixElement	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline SubmatrixElement( IteratorType pos, size_t offset )$/;"	f	class:blaze::Submatrix::SubmatrixElement
SubmatrixElement	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   class SubmatrixElement : private SparseElement$/;"	c	class:blaze::Submatrix
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^struct SubmatrixExprTrait< DMatDMatAddExpr<MT1,MT2,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^struct SubmatrixExprTrait< DMatDMatSubExpr<MT1,MT2,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct SubmatrixExprTrait< DMatEvalExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct SubmatrixExprTrait< DMatForEachExpr<MT,OP,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct SubmatrixExprTrait< DMatSMatAddExpr<MT1,MT2,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct SubmatrixExprTrait< DMatSMatSubExpr<MT1,MT2,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct SubmatrixExprTrait< DMatScalarDivExpr<MT,ST,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct SubmatrixExprTrait< DMatScalarMultExpr<MT,ST,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct SubmatrixExprTrait< DMatSerialExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^struct SubmatrixExprTrait< DMatTDMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^struct SubmatrixExprTrait< DMatTDMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^struct SubmatrixExprTrait< DMatTSMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct SubmatrixExprTrait< DMatTSMatMultExpr<MT1,MT2>, AF >$/;"	s
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^struct SubmatrixExprTrait< DMatTSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct SubmatrixExprTrait< DMatTransExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct SubmatrixExprTrait< SMatDMatSubExpr<MT1,MT2,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct SubmatrixExprTrait< SMatEvalExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct SubmatrixExprTrait< SMatForEachExpr<MT,OP,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^struct SubmatrixExprTrait< SMatSMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct SubmatrixExprTrait< SMatSMatMultExpr<MT1,MT2>, AF >$/;"	s
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^struct SubmatrixExprTrait< SMatSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct SubmatrixExprTrait< SMatScalarDivExpr<MT,ST,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct SubmatrixExprTrait< SMatScalarMultExpr<MT,ST,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct SubmatrixExprTrait< SMatSerialExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct SubmatrixExprTrait< SMatTDMatMultExpr<MT1,MT2>, AF >$/;"	s
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^struct SubmatrixExprTrait< SMatTDMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^struct SubmatrixExprTrait< SMatTSMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct SubmatrixExprTrait< SMatTSMatMultExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^struct SubmatrixExprTrait< SMatTSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct SubmatrixExprTrait< SMatTransExpr<MT,SO>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^struct SubmatrixExprTrait< SVecTSVecMultExpr<VT1,VT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^struct SubmatrixExprTrait< TDMatSMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^struct SubmatrixExprTrait< TDMatSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^struct SubmatrixExprTrait< TSMatDMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct SubmatrixExprTrait< TSMatSMatMultExpr<MT1,MT2>, AF >$/;"	s
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^struct SubmatrixExprTrait< TSMatSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^struct SubmatrixExprTrait< TSMatTSMatAddExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct SubmatrixExprTrait< TSMatTSMatMultExpr<MT1,MT2>, AF >$/;"	s
SubmatrixExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^struct SubmatrixExprTrait< TSMatTSMatSubExpr<MT1,MT2>, AF >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/traits/SubmatrixExprTrait.h	/^struct SubmatrixExprTrait$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubmatrixExprTrait< Submatrix<MT,AF1,SO,DF>, AF2 >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubmatrixExprTrait< const Submatrix<MT,AF1,SO,DF>, AF2 >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubmatrixExprTrait< const volatile Submatrix<MT,AF1,SO,DF>, AF2 >$/;"	s	namespace:blaze
SubmatrixExprTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubmatrixExprTrait< volatile Submatrix<MT,AF1,SO,DF>, AF2 >$/;"	s	namespace:blaze
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator( IteratorType iterator, bool isMemoryAligned )$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator( const SubmatrixIterator<IteratorType2>& it )$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator()$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   class SubmatrixIterator$/;"	c	class:blaze::Submatrix
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline SubmatrixIterator( IteratorType iterator, size_t index )$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline SubmatrixIterator( const SubmatrixIterator<MatrixType2,IteratorType2>& it )$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline SubmatrixIterator()$/;"	f	class:blaze::Submatrix::SubmatrixIterator
SubmatrixIterator	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   class SubmatrixIterator$/;"	c	class:blaze::Submatrix
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^struct SubmatrixTrait< DiagonalMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^struct SubmatrixTrait< HermitianMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^struct SubmatrixTrait< LowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^struct SubmatrixTrait< StrictlyLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^struct SubmatrixTrait< StrictlyUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^struct SubmatrixTrait< SymmetricMatrix<MT,SO,DF,NF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^struct SubmatrixTrait< UniLowerMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^struct SubmatrixTrait< UniUpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^struct SubmatrixTrait< UpperMatrix<MT,SO,DF> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^struct SubmatrixTrait< DMatTransposer<MT,SO> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^struct SubmatrixTrait< SMatTransposer<MT,SO> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^struct SubmatrixTrait< CompressedMatrix<T1,SO> >$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/traits/SubmatrixTrait.h	/^struct SubmatrixTrait$/;"	s	namespace:blaze
SubmatrixTrait	amun/3rd_party/blaze/math/views/Submatrix.h	/^struct SubmatrixTrait< Submatrix<MT,AF,SO,DF> >$/;"	s	namespace:blaze
Subvector	amun/3rd_party/blaze/math/views/subvector/BaseTemplate.h	/^class Subvector$/;"	c	namespace:blaze
Subvector	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^class Subvector<VT,unaligned,TF,true>$/;"	c	namespace:blaze
Subvector	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^class Subvector<VT,AF,TF,false>$/;"	c	namespace:blaze
Subvector	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline Subvector<VT,AF,TF,false>::Subvector( Operand vector, size_t index, size_t n )$/;"	f	class:blaze::Subvector
SubvectorElement	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline SubvectorElement( IteratorType pos, size_t offset )$/;"	f	class:blaze::Subvector::SubvectorElement
SubvectorElement	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   class SubvectorElement : private SparseElement$/;"	c	class:blaze::Subvector
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^struct SubvectorExprTrait< DMatSVecMultExpr<MT,VT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^struct SubvectorExprTrait< DVecDVecAddExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^struct SubvectorExprTrait< DVecDVecDivExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^struct SubvectorExprTrait< DVecDVecMultExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^struct SubvectorExprTrait< DVecDVecSubExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^struct SubvectorExprTrait< DVecEvalExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct SubvectorExprTrait< DVecForEachExpr<VT,OP,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct SubvectorExprTrait< DVecSVecAddExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^struct SubvectorExprTrait< DVecSVecMultExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct SubvectorExprTrait< DVecSVecSubExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct SubvectorExprTrait< DVecScalarDivExpr<VT,ST,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct SubvectorExprTrait< DVecScalarMultExpr<VT,ST,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^struct SubvectorExprTrait< DVecSerialExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct SubvectorExprTrait< DVecTransExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^struct SubvectorExprTrait< SMatDVecMultExpr<MT,VT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^struct SubvectorExprTrait< SMatSVecMultExpr<MT,VT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^struct SubvectorExprTrait< SVecDVecDivExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^struct SubvectorExprTrait< SVecDVecMultExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct SubvectorExprTrait< SVecDVecSubExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^struct SubvectorExprTrait< SVecEvalExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct SubvectorExprTrait< SVecForEachExpr<VT,OP,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^struct SubvectorExprTrait< SVecSVecAddExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^struct SubvectorExprTrait< SVecSVecMultExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^struct SubvectorExprTrait< SVecSVecSubExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^struct SubvectorExprTrait< SVecScalarDivExpr<VT,ST,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct SubvectorExprTrait< SVecScalarMultExpr<VT,ST,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^struct SubvectorExprTrait< SVecSerialExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^struct SubvectorExprTrait< SVecTransExpr<VT,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^struct SubvectorExprTrait< TDVecSMatMultExpr<VT,MT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^struct SubvectorExprTrait< TDVecTSMatMultExpr<VT,MT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^struct SubvectorExprTrait< TSMatDVecMultExpr<MT,VT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^struct SubvectorExprTrait< TSMatSVecMultExpr<MT,VT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^struct SubvectorExprTrait< TSVecSMatMultExpr<VT,MT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^struct SubvectorExprTrait< TSVecTDMatMultExpr<VT,MT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^struct SubvectorExprTrait< TSVecTSMatMultExpr<VT,MT>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/traits/SubvectorExprTrait.h	/^struct SubvectorExprTrait$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< DVecDVecCrossExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< DVecSVecCrossExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< SVecDVecCrossExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< SVecSVecCrossExpr<VT1,VT2,TF>, AF >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< Subvector<VT,AF1,TF,DF>, AF2 >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< const Subvector<VT,AF1,TF,DF>, AF2 >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< const volatile Subvector<VT,AF1,TF,DF>, AF2 >$/;"	s	namespace:blaze
SubvectorExprTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorExprTrait< volatile Subvector<VT,AF1,TF,DF>, AF2 >$/;"	s	namespace:blaze
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator( IteratorType iterator, bool isMemoryAligned )$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator( const SubvectorIterator<IteratorType2>& it )$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator()$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   class SubvectorIterator$/;"	c	class:blaze::Subvector
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline SubvectorIterator( IteratorType iterator, size_t index )$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline SubvectorIterator( const SubvectorIterator<VectorType2,IteratorType2>& it )$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline SubvectorIterator()$/;"	f	class:blaze::Subvector::SubvectorIterator
SubvectorIterator	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   class SubvectorIterator$/;"	c	class:blaze::Subvector
SubvectorTrait	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^struct SubvectorTrait< DVecTransposer<VT,TF> >$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^struct SubvectorTrait< SVecTransposer<VT,TF> >$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^struct SubvectorTrait< CompressedVector<T1,TF> >$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/traits/SubvectorTrait.h	/^struct SubvectorTrait$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/views/Column.h	/^struct SubvectorTrait< Column<MT,SO,DF,SF> >$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/views/Row.h	/^struct SubvectorTrait< Row<MT,SO,DF,SF> >$/;"	s	namespace:blaze
SubvectorTrait	amun/3rd_party/blaze/math/views/Subvector.h	/^struct SubvectorTrait< Subvector<VT,AF,TF,DF> >$/;"	s	namespace:blaze
SumFloat	amun/fpga/matrix_functions.cpp	/^float SumFloat($/;"	f	namespace:amunmt::FPGA::mblas
SumUInt	amun/fpga/matrix_functions.cpp	/^uint SumUInt($/;"	f	namespace:amunmt::FPGA::mblas
Summary	amun/3rd_party/fast_align/src/atools.cc	/^  virtual void Summary() { assert(!"Summary should have been overridden"); }$/;"	f	struct:Command
Summary	amun/3rd_party/fast_align/src/atools.cc	/^  void Summary() {$/;"	f	struct:FMeasureCommand
Sums_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor Sums_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
Supported	amun/3rd_party/spdlog/details/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	amun/3rd_party/spdlog/details/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper
Swap	amun/fpga/array.h	/^  void Swap(Array &other)$/;"	f	class:amunmt::FPGA::Array
Swap	amun/fpga/matrix.cpp	/^void Matrix::Swap(Matrix &other)$/;"	f	class:amunmt::FPGA::mblas::Matrix
SymmetricElement	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^class SymmetricElement : private SparseElement$/;"	c	namespace:blaze
SymmetricElement	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>::SymmetricElement( IteratorType pos, MT* matrix, size_t idx )$/;"	f	class:blaze::SymmetricElement
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/BaseTemplate.h	/^class SymmetricMatrix$/;"	c	namespace:blaze
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^class SymmetricMatrix<MT,SO,true,false>$/;"	c	namespace:blaze
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( const Matrix<MT2,!SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( const Matrix<MT2,SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( const SymmetricMatrix& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix( size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>::SymmetricMatrix()$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^class SymmetricMatrix<MT,SO,true,true>$/;"	c	namespace:blaze
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( const Matrix<MT2,!SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( const Matrix<MT2,SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( const SymmetricMatrix& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix( size_t n, const Other* array )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>::SymmetricMatrix()$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^class SymmetricMatrix<MT,SO,false,false>$/;"	c	namespace:blaze
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( const Matrix<MT2,!SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( const Matrix<MT2,SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( const SymmetricMatrix& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>::SymmetricMatrix()$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^class SymmetricMatrix<MT,SO,false,true>$/;"	c	namespace:blaze
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( const Matrix<MT2,!SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( const Matrix<MT2,SO>& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( const SymmetricMatrix& m )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( size_t n )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
SymmetricMatrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>::SymmetricMatrix()$/;"	f	class:blaze::SymmetricMatrix
SymmetricValue	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^class SymmetricValue : public Proxy< SymmetricValue<MT> >$/;"	c	namespace:blaze
SymmetricValue	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>::SymmetricValue( IteratorType pos, MT* matrix, size_t index )$/;"	f	class:blaze::SymmetricValue
SystemClock	amun/3rd_party/blaze/util/SystemClock.h	/^class SystemClock : private Singleton<SystemClock>$/;"	c	namespace:blaze
SystemClockID	amun/3rd_party/blaze/util/SystemClockID.h	/^typedef std::shared_ptr<SystemClock>  SystemClockID;$/;"	t	namespace:blaze
SystemError	amun/3rd_party/spdlog/details/format.h	/^    SystemError()$/;"	f	class:SystemError
SystemError	amun/3rd_party/spdlog/details/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	amun/3rd_party/spdlog/details/format.h	/^class SystemError: public internal::RuntimeError$/;"	c
SystemError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SystemError()$/;"	f	class:SystemError
SystemError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class SystemError: public internal::RuntimeError$/;"	c
T1_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor T1_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
T1_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor T1_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
T1_	amun/fpga/decoder.h	/^    mblas::Tensor T1_;$/;"	m	class:amunmt::FPGA::Decoder::Softmax
T1_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor T1_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
T2	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::DMatDMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::DMatDMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::DMatSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::DMatSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      enum : bool { value = !UseOptimizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::DMatTSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::DMatTSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^                            !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:blaze::UseOptimizedKernel	typeref:enum:blaze::UseOptimizedKernel::
T2	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:UseDefaultKernel	typeref:enum:UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::SMatSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::SMatSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^                            CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::SMatTDMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::SMatTDMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::TDMatSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TDMatSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      enum : bool { value = !UseOptimizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:UseDefaultKernel	typeref:enum:UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:blaze::UseOptimizedKernel	typeref:enum:blaze::UseOptimizedKernel::
T2	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^                            CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::TDMatTDMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TDMatTDMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^                            !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:blaze::UseOptimizedKernel	typeref:enum:blaze::UseOptimizedKernel::
T2	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:UseDefaultKernel	typeref:enum:UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::TSMatDMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TSMatDMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      enum : bool { value = !UseOptimizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T2>::value };$/;"	m	struct:blaze::TSMatSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TSMatSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::TSMatTDMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TSMatTDMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      enum : bool { value = !UseOptimizedKernel<T1,T2,T3>::value };$/;"	m	struct:blaze::UseDefaultKernel	typeref:enum:blaze::UseDefaultKernel::
T2	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^                            !CanExploitSymmetry<T1,T2,T3>::value };$/;"	m	struct:blaze::TSMatTSMatMultExpr::IsEvaluationRequired	typeref:enum:blaze::TSMatTSMatMultExpr::IsEvaluationRequired::
T2	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^                            !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:blaze::UseOptimizedKernel	typeref:enum:blaze::UseOptimizedKernel::
T2	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^      enum : bool { value = !UseVectorizedKernel<T1,T2,T3>::value &&$/;"	m	struct:UseDefaultKernel	typeref:enum:UseDefaultKernel::
T2	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^   typedef typename If_< IsComplex<T>, Complex<T>, Builtin<T> >::Type  T2;$/;"	t	struct:blaze::IsVectorizableHelper
T2_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor T2_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
T2_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor T2_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
T2_	amun/fpga/decoder.h	/^    mblas::Tensor T2_;$/;"	m	class:amunmt::FPGA::Decoder::Softmax
T2_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor T2_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
T3_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor T3_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
T3_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor T3_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
T3_	amun/fpga/decoder.h	/^    mblas::Tensor T3_;$/;"	m	class:amunmt::FPGA::Decoder::Softmax
T3_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor T3_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
TAB_IN_INDENTATION	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAB_IN_INDENTATION =$/;"	m	namespace:YAML::ErrorMsg
TAG	amun/3rd_party/yaml-cpp/token.h	/^    TAG,$/;"	e	enum:YAML::Token::TYPE
TAG_DIRECTIVE_ARGS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAG_DIRECTIVE_ARGS =$/;"	m	namespace:YAML::ErrorMsg
TAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/tag.h	2;"	d
TAG_WITH_NO_SUFFIX	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAG_WITH_NO_SUFFIX = "tag handle with no suffix";$/;"	m	namespace:YAML::ErrorMsg
TDMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? TDMATDMATMULT_DEBUG_THRESHOLD  : TDMATDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
TDMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDMATDMATMULT_USER_THRESHOLD = 10000UL;$/;"	m	namespace:blaze
TDMATDVECMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATDVECMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDMATDVECMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATDVECMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? TDMATDVECMULT_DEBUG_THRESHOLD  : TDMATDVECMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
TDMATDVECMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDMATDVECMULT_USER_THRESHOLD = 62500UL;$/;"	m	namespace:blaze
TDMATSMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATSMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDMATSMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATSMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? TDMATSMATMULT_DEBUG_THRESHOLD  : TDMATSMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
TDMATSMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDMATSMATMULT_USER_THRESHOLD = 2500UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEBUG_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEBUG_IBLOCK_SIZE = 64UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEBUG_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEBUG_JBLOCK_SIZE =  8UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEBUG_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEBUG_KBLOCK_SIZE =  8UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATTDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEFAULT_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEFAULT_IBLOCK_SIZE = 128UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEFAULT_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEFAULT_JBLOCK_SIZE =  64UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_DEFAULT_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_DEFAULT_KBLOCK_SIZE = 128UL;$/;"	m	namespace:blaze
TDMATTDMATMULT_IBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_IBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? TDMATTDMATMULT_DEBUG_IBLOCK_SIZE : TDMATTDMATMULT_DEFAULT_IBLOCK_SIZE );$/;"	m	namespace:blaze
TDMATTDMATMULT_JBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_JBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? TDMATTDMATMULT_DEBUG_JBLOCK_SIZE : TDMATTDMATMULT_DEFAULT_JBLOCK_SIZE );$/;"	m	namespace:blaze
TDMATTDMATMULT_KBLOCK_SIZE	amun/3rd_party/blaze/system/Blocking.h	/^constexpr size_t TDMATTDMATMULT_KBLOCK_SIZE = ( BLAZE_DEBUG_MODE ? TDMATTDMATMULT_DEBUG_KBLOCK_SIZE : TDMATTDMATMULT_DEFAULT_KBLOCK_SIZE );$/;"	m	namespace:blaze
TDMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDMATTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? TDMATTDMATMULT_DEBUG_THRESHOLD : TDMATTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
TDMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDMATTDMATMULT_USER_THRESHOLD = 10000UL;$/;"	m	namespace:blaze
TDMatCTransExprTrait	amun/3rd_party/blaze/math/traits/TDMatCTransExprTrait.h	/^struct TDMatCTransExprTrait$/;"	s	namespace:blaze
TDMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct TDMatDMatAddExprTrait< DMatSMatAddExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct TDMatDMatAddExprTrait< DMatSMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct TDMatDMatAddExprTrait< SMatDMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatAddExprTrait	amun/3rd_party/blaze/math/traits/TDMatDMatAddExprTrait.h	/^struct TDMatDMatAddExprTrait$/;"	s	namespace:blaze
TDMatDMatMultExpr	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^class TDMatDMatMultExpr : public DenseMatrix< TDMatDMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatDMatMultExprTrait< DMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TDMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatDMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,true>, DMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
TDMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
TDMatDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatDMatMultExprTrait.h	/^struct TDMatDMatMultExprTrait$/;"	s	namespace:blaze
TDMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct TDMatDMatSubExprTrait< DMatSMatAddExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct TDMatDMatSubExprTrait< DMatSMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct TDMatDMatSubExprTrait< SMatDMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatDMatSubExprTrait	amun/3rd_party/blaze/math/traits/TDMatDMatSubExprTrait.h	/^struct TDMatDMatSubExprTrait$/;"	s	namespace:blaze
TDMatDVecMultExpr	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^class TDMatDVecMultExpr : public DenseVector< TDMatDVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
TDMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatDVecMultExprTrait< DMatScalarMultExpr<MT,ST,true>, VT >$/;"	s	namespace:blaze
TDMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatDVecMultExprTrait< DMatScalarMultExpr<MT,ST1,true>, DVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
TDMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDMatDVecMultExprTrait< MT, DVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
TDMatDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatDVecMultExprTrait.h	/^struct TDMatDVecMultExprTrait$/;"	s	namespace:blaze
TDMatEvalExprTrait	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^struct TDMatEvalExprTrait< DMatEvalExpr<MT,true> >$/;"	s	namespace:blaze
TDMatEvalExprTrait	amun/3rd_party/blaze/math/traits/TDMatEvalExprTrait.h	/^struct TDMatEvalExprTrait$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatForEachExpr<MT,Abs,true>, Abs >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatForEachExpr<MT,Ceil,true>, Ceil >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatForEachExpr<MT,Conj,true>, Conj >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatForEachExpr<MT,Floor,true>, Floor >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatForEachExpr<MT,Real,true>, Real >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^struct TDMatForEachExprTrait< DMatTransExpr< DMatForEachExpr<MT,Conj,false>, true >, Conj >$/;"	s	namespace:blaze
TDMatForEachExprTrait	amun/3rd_party/blaze/math/traits/TDMatForEachExprTrait.h	/^struct TDMatForEachExprTrait$/;"	s	namespace:blaze
TDMatInvExprTrait	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^struct TDMatInvExprTrait< DMatInvExpr<MT,true> >$/;"	s	namespace:blaze
TDMatInvExprTrait	amun/3rd_party/blaze/math/traits/TDMatInvExprTrait.h	/^struct TDMatInvExprTrait$/;"	s	namespace:blaze
TDMatSMatAddExpr	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^class TDMatSMatAddExpr : public DenseMatrix< TDMatSMatAddExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatSMatAddExprTrait	amun/3rd_party/blaze/math/traits/TDMatSMatAddExprTrait.h	/^struct TDMatSMatAddExprTrait$/;"	s	namespace:blaze
TDMatSMatMultExpr	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^class TDMatSMatMultExpr : public DenseMatrix< TDMatSMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatSMatMultExprTrait< DMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TDMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatSMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,true>, SMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
TDMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDMatSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
TDMatSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatSMatMultExprTrait.h	/^struct TDMatSMatMultExprTrait$/;"	s	namespace:blaze
TDMatSMatSubExpr	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^class TDMatSMatSubExpr : public DenseMatrix< TDMatSMatSubExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatSMatSubExprTrait	amun/3rd_party/blaze/math/traits/TDMatSMatSubExprTrait.h	/^struct TDMatSMatSubExprTrait$/;"	s	namespace:blaze
TDMatSVecMultExpr	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^class TDMatSVecMultExpr : public DenseVector< TDMatSVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
TDMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatSVecMultExprTrait< DMatScalarMultExpr<MT,ST,true>, VT >$/;"	s	namespace:blaze
TDMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatSVecMultExprTrait< DMatScalarMultExpr<MT,ST1,true>, SVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
TDMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TDMatSVecMultExprTrait< MT, SVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
TDMatSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatSVecMultExprTrait.h	/^struct TDMatSVecMultExprTrait$/;"	s	namespace:blaze
TDMatScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatScalarDivExprTrait< DMatScalarMultExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDMatScalarDivExprTrait	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	/^struct TDMatScalarDivExprTrait$/;"	s	namespace:blaze
TDMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	/^struct TDMatScalarDivExprTraitHelper$/;"	s	namespace:blaze
TDMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	/^struct TDMatScalarDivExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
TDMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^struct TDMatScalarMultExprTrait< DMatScalarDivExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatScalarMultExprTrait< DMatScalarMultExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDMatScalarMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	/^struct TDMatScalarMultExprTrait$/;"	s	namespace:blaze
TDMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	/^struct TDMatScalarMultExprTraitHelper$/;"	s	namespace:blaze
TDMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	/^struct TDMatScalarMultExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
TDMatSerialExprTrait	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^struct TDMatSerialExprTrait< DMatSerialExpr<MT,true> >$/;"	s	namespace:blaze
TDMatSerialExprTrait	amun/3rd_party/blaze/math/traits/TDMatSerialExprTrait.h	/^struct TDMatSerialExprTrait$/;"	s	namespace:blaze
TDMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct TDMatTDMatAddExprTrait< DMatSMatAddExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct TDMatTDMatAddExprTrait< DMatSMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatAddExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct TDMatTDMatAddExprTrait< SMatDMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatAddExprTrait	amun/3rd_party/blaze/math/traits/TDMatTDMatAddExprTrait.h	/^struct TDMatTDMatAddExprTrait$/;"	s	namespace:blaze
TDMatTDMatMultExpr	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^class TDMatTDMatMultExpr : public DenseMatrix< TDMatTDMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatTDMatMultExprTrait< DMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TDMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatTDMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,true>, DMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
TDMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatTDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
TDMatTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatTDMatMultExprTrait.h	/^struct TDMatTDMatMultExprTrait$/;"	s	namespace:blaze
TDMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^struct TDMatTDMatSubExprTrait< DMatSMatAddExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^struct TDMatTDMatSubExprTrait< DMatSMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatSubExprTrait	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^struct TDMatTDMatSubExprTrait< SMatDMatSubExpr<MT1,MT2,true>, MT3 >$/;"	s	namespace:blaze
TDMatTDMatSubExprTrait	amun/3rd_party/blaze/math/traits/TDMatTDMatSubExprTrait.h	/^struct TDMatTDMatSubExprTrait$/;"	s	namespace:blaze
TDMatTSMatAddExprTrait	amun/3rd_party/blaze/math/traits/TDMatTSMatAddExprTrait.h	/^struct TDMatTSMatAddExprTrait$/;"	s	namespace:blaze
TDMatTSMatMultExpr	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^class TDMatTSMatMultExpr : public DenseMatrix< TDMatTSMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TDMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatTSMatMultExprTrait< DMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TDMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDMatTSMatMultExprTrait< DMatScalarMultExpr<MT1,ST1,true>, SMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
TDMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDMatTSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
TDMatTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDMatTSMatMultExprTrait.h	/^struct TDMatTSMatMultExprTrait$/;"	s	namespace:blaze
TDMatTSMatSubExprTrait	amun/3rd_party/blaze/math/traits/TDMatTSMatSubExprTrait.h	/^struct TDMatTSMatSubExprTrait$/;"	s	namespace:blaze
TDMatTransExprTrait	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^struct TDMatTransExprTrait< DMatTransExpr<MT,true> >$/;"	s	namespace:blaze
TDMatTransExprTrait	amun/3rd_party/blaze/math/traits/TDMatTransExprTrait.h	/^struct TDMatTransExprTrait$/;"	s	namespace:blaze
TDVECDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDVECDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDVECDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDVECDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? TDVECDMATMULT_DEBUG_THRESHOLD  : TDVECDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
TDVECDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDVECDMATMULT_USER_THRESHOLD = 62500UL;$/;"	m	namespace:blaze
TDVECTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDVECTDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TDVECTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TDVECTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? TDVECTDMATMULT_DEBUG_THRESHOLD : TDVECTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
TDVECTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TDVECTDMATMULT_USER_THRESHOLD = 4000000UL;$/;"	m	namespace:blaze
TDVecCTransExprTrait	amun/3rd_party/blaze/math/traits/TDVecCTransExprTrait.h	/^struct TDVecCTransExprTrait$/;"	s	namespace:blaze
TDVecDMatMultExpr	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^class TDVecDMatMultExpr : public DenseVector< TDVecDMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDVecDMatMultExprTrait< DVecScalarMultExpr<VT,ST1,true>, DMatScalarMultExpr<MT,ST2,false> >$/;"	s	namespace:blaze
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDVecDMatMultExprTrait< VT, DMatScalarMultExpr<MT,ST,false> >$/;"	s	namespace:blaze
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct TDVecDMatMultExprTrait< VT, DMatTSMatMultExpr<MT1,MT2> >$/;"	s
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecDMatMultExprTrait< DVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct TDVecDMatMultExprTrait< VT, SMatTDMatMultExpr<MT1,MT2> >$/;"	s
TDVecDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecDMatMultExprTrait.h	/^struct TDVecDMatMultExprTrait$/;"	s	namespace:blaze
TDVecDVecMultExprHelper	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	/^struct TDVecDVecMultExprHelper$/;"	s	namespace:blaze
TDVecDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecDVecMultExprTrait.h	/^struct TDVecDVecMultExprTrait$/;"	s	namespace:blaze
TDVecDVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecDVecMultExprTrait.h	/^struct TDVecDVecMultExprTraitHelper$/;"	s	namespace:blaze
TDVecDVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecDVecMultExprTrait.h	/^struct TDVecDVecMultExprTraitHelper<VT1,VT2,true>$/;"	s	namespace:blaze
TDVecEvalExprTrait	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^struct TDVecEvalExprTrait< DVecEvalExpr<VT,true> >$/;"	s	namespace:blaze
TDVecEvalExprTrait	amun/3rd_party/blaze/math/traits/TDVecEvalExprTrait.h	/^struct TDVecEvalExprTrait$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecForEachExpr<VT,Abs,true>, Abs >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecForEachExpr<VT,Ceil,true>, Ceil >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecForEachExpr<VT,Conj,true>, Conj >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecForEachExpr<VT,Floor,true>, Floor >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecForEachExpr<VT,Real,true>, Real >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^struct TDVecForEachExprTrait< DVecTransExpr< DVecForEachExpr<VT,Conj,false>, true >, Conj >$/;"	s	namespace:blaze
TDVecForEachExprTrait	amun/3rd_party/blaze/math/traits/TDVecForEachExprTrait.h	/^struct TDVecForEachExprTrait$/;"	s	namespace:blaze
TDVecSMatMultExpr	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^class TDVecSMatMultExpr : public DenseVector< TDVecSMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecSMatMultExprTrait< DVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct TDVecSMatMultExprTrait< VT, SMatSMatMultExpr<MT1,MT2> >$/;"	s
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDVecSMatMultExprTrait< DVecScalarMultExpr<VT,ST1,true>, SMatScalarMultExpr<MT,ST2,false> >$/;"	s	namespace:blaze
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDVecSMatMultExprTrait< VT, SMatScalarMultExpr<MT,ST,false> >$/;"	s	namespace:blaze
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct TDVecSMatMultExprTrait< VT, SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
TDVecSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecSMatMultExprTrait.h	/^struct TDVecSMatMultExprTrait$/;"	s	namespace:blaze
TDVecSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecSVecMultExprTrait.h	/^struct TDVecSVecMultExprTrait$/;"	s	namespace:blaze
TDVecSVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecSVecMultExprTrait.h	/^struct TDVecSVecMultExprTraitHelper$/;"	s	namespace:blaze
TDVecSVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecSVecMultExprTrait.h	/^struct TDVecSVecMultExprTraitHelper<VT1,VT2,true>$/;"	s	namespace:blaze
TDVecScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecScalarDivExprTrait< DVecScalarMultExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDVecScalarDivExprTrait	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	/^struct TDVecScalarDivExprTrait$/;"	s	namespace:blaze
TDVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	/^struct TDVecScalarDivExprTraitHelper$/;"	s	namespace:blaze
TDVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	/^struct TDVecScalarDivExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
TDVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^struct TDVecScalarMultExprTrait< DVecScalarDivExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecScalarMultExprTrait< DVecScalarMultExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TDVecScalarMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	/^struct TDVecScalarMultExprTrait$/;"	s	namespace:blaze
TDVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	/^struct TDVecScalarMultExprTraitHelper$/;"	s	namespace:blaze
TDVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	/^struct TDVecScalarMultExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
TDVecSerialExprTrait	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^struct TDVecSerialExprTrait< DVecSerialExpr<VT,true> >$/;"	s	namespace:blaze
TDVecSerialExprTrait	amun/3rd_party/blaze/math/traits/TDVecSerialExprTrait.h	/^struct TDVecSerialExprTrait$/;"	s	namespace:blaze
TDVecTDMatMultExpr	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^class TDVecTDMatMultExpr : public DenseVector< TDVecTDMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TDVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDVecTDMatMultExprTrait< DVecScalarMultExpr<VT,ST1,true>, DMatScalarMultExpr<MT,ST2,true> >$/;"	s	namespace:blaze
TDVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TDVecTDMatMultExprTrait< VT, DMatScalarMultExpr<MT,ST,true> >$/;"	s	namespace:blaze
TDVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTDMatMultExprTrait< DVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TDVecTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDMatMultExprTrait.h	/^struct TDVecTDMatMultExprTrait$/;"	s	namespace:blaze
TDVecTDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct TDVecTDVecAddExprTrait< DVecSVecAddExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct TDVecTDVecAddExprTrait< DVecSVecSubExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecAddExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct TDVecTDVecAddExprTrait< SVecDVecSubExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecAddExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDVecAddExprTrait.h	/^struct TDVecTDVecAddExprTrait$/;"	s	namespace:blaze
TDVecTDVecCrossExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDVecCrossExprTrait.h	/^struct TDVecTDVecCrossExprTrait$/;"	s	namespace:blaze
TDVecTDVecDivExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDVecDivExprTrait.h	/^struct TDVecTDVecDivExprTrait$/;"	s	namespace:blaze
TDVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTDVecMultExprTrait< DVecScalarMultExpr<VT1,ST,true>, VT2 >$/;"	s	namespace:blaze
TDVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTDVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,true>, DVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
TDVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
TDVecTDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDVecMultExprTrait.h	/^struct TDVecTDVecMultExprTrait$/;"	s	namespace:blaze
TDVecTDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^struct TDVecTDVecSubExprTrait< DVecSVecAddExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^struct TDVecTDVecSubExprTrait< DVecSVecSubExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecSubExprTrait	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^struct TDVecTDVecSubExprTrait< SVecDVecSubExpr<VT1,VT2,true>, VT3 >$/;"	s	namespace:blaze
TDVecTDVecSubExprTrait	amun/3rd_party/blaze/math/traits/TDVecTDVecSubExprTrait.h	/^struct TDVecTDVecSubExprTrait$/;"	s	namespace:blaze
TDVecTSMatMultExpr	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^class TDVecTSMatMultExpr : public DenseVector< TDVecTSMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTSMatMultExprTrait< DVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDVecTSMatMultExprTrait< DVecScalarMultExpr<VT,ST1,true>, SMatScalarMultExpr<MT,ST2,true> >$/;"	s	namespace:blaze
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TDVecTSMatMultExprTrait< VT, SMatScalarMultExpr<MT,ST,true> >$/;"	s	namespace:blaze
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct TDVecTSMatMultExprTrait< VT, TSMatSMatMultExpr<MT1,MT2> >$/;"	s
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct TDVecTSMatMultExprTrait< VT, TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
TDVecTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecTSMatMultExprTrait.h	/^struct TDVecTSMatMultExprTrait$/;"	s	namespace:blaze
TDVecTSVecAddExprTrait	amun/3rd_party/blaze/math/traits/TDVecTSVecAddExprTrait.h	/^struct TDVecTSVecAddExprTrait$/;"	s	namespace:blaze
TDVecTSVecCrossExprTrait	amun/3rd_party/blaze/math/traits/TDVecTSVecCrossExprTrait.h	/^struct TDVecTSVecCrossExprTrait$/;"	s	namespace:blaze
TDVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTSVecMultExprTrait< DVecScalarMultExpr<VT1,ST,true>, VT2 >$/;"	s	namespace:blaze
TDVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TDVecTSVecMultExprTrait< DVecScalarMultExpr<VT1,ST1,true>, SVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
TDVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TDVecTSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
TDVecTSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TDVecTSVecMultExprTrait.h	/^struct TDVecTSVecMultExprTrait$/;"	s	namespace:blaze
TDVecTSVecSubExprTrait	amun/3rd_party/blaze/math/traits/TDVecTSVecSubExprTrait.h	/^struct TDVecTSVecSubExprTrait$/;"	s	namespace:blaze
TDVecTransExprTrait	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^struct TDVecTransExprTrait< DVecTransExpr<VT,true> >$/;"	s	namespace:blaze
TDVecTransExprTrait	amun/3rd_party/blaze/math/traits/TDVecTransExprTrait.h	/^struct TDVecTransExprTrait$/;"	s	namespace:blaze
THROW	amun/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
TL	amun/3rd_party/blaze/util/singleton/Singleton.h	/^   enum : bool { value = HasCyclicDependency<D1,TL,Contains<TL,D1>::value>::value ||$/;"	m	struct:HasCyclicDependencyHelper	typeref:enum:HasCyclicDependencyHelper::
TL	amun/3rd_party/blaze/util/singleton/Singleton.h	/^   enum : bool { value = HasCyclicDependency<D1,TL,Contains<TL,D1>::value>::value };$/;"	m	struct:blaze::HasCyclicDependencyHelper	typeref:enum:blaze::HasCyclicDependencyHelper::
TL1	amun/3rd_party/blaze/util/TypeList.h	/^   typedef typename Unique<Tail>::Result     TL1;$/;"	t	struct:blaze::Unique
TL2	amun/3rd_party/blaze/util/TypeList.h	/^   typedef typename Erase<TL1,Head>::Result  TL2;$/;"	t	struct:blaze::Unique
TOKEN_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/token.h	2;"	d
TRAIL_SURROGATE_MAX	amun/3rd_party/utf8/core.h	/^    const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;$/;"	m	namespace:utf8::internal
TRAIL_SURROGATE_MIN	amun/3rd_party/utf8/core.h	/^    const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;$/;"	m	namespace:utf8::internal
TRAITS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/traits.h	2;"	d
TSMATDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TSMATDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TSMATDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TSMATDMATMULT_THRESHOLD  = ( BLAZE_DEBUG_MODE ? TSMATDMATMULT_DEBUG_THRESHOLD  : TSMATDMATMULT_USER_THRESHOLD  );$/;"	m	namespace:blaze
TSMATDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TSMATDMATMULT_USER_THRESHOLD = 10000UL;$/;"	m	namespace:blaze
TSMATTDMATMULT_DEBUG_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TSMATTDMATMULT_DEBUG_THRESHOLD = 256UL;$/;"	m	namespace:blaze
TSMATTDMATMULT_THRESHOLD	amun/3rd_party/blaze/system/Thresholds.h	/^constexpr size_t TSMATTDMATMULT_THRESHOLD = ( BLAZE_DEBUG_MODE ? TSMATTDMATMULT_DEBUG_THRESHOLD : TSMATTDMATMULT_USER_THRESHOLD );$/;"	m	namespace:blaze
TSMATTDMATMULT_USER_THRESHOLD	amun/3rd_party/blaze/config/Thresholds.h	/^constexpr size_t TSMATTDMATMULT_USER_THRESHOLD = 22500UL;$/;"	m	namespace:blaze
TSMatCTransExprTrait	amun/3rd_party/blaze/math/traits/TSMatCTransExprTrait.h	/^struct TSMatCTransExprTrait$/;"	s	namespace:blaze
TSMatDMatAddExprTrait	amun/3rd_party/blaze/math/traits/TSMatDMatAddExprTrait.h	/^struct TSMatDMatAddExprTrait$/;"	s	namespace:blaze
TSMatDMatMultExpr	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^class TSMatDMatMultExpr : public DenseMatrix< TSMatDMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSMatDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
TSMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSMatDMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,true>, DMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
TSMatDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatDMatMultExprTrait< SMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TSMatDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatDMatMultExprTrait.h	/^struct TSMatDMatMultExprTrait$/;"	s	namespace:blaze
TSMatDMatSubExpr	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^class TSMatDMatSubExpr : public DenseMatrix< TSMatDMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
TSMatDMatSubExprTrait	amun/3rd_party/blaze/math/traits/TSMatDMatSubExprTrait.h	/^struct TSMatDMatSubExprTrait$/;"	s	namespace:blaze
TSMatDVecMultExpr	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^class TSMatDVecMultExpr : public DenseVector< TSMatDVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TSMatDVecMultExprTrait< MT, DVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatDVecMultExprTrait< SMatScalarMultExpr<MT,ST,true>, VT >$/;"	s	namespace:blaze
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatDVecMultExprTrait< SMatScalarMultExpr<MT,ST1,true>, DVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct TSMatDVecMultExprTrait< TSMatSMatMultExpr<MT1,MT2>, VT >$/;"	s
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct TSMatDVecMultExprTrait< TSMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s
TSMatDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatDVecMultExprTrait.h	/^struct TSMatDVecMultExprTrait$/;"	s	namespace:blaze
TSMatEvalExprTrait	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^struct TSMatEvalExprTrait< SMatEvalExpr<MT,true> >$/;"	s	namespace:blaze
TSMatEvalExprTrait	amun/3rd_party/blaze/math/traits/TSMatEvalExprTrait.h	/^struct TSMatEvalExprTrait$/;"	s	namespace:blaze
TSMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct TSMatForEachExprTrait< SMatForEachExpr<MT,Abs,true>, Abs >$/;"	s	namespace:blaze
TSMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct TSMatForEachExprTrait< SMatForEachExpr<MT,Conj,true>, Conj >$/;"	s	namespace:blaze
TSMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct TSMatForEachExprTrait< SMatForEachExpr<MT,Real,true>, Real >$/;"	s	namespace:blaze
TSMatForEachExprTrait	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^struct TSMatForEachExprTrait< SMatTransExpr< SMatForEachExpr<MT,Conj,false>, true >, Conj >$/;"	s	namespace:blaze
TSMatForEachExprTrait	amun/3rd_party/blaze/math/traits/TSMatForEachExprTrait.h	/^struct TSMatForEachExprTrait$/;"	s	namespace:blaze
TSMatSMatAddExprTrait	amun/3rd_party/blaze/math/traits/TSMatSMatAddExprTrait.h	/^struct TSMatSMatAddExprTrait$/;"	s	namespace:blaze
TSMatSMatMultExpr	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^class TSMatSMatMultExpr : public SparseMatrix< TSMatSMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,false> >$/;"	s	namespace:blaze
TSMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatSMatMultExprTrait< SMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TSMatSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatSMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,true>, SMatScalarMultExpr<MT2,ST2,false> >$/;"	s	namespace:blaze
TSMatSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatSMatMultExprTrait.h	/^struct TSMatSMatMultExprTrait$/;"	s	namespace:blaze
TSMatSMatSubExpr	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^class TSMatSMatSubExpr : public SparseMatrix< TSMatSMatSubExpr<MT1,MT2>, false >$/;"	c	namespace:blaze
TSMatSMatSubExprTrait	amun/3rd_party/blaze/math/traits/TSMatSMatSubExprTrait.h	/^struct TSMatSMatSubExprTrait$/;"	s	namespace:blaze
TSMatSVecMultExpr	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^class TSMatSVecMultExpr : public SparseVector< TSMatSVecMultExpr<MT,VT>, false >$/;"	c	namespace:blaze
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatSVecMultExprTrait< SMatScalarMultExpr<MT,ST,true>, VT >$/;"	s	namespace:blaze
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatSVecMultExprTrait< SMatScalarMultExpr<MT,ST1,true>, SVecScalarMultExpr<VT,ST2,false> >$/;"	s	namespace:blaze
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSMatSVecMultExprTrait< MT, SVecScalarMultExpr<VT,ST,false> >$/;"	s	namespace:blaze
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct TSMatSVecMultExprTrait< TSMatSMatMultExpr<MT1,MT2>, VT >$/;"	s
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct TSMatSVecMultExprTrait< TSMatTSMatMultExpr<MT1,MT2>, VT >$/;"	s
TSMatSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatSVecMultExprTrait.h	/^struct TSMatSVecMultExprTrait$/;"	s	namespace:blaze
TSMatScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatScalarDivExprTrait< SMatScalarMultExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSMatScalarDivExprTrait	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	/^struct TSMatScalarDivExprTrait$/;"	s	namespace:blaze
TSMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	/^struct TSMatScalarDivExprTraitHelper$/;"	s	namespace:blaze
TSMatScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	/^struct TSMatScalarDivExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
TSMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^struct TSMatScalarMultExprTrait< SMatScalarDivExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSMatScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatScalarMultExprTrait< SMatScalarMultExpr<MT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSMatScalarMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	/^struct TSMatScalarMultExprTrait$/;"	s	namespace:blaze
TSMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	/^struct TSMatScalarMultExprTraitHelper$/;"	s	namespace:blaze
TSMatScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	/^struct TSMatScalarMultExprTraitHelper<MT,ST,false>$/;"	s	namespace:blaze
TSMatSerialExprTrait	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^struct TSMatSerialExprTrait< SMatSerialExpr<MT,true> >$/;"	s	namespace:blaze
TSMatSerialExprTrait	amun/3rd_party/blaze/math/traits/TSMatSerialExprTrait.h	/^struct TSMatSerialExprTrait$/;"	s	namespace:blaze
TSMatTDMatAddExprTrait	amun/3rd_party/blaze/math/traits/TSMatTDMatAddExprTrait.h	/^struct TSMatTDMatAddExprTrait$/;"	s	namespace:blaze
TSMatTDMatMultExpr	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^class TSMatTDMatMultExpr : public DenseMatrix< TSMatTDMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSMatTDMatMultExprTrait< MT1, DMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
TSMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSMatTDMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,true>, DMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
TSMatTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatTDMatMultExprTrait< SMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TSMatTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatTDMatMultExprTrait.h	/^struct TSMatTDMatMultExprTrait$/;"	s	namespace:blaze
TSMatTDMatSubExprTrait	amun/3rd_party/blaze/math/traits/TSMatTDMatSubExprTrait.h	/^struct TSMatTDMatSubExprTrait$/;"	s	namespace:blaze
TSMatTSMatAddExpr	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^class TSMatTSMatAddExpr : public SparseMatrix< TSMatTSMatAddExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatTSMatAddExprTrait	amun/3rd_party/blaze/math/traits/TSMatTSMatAddExprTrait.h	/^struct TSMatTSMatAddExprTrait$/;"	s	namespace:blaze
TSMatTSMatMultExpr	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^class TSMatTSMatMultExpr : public SparseMatrix< TSMatTSMatMultExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatTSMatMultExprTrait< MT1, SMatScalarMultExpr<MT2,ST,true> >$/;"	s	namespace:blaze
TSMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatTSMatMultExprTrait< SMatScalarMultExpr<MT1,ST,true>, MT2 >$/;"	s	namespace:blaze
TSMatTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSMatTSMatMultExprTrait< SMatScalarMultExpr<MT1,ST1,true>, SMatScalarMultExpr<MT2,ST2,true> >$/;"	s	namespace:blaze
TSMatTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSMatTSMatMultExprTrait.h	/^struct TSMatTSMatMultExprTrait$/;"	s	namespace:blaze
TSMatTSMatSubExpr	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^class TSMatTSMatSubExpr : public SparseMatrix< TSMatTSMatSubExpr<MT1,MT2>, true >$/;"	c	namespace:blaze
TSMatTSMatSubExprTrait	amun/3rd_party/blaze/math/traits/TSMatTSMatSubExprTrait.h	/^struct TSMatTSMatSubExprTrait$/;"	s	namespace:blaze
TSMatTransExprTrait	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^struct TSMatTransExprTrait< SMatTransExpr<MT,true> >$/;"	s	namespace:blaze
TSMatTransExprTrait	amun/3rd_party/blaze/math/traits/TSMatTransExprTrait.h	/^struct TSMatTransExprTrait$/;"	s	namespace:blaze
TSVecCTransExprTrait	amun/3rd_party/blaze/math/traits/TSVecCTransExprTrait.h	/^struct TSVecCTransExprTrait$/;"	s	namespace:blaze
TSVecDMatMultExpr	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^class TSVecDMatMultExpr : public DenseVector< TSVecDMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSVecDMatMultExprTrait< SVecScalarMultExpr<VT,ST1,true>, DMatScalarMultExpr<MT,ST2,false> >$/;"	s	namespace:blaze
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSVecDMatMultExprTrait< VT, DMatScalarMultExpr<MT,ST,false> >$/;"	s	namespace:blaze
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^struct TSVecDMatMultExprTrait< VT, DMatTSMatMultExpr<MT1,MT2> >$/;"	s
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^struct TSVecDMatMultExprTrait< VT, SMatTDMatMultExpr<MT1,MT2> >$/;"	s
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecDMatMultExprTrait< SVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TSVecDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecDMatMultExprTrait.h	/^struct TSVecDMatMultExprTrait$/;"	s	namespace:blaze
TSVecDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecDVecMultExprTrait.h	/^struct TSVecDVecMultExprTrait$/;"	s	namespace:blaze
TSVecDVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecDVecMultExprTrait.h	/^struct TSVecDVecMultExprTraitHelper$/;"	s	namespace:blaze
TSVecDVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecDVecMultExprTrait.h	/^struct TSVecDVecMultExprTraitHelper<VT1,VT2,true>$/;"	s	namespace:blaze
TSVecEvalExprTrait	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^struct TSVecEvalExprTrait< SVecEvalExpr<VT,true> >$/;"	s	namespace:blaze
TSVecEvalExprTrait	amun/3rd_party/blaze/math/traits/TSVecEvalExprTrait.h	/^struct TSVecEvalExprTrait$/;"	s	namespace:blaze
TSVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct TSVecForEachExprTrait< SVecForEachExpr<VT,Abs,true>, Abs >$/;"	s	namespace:blaze
TSVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct TSVecForEachExprTrait< SVecForEachExpr<VT,Conj,true>, Conj >$/;"	s	namespace:blaze
TSVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct TSVecForEachExprTrait< SVecForEachExpr<VT,Real,true>, Real >$/;"	s	namespace:blaze
TSVecForEachExprTrait	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^struct TSVecForEachExprTrait< SVecTransExpr< SVecForEachExpr<VT,Conj,false>, true >, Conj >$/;"	s	namespace:blaze
TSVecForEachExprTrait	amun/3rd_party/blaze/math/traits/TSVecForEachExprTrait.h	/^struct TSVecForEachExprTrait$/;"	s	namespace:blaze
TSVecSMatMultExpr	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^class TSVecSMatMultExpr : public SparseVector< TSVecSMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^struct TSVecSMatMultExprTrait< VT, SMatSMatMultExpr<MT1,MT2> >$/;"	s
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSVecSMatMultExprTrait< SVecScalarMultExpr<VT,ST1,true>, SMatScalarMultExpr<MT,ST2,false> >$/;"	s	namespace:blaze
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSVecSMatMultExprTrait< VT, SMatScalarMultExpr<MT,ST,false> >$/;"	s	namespace:blaze
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^struct TSVecSMatMultExprTrait< VT, SMatTSMatMultExpr<MT1,MT2> >$/;"	s	namespace:blaze
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecSMatMultExprTrait< SVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TSVecSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecSMatMultExprTrait.h	/^struct TSVecSMatMultExprTrait$/;"	s	namespace:blaze
TSVecSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecSVecMultExprTrait.h	/^struct TSVecSVecMultExprTrait$/;"	s	namespace:blaze
TSVecSVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecSVecMultExprTrait.h	/^struct TSVecSVecMultExprTraitHelper$/;"	s	namespace:blaze
TSVecSVecMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecSVecMultExprTrait.h	/^struct TSVecSVecMultExprTraitHelper<VT1,VT2,true>$/;"	s	namespace:blaze
TSVecScalarDivExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecScalarDivExprTrait< SVecScalarMultExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSVecScalarDivExprTrait	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	/^struct TSVecScalarDivExprTrait$/;"	s	namespace:blaze
TSVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	/^struct TSVecScalarDivExprTraitHelper$/;"	s	namespace:blaze
TSVecScalarDivExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	/^struct TSVecScalarDivExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
TSVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^struct TSVecScalarMultExprTrait< SVecScalarDivExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSVecScalarMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecScalarMultExprTrait< SVecScalarMultExpr<VT,ST1,true>, ST2 >$/;"	s	namespace:blaze
TSVecScalarMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	/^struct TSVecScalarMultExprTrait$/;"	s	namespace:blaze
TSVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	/^struct TSVecScalarMultExprTraitHelper$/;"	s	namespace:blaze
TSVecScalarMultExprTraitHelper	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	/^struct TSVecScalarMultExprTraitHelper<VT,ST,false>$/;"	s	namespace:blaze
TSVecSerialExprTrait	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^struct TSVecSerialExprTrait< SVecSerialExpr<VT,true> >$/;"	s	namespace:blaze
TSVecSerialExprTrait	amun/3rd_party/blaze/math/traits/TSVecSerialExprTrait.h	/^struct TSVecSerialExprTrait$/;"	s	namespace:blaze
TSVecTDMatMultExpr	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^class TSVecTDMatMultExpr : public DenseVector< TSVecTDMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TSVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSVecTDMatMultExprTrait< SVecScalarMultExpr<VT,ST1,true>, DMatScalarMultExpr<MT,ST2,true> >$/;"	s	namespace:blaze
TSVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^struct TSVecTDMatMultExprTrait< VT, DMatScalarMultExpr<MT,ST,true> >$/;"	s	namespace:blaze
TSVecTDMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTDMatMultExprTrait< SVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TSVecTDMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDMatMultExprTrait.h	/^struct TSVecTDMatMultExprTrait$/;"	s	namespace:blaze
TSVecTDVecAddExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDVecAddExprTrait.h	/^struct TSVecTDVecAddExprTrait$/;"	s	namespace:blaze
TSVecTDVecCrossExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDVecCrossExprTrait.h	/^struct TSVecTDVecCrossExprTrait$/;"	s	namespace:blaze
TSVecTDVecDivExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDVecDivExprTrait.h	/^struct TSVecTDVecDivExprTrait$/;"	s	namespace:blaze
TSVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TSVecTDVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,true>, DVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
TSVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^struct TSVecTDVecMultExprTrait< VT1, DVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
TSVecTDVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTDVecMultExprTrait< SVecScalarMultExpr<VT1,ST,true>, VT2 >$/;"	s	namespace:blaze
TSVecTDVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDVecMultExprTrait.h	/^struct TSVecTDVecMultExprTrait$/;"	s	namespace:blaze
TSVecTDVecSubExprTrait	amun/3rd_party/blaze/math/traits/TSVecTDVecSubExprTrait.h	/^struct TSVecTDVecSubExprTrait$/;"	s	namespace:blaze
TSVecTSMatMultExpr	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^class TSVecTSMatMultExpr : public SparseVector< TSVecTSMatMultExpr<VT,MT>, true >$/;"	c	namespace:blaze
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSVecTSMatMultExprTrait< SVecScalarMultExpr<VT,ST1,true>, SMatScalarMultExpr<MT,ST2,true> >$/;"	s	namespace:blaze
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^struct TSVecTSMatMultExprTrait< VT, SMatScalarMultExpr<MT,ST,true> >$/;"	s	namespace:blaze
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTSMatMultExprTrait< SVecScalarMultExpr<VT,ST,true>, MT >$/;"	s	namespace:blaze
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^struct TSVecTSMatMultExprTrait< VT, TSMatSMatMultExpr<MT1,MT2> >$/;"	s
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^struct TSVecTSMatMultExprTrait< VT, TSMatTSMatMultExpr<MT1,MT2> >$/;"	s
TSVecTSMatMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecTSMatMultExprTrait.h	/^struct TSVecTSMatMultExprTrait$/;"	s	namespace:blaze
TSVecTSVecAddExprTrait	amun/3rd_party/blaze/math/traits/TSVecTSVecAddExprTrait.h	/^struct TSVecTSVecAddExprTrait$/;"	s	namespace:blaze
TSVecTSVecCrossExprTrait	amun/3rd_party/blaze/math/traits/TSVecTSVecCrossExprTrait.h	/^struct TSVecTSVecCrossExprTrait$/;"	s	namespace:blaze
TSVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTSVecMultExprTrait< SVecScalarMultExpr<VT1,ST,true>, VT2 >$/;"	s	namespace:blaze
TSVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTSVecMultExprTrait< SVecScalarMultExpr<VT1,ST1,true>, SVecScalarMultExpr<VT2,ST2,true> >$/;"	s	namespace:blaze
TSVecTSVecMultExprTrait	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^struct TSVecTSVecMultExprTrait< VT1, SVecScalarMultExpr<VT2,ST,true> >$/;"	s	namespace:blaze
TSVecTSVecMultExprTrait	amun/3rd_party/blaze/math/traits/TSVecTSVecMultExprTrait.h	/^struct TSVecTSVecMultExprTrait$/;"	s	namespace:blaze
TSVecTSVecSubExprTrait	amun/3rd_party/blaze/math/traits/TSVecTSVecSubExprTrait.h	/^struct TSVecTSVecSubExprTrait$/;"	s	namespace:blaze
TSVecTransExprTrait	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^struct TSVecTransExprTrait< SVecTransExpr<VT,true> >$/;"	s	namespace:blaze
TSVecTransExprTrait	amun/3rd_party/blaze/math/traits/TSVecTransExprTrait.h	/^struct TSVecTransExprTrait$/;"	s	namespace:blaze
TT	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::DiagonalMatrix
TT	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::DiagonalMatrix
TT	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::HermitianMatrix
TT	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::HermitianMatrix
TT	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::LowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::LowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::StrictlyLowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
TT	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::StrictlyUpperMatrix
TT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
TT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::SymmetricMatrix
TT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
TT	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::SymmetricMatrix
TT	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::UniLowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::UniLowerMatrix
TT	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::UniUpperMatrix
TT	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::UniUpperMatrix
TT	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the dense matrix.$/;"	t	class:blaze::UpperMatrix
TT	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef TransposeType_<MT>  TT;  \/\/!< Transpose type of the sparse matrix.$/;"	t	class:blaze::UpperMatrix
TT1	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef TransposeType_<VT1>  TT1;  \/\/!< Transpose type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
TT1	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef TransposeType_<VT1>  TT1;  \/\/!< Transpose type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
TT1	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef TransposeType_<VT1>  TT1;  \/\/!< Transpose type of the left-hand side dense vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
TT1	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef TransposeType_<VT1>  TT1;  \/\/!< Transpose type of the left-hand side sparse vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
TT2	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef TransposeType_<VT2>  TT2;  \/\/!< Transpose type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecAddExpr
TT2	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef TransposeType_<VT2>  TT2;  \/\/!< Transpose type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecMultExpr
TT2	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef TransposeType_<VT2>  TT2;  \/\/!< Transpose type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DVecSVecSubExpr
TT2	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef TransposeType_<VT2>  TT2;  \/\/!< Transpose type of the right-hand side dense vector expression.$/;"	t	class:blaze::SVecDVecSubExpr
TTable	amun/3rd_party/fast_align/src/ttables.h	/^  TTable() : frozen_(false), probs_initialized_(false) {}$/;"	f	class:TTable
TTable	amun/3rd_party/fast_align/src/ttables.h	/^class TTable {$/;"	c
TTensor	amun/gpu/mblas/tensor.h	/^    TTensor()$/;"	f	class:amunmt::GPU::mblas::TTensor
TTensor	amun/gpu/mblas/tensor.h	/^    TTensor(TTensor&& m)$/;"	f	class:amunmt::GPU::mblas::TTensor
TTensor	amun/gpu/mblas/tensor.h	/^    TTensor(const TTensor& m)$/;"	f	class:amunmt::GPU::mblas::TTensor
TTensor	amun/gpu/mblas/tensor.h	/^    TTensor(unsigned rows, unsigned cols, unsigned c, unsigned d, bool zero = false)$/;"	f	class:amunmt::GPU::mblas::TTensor
TTensor	amun/gpu/mblas/tensor.h	/^class TTensor : public BaseTensor {$/;"	c	namespace:amunmt::GPU::mblas
TVecMatMultExpr	amun/3rd_party/blaze/math/expressions/TVecMatMultExpr.h	/^struct TVecMatMultExpr : private MultExpr$/;"	s	namespace:blaze
TYPE	amun/3rd_party/yaml-cpp/tag.h	/^  enum TYPE {$/;"	g	struct:YAML::Tag
TYPE	amun/3rd_party/yaml-cpp/token.h	/^  enum TYPE {$/;"	g	struct:YAML::Token
T_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class T_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Tab	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Tab() {$/;"	f	namespace:YAML::Exp
Tag	amun/3rd_party/yaml-cpp/exp.h	/^const char Tag = '!';$/;"	m	namespace:YAML::Keys
Tag	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Tag() {$/;"	f	namespace:YAML::Exp
Tag	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const std::string& Node::Tag() const {$/;"	f	class:YAML::Node
Tag	amun/3rd_party/yaml-cpp/tag.cpp	/^Tag::Tag(const Token& token) : type(static_cast<TYPE>(token.data)) {$/;"	f	class:YAML::Tag
Tag	amun/3rd_party/yaml-cpp/tag.h	/^struct Tag {$/;"	s	namespace:YAML
TagByKind	amun/3rd_party/yaml-cpp/emittermanip.h	/^  TagByKind,$/;"	e	enum:YAML::EMITTER_MANIP
Tail	amun/3rd_party/blaze/util/TypeList.h	/^   typedef T  Tail;  \/\/!< Type of the tail of the type list.$/;"	t	struct:blaze::TypeList
Tan	amun/3rd_party/blaze/math/functors/Tan.h	/^struct Tan$/;"	s	namespace:blaze
Tanh	amun/3rd_party/blaze/math/functors/Tanh.h	/^struct Tanh$/;"	s	namespace:blaze
Tanh	amun/cpu/mblas/phoenix_functions.h	/^  struct Tanh {$/;"	s	namespace:amunmt::CPU::mblas
Tanh	amun/gpu/mblas/thrust_functions.h	/^      Tanh(const actor<Eval> &_1) {$/;"	f	namespace:thrust::detail::functional
Task	amun/3rd_party/blaze/util/threadpool/Task.h	/^typedef std::function<void(void)>  Task;$/;"	t	namespace:blaze::threadpool
TaskQueue	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef threadpool::TaskQueue     TaskQueue;      \/\/!< Type of the task queue.$/;"	t	class:blaze::ThreadPool
TaskQueue	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^class TaskQueue$/;"	c	namespace:blaze::threadpool
TaskQueue	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline TaskQueue::TaskQueue()$/;"	f	class:blaze::threadpool::TaskQueue
Tasks	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^   typedef std::deque<Task>  Tasks;  \/\/!< FIFO container for tasks.$/;"	t	class:blaze::threadpool::TaskQueue
Temp1_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor Temp1_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
Temp1_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor Temp1_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
Temp1_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor Temp1_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
Temp1_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor Temp1_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNHidden
Temp1_	amun/fpga/decoder.h	/^      mblas::Tensor Temp1_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
Temp1_	amun/fpga/decoder.h	/^      mblas::Tensor Temp1_;$/;"	m	class:amunmt::FPGA::Decoder::RNNHidden
Temp1_	amun/fpga/gru.h	/^  mutable mblas::Tensor Temp1_;$/;"	m	class:amunmt::FPGA::SlowGRU
Temp1_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor Temp1_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
Temp1_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor Temp1_;$/;"	m	class:amunmt::GPU::SlowGRU
Temp1_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor Temp1_;$/;"	m	class:amunmt::GPU::SlowLSTM
Temp2_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
Temp2_	amun/cpu/dl4mt/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
Temp2_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
Temp2_	amun/cpu/nematus/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNHidden
Temp2_	amun/fpga/decoder.h	/^      mblas::Tensor Temp2_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
Temp2_	amun/fpga/decoder.h	/^      mblas::Tensor Temp2_;$/;"	m	class:amunmt::FPGA::Decoder::RNNHidden
Temp2_	amun/fpga/gru.h	/^  mutable mblas::Tensor Temp2_;$/;"	m	class:amunmt::FPGA::SlowGRU
Temp2_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
Temp2_	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor Temp2_;$/;"	m	class:amunmt::GPU::Decoder::RNNHidden
Temp2_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor Temp2_;$/;"	m	class:amunmt::GPU::SlowGRU
Temp2_	amun/gpu/dl4mt/lstm.h	/^    mutable mblas::Tensor Temp2_;$/;"	m	class:amunmt::GPU::SlowLSTM
TempB4	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor TempB4;$/;"	m	class:amunmt::GPU::Decoder::Softmax
TempW4	amun/gpu/dl4mt/decoder.h	/^        mblas::Tensor TempW4;$/;"	m	class:amunmt::GPU::Decoder::Softmax
Temp_	amun/cpu/dl4mt/gru.h	/^    mutable mblas::Tensor Temp_;$/;"	m	class:amunmt::CPU::dl4mt::GRU
Temp_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix Temp_;$/;"	m	class:amunmt::CPU::Transition
Temp_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor Temp_;$/;"	m	class:amunmt::CPU::GRU
Temp_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor Temp_;$/;"	m	class:amunmt::CPU::Nematus::Transition
Temp_	amun/fpga/gru.h	/^  mutable mblas::Tensor Temp_;$/;"	m	class:amunmt::FPGA::FastGRU
Temp_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor Temp_;$/;"	m	class:amunmt::GPU::FastGRU
Temp_1_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix Temp_1_;$/;"	m	class:amunmt::CPU::Transition
Temp_1_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor Temp_1_;$/;"	m	class:amunmt::CPU::GRU
Temp_1_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor Temp_1_;$/;"	m	class:amunmt::CPU::Nematus::Transition
Temp_2_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix Temp_2_;$/;"	m	class:amunmt::CPU::Transition
Temp_2_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor Temp_2_;$/;"	m	class:amunmt::CPU::GRU
Temp_2_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor Temp_2_;$/;"	m	class:amunmt::CPU::Nematus::Transition
Tensor	amun/cpu/mblas/tensor.h	/^  Tensor()$/;"	f	class:amunmt::CPU::mblas::Tensor
Tensor	amun/cpu/mblas/tensor.h	/^  Tensor(unsigned rows, unsigned cols)$/;"	f	class:amunmt::CPU::mblas::Tensor
Tensor	amun/cpu/mblas/tensor.h	/^class Tensor : public BaseTensor, public blaze::DynamicMatrix<float, blaze::rowMajor>$/;"	c	namespace:amunmt::CPU::mblas
Tensor	amun/gpu/mblas/tensor.h	/^typedef TTensor<float> Tensor;$/;"	t	namespace:amunmt::GPU::mblas
TensorCoreSize	amun/gpu/dl4mt/decoder.h	/^        unsigned TensorCoreSize(unsigned origSize) {$/;"	f	class:amunmt::GPU::Decoder::Softmax
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^  TensorWrapper()$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^  TensorWrapper(T *ptr, unsigned a, unsigned b, unsigned c, unsigned d)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^  TensorWrapper(TTensor<T> &matrix)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^  TensorWrapper(const TTensor<T> &matrix)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^  TensorWrapper(unsigned a, unsigned b, unsigned c, unsigned d)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
TensorWrapper	amun/gpu/mblas/tensor_wrapper.h	/^class TensorWrapper$/;"	c	namespace:amunmt::GPU::mblas
TestMemCpy	amun/gpu/mblas/tensor_functions.h	/^void TestMemCpy(unsigned size, const T *data1)$/;"	f	namespace:amunmt::GPU::mblas
TheThreadBackend	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^                     >  TheThreadBackend;$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef DiagonalMatrix<MT,SO,true>   This;            \/\/!< Type of this DiagonalMatrix instance.$/;"	t	class:blaze::DiagonalMatrix
This	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef DiagonalMatrix<MT,SO,false>   This;            \/\/!< Type of this DiagonalMatrix instance.$/;"	t	class:blaze::DiagonalMatrix
This	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef HermitianMatrix<MT,SO,true>   This;            \/\/!< Type of this HermitianMatrix instance.$/;"	t	class:blaze::HermitianMatrix
This	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef HermitianMatrix<MT,SO,false>   This;            \/\/!< Type of this HermitianMatrix instance.$/;"	t	class:blaze::HermitianMatrix
This	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef LowerMatrix<MT,SO,true>   This;            \/\/!< Type of this LowerMatrix instance.$/;"	t	class:blaze::LowerMatrix
This	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef LowerMatrix<MT,SO,false>   This;            \/\/!< Type of this LowerMatrix instance.$/;"	t	class:blaze::LowerMatrix
This	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef StrictlyLowerMatrix<MT,SO,true>   This;            \/\/!< Type of this StrictlyLowerMatrix instance.$/;"	t	class:blaze::StrictlyLowerMatrix
This	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef StrictlyLowerMatrix<MT,SO,false>  This;            \/\/!< Type of this StrictlyLowerMatrix instance.$/;"	t	class:blaze::StrictlyLowerMatrix
This	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef StrictlyUpperMatrix<MT,SO,true>   This;            \/\/!< Type of this StrictlyUpperMatrix instance.$/;"	t	class:blaze::StrictlyUpperMatrix
This	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef StrictlyUpperMatrix<MT,SO,false>   This;            \/\/!< Type of this StrictlyUpperMatrix instance.$/;"	t	class:blaze::StrictlyUpperMatrix
This	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef SymmetricMatrix<MT,SO,true,false>   This;            \/\/!< Type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
This	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef SymmetricMatrix<MT,SO,true,true>   This;            \/\/!< Type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
This	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef SymmetricMatrix<MT,SO,false,false>   This;            \/\/!< Type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
This	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef SymmetricMatrix<MT,SO,false,true>   This;            \/\/!< Type of this SymmetricMatrix instance.$/;"	t	class:blaze::SymmetricMatrix
This	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef UniLowerMatrix<MT,SO,true>   This;            \/\/!< Type of this UniLowerMatrix instance.$/;"	t	class:blaze::UniLowerMatrix
This	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef UniLowerMatrix<MT,SO,false>  This;            \/\/!< Type of this UniLowerMatrix instance.$/;"	t	class:blaze::UniLowerMatrix
This	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef UniUpperMatrix<MT,SO,true>   This;            \/\/!< Type of this UniUpperMatrix instance.$/;"	t	class:blaze::UniUpperMatrix
This	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef UniUpperMatrix<MT,SO,false>   This;            \/\/!< Type of this UniUpperMatrix instance.$/;"	t	class:blaze::UniUpperMatrix
This	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef UpperMatrix<MT,SO,true>   This;            \/\/!< Type of this UpperMatrix instance.$/;"	t	class:blaze::UpperMatrix
This	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef UpperMatrix<MT,SO,false>   This;            \/\/!< Type of this UpperMatrix instance.$/;"	t	class:blaze::UpperMatrix
This	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef CustomMatrix<Type,AF,PF,SO>  This;           \/\/!< Type of this CustomMatrix instance.$/;"	t	class:blaze::CustomMatrix
This	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef CustomVector<Type,AF,PF,TF>  This;           \/\/!< Type of this CustomVector instance.$/;"	t	class:blaze::CustomVector
This	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DynamicMatrix<Type,SO>   This;           \/\/!< Type of this DynamicMatrix instance.$/;"	t	class:blaze::DynamicMatrix
This	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef DynamicVector<Type,TF>   This;           \/\/!< Type of this DynamicVector instance.$/;"	t	class:blaze::DynamicVector
This	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef HybridMatrix<Type,M,N,SO>   This;           \/\/!< Type of this HybridMatrix instance.$/;"	t	class:blaze::HybridMatrix
This	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef HybridVector<Type,N,TF>   This;           \/\/!< Type of this HybridVector instance.$/;"	t	class:blaze::HybridVector
This	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef StaticMatrix<Type,M,N,SO>   This;           \/\/!< Type of this StaticMatrix instance.$/;"	t	class:blaze::StaticMatrix
This	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef StaticVector<Type,N,TF>   This;           \/\/!< Type of this StaticVector instance.$/;"	t	class:blaze::StaticVector
This	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef DMatDMatAddExpr<MT1,MT2,SO>  This;           \/\/!< Type of this DMatDMatAdd instance.$/;"	t	class:blaze::DMatDMatAddExpr
This	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef DMatDMatSubExpr<MT1,MT2,SO>  This;           \/\/!< Type of this DMatDMatSubExpr instance.$/;"	t	class:blaze::DMatDMatSubExpr
This	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef DMatDVecMultExpr<MT,VT>     This;           \/\/!< Type of this DMatDVecMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef DMatEvalExpr<MT,SO>  This;           \/\/!< Type of this DMatEvalExpr instance.$/;"	t	class:blaze::DMatEvalExpr
This	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef DMatForEachExpr<MT,OP,SO>   This;           \/\/!< Type of this DMatForEachExpr instance.$/;"	t	class:blaze::DMatForEachExpr
This	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef DMatInvExpr<MT,SO>  This;           \/\/!< Type of this DMatInvExpr instance.$/;"	t	class:blaze::DMatInvExpr
This	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef DMatSMatAddExpr<MT1,MT2,SO>  This;           \/\/!< Type of this DMatSMatAddExpr instance.$/;"	t	class:blaze::DMatSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef DMatSMatMultExpr<MT1,MT2>   This;           \/\/!< Type of this DMatSMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef DMatSMatSubExpr<MT1,MT2,SO>  This;           \/\/!< Type of this DMatSMatSubExpr instance.$/;"	t	class:blaze::DMatSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef DMatSVecMultExpr<MT,VT>     This;           \/\/!< Type of this DMatSVecMultExpr instance.$/;"	t	class:blaze::DMatSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef DMatScalarDivExpr<MT,ST,SO>  This;           \/\/!< Type of this DMatScalarDivExpr instance.$/;"	t	class:blaze::DMatScalarDivExpr
This	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef DMatScalarMultExpr<MT,ST,SO>  This;           \/\/!< Type of this DMatScalarMultExpr instance.$/;"	t	class:blaze::DMatScalarMultExpr
This	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef DMatSerialExpr<MT,SO>  This;           \/\/!< Type of this DMatSerialExpr instance.$/;"	t	class:blaze::DMatSerialExpr
This	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef DMatTDMatAddExpr<MT1,MT2>   This;           \/\/!< Type of this DMatTDMatAdd instance.$/;"	t	class:blaze::DMatTDMatAddExpr
This	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef DMatTDMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this DMatTDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef DMatTDMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this DMatTDMatSubExpr instance.$/;"	t	class:blaze::DMatTDMatSubExpr
This	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef DMatTSMatAddExpr<MT1,MT2>   This;           \/\/!< Type of this DMatTSMatAddExpr instance.$/;"	t	class:blaze::DMatTSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef DMatTSMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this DMatTSMatMultExpr instance.$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef DMatTSMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this DMatTSMatSubExpr instance.$/;"	t	class:blaze::DMatTSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef DMatTransExpr<MT,SO>       This;           \/\/!< Type of this DMatTransExpr instance.$/;"	t	class:blaze::DMatTransExpr
This	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef DMatTransposer<MT,SO>    This;            \/\/!< Type of this DMatTransposer instance.$/;"	t	class:blaze::DMatTransposer
This	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef DMatTransposer<MT,true>  This;            \/\/!< Type of this DMatTransposer instance.$/;"	t	class:blaze::DMatTransposer
This	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef DVecDVecAddExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecDVecAddExpr instance.$/;"	t	class:blaze::DVecDVecAddExpr
This	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef DVecDVecCrossExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecDVecCrossExpr instance.$/;"	t	class:blaze::DVecDVecCrossExpr
This	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef DVecDVecDivExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecDVecDivExpr instance.$/;"	t	class:blaze::DVecDVecDivExpr
This	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef DVecDVecMultExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecDVecMultExpr instance.$/;"	t	class:blaze::DVecDVecMultExpr
This	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef DVecDVecSubExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecDVecSubExpr instance.$/;"	t	class:blaze::DVecDVecSubExpr
This	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef DVecEvalExpr<VT,TF>  This;           \/\/!< Type of this DVecEvalExpr instance.$/;"	t	class:blaze::DVecEvalExpr
This	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef DVecForEachExpr<VT,OP,TF>   This;           \/\/!< Type of this DVecForEachExpr instance.$/;"	t	class:blaze::DVecForEachExpr
This	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef DVecSVecAddExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecSVecAddExpr instance.$/;"	t	class:blaze::DVecSVecAddExpr
This	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef DVecSVecCrossExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecSVecCrossExpr instance.$/;"	t	class:blaze::DVecSVecCrossExpr
This	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef DVecSVecMultExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecSVecMultExpr instance.$/;"	t	class:blaze::DVecSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef DVecSVecSubExpr<VT1,VT2,TF>  This;           \/\/!< Type of this DVecSVecSubExpr instance.$/;"	t	class:blaze::DVecSVecSubExpr
This	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef DVecScalarDivExpr<VT,ST,TF>  This;           \/\/!< Type of this DVecScalarDivExpr instance.$/;"	t	class:blaze::DVecScalarDivExpr
This	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef DVecScalarMultExpr<VT,ST,TF>  This;           \/\/!< Type of this DVecScalarMultExpr instance.$/;"	t	class:blaze::DVecScalarMultExpr
This	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef DVecSerialExpr<VT,TF>  This;           \/\/!< Type of this DVecSerialExpr instance.$/;"	t	class:blaze::DVecSerialExpr
This	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef DVecTDVecMultExpr<VT1,VT2>  This;           \/\/!< Type of this DVecTDVecMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef DVecTSVecMultExpr<VT1,VT2>  This;           \/\/!< Type of this DVecTSVecMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef DVecTransExpr<VT,TF>     This;           \/\/!< Type of this DVecTransExpr instance.$/;"	t	class:blaze::DVecTransExpr
This	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef DVecTransposer<VT,TF>    This;            \/\/!< Type of this DVecTransposer instance.$/;"	t	class:blaze::DVecTransposer
This	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef SMatDMatSubExpr<MT1,MT2,SO>  This;           \/\/!< Type of this SMatDMatSubExpr instance.$/;"	t	class:blaze::SMatDMatSubExpr
This	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef SMatDVecMultExpr<MT,VT>     This;           \/\/!< Type of this SMatDVecMultExpr instance.$/;"	t	class:blaze::SMatDVecMultExpr
This	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef SMatEvalExpr<MT,SO>  This;           \/\/!< Type of this SMatEvalExpr instance.$/;"	t	class:blaze::SMatEvalExpr
This	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef SMatForEachExpr<MT,OP,SO>   This;           \/\/!< Type of this SMatForEachExpr instance.$/;"	t	class:blaze::SMatForEachExpr
This	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef SMatSMatAddExpr<MT1,MT2>    This;           \/\/!< Type of this SMatSMatAddExpr instance.$/;"	t	class:blaze::SMatSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef SMatSMatMultExpr<MT1,MT2>   This;           \/\/!< Type of this SMatSMatMultExpr instance.$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef SMatSMatSubExpr<MT1,MT2>    This;           \/\/!< Type of this SMatSMatSubExpr instance.$/;"	t	class:blaze::SMatSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef SMatSVecMultExpr<MT,VT>     This;           \/\/!< Type of this SMatSVecMultExpr instance.$/;"	t	class:blaze::SMatSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef SMatScalarDivExpr<MT,ST,SO>  This;           \/\/!< Type of this SMatScalarDivExpr instance.$/;"	t	class:blaze::SMatScalarDivExpr
This	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef SMatScalarMultExpr<MT,ST,SO>  This;           \/\/!< Type of this SMatScalarMultExpr instance.$/;"	t	class:blaze::SMatScalarMultExpr
This	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef SMatSerialExpr<MT,SO>  This;           \/\/!< Type of this SMatSerialExpr instance.$/;"	t	class:blaze::SMatSerialExpr
This	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef SMatTDMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this SMatTDMatMultExpr instance.$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef SMatTDMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this SMatTDMatSubExpr instance.$/;"	t	class:blaze::SMatTDMatSubExpr
This	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef SMatTSMatAddExpr<MT1,MT2>   This;           \/\/!< Type of this SMatTSMatAddExpr instance.$/;"	t	class:blaze::SMatTSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef SMatTSMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this SMatTSMatMultExpr instance.$/;"	t	class:blaze::SMatTSMatMultExpr
This	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef SMatTSMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this SMatTSMatSubExpr instance.$/;"	t	class:blaze::SMatTSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef SMatTransExpr<MT,SO>  This;           \/\/!< Type of this SMatTransExpr instance.$/;"	t	class:blaze::SMatTransExpr
This	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef SMatTransposer<MT,SO>  This;            \/\/!< Type of this SMatTransposer instance.$/;"	t	class:blaze::SMatTransposer
This	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef SMatTransposer<MT,true>  This;            \/\/!< Type of this SMatTransposer instance.$/;"	t	class:blaze::SMatTransposer
This	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef SVecDVecCrossExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecDVecCrossExpr instance.$/;"	t	class:blaze::SVecDVecCrossExpr
This	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef SVecDVecDivExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecDVecDivExpr instance.$/;"	t	class:blaze::SVecDVecDivExpr
This	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef SVecDVecMultExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecDVecMultExpr instance.$/;"	t	class:blaze::SVecDVecMultExpr
This	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef SVecDVecSubExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecDVecSubExpr instance.$/;"	t	class:blaze::SVecDVecSubExpr
This	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef SVecEvalExpr<VT,TF>  This;           \/\/!< Type of this SVecEvalExpr instance.$/;"	t	class:blaze::SVecEvalExpr
This	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef SVecForEachExpr<VT,OP,TF>   This;           \/\/!< Type of this SVecForEachExpr instance.$/;"	t	class:blaze::SVecForEachExpr
This	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef SVecSVecAddExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecSVecAddExpr instance.$/;"	t	class:blaze::SVecSVecAddExpr
This	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef SVecSVecCrossExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecSVecCrossExpr instance.$/;"	t	class:blaze::SVecSVecCrossExpr
This	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef SVecSVecMultExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecSVecMultExpr instance.$/;"	t	class:blaze::SVecSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef SVecSVecSubExpr<VT1,VT2,TF>  This;           \/\/!< Type of this SVecSVecSubExpr instance.$/;"	t	class:blaze::SVecSVecSubExpr
This	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef SVecScalarDivExpr<VT,ST,TF>  This;           \/\/!< Type of this SVecScalarDivExpr instance.$/;"	t	class:blaze::SVecScalarDivExpr
This	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef SVecScalarMultExpr<VT,ST,TF>  This;           \/\/!< Type of this SVecScalarMultExpr instance.$/;"	t	class:blaze::SVecScalarMultExpr
This	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef SVecSerialExpr<VT,TF>  This;           \/\/!< Type of this SVecSerialExpr instance.$/;"	t	class:blaze::SVecSerialExpr
This	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef SVecTDVecMultExpr<VT1,VT2>  This;           \/\/!< Type of this SVecTDVecMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef SVecTSVecMultExpr<VT1,VT2>  This;           \/\/!< Type of this SVecTSVecMultExpr instance.$/;"	t	class:blaze::SVecTSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef SVecTransExpr<VT,TF>  This;           \/\/!< Type of this SVecTransExpr instance.$/;"	t	class:blaze::SVecTransExpr
This	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef SVecTransposer<VT,TF>  This;            \/\/!< Type of this SVecTransposer instance.$/;"	t	class:blaze::SVecTransposer
This	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef TDMatDMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TDMatDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef TDMatDVecMultExpr<MT,VT>    This;           \/\/!< Type of this TDMatDVecMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef TDMatSMatAddExpr<MT1,MT2>   This;           \/\/!< Type of this TDMatSMatAddExpr instance.$/;"	t	class:blaze::TDMatSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef TDMatSMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TDMatSMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef TDMatSMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this TDMatSMatSubExpr instance.$/;"	t	class:blaze::TDMatSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef TDVecDMatMultExpr<VT,MT>    This;           \/\/!< Type of this TDVecDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef TDVecSMatMultExpr<VT,MT>    This;           \/\/!< Type of this TDVecSMatMultExpr instance.$/;"	t	class:blaze::TDVecSMatMultExpr
This	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef TDVecTDMatMultExpr<VT,MT>   This;           \/\/!< Type of this TDVecTDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef TDVecTSMatMultExpr<VT,MT>   This;           \/\/!< Type of this TDVecTSMatMultExpr instance.$/;"	t	class:blaze::TDVecTSMatMultExpr
This	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef TSMatDMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef TSMatDMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this TSMatDMatSubExpr instance.$/;"	t	class:blaze::TSMatDMatSubExpr
This	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef TSMatDVecMultExpr<MT,VT>    This;           \/\/!< Type of this TSMatDVecMultExpr instance.$/;"	t	class:blaze::TSMatDVecMultExpr
This	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef TSMatSMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatSMatMultExpr instance.$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef TSMatSMatSubExpr<MT1,MT2>   This;           \/\/!< Type of this TSMatSMatSubExpr instance.$/;"	t	class:blaze::TSMatSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef TSMatSVecMultExpr<MT,VT>    This;           \/\/!< Type of this TSMatSVecMultExpr instance.$/;"	t	class:blaze::TSMatSVecMultExpr
This	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef TSMatTDMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatTDMatMultExpr instance.$/;"	t
This	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef TSMatTSMatAddExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatTSMatAddExpr instance.$/;"	t	class:blaze::TSMatTSMatAddExpr
This	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef TSMatTSMatMultExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatTSMatMultExpr instance.$/;"	t	namespace:blaze
This	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef TSMatTSMatSubExpr<MT1,MT2>  This;           \/\/!< Type of this TSMatTSMatSubExpr instance.$/;"	t	class:blaze::TSMatTSMatSubExpr
This	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef TSVecSMatMultExpr<VT,MT>    This;           \/\/!< Type of this TSVecSMatMultExpr instance.$/;"	t	class:blaze::TSVecSMatMultExpr
This	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef TSVecTDMatMultExpr<VT,MT>   This;           \/\/!< Type of this TSVecTDMatMultExpr instance.$/;"	t	class:blaze::TSVecTDMatMultExpr
This	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef TSVecTSMatMultExpr<VT,MT>   This;           \/\/!< Type of this TSVecTSMatMultExpr instance.$/;"	t	class:blaze::TSVecTSMatMultExpr
This	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,SO>   This;            \/\/!< Type of this CompressedMatrix instance.$/;"	t	class:blaze::CompressedMatrix
This	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,true>   This;            \/\/!< Type of this CompressedMatrix instance.$/;"	t	class:blaze::CompressedMatrix
This	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef CompressedVector<Type,TF>   This;            \/\/!< Type of this CompressedVector instance.$/;"	t	class:blaze::CompressedVector
This	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef Column<MT,true,true,SF>     This;           \/\/!< Type of this Column instance.$/;"	t	class:blaze::Column
This	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef Column<MT,false,false,false>  This;           \/\/!< Type of this Column instance.$/;"	t	class:blaze::Column
This	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef Column<MT,false,false,true>  This;           \/\/!< Type of this Column instance.$/;"	t	class:blaze::Column
This	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef Column<MT,true,false,SF>    This;           \/\/!< Type of this Column instance.$/;"	t	class:blaze::Column
This	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef Row<MT,true,true,SF>        This;           \/\/!< Type of this Row instance.$/;"	t	class:blaze::Row
This	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef Row<MT,false,false,false>   This;           \/\/!< Type of this Row instance.$/;"	t	class:blaze::Row
This	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef Row<MT,false,false,true>    This;           \/\/!< Type of this Row instance.$/;"	t	class:blaze::Row
This	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef Row<MT,true,false,SF>       This;           \/\/!< Type of this Row instance.$/;"	t	class:blaze::Row
This	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef Submatrix<MT,unaligned,false,true>  This;           \/\/!< Type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
This	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef Submatrix<MT,AF,false,false>  This;           \/\/!< Type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
This	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef Submatrix<MT,AF,true,false>  This;           \/\/!< Type of this Submatrix instance.$/;"	t	class:blaze::Submatrix
This	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef Subvector<VT,unaligned,TF,true>  This;           \/\/!< Type of this Subvector instance.$/;"	t	class:blaze::Subvector
This	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef Subvector<VT,AF,TF,false>   This;           \/\/!< Type of this Subvector instance.$/;"	t	class:blaze::Subvector
ThousandsSep	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    explicit ThousandsSep(fmt::StringRef sep): sep_(sep), digit_index_(0)$/;"	f	class:fmt::internal::ThousandsSep
ThousandsSep	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class ThousandsSep$/;"	c	namespace:fmt::internal
Thread	amun/3rd_party/blaze/util/Thread.h	/^Thread<TT,MT,LT,CT>::Thread( ThreadPoolType* pool )$/;"	f	class:blaze::Thread
Thread	amun/3rd_party/blaze/util/Thread.h	/^class Thread : private NonCopyable$/;"	c	namespace:blaze
Thread	amun/3rd_party/blaze/util/Thread.h	/^inline Thread<TT,MT,LT,CT>::Thread( Callable func, Args&&... args )$/;"	f	class:blaze::Thread
ThreadBackend	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^class ThreadBackend$/;"	c	namespace:blaze
ThreadHandle	amun/3rd_party/blaze/util/Thread.h	/^   typedef std::unique_ptr<ThreadType>  ThreadHandle;    \/\/!< Handle for a single thread.$/;"	t	class:blaze::Thread
ThreadPool	amun/3rd_party/blaze/util/ThreadPool.h	/^ThreadPool<TT,MT,LT,CT>::ThreadPool( size_t n )$/;"	f	class:blaze::ThreadPool
ThreadPool	amun/3rd_party/blaze/util/ThreadPool.h	/^class ThreadPool : private NonCopyable$/;"	c	namespace:blaze
ThreadPool	amun/common/threadpool.h	/^class ThreadPool {$/;"	c	namespace:amunmt
ThreadPool	amun/common/threadpool.h	/^inline ThreadPool::ThreadPool(size_t threads, size_t in_bound)$/;"	f	class:amunmt::ThreadPool
ThreadPoolType	amun/3rd_party/blaze/util/Thread.h	/^   typedef ThreadPool<TT,MT,LT,CT>      ThreadPoolType;  \/\/!< Type of the managing thread pool.$/;"	t	class:blaze::Thread
ThreadType	amun/3rd_party/blaze/util/Thread.h	/^   typedef TT                           ThreadType;      \/\/!< Type of the encapsulated thread.$/;"	t	class:blaze::Thread
Threads	amun/3rd_party/blaze/util/ThreadPool.h	/^   typedef PtrVector<ManagedThread>  Threads;        \/\/!< Type of the thread container.$/;"	t	class:blaze::ThreadPool
ThrowParserException	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ThrowParserException(const std::string& msg) const {$/;"	f	class:YAML::Scanner
Timer	amun/3rd_party/blaze/util/timing/Timer.h	/^class Timer$/;"	c	namespace:blaze::timing
Timer	amun/3rd_party/blaze/util/timing/Timer.h	/^inline Timer<TP>::Timer()$/;"	f	class:blaze::timing::Timer
Times	amun/3rd_party/blaze/util/mpl/Times.h	/^struct Times$/;"	s	namespace:blaze
TimingPolicy	amun/3rd_party/blaze/util/timing/Timer.h	/^   typedef TP  TimingPolicy;  \/\/!< Timing policy of the Timer.$/;"	t	class:blaze::timing::Timer
Tmp	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^              , Failure >  Tmp;$/;"	t	struct:blaze::DMatCTransExprTrait
Tmp	amun/3rd_party/blaze/math/traits/DMatDMatAddExprTrait.h	/^             , INVALID_TYPE >  Tmp;$/;"	t	struct:blaze::DMatDMatAddExprTrait
Tmp	amun/3rd_party/blaze/math/traits/DMatForEachExprTrait.h	/^             , INVALID_TYPE >  Tmp;$/;"	t	struct:blaze::DMatForEachExprTrait
ToLower	amun/3rd_party/yaml-cpp/convert.cpp	/^char ToLower(char ch) { return IsUpper(ch) ? ch + 'a' - 'A' : ch; }$/;"	f	namespace:__anon85
ToString	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^std::string ToString(YAML::anchor_t anchor) {$/;"	f	namespace:__anon86
Token	amun/3rd_party/yaml-cpp/token.h	/^  Token(TYPE type_, const Mark& mark_)$/;"	f	struct:YAML::Token
Token	amun/3rd_party/yaml-cpp/token.h	/^struct Token {$/;"	s	namespace:YAML
TokenNames	amun/3rd_party/yaml-cpp/token.h	/^const std::string TokenNames[] = {$/;"	m	namespace:YAML
Top	amun/common/history.h	/^    Result Top() const {$/;"	f	class:amunmt::History
Trans	amun/3rd_party/blaze/math/functors/Trans.h	/^struct Trans$/;"	s	namespace:blaze
TransExpr	amun/3rd_party/blaze/math/expressions/TransExpr.h	/^struct TransExpr : private Expression$/;"	s	namespace:blaze
TransExprTrait	amun/3rd_party/blaze/math/traits/TransExprTrait.h	/^struct TransExprTrait$/;"	s	namespace:blaze
Transition	amun/cpu/dl4mt/transition.h	/^    Transition(const Weights& model)$/;"	f	class:amunmt::CPU::Transition
Transition	amun/cpu/dl4mt/transition.h	/^class Transition {$/;"	c	namespace:amunmt::CPU
Transition	amun/cpu/nematus/model.cpp	/^Weights::Transition::Transition(const NpzConverter& model, TransitionType type, std::string prefix,$/;"	f	class:amunmt::CPU::Nematus::Weights::Transition
Transition	amun/cpu/nematus/model.h	/^  class Transition {$/;"	c	struct:amunmt::CPU::Nematus::Weights
Transition	amun/cpu/nematus/transition.cpp	/^Transition::Transition(const Weights::Transition& model)$/;"	f	class:amunmt::CPU::Nematus::Transition
Transition	amun/cpu/nematus/transition.h	/^class Transition {$/;"	c	namespace:amunmt::CPU::Nematus
TransitionType	amun/cpu/nematus/model.h	/^      enum class TransitionType {Encoder, Decoder};$/;"	c	class:amunmt::CPU::Nematus::Weights::Transition
Translate	amun/3rd_party/yaml-cpp/tag.cpp	/^const std::string Tag::Translate(const Directives& directives) {$/;"	f	class:YAML::Tag
Translate	amun/common/search.cpp	/^std::shared_ptr<Histories> Search::Translate(const Sentences& sentences) {$/;"	f	class:amunmt::Search
TranslateTagHandle	amun/3rd_party/yaml-cpp/directives.cpp	/^const std::string Directives::TranslateTagHandle($/;"	f	class:YAML::Directives
TranslationTask	amun/common/translation_task.cpp	/^std::shared_ptr<Histories> TranslationTask(const God &god, std::shared_ptr<Sentences> sentences) {$/;"	f	namespace:amunmt
TranslationTaskAndOutput	amun/common/translation_task.cpp	/^void TranslationTaskAndOutput(const God &god, std::shared_ptr<Sentences> sentences) {$/;"	f	namespace:amunmt
Transpose	amun/fpga/matrix_functions.cpp	/^Matrix& Transpose(Matrix& Out)$/;"	f	namespace:amunmt::FPGA::mblas
Transpose	amun/fpga/matrix_functions.cpp	/^Matrix& Transpose(Matrix& Out, const Matrix& In)$/;"	f	namespace:amunmt::FPGA::mblas
TransposeFlag	amun/3rd_party/blaze/math/typetraits/TransposeFlag.h	/^struct TransposeFlag : public BoolConstant< ( IsRowVector<T>::value ? rowVector : columnVector ) >$/;"	s	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   typedef DiagonalMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   typedef DiagonalMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DiagonalMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   typedef HermitianMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   typedef HermitianMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::HermitianMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   typedef UpperMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   typedef UpperMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::LowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   typedef StrictlyUpperMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   typedef StrictlyUpperMatrix<TT,!SO,false> TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StrictlyLowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   typedef StrictlyLowerMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   typedef StrictlyLowerMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StrictlyUpperMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   typedef SymmetricMatrix<TT,!SO,true,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   typedef SymmetricMatrix<TT,!SO,true,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   typedef SymmetricMatrix<TT,!SO,false,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   typedef SymmetricMatrix<TT,!SO,false,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SymmetricMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   typedef UniUpperMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   typedef UniUpperMatrix<TT,!SO,false> TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UniLowerMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   typedef UniLowerMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   typedef UniLowerMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UniUpperMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   typedef LowerMatrix<TT,!SO,true>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
TransposeType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   typedef LowerMatrix<TT,!SO,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::UpperMatrix
TransposeType	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   typedef DynamicMatrix<Type,!SO>      TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::CustomMatrix
TransposeType	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   typedef DynamicVector<Type,!TF>      TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::CustomVector
TransposeType	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   typedef DynamicMatrix<Type,!SO>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DynamicMatrix
TransposeType	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   typedef DynamicVector<Type,!TF>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DynamicVector
TransposeType	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   typedef HybridMatrix<Type,N,M,!SO>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::HybridMatrix
TransposeType	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   typedef HybridVector<Type,N,!TF>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::HybridVector
TransposeType	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   typedef StaticMatrix<Type,N,M,!SO>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StaticMatrix
TransposeType	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   typedef StaticVector<Type,N,!TF>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::StaticVector
TransposeType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatDMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatDMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   typedef TransposeType_<MT>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatEvalExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatForEachExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   typedef TransposeType_<MT>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatInvExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatScalarDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatScalarMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   typedef TransposeType_<MT>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatSerialExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTDMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTDMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   typedef ResultType_<MT>            TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTransExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   typedef ResultType_<MT>          TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DMatTransposer
TransposeType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecDVecAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   typedef TransposeType_<ResultType>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecDVecCrossExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecDVecDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecDVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecDVecSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   typedef TransposeType_<VT>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecEvalExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecForEachExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecSVecAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   typedef TransposeType_<ResultType>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecSVecCrossExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecSVecSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecScalarDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecScalarMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   typedef TransposeType_<VT>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecSerialExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   typedef ResultType_<VT>          TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecTransExpr
TransposeType	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   typedef ResultType_<VT>          TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DVecTransposer
TransposeType	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatDMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatDVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   typedef TransposeType_<MT>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatEvalExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatForEachExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatScalarDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatScalarMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   typedef TransposeType_<MT>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatSerialExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTDMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   typedef ResultType_<MT>       TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTransExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ResultType_<MT>          TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
TransposeType	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   typedef ResultType_<MT>        TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SMatTransposer
TransposeType	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   typedef TransposeType_<ResultType>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecDVecCrossExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecDVecDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecDVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecDVecSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   typedef TransposeType_<VT>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecEvalExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecForEachExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecSVecAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   typedef TransposeType_<ResultType>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecSVecCrossExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecSVecSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecScalarDivExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecScalarMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   typedef TransposeType_<VT>     TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecSerialExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecTSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   typedef ResultType_<VT>       TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecTransExpr
TransposeType	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   typedef ResultType_<VT>        TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SVecTransposer
TransposeType	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TDMatSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TDMatSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TDVecSMatMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TDVecTSMatMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatDMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatDVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatSVecMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatAddExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	namespace:blaze
TransposeType	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSMatTSMatSubExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSVecSMatMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSVecTDMatMultExpr
TransposeType	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::TSVecTSMatMultExpr
TransposeType	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   typedef TransposeType_<MT>   TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DenseMatrixProxy
TransposeType	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   typedef TransposeType_<VT>   TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::DenseVectorProxy
TransposeType	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   typedef TransposeType_<MT>   TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SparseMatrixProxy
TransposeType	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   typedef TransposeType_<VT>   TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::SparseVectorProxy
TransposeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,!SO>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
TransposeType	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   typedef CompressedMatrix<Type,false>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::CompressedMatrix
TransposeType	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   typedef CompressedVector<Type,!TF>  TransposeType;   \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::CompressedVector
TransposeType	amun/3rd_party/blaze/math/views/column/Dense.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Column
TransposeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Column
TransposeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Column
TransposeType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Column
TransposeType	amun/3rd_party/blaze/math/views/row/Dense.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Row
TransposeType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Row
TransposeType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   typedef TransposeType_<ResultType>          TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Submatrix
TransposeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef TransposeType_<ResultType>    TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Submatrix
TransposeType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   typedef TransposeType_<ResultType>   TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Submatrix
TransposeType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   typedef TransposeType_<ResultType>       TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Subvector
TransposeType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   typedef TransposeType_<ResultType>  TransposeType;  \/\/!< Transpose type for expression template evaluations.$/;"	t	class:blaze::Subvector
Trim	amun/3rd_party/extract_lex/utils.cpp	/^void Trim(std::string& s) {$/;"	f
Trim	amun/common/utils.cpp	/^void Trim(std::string& s) {$/;"	f	namespace:amunmt
TrueFalseBool	amun/3rd_party/yaml-cpp/emittermanip.h	/^  TrueFalseBool,  \/\/ true, false$/;"	e	enum:YAML::EMITTER_MANIP
Type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::HermitianProxy::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::HermitianProxy::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::HermitianValue::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::HermitianValue::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::NumericProxy::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::NumericProxy::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::SymmetricValue::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::SymmetricValue::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::UniLowerProxy::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::UniLowerProxy::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::UniLowerValue::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::UniLowerValue::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::UniUpperProxy::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::UniUpperProxy::ComplexType
Type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   struct BuiltinType { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::UniUpperValue::BuiltinType
Type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   struct ComplexType { typedef typename T::value_type  Type; };$/;"	t	struct:blaze::UniUpperValue::ComplexType
Type	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^              , INVALID_TYPE > Type;$/;"	t	struct:blaze::SVecScalarMultExprTrait
Type	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^                       , Tmp >::Type  Type;$/;"	t	struct:blaze::DMatCTransExprTrait
Type	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^   struct Failure { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::DMatCTransExprTrait::Failure
Type	amun/3rd_party/blaze/math/traits/DMatDMatAddExprTrait.h	/^                       , Tmp >::Type  Type;$/;"	t	struct:blaze::DMatDMatAddExprTrait
Type	amun/3rd_party/blaze/math/traits/DMatForEachExprTrait.h	/^                       , Tmp >::Type  Type;$/;"	t	struct:blaze::DMatForEachExprTrait
Type	amun/3rd_party/blaze/math/traits/DVecCTransExprTrait.h	/^   struct Failure { typedef INVALID_TYPE  Type; };$/;"	t	struct:blaze::DVecCTransExprTrait::Failure
Type	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^   typedef T  Type;$/;"	t	struct:blaze::RemoveAdaptor
Type	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^   typedef const typename RemoveAdaptor<T>::Type  Type;$/;"	t	struct:blaze::RemoveAdaptor
Type	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^   typedef const volatile typename RemoveAdaptor<T>::Type  Type;$/;"	t	struct:blaze::RemoveAdaptor
Type	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^   typedef volatile typename RemoveAdaptor<T>::Type  Type;$/;"	t	struct:blaze::RemoveAdaptor
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^                       >::Type  Type;$/;"	t	struct:blaze::UnderlyingBuiltin
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Builtin { typedef T2  Type; };$/;"	t	struct:blaze::UnderlyingBuiltin::Builtin
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Complex { typedef typename UnderlyingBuiltin<typename T2::value_type>::Type  Type; };$/;"	t	struct:blaze::UnderlyingBuiltin::Complex
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^   struct Other { typedef typename UnderlyingBuiltin<typename T2::ElementType>::Type  Type; };$/;"	t	struct:blaze::UnderlyingBuiltin::Other
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^                       >::Type  Type;$/;"	t	struct:blaze::UnderlyingElement
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Builtin { typedef T2  Type; };$/;"	t	struct:blaze::UnderlyingElement::Builtin
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Complex { typedef typename T2::value_type  Type; };$/;"	t	struct:blaze::UnderlyingElement::Complex
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^   struct Other { typedef typename T2::ElementType  Type; };$/;"	t	struct:blaze::UnderlyingElement::Other
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^                       >::Type  Type;$/;"	t	struct:blaze::UnderlyingNumeric
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^   struct BuiltinOrComplex { typedef T2  Type; };$/;"	t	struct:blaze::UnderlyingNumeric::BuiltinOrComplex
Type	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^   struct Other { typedef typename UnderlyingNumeric<typename T2::ElementType>::Type  Type; };$/;"	t	struct:blaze::UnderlyingNumeric::Other
Type	amun/3rd_party/blaze/util/DisableIf.h	/^   typedef T  Type;  \/\/!< The instantiated type.$/;"	t	struct:blaze::DisableIfTrue
Type	amun/3rd_party/blaze/util/EnableIf.h	/^   typedef T  Type;  \/\/!< The instantiated type.$/;"	t	struct:blaze::EnableIfTrue
Type	amun/3rd_party/blaze/util/mpl/If.h	/^   typedef T1  Type;  \/\/!< The selected type.$/;"	t	struct:blaze::IfTrue
Type	amun/3rd_party/blaze/util/mpl/If.h	/^   typedef T2  Type;  \/\/!< The selected type.$/;"	t	struct:blaze::IfTrue
Type	amun/3rd_party/blaze/util/mpl/If.h	/^   typedef typename IfTrue< T1::value, T2, T3 >::Type  Type;$/;"	t	struct:blaze::If
Type	amun/3rd_party/blaze/util/typetraits/AddCV.h	/^   typedef typename std::add_cv<T>::type  Type;$/;"	t	struct:blaze::AddCV
Type	amun/3rd_party/blaze/util/typetraits/AddConst.h	/^   typedef typename std::add_const<T>::type  Type;$/;"	t	struct:blaze::AddConst
Type	amun/3rd_party/blaze/util/typetraits/AddPointer.h	/^   typedef typename std::add_pointer<T>::type  Type;$/;"	t	struct:blaze::AddPointer
Type	amun/3rd_party/blaze/util/typetraits/AddReference.h	/^   typedef typename std::add_lvalue_reference<T>::type  Type;$/;"	t	struct:blaze::AddReference
Type	amun/3rd_party/blaze/util/typetraits/AddVolatile.h	/^   typedef typename std::add_volatile<T>::type  Type;$/;"	t	struct:blaze::AddVolatile
Type	amun/3rd_party/blaze/util/typetraits/CommonType.h	/^   typedef typename std::common_type<T...>::type  Type;$/;"	t	struct:blaze::CommonType
Type	amun/3rd_party/blaze/util/typetraits/Decay.h	/^   typedef typename std::decay<T>::type  Type;$/;"	t	struct:blaze::Decay
Type	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^   struct Builtin { typedef BT  Type; };$/;"	t	struct:blaze::IsVectorizableHelper::Builtin
Type	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^   struct Complex { typedef typename CT::value_type  Type; };$/;"	t	struct:blaze::IsVectorizableHelper::Complex
Type	amun/3rd_party/blaze/util/typetraits/MakeSigned.h	/^   typedef typename std::make_signed<T>::type  Type;$/;"	t	struct:blaze::MakeSigned
Type	amun/3rd_party/blaze/util/typetraits/MakeUnsigned.h	/^   typedef typename std::make_unsigned<T>::type  Type;$/;"	t	struct:blaze::MakeUnsigned
Type	amun/3rd_party/blaze/util/typetraits/RemoveAllExtents.h	/^   typedef typename std::remove_all_extents<T>::type  Type;$/;"	t	struct:blaze::RemoveAllExtents
Type	amun/3rd_party/blaze/util/typetraits/RemoveCV.h	/^   typedef typename std::remove_cv<T>::type  Type;$/;"	t	struct:blaze::RemoveCV
Type	amun/3rd_party/blaze/util/typetraits/RemoveConst.h	/^   typedef typename std::remove_const<T>::type  Type;$/;"	t	struct:blaze::RemoveConst
Type	amun/3rd_party/blaze/util/typetraits/RemoveExtent.h	/^   typedef typename std::remove_extent<T>::type  Type;$/;"	t	struct:blaze::RemoveExtent
Type	amun/3rd_party/blaze/util/typetraits/RemovePointer.h	/^   typedef typename std::remove_pointer<T>::type  Type;$/;"	t	struct:blaze::RemovePointer
Type	amun/3rd_party/blaze/util/typetraits/RemoveReference.h	/^   typedef typename std::remove_reference<T>::type  Type;$/;"	t	struct:blaze::RemoveReference
Type	amun/3rd_party/blaze/util/typetraits/RemoveVolatile.h	/^   typedef typename std::remove_volatile<T>::type  Type;$/;"	t	struct:blaze::RemoveVolatile
Type	amun/3rd_party/spdlog/details/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	amun/3rd_party/spdlog/details/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::ArgArray
Type	amun/3rd_party/spdlog/details/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned
Type	amun/3rd_party/spdlog/details/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	amun/3rd_party/spdlog/details/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::ArgArray
Type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned
Type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	amun/3rd_party/yaml-cpp/emittermanip.h	/^  struct Type {$/;"	s	struct:YAML::_Tag
Type	amun/3rd_party/yaml-cpp/node/impl.h	/^inline NodeType::value Node::Type() const {$/;"	f	class:YAML::Node
TypeAt	amun/3rd_party/blaze/util/TypeList.h	/^struct TypeAt< NullType, Index >$/;"	s	namespace:blaze
TypeAt	amun/3rd_party/blaze/util/TypeList.h	/^struct TypeAt< TypeList<Head,Tail>, 0 >$/;"	s	namespace:blaze
TypeAt	amun/3rd_party/blaze/util/TypeList.h	/^struct TypeAt< TypeList<Head,Tail>, Index >$/;"	s	namespace:blaze
TypeList	amun/3rd_party/blaze/util/TypeList.h	/^struct TypeList$/;"	s	namespace:blaze
TypeSelector	amun/3rd_party/spdlog/details/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits
TypeSelector	amun/3rd_party/spdlog/details/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	amun/3rd_party/spdlog/details/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSelector	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits
TypeSelector	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSpec	amun/3rd_party/spdlog/details/format.h	/^struct TypeSpec: EmptySpec$/;"	s	namespace:fmt
TypeSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct TypeSpec: EmptySpec$/;"	s	namespace:fmt
TypeValueMapping	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMapping$/;"	s	namespace:blaze
TypeValueMappingHelper	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMappingHelper<false,false,false,false>$/;"	s	namespace:blaze
TypeValueMappingHelper	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMappingHelper<false,false,false,true>$/;"	s	namespace:blaze
TypeValueMappingHelper	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMappingHelper<false,false,true,false>$/;"	s	namespace:blaze
TypeValueMappingHelper	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMappingHelper<false,true,false,false>$/;"	s	namespace:blaze
TypeValueMappingHelper	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^struct TypeValueMappingHelper<true,false,false,false>$/;"	s	namespace:blaze
TypedBadConversion	amun/3rd_party/yaml-cpp/exceptions.h	/^  explicit TypedBadConversion(const Mark& mark_) : BadConversion(mark_) {}$/;"	f	class:YAML::TypedBadConversion
TypedBadConversion	amun/3rd_party/yaml-cpp/exceptions.h	/^class TypedBadConversion : public BadConversion {$/;"	c	namespace:YAML
TypedKeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^  TypedKeyNotFound(const Mark& mark_, const T& key_)$/;"	f	class:YAML::TypedKeyNotFound
TypedKeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^class TypedKeyNotFound : public KeyNotFound {$/;"	c	namespace:YAML
UINT	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
UINT	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	amun/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULongLong	amun/3rd_party/spdlog/details/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt
ULongLong	amun/3rd_party/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt
UNEXPECTED_END_MAP	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNEXPECTED_END_MAP = "unexpected end map token";$/;"	m	namespace:YAML::ErrorMsg
UNEXPECTED_END_SEQ	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNEXPECTED_END_SEQ = "unexpected end sequence token";$/;"	m	namespace:YAML::ErrorMsg
UNKNOWN	amun/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
UNKNOWN_ANCHOR	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNKNOWN_ANCHOR = "the referenced anchor is not defined";$/;"	m	namespace:YAML::ErrorMsg
UNKNOWN_TOKEN	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNKNOWN_TOKEN = "unknown token";$/;"	m	namespace:YAML::ErrorMsg
UNK_ID	amun/common/types.h	/^const Word UNK_ID = 1;$/;"	m	namespace:amunmt
UNK_STR	amun/common/types.h	/^const std::string UNK_STR = "<unk>";$/;"	m	namespace:amunmt
UNMATCHED_GROUP_TAG	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNMATCHED_GROUP_TAG = "unmatched group tag";$/;"	m	namespace:YAML::ErrorMsg
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1& )$/;"	f	namespace:blaze
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1&, const T2& )$/;"	f	namespace:blaze
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1&, const T2&, const T3& )$/;"	f	namespace:blaze
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1&, const T2&, const T3&, const T4& )$/;"	f	namespace:blaze
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1&, const T2&, const T3&, const T4&, const T5& )$/;"	f	namespace:blaze
UNUSED_PARAMETER	amun/3rd_party/blaze/util/Unused.h	/^inline void UNUSED_PARAMETER( const T1&, const T2&, const T3&, const T4&, const T5&, const T6& )$/;"	f	namespace:blaze
UNVERIFIED	amun/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
URI	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& URI() {$/;"	f	namespace:YAML::Exp
UTF16ToUTF8	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC fmt::internal::UTF16ToUTF8::UTF16ToUTF8(fmt::WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	amun/3rd_party/spdlog/details/format.h	/^    UTF16ToUTF8()$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	amun/3rd_party/spdlog/details/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF16ToUTF8	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC internal::UTF16ToUTF8::UTF16ToUTF8(WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    UTF16ToUTF8()$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF8ToUTF16	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC fmt::internal::UTF8ToUTF16::UTF8ToUTF16(fmt::StringRef s)$/;"	f	class:fmt::internal::UTF8ToUTF16
UTF8ToUTF16	amun/3rd_party/spdlog/details/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
UTF8ToUTF16	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC internal::UTF8ToUTF16::UTF8ToUTF16(StringRef s)$/;"	f	class:fmt::internal::UTF8ToUTF16
UTF8ToUTF16	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
UTF8_FOR_CPP_2675DCD0_9480_4c0c_B92A_CC14C027B731	amun/3rd_party/utf8/utf8.h	29;"	d
UTF8_FOR_CPP_CHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	amun/3rd_party/utf8/checked.h	29;"	d
UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	amun/3rd_party/utf8/core.h	29;"	d
UTF8_FOR_CPP_UNCHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	amun/3rd_party/utf8/unchecked.h	29;"	d
UTF8_OK	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
UTIL_FUNC_NAME	amun/3rd_party/extract_lex/exception.h	50;"	d
UTIL_FUNC_NAME	amun/3rd_party/extract_lex/exception.h	53;"	d
UTIL_FUNC_NAME	amun/3rd_party/extract_lex/exception.h	55;"	d
UTIL_FUNC_NAME	amun/common/exception.h	67;"	d
UTIL_FUNC_NAME	amun/common/exception.h	70;"	d
UTIL_FUNC_NAME	amun/common/exception.h	72;"	d
UTIL_LIKELY	amun/3rd_party/extract_lex/exception.h	90;"	d
UTIL_LIKELY	amun/3rd_party/extract_lex/exception.h	92;"	d
UTIL_LIKELY	amun/common/exception.h	107;"	d
UTIL_LIKELY	amun/common/exception.h	109;"	d
UTIL_THROW	amun/3rd_party/extract_lex/exception.h	77;"	d
UTIL_THROW	amun/common/exception.h	94;"	d
UTIL_THROW2	amun/3rd_party/extract_lex/exception.h	80;"	d
UTIL_THROW_ARG	amun/3rd_party/extract_lex/exception.h	74;"	d
UTIL_THROW_ARG	amun/common/exception.h	91;"	d
UTIL_THROW_BACKEND	amun/3rd_party/extract_lex/exception.h	67;"	d
UTIL_THROW_BACKEND	amun/common/exception.h	84;"	d
UTIL_THROW_IF	amun/3rd_party/extract_lex/exception.h	101;"	d
UTIL_THROW_IF	amun/common/exception.h	118;"	d
UTIL_THROW_IF2	amun/3rd_party/extract_lex/exception.h	104;"	d
UTIL_THROW_IF_ARG	amun/3rd_party/extract_lex/exception.h	95;"	d
UTIL_THROW_IF_ARG	amun/common/exception.h	112;"	d
UTIL_UNLIKELY	amun/3rd_party/extract_lex/exception.h	84;"	d
UTIL_UNLIKELY	amun/3rd_party/extract_lex/exception.h	86;"	d
UTIL_UNLIKELY	amun/common/exception.h	101;"	d
UTIL_UNLIKELY	amun/common/exception.h	103;"	d
UUx_	amun/cpu/dl4mt/gru.h	/^    mutable mblas::Tensor UUx_;$/;"	m	class:amunmt::CPU::dl4mt::GRU
UUx_	amun/cpu/dl4mt/transition.h	/^    mutable mblas::Matrix UUx_;$/;"	m	class:amunmt::CPU::Transition
UUx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor UUx_;$/;"	m	class:amunmt::CPU::GRU
UUx_	amun/cpu/nematus/transition.h	/^    mutable mblas::Tensor UUx_;$/;"	m	class:amunmt::CPU::Nematus::Transition
UUx_	amun/fpga/gru.h	/^  mutable mblas::Tensor UUx_;$/;"	m	class:amunmt::FPGA::FastGRU
UUx_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor UUx_;$/;"	m	class:amunmt::GPU::FastGRU
U_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
U_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
U_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
U_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> U_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
U_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
U_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
U_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
U_	amun/fpga/gru.h	/^  mutable mblas::Tensor U_;$/;"	m	class:amunmt::FPGA::SlowGRU
U_	amun/fpga/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
U_	amun/fpga/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
U_	amun/fpga/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
U_	amun/fpga/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
U_	amun/fpga/model.h	/^    const mblas::Tensor U_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
U_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor U_;$/;"	m	class:amunmt::GPU::SlowGRU
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM1
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM2
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardLSTM
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
U_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> U_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardLSTM
U_lnb_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> U_lnb_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
U_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
U_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
U_lns_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> U_lns_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
U_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
U_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor U_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Um_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Um_;$/;"	m	struct:amunmt::GPU::Weights::MultWeights
Undefined	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
UnderlyingBuiltin	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^struct UnderlyingBuiltin$/;"	s	namespace:blaze
UnderlyingElement	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^struct UnderlyingElement$/;"	s	namespace:blaze
UnderlyingNumeric	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^struct UnderlyingNumeric$/;"	s	namespace:blaze
UniLowerElement	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^class UniLowerElement : private SparseElement$/;"	c	namespace:blaze
UniLowerElement	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>::UniLowerElement( IteratorType pos, bool diagonal )$/;"	f	class:blaze::UniLowerElement
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/BaseTemplate.h	/^class UniLowerMatrix$/;"	c	namespace:blaze
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^class UniLowerMatrix<MT,SO,true>$/;"	c	namespace:blaze
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( const A1& a1 )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( const UniLowerMatrix& m )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix( size_t n, const Other* array )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline UniLowerMatrix<MT,SO,true>::UniLowerMatrix()$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^class UniLowerMatrix<MT,SO,false>$/;"	c	namespace:blaze
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix( const UniLowerMatrix& m )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix( size_t n )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::UniLowerMatrix
UniLowerMatrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline UniLowerMatrix<MT,SO,false>::UniLowerMatrix()$/;"	f	class:blaze::UniLowerMatrix
UniLowerProxy	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^class UniLowerProxy : public Proxy< UniLowerProxy<MT> >$/;"	c	namespace:blaze
UniLowerProxy	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline UniLowerProxy<MT>::UniLowerProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::UniLowerProxy
UniLowerProxy	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline UniLowerProxy<MT>::UniLowerProxy( const UniLowerProxy& ulp )$/;"	f	class:blaze::UniLowerProxy
UniLowerValue	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^class UniLowerValue : public Proxy< UniLowerValue<MT> >$/;"	c	namespace:blaze
UniLowerValue	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>::UniLowerValue( RepresentedType& value, bool diagonal )$/;"	f	class:blaze::UniLowerValue
UniUpperElement	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^class UniUpperElement : private SparseElement$/;"	c	namespace:blaze
UniUpperElement	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>::UniUpperElement( IteratorType pos, bool diagonal )$/;"	f	class:blaze::UniUpperElement
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/BaseTemplate.h	/^class UniUpperMatrix$/;"	c	namespace:blaze
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^class UniUpperMatrix<MT,SO,true>$/;"	c	namespace:blaze
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( const A1& a1 )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( const UniUpperMatrix& m )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix( size_t n, const Other* array )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline UniUpperMatrix<MT,SO,true>::UniUpperMatrix()$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^class UniUpperMatrix<MT,SO,false>$/;"	c	namespace:blaze
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix( const UniUpperMatrix& m )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix( size_t n )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::UniUpperMatrix
UniUpperMatrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline UniUpperMatrix<MT,SO,false>::UniUpperMatrix()$/;"	f	class:blaze::UniUpperMatrix
UniUpperProxy	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^class UniUpperProxy : public Proxy< UniUpperProxy<MT> >$/;"	c	namespace:blaze
UniUpperProxy	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline UniUpperProxy<MT>::UniUpperProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::UniUpperProxy
UniUpperProxy	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline UniUpperProxy<MT>::UniUpperProxy( const UniUpperProxy& uup )$/;"	f	class:blaze::UniUpperProxy
UniUpperValue	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^class UniUpperValue : public Proxy< UniUpperValue<MT> >$/;"	c	namespace:blaze
UniUpperValue	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>::UniUpperValue( RepresentedType& value, bool diagonal )$/;"	f	class:blaze::UniUpperValue
UnionCommand	amun/3rd_party/fast_align/src/atools.cc	/^struct UnionCommand : public Command {$/;"	s	file:
Unique	amun/3rd_party/blaze/util/TypeList.h	/^struct Unique< NullType >$/;"	s	namespace:blaze
Unique	amun/3rd_party/blaze/util/TypeList.h	/^struct Unique< TypeList<Head,Tail> >$/;"	s	namespace:blaze
UnnormalizedProb	amun/3rd_party/fast_align/src/da.h	/^  static double UnnormalizedProb(const unsigned i, const unsigned j, const unsigned m, const unsigned n, const double alpha) {$/;"	f	struct:DiagonalAlignment
UnsignedValue	amun/3rd_party/blaze/util/UnsignedValue.h	/^class UnsignedValue$/;"	c	namespace:blaze
UnsignedValue	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline UnsignedValue<T>::UnsignedValue( T value )$/;"	f	class:blaze::UnsignedValue
Unsupported	amun/3rd_party/spdlog/details/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	amun/3rd_party/spdlog/details/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
UpdateFromPairs	amun/3rd_party/fast_align/src/fast_align.cc	/^void UpdateFromPairs(const vector<string>& lines, const int lc, const int iter,$/;"	f
UpperCase	amun/3rd_party/yaml-cpp/emittermanip.h	/^  UpperCase,      \/\/ TRUE, N$/;"	e	enum:YAML::EMITTER_MANIP
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/BaseTemplate.h	/^class UpperMatrix$/;"	c	namespace:blaze
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^class UpperMatrix<MT,SO,true>$/;"	c	namespace:blaze
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( ElementType* ptr, size_t n )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( ElementType* ptr, size_t n, Deleter d )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( ElementType* ptr, size_t n, size_t nn )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( ElementType* ptr, size_t n, size_t nn, Deleter d )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( const A1& a1 )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( const UpperMatrix& m )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( size_t n, const ElementType& init )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix( size_t n, const Other* array )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>::UpperMatrix()$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^class UpperMatrix<MT,SO,false>$/;"	c	namespace:blaze
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix( const Matrix<MT2,SO2>& m )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix( const UpperMatrix& m )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix( size_t n )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix( size_t n, const std::vector<size_t>& nonzeros )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix( size_t n, size_t nonzeros )$/;"	f	class:blaze::UpperMatrix
UpperMatrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline UpperMatrix<MT,SO,false>::UpperMatrix()$/;"	f	class:blaze::UpperMatrix
UpperProxy	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^class UpperProxy : public Proxy< UpperProxy<MT>, ElementType_<MT> >$/;"	c	namespace:blaze
UpperProxy	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline UpperProxy<MT>::UpperProxy( MT& matrix, size_t row, size_t column )$/;"	f	class:blaze::UpperProxy
UpperProxy	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline UpperProxy<MT>::UpperProxy( const UpperProxy& up )$/;"	f	class:blaze::UpperProxy
UseAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatDMatAddExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatDMatSubExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatForEachExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatSVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatScalarDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatScalarMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatTDMatAddExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatTDMatSubExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DMatTransExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecDVecAddExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecDVecDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecDVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecDVecSubExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecForEachExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecSVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecScalarDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecScalarMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecTDVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecTSVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::DVecTransExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SMatDVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SMatForEachExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SMatScalarDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SMatScalarMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SMatTransExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecDVecDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecDVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecForEachExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecScalarDivExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecScalarMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecTDVecMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::SVecTransExpr
UseAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::TDVecTSMatMultExpr
UseAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   struct UseAssign {$/;"	s	class:blaze::TSVecTDMatMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	namespace:blaze
UseBlasKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::DMatDVecMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::DMatTDMatMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::TDMatDMatMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::TDMatDVecMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	namespace:blaze
UseBlasKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::TDVecDMatMultExpr
UseBlasKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   struct UseBlasKernel {$/;"	s	class:blaze::TDVecTDMatMultExpr
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   struct UseDefaultKernel {$/;"	s
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s	namespace:blaze
UseDefaultKernel	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   struct UseDefaultKernel {$/;"	s
UseFusedSoftmax	amun/common/god.h	/^    bool UseFusedSoftmax() const$/;"	f	class:amunmt::God
UseNestedMember	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^   struct UseNestedMember { static constexpr bool value = T2::simdEnabled; };$/;"	s	struct:blaze::IsSIMDEnabledHelper
UseNestedMember	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^   struct UseNestedMember { static constexpr bool value = T2::smpAssignable; };$/;"	s	struct:blaze::IsSMPAssignableHelper
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseOptimizedKernel	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   struct UseOptimizedKernel {$/;"	s	namespace:blaze
UseSIMDEnabledFlag	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   struct UseSIMDEnabledFlag {$/;"	s	class:blaze::DMatForEachExpr
UseSIMDEnabledFlag	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   struct UseSIMDEnabledFlag {$/;"	s	class:blaze::DVecForEachExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatDMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatDMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatForEachExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatSVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatScalarDivExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatScalarMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatTDMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatTDMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatTSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatTSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DMatTransExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecDVecAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecDVecDivExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecDVecSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecForEachExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecSVecAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecSVecSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecScalarDivExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecScalarMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecTDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::DVecTransExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatDMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatForEachExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatSVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatScalarDivExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatScalarMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatTDMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatTSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatTSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SMatTransExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecDVecSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecForEachExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecSVecAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecSVecSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecScalarDivExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecScalarMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::SVecTransExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDMatDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDMatSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDMatSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDMatSVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDVecDMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDVecSMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDVecTDMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TDVecTSMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatDMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatDVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatSVecMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatTSMatAddExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSMatTSMatSubExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSVecDMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSVecSMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSVecTDMatMultExpr
UseSMPAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   struct UseSMPAssign {$/;"	s	class:blaze::TSVecTSMatMultExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::SMatSMatAddExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::SMatSMatSubExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::SMatTSMatAddExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::SMatTSMatSubExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::TSMatSMatSubExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::TSMatTSMatAddExpr
UseSymmetricKernel	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   struct UseSymmetricKernel {$/;"	s	class:blaze::TSMatTSMatSubExpr
UseTensorCores	amun/common/god.h	/^    bool UseTensorCores() const$/;"	f	class:amunmt::God
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedDefaultKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   struct UseVectorizedDefaultKernel {$/;"	s	namespace:blaze
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::DVecTDVecMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::DVecTSVecMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::SMatDMatMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::SVecTDVecMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::TDMatSVecMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::TDMatTSMatMultExpr
UseVectorizedKernel	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   struct UseVectorizedKernel {$/;"	s	class:blaze::TSVecDMatMultExpr
Utf8Adjust	amun/3rd_party/yaml-cpp/stream.cpp	/^inline char Utf8Adjust(unsigned long ch, unsigned char lead_bits,$/;"	f	namespace:YAML
Utf8BytesIndicated	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^int Utf8BytesIndicated(char ch) {$/;"	f	namespace:YAML::Utils::__anon67
Utf8_ByteOrderMark	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Utf8_ByteOrderMark() {$/;"	f	namespace:YAML::Exp
UtfIntroCharType	amun/3rd_party/yaml-cpp/stream.cpp	/^enum UtfIntroCharType {$/;"	g	namespace:YAML	file:
UtfIntroState	amun/3rd_party/yaml-cpp/stream.cpp	/^enum UtfIntroState {$/;"	g	namespace:YAML	file:
Utils	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^namespace Utils {$/;"	n	namespace:YAML	file:
Utils	amun/3rd_party/yaml-cpp/emitterutils.h	/^namespace Utils {$/;"	n	namespace:YAML
Ux_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Ux_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Ux_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> Ux_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
Ux_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Ux_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Ux_	amun/fpga/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Ux_	amun/fpga/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Ux_	amun/fpga/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Ux_	amun/fpga/model.h	/^    const mblas::Tensor Ux_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Ux_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Ux_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Ux_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Ux_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Ux_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Ux_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Ux_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Ux_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Ux_lnb_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> Ux_lnb_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
Ux_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Ux_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Ux_lns_	amun/cpu/nematus/model.h	/^      std::vector<mblas::Tensor> Ux_lns_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
Ux_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Ux_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Ux_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
VALID	amun/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
VALID	amun/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
VALUE	amun/3rd_party/yaml-cpp/token.h	/^    VALUE,$/;"	e	enum:YAML::Token::TYPE
VALUE_DETAIL_ITERATOR_FWD_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	2;"	d
VALUE_DETAIL_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/iterator.h	2;"	d
VALUE_DETAIL_MEMORY_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/memory.h	2;"	d
VALUE_DETAIL_NODE_DATA_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/node_data.h	2;"	d
VALUE_DETAIL_NODE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	2;"	d
VALUE_DETAIL_NODE_REF_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	2;"	d
VALUE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/iterator.h	2;"	d
VALUE_PARSE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/parse.h	2;"	d
VALUE_PTR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/ptr.h	2;"	d
VALUE_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/node/type.h	2;"	d
VCT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::DMatDVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DMatSVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::SMatDVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SMatSVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::TDMatDVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::TDMatSVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecDMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecSMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecTDMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecTSMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side dense vector expression.$/;"	t	class:blaze::TSMatDVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the right-hand side sparse vector expression.$/;"	t	class:blaze::TSMatSVecMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecDMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecSMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecTDMatMultExpr
VCT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef CompositeType_<VT>  VCT;  \/\/!< Composite type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecTSMatMultExpr
VERBATIM	amun/3rd_party/yaml-cpp/tag.h	/^    VERBATIM,$/;"	e	enum:YAML::Tag::TYPE
VET	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::DMatDVecMultExpr
VET	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the right-hand side dense vector expression.$/;"	t	class:blaze::TDMatDVecMultExpr
VET	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the right-hand side sparse vector expression.$/;"	t	class:blaze::TDMatSVecMultExpr
VET	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the left-hand side dense vector epxression.$/;"	t	class:blaze::TDVecDMatMultExpr
VET	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the left-hand side dense vector epxression.$/;"	t	class:blaze::TDVecTDMatMultExpr
VET	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef ElementType_<VRT>   VET;  \/\/!< Element type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecDMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::DMatDVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::DMatSVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::SMatDVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::SMatSVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::TDMatDVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::TDMatSVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecDMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecSMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecTDMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side dense vector expression.$/;"	t	class:blaze::TDVecTSMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side dense vector expression.$/;"	t	class:blaze::TSMatDVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the right-hand side sparse vector expression.$/;"	t	class:blaze::TSMatSVecMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecDMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecSMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecTDMatMultExpr
VRT	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   typedef ResultType_<VT>     VRT;  \/\/!< Result type of the left-hand side sparse vector expression.$/;"	t	class:blaze::TSVecTSMatMultExpr
VT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE ( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE  ( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE( VT );$/;"	v
VT	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE  ( VT );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE( VT1 );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE ( VT1 );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE( VT1 );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE ( VT1 );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_COLUMN_VECTOR_TYPE( VT1 );$/;"	v
VT1	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_VECTOR_TYPE( VT1 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE ( VT2 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE   ( VT2 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE   ( VT2 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_SPARSE_VECTOR_TYPE( VT2 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_DENSE_VECTOR_TYPE ( VT2 );$/;"	v
VT2	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   BLAZE_CONSTRAINT_MUST_BE_ROW_VECTOR_TYPE   ( VT2 );$/;"	v
V_	amun/cpu/dl4mt/decoder.h	/^        mblas::ColumnVector V_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
V_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor V_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
V_	amun/cpu/nematus/decoder.h	/^        mblas::ColumnVector V_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
V_	amun/cpu/nematus/model.h	/^    const mblas::Tensor V_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
V_	amun/fpga/model.h	/^    const mblas::Tensor V_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
V_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> V_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
Validate	amun/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::SimpleKey::Validate() {$/;"	f	class:YAML::Scanner::SimpleKey
Validate	amun/common/config.cpp	/^void Validate(const YAML::Node& config) {$/;"	f	namespace:amunmt
Value	amun/3rd_party/spdlog/details/format.h	/^struct Value$/;"	s	namespace:fmt::internal
Value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct Value$/;"	s	namespace:fmt::internal
Value	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Value,$/;"	e	enum:YAML::EMITTER_MANIP
Value	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Value() {$/;"	f	namespace:YAML::Exp
ValueInFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ValueInFlow() {$/;"	f	namespace:YAML::Exp
ValueInJSONFlow	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ValueInJSONFlow() {$/;"	f	namespace:YAML::Exp
ValueIndexPair	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^class ValueIndexPair : private SparseElement$/;"	c	namespace:blaze
ValueIndexPair	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>::ValueIndexPair( const Type& v, size_t i )$/;"	f	class:blaze::ValueIndexPair
ValueIndexPair	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>::ValueIndexPair()$/;"	f	class:blaze::ValueIndexPair
ValueType	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DiagonalMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::HermitianMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   typedef HermitianValue<MT>        ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::HermitianElement
ValueType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::HermitianProxy
ValueType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::HermitianValue
ValueType	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef HermitianElement<MT>       ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::HermitianMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::LowerMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef RemoveReference_<Reference>      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::NumericProxy
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   typedef Type         ValueType;       \/\/!< Type of the shared value.$/;"	t	class:blaze::SharedValue
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef ET                    ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::SymmetricMatrix::SharedElement
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef SparseElementType          ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef SymmetricElement<MT>       ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   typedef SymmetricValue<MT>        ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::SymmetricElement
ValueType	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::SymmetricValue
ValueType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniLowerMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef UniLowerElement<MT>        ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniLowerMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   typedef UniLowerValue<MT>        ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::UniLowerElement
ValueType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::UniLowerProxy
ValueType	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::UniLowerValue
ValueType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniUpperMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef UniUpperElement<MT>        ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniUpperMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   typedef UniUpperValue<MT>        ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::UniUpperElement
ValueType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::UniUpperProxy
ValueType	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^                       , BuiltinType<RepresentedType> >::Type  ValueType;$/;"	t	class:blaze::UniUpperValue
ValueType	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef ElementType_<MT>                 ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UpperMatrix::Iterator
ValueType	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef Type                             ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DenseIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ElementType                      ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type       ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ElementType                ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ElementType                ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef Element                    ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:ConstIterator
ValueType	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type       ValueType;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
ValueType	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^   typedef value_type               ValueType;   \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::ComplexProxy
ValueType	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   typedef Type         ValueType;       \/\/!< The value type of the value-index-pair.$/;"	t	class:blaze::ValueIndexPair
ValueType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ColumnElement<MatrixType,IteratorType>  ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Column::ColumnIterator
ValueType	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ValueType_<SET>              ValueType;       \/\/!< The value type of the row element.$/;"	t	class:blaze::Column::ColumnElement
ValueType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef RowElement<MatrixType,IteratorType>  ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Row::RowIterator
ValueType	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ValueType_<SET>              ValueType;       \/\/!< The value type of the row element.$/;"	t	class:blaze::Row::RowElement
ValueType	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  ValueType;$/;"	t	class:blaze::Submatrix::SubmatrixIterator
ValueType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef SubmatrixElement<MatrixType,IteratorType>  ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
ValueType	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ValueType_<SET>              ValueType;       \/\/!< The value type of the row element.$/;"	t	class:blaze::Submatrix::SubmatrixElement
ValueType	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef typename std::iterator_traits<IteratorType>::value_type  ValueType;$/;"	t	class:blaze::Subvector::SubvectorIterator
ValueType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef SubvectorElement<VectorType,IteratorType>  ValueType;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Subvector::SubvectorIterator
ValueType	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ValueType_<SET>              ValueType;       \/\/!< The value type of the row element.$/;"	t	class:blaze::Subvector::SubvectorElement
ValueType	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef Type            ValueType;        \/\/!< Type of the allocated values.$/;"	t	class:blaze::AlignedAllocator
ValueType	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef Type*                            ValueType;          \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrIterator
ValueType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef C*                         ValueType;          \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrVector::CastIterator
ValueType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef T*                    ValueType;           \/\/!< Type of the underlying values.$/;"	t	class:blaze::PtrVector
ValueType	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef const C*                   ValueType;          \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrVector::ConstCastIterator
VecEvalExpr	amun/3rd_party/blaze/math/expressions/VecEvalExpr.h	/^struct VecEvalExpr : private EvalExpr$/;"	s	namespace:blaze
VecForEachExpr	amun/3rd_party/blaze/math/expressions/VecForEachExpr.h	/^struct VecForEachExpr : private ForEachExpr$/;"	s	namespace:blaze
VecScalarDivExpr	amun/3rd_party/blaze/math/expressions/VecScalarDivExpr.h	/^struct VecScalarDivExpr : private DivExpr$/;"	s	namespace:blaze
VecScalarMultExpr	amun/3rd_party/blaze/math/expressions/VecScalarMultExpr.h	/^struct VecScalarMultExpr : private MultExpr$/;"	s	namespace:blaze
VecSerialExpr	amun/3rd_party/blaze/math/expressions/VecSerialExpr.h	/^struct VecSerialExpr : private SerialExpr$/;"	s	namespace:blaze
VecTVecMultExpr	amun/3rd_party/blaze/math/expressions/VecTVecMultExpr.h	/^struct VecTVecMultExpr : private MultExpr$/;"	s	namespace:blaze
VecTransExpr	amun/3rd_party/blaze/math/expressions/VecTransExpr.h	/^struct VecTransExpr : private TransExpr$/;"	s	namespace:blaze
VecVecAddExpr	amun/3rd_party/blaze/math/expressions/VecVecAddExpr.h	/^struct VecVecAddExpr : private AddExpr$/;"	s	namespace:blaze
VecVecDivExpr	amun/3rd_party/blaze/math/expressions/VecVecDivExpr.h	/^struct VecVecDivExpr : private DivExpr$/;"	s	namespace:blaze
VecVecMultExpr	amun/3rd_party/blaze/math/expressions/VecVecMultExpr.h	/^struct VecVecMultExpr : private MultExpr$/;"	s	namespace:blaze
VecVecSubExpr	amun/3rd_party/blaze/math/expressions/VecVecSubExpr.h	/^struct VecVecSubExpr : private SubExpr$/;"	s	namespace:blaze
Vector	amun/3rd_party/blaze/math/expressions/Vector.h	/^struct Vector$/;"	s	namespace:blaze
Vector	amun/cpu/mblas/tensor.h	/^typedef blaze::DynamicVector<float, blaze::rowVector> Vector;$/;"	t	namespace:amunmt::CPU::mblas
Vector	amun/gpu/mblas/vector.h	/^  Vector()$/;"	f	class:amunmt::GPU::mblas::Vector
Vector	amun/gpu/mblas/vector.h	/^  Vector(const Vector<T> &other)$/;"	f	class:amunmt::GPU::mblas::Vector
Vector	amun/gpu/mblas/vector.h	/^  Vector(const std::vector<T> &vec)$/;"	f	class:amunmt::GPU::mblas::Vector
Vector	amun/gpu/mblas/vector.h	/^  Vector(unsigned size)$/;"	f	class:amunmt::GPU::mblas::Vector
Vector	amun/gpu/mblas/vector.h	/^  Vector(unsigned size, const T &val)$/;"	f	class:amunmt::GPU::mblas::Vector
Vector	amun/gpu/mblas/vector.h	/^class Vector$/;"	c	namespace:amunmt::GPU::mblas
VectorAccessProxy	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^class VectorAccessProxy : public Proxy< VectorAccessProxy<VT>, ElementType_<VT> >$/;"	c	namespace:blaze
VectorAccessProxy	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline VectorAccessProxy<VT>::VectorAccessProxy( VT& sv, size_t i )$/;"	f	class:blaze::VectorAccessProxy
VectorAccessProxy	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline VectorAccessProxy<VT>::VectorAccessProxy( const VectorAccessProxy& vap )$/;"	f	class:blaze::VectorAccessProxy
VectorSerializer	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^VectorSerializer::VectorSerializer()$/;"	f	class:blaze::VectorSerializer
VectorSerializer	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^class VectorSerializer$/;"	c	namespace:blaze
VectorType	amun/3rd_party/blaze/math/expressions/Vector.h	/^   typedef VT  VectorType;  \/\/!< Type of the vector.$/;"	t	struct:blaze::Vector
VectorValueMapping	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   struct VectorValueMapping$/;"	s	class:blaze::VectorSerializer
VectorValueMappingHelper	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^struct VectorSerializer::VectorValueMappingHelper<false>$/;"	s	class:blaze::VectorSerializer
VectorValueMappingHelper	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^struct VectorSerializer::VectorValueMappingHelper<true>$/;"	s	class:blaze::VectorSerializer
VectorWrapper	amun/gpu/mblas/vector_wrapper.h	/^  VectorWrapper(T *ptr, unsigned size)$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
VectorWrapper	amun/gpu/mblas/vector_wrapper.h	/^  VectorWrapper(Vector<T> &vec)$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
VectorWrapper	amun/gpu/mblas/vector_wrapper.h	/^  VectorWrapper(const Vector<T> &vec)$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
VectorWrapper	amun/gpu/mblas/vector_wrapper.h	/^class VectorWrapper$/;"	c	namespace:amunmt::GPU::mblas
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/views/column/Dense.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/views/row/Dense.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAddAssign	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   struct VectorizedAddAssign {$/;"	s	namespace:blaze
VectorizedAssign	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::CustomMatrix
VectorizedAssign	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::CustomVector
VectorizedAssign	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::DynamicMatrix
VectorizedAssign	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::DynamicVector
VectorizedAssign	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::HybridMatrix
VectorizedAssign	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::HybridVector
VectorizedAssign	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::StaticMatrix
VectorizedAssign	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::StaticVector
VectorizedAssign	amun/3rd_party/blaze/math/views/column/Dense.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::Column
VectorizedAssign	amun/3rd_party/blaze/math/views/row/Dense.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::Row
VectorizedAssign	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::Submatrix
VectorizedAssign	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   struct VectorizedAssign {$/;"	s	class:blaze::Subvector
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/views/column/Dense.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/views/row/Dense.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   struct VectorizedSubAssign {$/;"	s
VectorizedSubAssign	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   struct VectorizedSubAssign {$/;"	s
Verbatim	amun/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
VerbatimTag	amun/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag VerbatimTag(const std::string content) {$/;"	f	namespace:YAML
VerbatimTagEnd	amun/3rd_party/yaml-cpp/exp.h	/^const char VerbatimTagEnd = '>';$/;"	m	namespace:YAML::Keys
VerbatimTagStart	amun/3rd_party/yaml-cpp/exp.h	/^const char VerbatimTagStart = '<';$/;"	m	namespace:YAML::Keys
VerifySimpleKey	amun/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::VerifySimpleKey() {$/;"	f	class:YAML::Scanner
Version	amun/3rd_party/yaml-cpp/directives.h	/^struct Version {$/;"	s	namespace:YAML
View	amun/3rd_party/blaze/math/expressions/View.h	/^struct View : private Expression$/;"	s	namespace:blaze
Vocab	amun/3rd_party/extract_lex/extract-lex.h	/^class Vocab$/;"	c	namespace:extract
Vocab	amun/common/vocab.cpp	/^Vocab::Vocab(const std::string& path) {$/;"	f	class:amunmt::Vocab
Vocab	amun/common/vocab.h	/^class Vocab {$/;"	c	namespace:amunmt
VocabGetter	amun/gpu/decoder/kenlm.cpp	/^    VocabGetter(WordPairs& vm, const Vocab& vocab)$/;"	f	class:VocabGetter
VocabGetter	amun/gpu/decoder/kenlm.cpp	/^class VocabGetter : public lm::EnumerateVocab {$/;"	c	file:
VocabPtr	amun/common/factor_vocab.h	/^    typedef std::unique_ptr<Vocab> VocabPtr;$/;"	t	class:amunmt::FactorVocab
W1_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
W1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
W1_	amun/fpga/model.h	/^    const mblas::Tensor W1_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
W1_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W1_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
W2_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
W2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
W2_	amun/fpga/model.h	/^    const mblas::Tensor W2_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
W2_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W2_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
W3_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W3_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
W3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
W3_	amun/fpga/model.h	/^    const mblas::Tensor W3_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
W3_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W3_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
W4_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W4_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecSoftmax
W4_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W4_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
W4_	amun/fpga/model.h	/^    const mblas::Tensor W4_;$/;"	m	struct:amunmt::FPGA::Weights::DecSoftmax
W4_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W4_;$/;"	m	struct:amunmt::GPU::Weights::DecSoftmax
WArrayWriter	amun/3rd_party/spdlog/details/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WArrayWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WCStringRef	amun/3rd_party/spdlog/details/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt
WCStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt
WCharHelper	amun/3rd_party/spdlog/details/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	amun/3rd_party/spdlog/details/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WCharHelper	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WHITE	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
WHITE	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
WHITE	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
WIN32_LEAN_AND_MEAN	amun/3rd_party/spdlog/details/os.h	27;"	d
WMemoryWriter	amun/3rd_party/spdlog/details/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WMemoryWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WSTRING	amun/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
WSTRING	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
WStringRef	amun/3rd_party/spdlog/details/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt
WStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt
WWriter	amun/3rd_party/spdlog/details/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt
WWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt
WWx_	amun/cpu/dl4mt/gru.h	/^    mutable mblas::Tensor WWx_;$/;"	m	class:amunmt::CPU::dl4mt::GRU
WWx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor WWx_;$/;"	m	class:amunmt::CPU::GRU
WWx_	amun/fpga/gru.h	/^  mutable mblas::Tensor WWx_;$/;"	m	class:amunmt::FPGA::FastGRU
WWx_	amun/gpu/dl4mt/gru.h	/^    mutable mblas::Tensor WWx_;$/;"	m	class:amunmt::GPU::FastGRU
W_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecAttention
W_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
W_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
W_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
W_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
W_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
W_	amun/fpga/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::FPGA::Weights::DecAlignment
W_	amun/fpga/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
W_	amun/fpga/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
W_	amun/fpga/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
W_	amun/fpga/model.h	/^    const mblas::Tensor W_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::DecAlignment
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM1
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::DecLSTM2
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardLSTM
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
W_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> W_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardLSTM
W_comb_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_comb_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
W_comb_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_comb_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
W_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
W_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
W_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
W_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor W_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
WaitingForKey	amun/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
WaitingForSequenceEntry	amun/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
WaitingForValue	amun/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
Wbbx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor Wbbx_;$/;"	m	class:amunmt::CPU::GRU
WcPolicy	amun/3rd_party/blaze/util/timing/WcPolicy.h	/^struct WcPolicy$/;"	s	namespace:blaze::timing
WcTimer	amun/3rd_party/blaze/util/timing/WcTimer.h	/^typedef Timer<WcPolicy>  WcTimer;$/;"	t	namespace:blaze::timing
Wc_att_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wc_att_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
Wc_att_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wc_att_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecAttention
WeightedMean	amun/fpga/matrix_functions.cpp	/^void WeightedMean(Matrix& Out,const Matrix& Weights, const Matrix& In, const Array<int>& mapping)$/;"	f	namespace:amunmt::FPGA::mblas
Weights	amun/cpu/dl4mt/model.cpp	/^Weights::Weights(const NpzConverter& model, size_t)$/;"	f	class:amunmt::CPU::dl4mt::Weights
Weights	amun/cpu/dl4mt/model.h	/^  Weights(const std::string& npzFile, size_t device = 0)$/;"	f	struct:amunmt::CPU::dl4mt::Weights
Weights	amun/cpu/dl4mt/model.h	/^struct Weights {$/;"	s	namespace:amunmt::CPU::dl4mt
Weights	amun/cpu/nematus/model.cpp	/^Weights::Weights(const NpzConverter& model, size_t)$/;"	f	class:amunmt::CPU::Nematus::Weights
Weights	amun/cpu/nematus/model.h	/^  Weights(const std::string& npzFile, size_t device = 0)$/;"	f	struct:amunmt::CPU::Nematus::Weights
Weights	amun/cpu/nematus/model.h	/^struct Weights {$/;"	s	namespace:amunmt::CPU::Nematus
Weights	amun/fpga/model.cpp	/^Weights::Weights(const OpenCLInfo &openCLInfo, const NpzConverter& model)$/;"	f	class:amunmt::FPGA::Weights
Weights	amun/fpga/model.cpp	/^Weights::Weights(const OpenCLInfo &openCLInfo, const std::string& npzFile)$/;"	f	class:amunmt::FPGA::Weights
Weights	amun/fpga/model.h	/^struct Weights {$/;"	s	namespace:amunmt::FPGA
Weights	amun/gpu/dl4mt/model.h	/^struct Weights {$/;"	s	namespace:amunmt::GPU
Wi_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Wi_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecInit
Wi_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wi_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecInit
Wi_	amun/fpga/model.h	/^    const mblas::Tensor Wi_;$/;"	m	struct:amunmt::FPGA::Weights::DecInit
Wi_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wi_;$/;"	m	struct:amunmt::GPU::Weights::DecInit
WidthHandler	amun/3rd_party/spdlog/details/format.cc	/^			explicit WidthHandler(fmt::FormatSpec &spec): spec_(spec)$/;"	f	class:fmt::__anon30::WidthHandler
WidthHandler	amun/3rd_party/spdlog/details/format.cc	/^		class WidthHandler: public fmt::internal::ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fmt::__anon30	file:
WidthHandler	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    explicit WidthHandler(FormatSpec &spec): spec_(spec)$/;"	f	class:fmt::internal::WidthHandler
WidthHandler	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^class WidthHandler: public ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fmt::internal
WidthSpec	amun/3rd_party/spdlog/details/format.h	/^    WidthSpec(unsigned width, wchar_t fill): width_(width), fill_(fill)$/;"	f	struct:fmt::WidthSpec
WidthSpec	amun/3rd_party/spdlog/details/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WidthSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    WidthSpec(unsigned width, wchar_t fill): width_(width), fill_(fill)$/;"	f	struct:fmt::WidthSpec
WidthSpec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WindowsError	amun/3rd_party/spdlog/details/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:WindowsError
WindowsError	amun/3rd_party/spdlog/details/format.h	/^class WindowsError: public SystemError$/;"	c
WindowsError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:WindowsError
WindowsError	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class WindowsError: public SystemError$/;"	c
WindowsException	amun/3rd_party/extract_lex/exception.cpp	/^WindowsException::WindowsException() throw() {$/;"	f	class:util::WindowsException
WindowsException	amun/3rd_party/extract_lex/exception.h	/^class WindowsException : public Exception {$/;"	c	namespace:util
WindowsException	amun/common/exception.cpp	/^WindowsException::WindowsException() throw() {$/;"	f	class:amunmt::util::WindowsException
WindowsException	amun/common/exception.h	/^class WindowsException : public Exception {$/;"	c	namespace:amunmt::util
Wm_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wm_;$/;"	m	struct:amunmt::GPU::Weights::MultWeights
Word	amun/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Word() {$/;"	f	namespace:YAML::Exp
Word	amun/common/types.h	/^typedef unsigned Word;$/;"	t	namespace:amunmt
Word2Double	amun/3rd_party/fast_align/src/hashtables.h	/^typedef google::sparse_hash_map<unsigned, double> Word2Double;$/;"	t
Word2Double	amun/3rd_party/fast_align/src/hashtables.h	/^typedef std::unordered_map<unsigned, double> Word2Double;$/;"	t
Word2Word2Double	amun/3rd_party/fast_align/src/ttables.h	/^  typedef std::vector<Word2Double> Word2Word2Double;$/;"	t	class:TTable
WordCount	amun/3rd_party/extract_lex/extract-lex.h	/^  WordCount()$/;"	f	class:extract::WordCount
WordCount	amun/3rd_party/extract_lex/extract-lex.h	/^  WordCount(float count)$/;"	f	class:extract::WordCount
WordCount	amun/3rd_party/extract_lex/extract-lex.h	/^class WordCount$/;"	c	namespace:extract
WordIndex	amun/gpu/decoder/kenlm.h	/^  typedef unsigned int WordIndex;$/;"	t	namespace:lm
WordPair	amun/gpu/decoder/kenlm.h	/^typedef std::pair<lm::WordIndex, Word> WordPair;$/;"	t
WordPairs	amun/gpu/decoder/kenlm.h	/^typedef std::vector<WordPair> WordPairs;$/;"	t
Words	amun/common/types.h	/^typedef std::vector<Word> Words;$/;"	t	namespace:amunmt
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(bool b) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(char ch) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const Binary& binary) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Alias& alias) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Anchor& anchor) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Comment& comment) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Null& \/*null*\/) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Tag& tag) {$/;"	f	class:YAML::Emitter
Write	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const std::string& str) {$/;"	f	class:YAML::Emitter
Write	amun/common/output_collector.cpp	/^void OutputCollector::Write(long sourceId, const std::string& output)$/;"	f	class:amunmt::OutputCollector
WriteAlias	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAlias(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteAliasName	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAliasName(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils::__anon67
WriteAnchor	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAnchor(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteBinary	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteBinary(ostream_wrapper& out, const Binary& binary) {$/;"	f	namespace:YAML::Utils
WriteChar	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteChar(ostream_wrapper& out, char ch) {$/;"	f	namespace:YAML::Utils
WriteCodePoint	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^void WriteCodePoint(ostream_wrapper& out, int codePoint) {$/;"	f	namespace:YAML::Utils::__anon67
WriteComment	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteComment(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteDoubleQuoteEscapeSequence	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^void WriteDoubleQuoteEscapeSequence(ostream_wrapper& out, int codePoint) {$/;"	f	namespace:YAML::Utils::__anon67
WriteDoubleQuotedString	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteDoubleQuotedString(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteIntegralType	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& Emitter::WriteIntegralType(T value) {$/;"	f	class:YAML::Emitter
WriteLiteralString	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteLiteralString(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteSingleQuotedString	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteSingleQuotedString(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteStreamable	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& Emitter::WriteStreamable(T value) {$/;"	f	class:YAML::Emitter
WriteTag	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteTag(ostream_wrapper& out, const std::string& str, bool verbatim) {$/;"	f	namespace:YAML::Utils
WriteTagWithPrefix	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteTagWithPrefix(ostream_wrapper& out, const std::string& prefix,$/;"	f	namespace:YAML::Utils
Writer	amun/3rd_party/spdlog/details/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt
Writer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt
Wx_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::DecGRU2
Wx_	amun/cpu/dl4mt/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights::GRU
Wx_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Wx_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Wx_	amun/fpga/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU1
Wx_	amun/fpga/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::FPGA::Weights::DecGRU2
Wx_	amun/fpga/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::FPGA::Weights::EncBackwardGRU
Wx_	amun/fpga/model.h	/^    const mblas::Tensor Wx_;$/;"	m	struct:amunmt::FPGA::Weights::EncForwardGRU
Wx_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wx_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU1
Wx_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wx_;$/;"	m	struct:amunmt::GPU::Weights::DecGRU2
Wx_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wx_;$/;"	m	struct:amunmt::GPU::Weights::EncBackwardGRU
Wx_	amun/gpu/dl4mt/model.h	/^    const std::shared_ptr<mblas::Tensor> Wx_;$/;"	m	struct:amunmt::GPU::Weights::EncForwardGRU
Wx_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Wx_lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Wx_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecGRU2
Wx_lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor Wx_lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::GRU
Xor	amun/3rd_party/blaze/util/mpl/Xor.h	/^struct Xor : public Bool< ( T1::value ^ T2::value ) >$/;"	s	namespace:blaze
YAML	amun/3rd_party/yaml-cpp/anchor.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/binary.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/binary.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/collectionstack.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/contrib/anchordict.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/contrib/graphbuilder.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/convert.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/directives.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/directives.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emit.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/emitfromevents.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/emitfromevents.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emitter.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/emitter.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emitterdef.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emittermanip.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/emitterstate.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emitterstyle.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/emitterutils.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/emitterutils.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/eventhandler.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/exceptions.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/exp.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/exp.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/indentation.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/mark.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/memory.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/node.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/node/convert.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/node.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/emit.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/impl.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/iterator.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/node.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/parse.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/ptr.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node/type.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/node_data.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/nodebuilder.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/nodeevents.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/nodeevents.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/noncopyable.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/null.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/null.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/parse.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/parser.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/parser.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/ptr_vector.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/regex_yaml.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/regeximpl.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/scanner.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/scanner.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/scanscalar.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/scanscalar.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/scantag.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/scantag.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/scantoken.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/setting.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/simplekey.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/singledocparser.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/stlemitter.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/stream.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/stream.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/streamcharsource.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/stringsource.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/tag.cpp	/^namespace YAML {$/;"	n	file:
YAML	amun/3rd_party/yaml-cpp/tag.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/token.h	/^namespace YAML {$/;"	n
YAML	amun/3rd_party/yaml-cpp/traits.h	/^namespace YAML {$/;"	n
YAML_CPP_API	amun/3rd_party/yaml-cpp/dll.h	17;"	d
YAML_CPP_API	amun/3rd_party/yaml-cpp/dll.h	24;"	d
YAML_CPP_API	amun/3rd_party/yaml-cpp/dll.h	27;"	d
YAML_CPP_API	amun/3rd_party/yaml-cpp/dll.h	30;"	d
YAML_CPP_OPERATOR_BOOL	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	20;"	d
YAML_DEFINE_CONVERT_STREAMABLE	amun/3rd_party/yaml-cpp/node/convert.h	153;"	d
YAML_DEFINE_CONVERT_STREAMABLE	amun/3rd_party/yaml-cpp/node/convert.h	90;"	d
YAML_DEFINE_CONVERT_STREAMABLE_SIGNED	amun/3rd_party/yaml-cpp/node/convert.h	128;"	d
YAML_DEFINE_CONVERT_STREAMABLE_SIGNED	amun/3rd_party/yaml-cpp/node/convert.h	151;"	d
YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED	amun/3rd_party/yaml-cpp/node/convert.h	131;"	d
YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED	amun/3rd_party/yaml-cpp/node/convert.h	152;"	d
YAML_DIRECTIVE_ARGS	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_DIRECTIVE_ARGS =$/;"	m	namespace:YAML::ErrorMsg
YAML_H_62B23520_7C8E_11DE_8A39_0800200C9A66	amun/3rd_party/yaml-cpp/yaml.h	2;"	d
YAML_MAJOR_VERSION	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_MAJOR_VERSION = "YAML major version too large";$/;"	m	namespace:YAML::ErrorMsg
YAML_PREFETCH_SIZE	amun/3rd_party/yaml-cpp/stream.cpp	6;"	d	file:
YAML_VERSION	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_VERSION = "bad YAML version: ";$/;"	m	namespace:YAML::ErrorMsg
YELLOW	amun/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
YELLOW	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
YELLOW	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
Y_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class Y_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
Yes	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^   typedef char (&Yes)[1];$/;"	t	struct:blaze::IsProxyHelper
Yes	amun/3rd_party/blaze/util/TypeList.h	/^   class Yes { No no[2]; };$/;"	c	struct:blaze::ContainsRelated
Yes	amun/3rd_party/spdlog/details/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal
Yes	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal
YesNoBool	amun/3rd_party/yaml-cpp/emittermanip.h	/^  YesNoBool,      \/\/ yes, no$/;"	e	enum:YAML::EMITTER_MANIP
ZERO_INDENT_IN_BLOCK	amun/3rd_party/yaml-cpp/exceptions.h	/^const char* const ZERO_INDENT_IN_BLOCK =$/;"	m	namespace:YAML::ErrorMsg
Zombie	amun/3rd_party/yaml-cpp/node/node.h	/^  enum Zombie { ZombieNode };$/;"	g	class:YAML::Node
ZombieNode	amun/3rd_party/yaml-cpp/node/node.h	/^  enum Zombie { ZombieNode };$/;"	e	enum:YAML::Node::Zombie
_Alias	amun/3rd_party/yaml-cpp/emittermanip.h	/^  _Alias(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Alias
_Alias	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Alias {$/;"	s	namespace:YAML
_Anchor	amun/3rd_party/yaml-cpp/emittermanip.h	/^  _Anchor(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Anchor
_Anchor	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Anchor {$/;"	s	namespace:YAML
_BLAZE_BLAZE_H_	amun/3rd_party/blaze/Blaze.h	36;"	d
_BLAZE_CONFIG_CONFIG_H_	amun/3rd_party/blaze/config/Config.h	36;"	d
_BLAZE_MATH_ACCURACY_H_	amun/3rd_party/blaze/math/Accuracy.h	36;"	d
_BLAZE_MATH_ADAPTORS_ADAPTORS_H_	amun/3rd_party/blaze/math/adaptors/Adaptors.h	36;"	d
_BLAZE_MATH_ADAPTORS_DIAGONALMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_DIAGONALMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_DIAGONALMATRIX_DIAGONALPROXY_H_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_DIAGONALMATRIX_H_	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_DIAGONALMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_FORWARD_H_	amun/3rd_party/blaze/math/adaptors/Forward.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_HERMITIANELEMENT_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_HERMITIANPROXY_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_HERMITIANVALUE_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_H_	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_HERMITIANMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/lowermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_LOWERPROXY_H_	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_STRICTLYLOWERPROXY_H_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_LOWERMATRIX_UNILOWERPROXY_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYLOWERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYLOWERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYLOWERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYLOWERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYUPPERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYUPPERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYUPPERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYUPPERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_STRICTLYUPPERMATRIX_UPPERPROXY_H_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_DENSENONNUMERIC_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_DENSENUMERIC_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_H_	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_NONNUMERICPROXY_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_NUMERICPROXY_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_SHAREDVALUE_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_SPARSENONNUMERIC_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_SPARSENUMERIC_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_SYMMETRICELEMENT_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	36;"	d
_BLAZE_MATH_ADAPTORS_SYMMETRICMATRIX_SYMMETRICVALUE_H_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_UNILOWERELEMENT_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNILOWERMATRIX_UNILOWERVALUE_H_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_UNIUPPERELEMENT_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_UNIUPPERVALUE_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	36;"	d
_BLAZE_MATH_ADAPTORS_UNIUPPERMATRIX_UPPERPROXY_H_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	36;"	d
_BLAZE_MATH_ADAPTORS_UPPERMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/adaptors/uppermatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_ADAPTORS_UPPERMATRIX_DENSE_H_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	36;"	d
_BLAZE_MATH_ADAPTORS_UPPERMATRIX_H_	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	36;"	d
_BLAZE_MATH_ADAPTORS_UPPERMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	36;"	d
_BLAZE_MATH_ADAPTORS_UPPERMATRIX_UPPERPROXY_H_	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	36;"	d
_BLAZE_MATH_ALIASES_H_	amun/3rd_party/blaze/math/Aliases.h	36;"	d
_BLAZE_MATH_ALIGNMENTFLAG_H_	amun/3rd_party/blaze/math/AlignmentFlag.h	36;"	d
_BLAZE_MATH_BLAS_BLAS_H_	amun/3rd_party/blaze/math/blas/BLAS.h	36;"	d
_BLAZE_MATH_BLAS_DOT_H_	amun/3rd_party/blaze/math/blas/dot.h	36;"	d
_BLAZE_MATH_BLAS_GEMM_H_	amun/3rd_party/blaze/math/blas/gemm.h	36;"	d
_BLAZE_MATH_BLAS_GEMV_H_	amun/3rd_party/blaze/math/blas/gemv.h	36;"	d
_BLAZE_MATH_BLAS_H_	amun/3rd_party/blaze/math/BLAS.h	36;"	d
_BLAZE_MATH_BLAS_TRMM_H_	amun/3rd_party/blaze/math/blas/trmm.h	36;"	d
_BLAZE_MATH_BLAS_TRMV_H_	amun/3rd_party/blaze/math/blas/trmv.h	36;"	d
_BLAZE_MATH_BLAS_TRSM_H_	amun/3rd_party/blaze/math/blas/trsm.h	36;"	d
_BLAZE_MATH_COLUMN_H_	amun/3rd_party/blaze/math/Column.h	36;"	d
_BLAZE_MATH_COMPRESSEDMATRIX_H_	amun/3rd_party/blaze/math/CompressedMatrix.h	36;"	d
_BLAZE_MATH_COMPRESSEDVECTOR_H_	amun/3rd_party/blaze/math/CompressedVector.h	36;"	d
_BLAZE_MATH_CONSTANTS_H_	amun/3rd_party/blaze/math/Constants.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ADAPTOR_H_	amun/3rd_party/blaze/math/constraints/Adaptor.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ADDEXPR_H_	amun/3rd_party/blaze/math/constraints/AddExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ALIGNED_H_	amun/3rd_party/blaze/math/constraints/Aligned.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_BLASCOMPATIBLE_H_	amun/3rd_party/blaze/math/constraints/BLASCompatible.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_COLUMNMAJORMATRIX_H_	amun/3rd_party/blaze/math/constraints/ColumnMajorMatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_COLUMNS_H_	amun/3rd_party/blaze/math/constraints/Columns.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_COLUMNVECTOR_H_	amun/3rd_party/blaze/math/constraints/ColumnVector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_COLUMN_H_	amun/3rd_party/blaze/math/constraints/Column.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_COMPUTATION_H_	amun/3rd_party/blaze/math/constraints/Computation.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_CONSTDATAACCESS_H_	amun/3rd_party/blaze/math/constraints/ConstDataAccess.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_CONSTRAINTS_H_	amun/3rd_party/blaze/math/constraints/Constraints.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_CROSSEXPR_H_	amun/3rd_party/blaze/math/constraints/CrossExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_CUSTOM_H_	amun/3rd_party/blaze/math/constraints/Custom.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_DENSEMATRIX_H_	amun/3rd_party/blaze/math/constraints/DenseMatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_DENSEVECTOR_H_	amun/3rd_party/blaze/math/constraints/DenseVector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_DIAGONAL_H_	amun/3rd_party/blaze/math/constraints/Diagonal.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_DIVEXPR_H_	amun/3rd_party/blaze/math/constraints/DivExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_EVALEXPR_H_	amun/3rd_party/blaze/math/constraints/EvalExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_EXPRESSION_H_	amun/3rd_party/blaze/math/constraints/Expression.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_FOREACHEXPR_H_	amun/3rd_party/blaze/math/constraints/ForEachExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_GENERAL_H_	amun/3rd_party/blaze/math/constraints/General.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_HERMITIAN_H_	amun/3rd_party/blaze/math/constraints/Hermitian.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_H_	amun/3rd_party/blaze/math/Constraints.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_IDENTITY_H_	amun/3rd_party/blaze/math/constraints/Identity.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_INVERTIBLE_H_	amun/3rd_party/blaze/math/constraints/Invertible.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_LOWER_H_	amun/3rd_party/blaze/math/constraints/Lower.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATEVALEXPR_H_	amun/3rd_party/blaze/math/constraints/MatEvalExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATFOREACHEXPR_H_	amun/3rd_party/blaze/math/constraints/MatForEachExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATINVEXPR_H_	amun/3rd_party/blaze/math/constraints/MatInvExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATMATADDEXPR_H_	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATMATMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATMATSUBEXPR_H_	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATRIX_H_	amun/3rd_party/blaze/math/constraints/Matrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/constraints/MatScalarDivExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/MatScalarMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATSERIALEXPR_H_	amun/3rd_party/blaze/math/constraints/MatSerialExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATTRANSEXPR_H_	amun/3rd_party/blaze/math/constraints/MatTransExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MATVECMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MULTEXPR_H_	amun/3rd_party/blaze/math/constraints/MultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_MUTABLEDATAACCESS_H_	amun/3rd_party/blaze/math/constraints/MutableDataAccess.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_NUMERICMATRIX_H_	amun/3rd_party/blaze/math/constraints/NumericMatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_NUMERICVECTOR_H_	amun/3rd_party/blaze/math/constraints/NumericVector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_OPPOSEDVIEW_H_	amun/3rd_party/blaze/math/constraints/OpposedView.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_PADDED_H_	amun/3rd_party/blaze/math/constraints/Padded.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_PROXY_H_	amun/3rd_party/blaze/math/constraints/Proxy.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_REQUIRESEVALUATION_H_	amun/3rd_party/blaze/math/constraints/RequiresEvaluation.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_RESIZABLE_H_	amun/3rd_party/blaze/math/constraints/Resizable.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_RESTRICTED_H_	amun/3rd_party/blaze/math/constraints/Restricted.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ROWMAJORMATRIX_H_	amun/3rd_party/blaze/math/constraints/RowMajorMatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ROWS_H_	amun/3rd_party/blaze/math/constraints/Rows.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ROWVECTOR_H_	amun/3rd_party/blaze/math/constraints/RowVector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_ROW_H_	amun/3rd_party/blaze/math/constraints/Row.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SERIALEXPR_H_	amun/3rd_party/blaze/math/constraints/SerialExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SIMDENABLED_H_	amun/3rd_party/blaze/math/constraints/SIMDEnabled.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SIMDPACK_H_	amun/3rd_party/blaze/math/constraints/SIMDPack.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SIZE_H_	amun/3rd_party/blaze/math/constraints/Size.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SMPASSIGNABLE_H_	amun/3rd_party/blaze/math/constraints/SMPAssignable.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SPARSEELEMENT_H_	amun/3rd_party/blaze/math/constraints/SparseElement.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/constraints/SparseMatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/constraints/SparseVector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SQUARE_H_	amun/3rd_party/blaze/math/constraints/Square.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_STORAGEORDER_H_	amun/3rd_party/blaze/math/constraints/StorageOrder.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_STRICTLYLOWER_H_	amun/3rd_party/blaze/math/constraints/StrictlyLower.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_STRICTLYTRIANGULAR_H_	amun/3rd_party/blaze/math/constraints/StrictlyTriangular.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_STRICTLYUPPER_H_	amun/3rd_party/blaze/math/constraints/StrictlyUpper.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SUBEXPR_H_	amun/3rd_party/blaze/math/constraints/SubExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SUBMATRIX_H_	amun/3rd_party/blaze/math/constraints/Submatrix.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SUBVECTOR_H_	amun/3rd_party/blaze/math/constraints/Subvector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_SYMMETRIC_H_	amun/3rd_party/blaze/math/constraints/Symmetric.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_TRANSEXPR_H_	amun/3rd_party/blaze/math/constraints/TransExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_TRANSPOSEFLAG_H_	amun/3rd_party/blaze/math/constraints/TransposeFlag.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_TRIANGULAR_H_	amun/3rd_party/blaze/math/constraints/Triangular.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_TVECMATMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_UNILOWER_H_	amun/3rd_party/blaze/math/constraints/UniLower.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_UNITRIANGULAR_H_	amun/3rd_party/blaze/math/constraints/UniTriangular.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_UNIUPPER_H_	amun/3rd_party/blaze/math/constraints/UniUpper.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_UPPER_H_	amun/3rd_party/blaze/math/constraints/Upper.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECEVALEXPR_H_	amun/3rd_party/blaze/math/constraints/VecEvalExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECFOREACHEXPR_H_	amun/3rd_party/blaze/math/constraints/VecForEachExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/constraints/VecScalarDivExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/VecScalarMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECSERIALEXPR_H_	amun/3rd_party/blaze/math/constraints/VecSerialExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECTOR_H_	amun/3rd_party/blaze/math/constraints/Vector.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECTRANSEXPR_H_	amun/3rd_party/blaze/math/constraints/VecTransExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECTVECMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECVECADDEXPR_H_	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECVECDIVEXPR_H_	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECVECMULTEXPR_H_	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VECVECSUBEXPR_H_	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	36;"	d
_BLAZE_MATH_CONSTRAINTS_VIEW_H_	amun/3rd_party/blaze/math/constraints/View.h	36;"	d
_BLAZE_MATH_CUSTOMMATRIX_H_	amun/3rd_party/blaze/math/CustomMatrix.h	36;"	d
_BLAZE_MATH_CUSTOMVECTOR_H_	amun/3rd_party/blaze/math/CustomVector.h	36;"	d
_BLAZE_MATH_DENSEMATRIX_H_	amun/3rd_party/blaze/math/DenseMatrix.h	36;"	d
_BLAZE_MATH_DENSESUBVECTOR_H_	amun/3rd_party/blaze/math/Subvector.h	36;"	d
_BLAZE_MATH_DENSEVECTOR_H_	amun/3rd_party/blaze/math/DenseVector.h	36;"	d
_BLAZE_MATH_DENSE_CUSTOMMATRIX_H_	amun/3rd_party/blaze/math/dense/CustomMatrix.h	36;"	d
_BLAZE_MATH_DENSE_CUSTOMVECTOR_H_	amun/3rd_party/blaze/math/dense/CustomVector.h	36;"	d
_BLAZE_MATH_DENSE_DENSEITERATOR_H_	amun/3rd_party/blaze/math/dense/DenseIterator.h	27;"	d
_BLAZE_MATH_DENSE_DENSEMATRIX_H_	amun/3rd_party/blaze/math/dense/DenseMatrix.h	36;"	d
_BLAZE_MATH_DENSE_DENSEVECTOR_H_	amun/3rd_party/blaze/math/dense/DenseVector.h	36;"	d
_BLAZE_MATH_DENSE_DYNAMICMATRIX_H_	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	36;"	d
_BLAZE_MATH_DENSE_DYNAMICVECTOR_H_	amun/3rd_party/blaze/math/dense/DynamicVector.h	36;"	d
_BLAZE_MATH_DENSE_FORWARD_H_	amun/3rd_party/blaze/math/dense/Forward.h	36;"	d
_BLAZE_MATH_DENSE_HYBRIDMATRIX_H_	amun/3rd_party/blaze/math/dense/HybridMatrix.h	36;"	d
_BLAZE_MATH_DENSE_HYBRIDVECTOR_H_	amun/3rd_party/blaze/math/dense/HybridVector.h	27;"	d
_BLAZE_MATH_DENSE_INVERSION_H_	amun/3rd_party/blaze/math/dense/Inversion.h	36;"	d
_BLAZE_MATH_DENSE_LLH_H_	amun/3rd_party/blaze/math/dense/LLH.h	36;"	d
_BLAZE_MATH_DENSE_LQ_H_	amun/3rd_party/blaze/math/dense/LQ.h	36;"	d
_BLAZE_MATH_DENSE_LU_H_	amun/3rd_party/blaze/math/dense/LU.h	36;"	d
_BLAZE_MATH_DENSE_QL_H_	amun/3rd_party/blaze/math/dense/QL.h	36;"	d
_BLAZE_MATH_DENSE_QR_H_	amun/3rd_party/blaze/math/dense/QR.h	36;"	d
_BLAZE_MATH_DENSE_RQ_H_	amun/3rd_party/blaze/math/dense/RQ.h	36;"	d
_BLAZE_MATH_DENSE_STATICMATRIX_H_	amun/3rd_party/blaze/math/dense/StaticMatrix.h	36;"	d
_BLAZE_MATH_DENSE_STATICVECTOR_H_	amun/3rd_party/blaze/math/dense/StaticVector.h	36;"	d
_BLAZE_MATH_DIAGONALMATRIX_H_	amun/3rd_party/blaze/math/DiagonalMatrix.h	36;"	d
_BLAZE_MATH_DYNAMICMATRIX_H_	amun/3rd_party/blaze/math/DynamicMatrix.h	36;"	d
_BLAZE_MATH_DYNAMICVECTOR_H_	amun/3rd_party/blaze/math/DynamicVector.h	36;"	d
_BLAZE_MATH_EPSILON_H_	amun/3rd_party/blaze/math/Epsilon.h	36;"	d
_BLAZE_MATH_EXCEPTION_H_	amun/3rd_party/blaze/math/Exception.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_ADDEXPR_H_	amun/3rd_party/blaze/math/expressions/AddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_COMPUTATION_H_	amun/3rd_party/blaze/math/expressions/Computation.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_CROSSEXPR_H_	amun/3rd_party/blaze/math/expressions/CrossExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DENSEMATRIX_H_	amun/3rd_party/blaze/math/expressions/DenseMatrix.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DENSEVECTOR_H_	amun/3rd_party/blaze/math/expressions/DenseVector.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DIVEXPR_H_	amun/3rd_party/blaze/math/expressions/DivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATDETEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATDMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATDMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATINVEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTDMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTDMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTRANSPOSER_H_	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DMATTSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECDVECADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECDVECCROSSEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECDVECDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECDVECSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSVECADDEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSVECCROSSEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECSVECSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECTDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECTRANSPOSER_H_	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_DVECTSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_EVALEXPR_H_	amun/3rd_party/blaze/math/expressions/EvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_EXPRESSION_H_	amun/3rd_party/blaze/math/expressions/Expression.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_FOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/ForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_FORWARD_H_	amun/3rd_party/blaze/math/expressions/Forward.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/MatEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/MatForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATINVEXPR_H_	amun/3rd_party/blaze/math/expressions/MatInvExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/MatMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/MatMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/MatMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATRIX_H_	amun/3rd_party/blaze/math/expressions/Matrix.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/MatScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/MatScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/MatSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/MatTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MATVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/MatVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_MULTEXPR_H_	amun/3rd_party/blaze/math/expressions/MultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/SerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATDMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTDMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTRANSPOSER_H_	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SMATTSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/expressions/SparseMatrix.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/expressions/SparseVector.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECDVECCROSSEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECDVECDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECDVECSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSVECADDEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSVECCROSSEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECSVECSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECTDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECTRANSPOSER_H_	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_SVECTSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDMATTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TDVECTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/TransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATDMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATTSMATADDEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSMATTSMATSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECDVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecDVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECSVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecSVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECTDMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TSVECTSMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_TVECMATMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/TVecMatMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECEVALEXPR_H_	amun/3rd_party/blaze/math/expressions/VecEvalExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECFOREACHEXPR_H_	amun/3rd_party/blaze/math/expressions/VecForEachExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/VecScalarDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/VecScalarMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECSERIALEXPR_H_	amun/3rd_party/blaze/math/expressions/VecSerialExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECTOR_H_	amun/3rd_party/blaze/math/expressions/Vector.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECTRANSEXPR_H_	amun/3rd_party/blaze/math/expressions/VecTransExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECTVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/VecTVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECVECADDEXPR_H_	amun/3rd_party/blaze/math/expressions/VecVecAddExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECVECDIVEXPR_H_	amun/3rd_party/blaze/math/expressions/VecVecDivExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECVECMULTEXPR_H_	amun/3rd_party/blaze/math/expressions/VecVecMultExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VECVECSUBEXPR_H_	amun/3rd_party/blaze/math/expressions/VecVecSubExpr.h	36;"	d
_BLAZE_MATH_EXPRESSIONS_VIEW_H_	amun/3rd_party/blaze/math/expressions/View.h	36;"	d
_BLAZE_MATH_FORWARD_H_	amun/3rd_party/blaze/math/Forward.h	36;"	d
_BLAZE_MATH_FUNCTIONS_H_	amun/3rd_party/blaze/math/Functions.h	36;"	d
_BLAZE_MATH_FUNCTORS_ABS_H_	amun/3rd_party/blaze/math/functors/Abs.h	36;"	d
_BLAZE_MATH_FUNCTORS_ACOSH_H_	amun/3rd_party/blaze/math/functors/Acosh.h	36;"	d
_BLAZE_MATH_FUNCTORS_ACOS_H_	amun/3rd_party/blaze/math/functors/Acos.h	36;"	d
_BLAZE_MATH_FUNCTORS_ASINH_H_	amun/3rd_party/blaze/math/functors/Asinh.h	36;"	d
_BLAZE_MATH_FUNCTORS_ASIN_H_	amun/3rd_party/blaze/math/functors/Asin.h	36;"	d
_BLAZE_MATH_FUNCTORS_ATANH_H_	amun/3rd_party/blaze/math/functors/Atanh.h	36;"	d
_BLAZE_MATH_FUNCTORS_ATAN_H_	amun/3rd_party/blaze/math/functors/Atan.h	36;"	d
_BLAZE_MATH_FUNCTORS_CBRT_H_	amun/3rd_party/blaze/math/functors/Cbrt.h	36;"	d
_BLAZE_MATH_FUNCTORS_CEIL_H_	amun/3rd_party/blaze/math/functors/Ceil.h	36;"	d
_BLAZE_MATH_FUNCTORS_CONJ_H_	amun/3rd_party/blaze/math/functors/Conj.h	36;"	d
_BLAZE_MATH_FUNCTORS_COSH_H_	amun/3rd_party/blaze/math/functors/Cosh.h	36;"	d
_BLAZE_MATH_FUNCTORS_COS_H_	amun/3rd_party/blaze/math/functors/Cos.h	36;"	d
_BLAZE_MATH_FUNCTORS_CTRANS_H_	amun/3rd_party/blaze/math/functors/CTrans.h	36;"	d
_BLAZE_MATH_FUNCTORS_ERFC_H_	amun/3rd_party/blaze/math/functors/Erfc.h	36;"	d
_BLAZE_MATH_FUNCTORS_ERF_H_	amun/3rd_party/blaze/math/functors/Erf.h	36;"	d
_BLAZE_MATH_FUNCTORS_EVAL_H_	amun/3rd_party/blaze/math/functors/Eval.h	36;"	d
_BLAZE_MATH_FUNCTORS_EXP_H_	amun/3rd_party/blaze/math/functors/Exp.h	36;"	d
_BLAZE_MATH_FUNCTORS_FLOOR_H_	amun/3rd_party/blaze/math/functors/Floor.h	36;"	d
_BLAZE_MATH_FUNCTORS_FORWARD_H_	amun/3rd_party/blaze/math/functors/Forward.h	36;"	d
_BLAZE_MATH_FUNCTORS_FUNCTORS_H_	amun/3rd_party/blaze/math/functors/Functors.h	36;"	d
_BLAZE_MATH_FUNCTORS_H_	amun/3rd_party/blaze/math/Functors.h	36;"	d
_BLAZE_MATH_FUNCTORS_IMAG_H_	amun/3rd_party/blaze/math/functors/Imag.h	36;"	d
_BLAZE_MATH_FUNCTORS_INVCBRT_H_	amun/3rd_party/blaze/math/functors/InvCbrt.h	36;"	d
_BLAZE_MATH_FUNCTORS_INVSQRT_H_	amun/3rd_party/blaze/math/functors/InvSqrt.h	36;"	d
_BLAZE_MATH_FUNCTORS_INV_H_	amun/3rd_party/blaze/math/functors/Inv.h	36;"	d
_BLAZE_MATH_FUNCTORS_LOG10_H_	amun/3rd_party/blaze/math/functors/Log10.h	36;"	d
_BLAZE_MATH_FUNCTORS_LOG_H_	amun/3rd_party/blaze/math/functors/Log.h	36;"	d
_BLAZE_MATH_FUNCTORS_POW_H_	amun/3rd_party/blaze/math/functors/Pow.h	36;"	d
_BLAZE_MATH_FUNCTORS_REAL_H_	amun/3rd_party/blaze/math/functors/Real.h	36;"	d
_BLAZE_MATH_FUNCTORS_SERIAL_H_	amun/3rd_party/blaze/math/functors/Serial.h	36;"	d
_BLAZE_MATH_FUNCTORS_SINH_H_	amun/3rd_party/blaze/math/functors/Sinh.h	36;"	d
_BLAZE_MATH_FUNCTORS_SIN_H_	amun/3rd_party/blaze/math/functors/Sin.h	36;"	d
_BLAZE_MATH_FUNCTORS_SQRT_H_	amun/3rd_party/blaze/math/functors/Sqrt.h	36;"	d
_BLAZE_MATH_FUNCTORS_TANH_H_	amun/3rd_party/blaze/math/functors/Tanh.h	36;"	d
_BLAZE_MATH_FUNCTORS_TAN_H_	amun/3rd_party/blaze/math/functors/Tan.h	36;"	d
_BLAZE_MATH_FUNCTORS_TRANS_H_	amun/3rd_party/blaze/math/functors/Trans.h	36;"	d
_BLAZE_MATH_HERMITIANMATRIX_H_	amun/3rd_party/blaze/math/HermitianMatrix.h	36;"	d
_BLAZE_MATH_HYBRIDMATRIX_H_	amun/3rd_party/blaze/math/HybridMatrix.h	36;"	d
_BLAZE_MATH_HYBRIDVECTOR_H_	amun/3rd_party/blaze/math/HybridVector.h	36;"	d
_BLAZE_MATH_INFINITY_H_	amun/3rd_party/blaze/math/Infinity.h	36;"	d
_BLAZE_MATH_INITIALIZERLIST_H_	amun/3rd_party/blaze/math/InitializerList.h	36;"	d
_BLAZE_MATH_INVERSIONFLAG_H_	amun/3rd_party/blaze/math/InversionFlag.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GELQF_H_	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GEQLF_H_	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GEQP3_H_	amun/3rd_party/blaze/math/lapack/clapack/geqp3.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GEQRF_H_	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GERQF_H_	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GESV_H_	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GETRF_H_	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GETRI_H_	amun/3rd_party/blaze/math/lapack/clapack/getri.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_GETRS_H_	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_HESV_H_	amun/3rd_party/blaze/math/lapack/clapack/hesv.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_HETRF_H_	amun/3rd_party/blaze/math/lapack/clapack/hetrf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_HETRI_H_	amun/3rd_party/blaze/math/lapack/clapack/hetri.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_HETRS_H_	amun/3rd_party/blaze/math/lapack/clapack/hetrs.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORGLQ_H_	amun/3rd_party/blaze/math/lapack/clapack/orglq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORGQL_H_	amun/3rd_party/blaze/math/lapack/clapack/orgql.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORGQR_H_	amun/3rd_party/blaze/math/lapack/clapack/orgqr.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORGRQ_H_	amun/3rd_party/blaze/math/lapack/clapack/orgrq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORMLQ_H_	amun/3rd_party/blaze/math/lapack/clapack/ormlq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORMQL_H_	amun/3rd_party/blaze/math/lapack/clapack/ormql.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORMQR_H_	amun/3rd_party/blaze/math/lapack/clapack/ormqr.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_ORMRQ_H_	amun/3rd_party/blaze/math/lapack/clapack/ormrq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_POSV_H_	amun/3rd_party/blaze/math/lapack/clapack/posv.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_POTRF_H_	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_POTRI_H_	amun/3rd_party/blaze/math/lapack/clapack/potri.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_POTRS_H_	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_SYSV_H_	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_SYTRF_H_	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_SYTRI_H_	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_SYTRS_H_	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_TRSV_H_	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_TRTRI_H_	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_TRTRS_H_	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNGLQ_H_	amun/3rd_party/blaze/math/lapack/clapack/unglq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNGQL_H_	amun/3rd_party/blaze/math/lapack/clapack/ungql.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNGQR_H_	amun/3rd_party/blaze/math/lapack/clapack/ungqr.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNGRQ_H_	amun/3rd_party/blaze/math/lapack/clapack/ungrq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNMLQ_H_	amun/3rd_party/blaze/math/lapack/clapack/unmlq.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNMQL_H_	amun/3rd_party/blaze/math/lapack/clapack/unmql.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNMQR_H_	amun/3rd_party/blaze/math/lapack/clapack/unmqr.h	36;"	d
_BLAZE_MATH_LAPACK_CLAPACK_UNMRQ_H_	amun/3rd_party/blaze/math/lapack/clapack/unmrq.h	36;"	d
_BLAZE_MATH_LAPACK_GELQF_H_	amun/3rd_party/blaze/math/lapack/gelqf.h	36;"	d
_BLAZE_MATH_LAPACK_GEQLF_H_	amun/3rd_party/blaze/math/lapack/geqlf.h	36;"	d
_BLAZE_MATH_LAPACK_GEQP3_H_	amun/3rd_party/blaze/math/lapack/geqp3.h	36;"	d
_BLAZE_MATH_LAPACK_GEQRF_H_	amun/3rd_party/blaze/math/lapack/geqrf.h	36;"	d
_BLAZE_MATH_LAPACK_GERQF_H_	amun/3rd_party/blaze/math/lapack/gerqf.h	36;"	d
_BLAZE_MATH_LAPACK_GESV_H_	amun/3rd_party/blaze/math/lapack/gesv.h	36;"	d
_BLAZE_MATH_LAPACK_GETRF_H_	amun/3rd_party/blaze/math/lapack/getrf.h	36;"	d
_BLAZE_MATH_LAPACK_GETRI_H_	amun/3rd_party/blaze/math/lapack/getri.h	36;"	d
_BLAZE_MATH_LAPACK_GETRS_H_	amun/3rd_party/blaze/math/lapack/getrs.h	36;"	d
_BLAZE_MATH_LAPACK_HESV_H_	amun/3rd_party/blaze/math/lapack/hesv.h	36;"	d
_BLAZE_MATH_LAPACK_HETRF_H_	amun/3rd_party/blaze/math/lapack/hetrf.h	36;"	d
_BLAZE_MATH_LAPACK_HETRI_H_	amun/3rd_party/blaze/math/lapack/hetri.h	36;"	d
_BLAZE_MATH_LAPACK_HETRS_H_	amun/3rd_party/blaze/math/lapack/hetrs.h	36;"	d
_BLAZE_MATH_LAPACK_H_	amun/3rd_party/blaze/math/LAPACK.h	36;"	d
_BLAZE_MATH_LAPACK_LAPACK_H_	amun/3rd_party/blaze/math/lapack/LAPACK.h	36;"	d
_BLAZE_MATH_LAPACK_ORGLQ_H_	amun/3rd_party/blaze/math/lapack/orglq.h	36;"	d
_BLAZE_MATH_LAPACK_ORGQL_H_	amun/3rd_party/blaze/math/lapack/orgql.h	36;"	d
_BLAZE_MATH_LAPACK_ORGQR_H_	amun/3rd_party/blaze/math/lapack/orgqr.h	36;"	d
_BLAZE_MATH_LAPACK_ORGRQ_H_	amun/3rd_party/blaze/math/lapack/orgrq.h	36;"	d
_BLAZE_MATH_LAPACK_ORMLQ_H_	amun/3rd_party/blaze/math/lapack/ormlq.h	36;"	d
_BLAZE_MATH_LAPACK_ORMQL_H_	amun/3rd_party/blaze/math/lapack/ormql.h	36;"	d
_BLAZE_MATH_LAPACK_ORMQR_H_	amun/3rd_party/blaze/math/lapack/ormqr.h	36;"	d
_BLAZE_MATH_LAPACK_ORMRQ_H_	amun/3rd_party/blaze/math/lapack/ormrq.h	36;"	d
_BLAZE_MATH_LAPACK_POSV_H_	amun/3rd_party/blaze/math/lapack/posv.h	36;"	d
_BLAZE_MATH_LAPACK_POTRF_H_	amun/3rd_party/blaze/math/lapack/potrf.h	36;"	d
_BLAZE_MATH_LAPACK_POTRI_H_	amun/3rd_party/blaze/math/lapack/potri.h	36;"	d
_BLAZE_MATH_LAPACK_POTRS_H_	amun/3rd_party/blaze/math/lapack/potrs.h	36;"	d
_BLAZE_MATH_LAPACK_SYSV_H_	amun/3rd_party/blaze/math/lapack/sysv.h	36;"	d
_BLAZE_MATH_LAPACK_SYTRF_H_	amun/3rd_party/blaze/math/lapack/sytrf.h	36;"	d
_BLAZE_MATH_LAPACK_SYTRI_H_	amun/3rd_party/blaze/math/lapack/sytri.h	36;"	d
_BLAZE_MATH_LAPACK_SYTRS_H_	amun/3rd_party/blaze/math/lapack/sytrs.h	36;"	d
_BLAZE_MATH_LAPACK_TRSV_H_	amun/3rd_party/blaze/math/lapack/trsv.h	36;"	d
_BLAZE_MATH_LAPACK_TRTRI_H_	amun/3rd_party/blaze/math/lapack/trtri.h	36;"	d
_BLAZE_MATH_LAPACK_TRTRS_H_	amun/3rd_party/blaze/math/lapack/trtrs.h	36;"	d
_BLAZE_MATH_LAPACK_UNGLQ_H_	amun/3rd_party/blaze/math/lapack/unglq.h	36;"	d
_BLAZE_MATH_LAPACK_UNGQL_H_	amun/3rd_party/blaze/math/lapack/ungql.h	36;"	d
_BLAZE_MATH_LAPACK_UNGQR_H_	amun/3rd_party/blaze/math/lapack/ungqr.h	36;"	d
_BLAZE_MATH_LAPACK_UNGRQ_H_	amun/3rd_party/blaze/math/lapack/ungrq.h	36;"	d
_BLAZE_MATH_LAPACK_UNMLQ_H_	amun/3rd_party/blaze/math/lapack/unmlq.h	36;"	d
_BLAZE_MATH_LAPACK_UNMQL_H_	amun/3rd_party/blaze/math/lapack/unmql.h	36;"	d
_BLAZE_MATH_LAPACK_UNMQR_H_	amun/3rd_party/blaze/math/lapack/unmqr.h	36;"	d
_BLAZE_MATH_LAPACK_UNMRQ_H_	amun/3rd_party/blaze/math/lapack/unmrq.h	36;"	d
_BLAZE_MATH_LOWERMATRIX_H_	amun/3rd_party/blaze/math/LowerMatrix.h	36;"	d
_BLAZE_MATH_MATH_H_	amun/3rd_party/blaze/math/Math.h	36;"	d
_BLAZE_MATH_MATRIX_H_	amun/3rd_party/blaze/math/Matrix.h	36;"	d
_BLAZE_MATH_MODULE_H_	amun/3rd_party/blaze/Math.h	36;"	d
_BLAZE_MATH_PADDINGFLAG_H_	amun/3rd_party/blaze/math/PaddingFlag.h	36;"	d
_BLAZE_MATH_PROXY_COMPLEXPROXY_H_	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	36;"	d
_BLAZE_MATH_PROXY_DEFAULTPROXY_H_	amun/3rd_party/blaze/math/proxy/DefaultProxy.h	36;"	d
_BLAZE_MATH_PROXY_DENSEMATRIXPROXY_H_	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	36;"	d
_BLAZE_MATH_PROXY_DENSEVECTORPROXY_H_	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	36;"	d
_BLAZE_MATH_PROXY_FORWARD_H_	amun/3rd_party/blaze/math/proxy/Forward.h	36;"	d
_BLAZE_MATH_PROXY_PROXY_H_	amun/3rd_party/blaze/math/proxy/Proxy.h	36;"	d
_BLAZE_MATH_PROXY_SPARSEMATRIXPROXY_H_	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	36;"	d
_BLAZE_MATH_PROXY_SPARSEVECTORPROXY_H_	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	36;"	d
_BLAZE_MATH_ROW_H_	amun/3rd_party/blaze/math/Row.h	36;"	d
_BLAZE_MATH_SERIALIZATION_H_	amun/3rd_party/blaze/math/Serialization.h	36;"	d
_BLAZE_MATH_SERIALIZATION_MATRIXSERIALIZER_H_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	36;"	d
_BLAZE_MATH_SERIALIZATION_SERIALIZATION_H_	amun/3rd_party/blaze/math/serialization/Serialization.h	36;"	d
_BLAZE_MATH_SERIALIZATION_TypeValueMapping_H_	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	36;"	d
_BLAZE_MATH_SERIALIZATION_VECTORSERIALIZER_H_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	36;"	d
_BLAZE_MATH_SHIMS_ABS_H_	amun/3rd_party/blaze/math/shims/Abs.h	36;"	d
_BLAZE_MATH_SHIMS_ACOSH_H_	amun/3rd_party/blaze/math/shims/Acosh.h	36;"	d
_BLAZE_MATH_SHIMS_ACOS_H_	amun/3rd_party/blaze/math/shims/Acos.h	36;"	d
_BLAZE_MATH_SHIMS_ASINH_H_	amun/3rd_party/blaze/math/shims/Asinh.h	36;"	d
_BLAZE_MATH_SHIMS_ASIN_H_	amun/3rd_party/blaze/math/shims/Asin.h	36;"	d
_BLAZE_MATH_SHIMS_ATANH_H_	amun/3rd_party/blaze/math/shims/Atanh.h	36;"	d
_BLAZE_MATH_SHIMS_ATAN_H_	amun/3rd_party/blaze/math/shims/Atan.h	36;"	d
_BLAZE_MATH_SHIMS_CBRT_H_	amun/3rd_party/blaze/math/shims/Cbrt.h	36;"	d
_BLAZE_MATH_SHIMS_CEIL_H_	amun/3rd_party/blaze/math/shims/Ceil.h	36;"	d
_BLAZE_MATH_SHIMS_CLEAR_H_	amun/3rd_party/blaze/math/shims/Clear.h	36;"	d
_BLAZE_MATH_SHIMS_CONJUGATE_H_	amun/3rd_party/blaze/math/shims/Conjugate.h	36;"	d
_BLAZE_MATH_SHIMS_COSH_H_	amun/3rd_party/blaze/math/shims/Cosh.h	36;"	d
_BLAZE_MATH_SHIMS_COS_H_	amun/3rd_party/blaze/math/shims/Cos.h	36;"	d
_BLAZE_MATH_SHIMS_EQUAL_H_	amun/3rd_party/blaze/math/shims/Equal.h	36;"	d
_BLAZE_MATH_SHIMS_ERFC_H_	amun/3rd_party/blaze/math/shims/Erfc.h	36;"	d
_BLAZE_MATH_SHIMS_ERF_H_	amun/3rd_party/blaze/math/shims/Erf.h	36;"	d
_BLAZE_MATH_SHIMS_EXP_H_	amun/3rd_party/blaze/math/shims/Exp.h	36;"	d
_BLAZE_MATH_SHIMS_FLOOR_H_	amun/3rd_party/blaze/math/shims/Floor.h	36;"	d
_BLAZE_MATH_SHIMS_H_	amun/3rd_party/blaze/math/Shims.h	36;"	d
_BLAZE_MATH_SHIMS_IMAGINARY_H_	amun/3rd_party/blaze/math/shims/Imaginary.h	36;"	d
_BLAZE_MATH_SHIMS_INVCBRT_H_	amun/3rd_party/blaze/math/shims/InvCbrt.h	36;"	d
_BLAZE_MATH_SHIMS_INVERT_H_	amun/3rd_party/blaze/math/shims/Invert.h	36;"	d
_BLAZE_MATH_SHIMS_INVSQRT_H_	amun/3rd_party/blaze/math/shims/InvSqrt.h	36;"	d
_BLAZE_MATH_SHIMS_ISDEFAULT_H_	amun/3rd_party/blaze/math/shims/IsDefault.h	36;"	d
_BLAZE_MATH_SHIMS_ISDIVISOR_H_	amun/3rd_party/blaze/math/shims/IsDivisor.h	36;"	d
_BLAZE_MATH_SHIMS_ISNAN_H_	amun/3rd_party/blaze/math/shims/IsNaN.h	36;"	d
_BLAZE_MATH_SHIMS_ISONE_H_	amun/3rd_party/blaze/math/shims/IsOne.h	36;"	d
_BLAZE_MATH_SHIMS_ISREAL_H_	amun/3rd_party/blaze/math/shims/IsReal.h	36;"	d
_BLAZE_MATH_SHIMS_ISZERO_H_	amun/3rd_party/blaze/math/shims/IsZero.h	36;"	d
_BLAZE_MATH_SHIMS_LOG10_H_	amun/3rd_party/blaze/math/shims/Log10.h	36;"	d
_BLAZE_MATH_SHIMS_LOG_H_	amun/3rd_party/blaze/math/shims/Log.h	36;"	d
_BLAZE_MATH_SHIMS_POW_H_	amun/3rd_party/blaze/math/shims/Pow.h	36;"	d
_BLAZE_MATH_SHIMS_REAL_H_	amun/3rd_party/blaze/math/shims/Real.h	36;"	d
_BLAZE_MATH_SHIMS_RESET_H_	amun/3rd_party/blaze/math/shims/Reset.h	36;"	d
_BLAZE_MATH_SHIMS_SERIAL_H_	amun/3rd_party/blaze/math/shims/Serial.h	36;"	d
_BLAZE_MATH_SHIMS_SHIMS_H_	amun/3rd_party/blaze/math/shims/Shims.h	36;"	d
_BLAZE_MATH_SHIMS_SINH_H_	amun/3rd_party/blaze/math/shims/Sinh.h	36;"	d
_BLAZE_MATH_SHIMS_SIN_H_	amun/3rd_party/blaze/math/shims/Sin.h	36;"	d
_BLAZE_MATH_SHIMS_SQRT_H_	amun/3rd_party/blaze/math/shims/Sqrt.h	36;"	d
_BLAZE_MATH_SHIMS_SQUARE_H_	amun/3rd_party/blaze/math/shims/Square.h	36;"	d
_BLAZE_MATH_SHIMS_TANH_H_	amun/3rd_party/blaze/math/shims/Tanh.h	36;"	d
_BLAZE_MATH_SHIMS_TAN_H_	amun/3rd_party/blaze/math/shims/Tan.h	36;"	d
_BLAZE_MATH_SIMD_ABS_H_	amun/3rd_party/blaze/math/simd/Abs.h	36;"	d
_BLAZE_MATH_SIMD_ACOSH_H_	amun/3rd_party/blaze/math/simd/Acosh.h	36;"	d
_BLAZE_MATH_SIMD_ACOS_H_	amun/3rd_party/blaze/math/simd/Acos.h	36;"	d
_BLAZE_MATH_SIMD_ADDITION_H_	amun/3rd_party/blaze/math/simd/Addition.h	36;"	d
_BLAZE_MATH_SIMD_ASINH_H_	amun/3rd_party/blaze/math/simd/Asinh.h	36;"	d
_BLAZE_MATH_SIMD_ASIN_H_	amun/3rd_party/blaze/math/simd/Asin.h	36;"	d
_BLAZE_MATH_SIMD_ATANH_H_	amun/3rd_party/blaze/math/simd/Atanh.h	36;"	d
_BLAZE_MATH_SIMD_ATAN_H_	amun/3rd_party/blaze/math/simd/Atan.h	36;"	d
_BLAZE_MATH_SIMD_BASICTYPES_H_	amun/3rd_party/blaze/math/simd/BasicTypes.h	36;"	d
_BLAZE_MATH_SIMD_CBRT_H_	amun/3rd_party/blaze/math/simd/Cbrt.h	36;"	d
_BLAZE_MATH_SIMD_CEIL_H_	amun/3rd_party/blaze/math/simd/Ceil.h	36;"	d
_BLAZE_MATH_SIMD_CONJ_H_	amun/3rd_party/blaze/math/simd/Conj.h	36;"	d
_BLAZE_MATH_SIMD_COSH_H_	amun/3rd_party/blaze/math/simd/Cosh.h	36;"	d
_BLAZE_MATH_SIMD_COS_H_	amun/3rd_party/blaze/math/simd/Cos.h	36;"	d
_BLAZE_MATH_SIMD_DERIVEDTYPES_H_	amun/3rd_party/blaze/math/simd/DerivedTypes.h	36;"	d
_BLAZE_MATH_SIMD_DIVISION_H_	amun/3rd_party/blaze/math/simd/Division.h	36;"	d
_BLAZE_MATH_SIMD_ERFC_H_	amun/3rd_party/blaze/math/simd/Erfc.h	36;"	d
_BLAZE_MATH_SIMD_ERF_H_	amun/3rd_party/blaze/math/simd/Erf.h	36;"	d
_BLAZE_MATH_SIMD_EXP_H_	amun/3rd_party/blaze/math/simd/Exp.h	36;"	d
_BLAZE_MATH_SIMD_FLOOR_H_	amun/3rd_party/blaze/math/simd/Floor.h	36;"	d
_BLAZE_MATH_SIMD_FMA_H_	amun/3rd_party/blaze/math/simd/FMA.h	36;"	d
_BLAZE_MATH_SIMD_FUNCTIONS_H_	amun/3rd_party/blaze/math/simd/Functions.h	36;"	d
_BLAZE_MATH_SIMD_H_	amun/3rd_party/blaze/math/SIMD.h	36;"	d
_BLAZE_MATH_SIMD_INVCBRT_H_	amun/3rd_party/blaze/math/simd/InvCbrt.h	36;"	d
_BLAZE_MATH_SIMD_INVSQRT_H_	amun/3rd_party/blaze/math/simd/InvSqrt.h	36;"	d
_BLAZE_MATH_SIMD_LOADA_H_	amun/3rd_party/blaze/math/simd/Loada.h	36;"	d
_BLAZE_MATH_SIMD_LOADU_H_	amun/3rd_party/blaze/math/simd/Loadu.h	36;"	d
_BLAZE_MATH_SIMD_LOG10_H_	amun/3rd_party/blaze/math/simd/Log10.h	36;"	d
_BLAZE_MATH_SIMD_LOG_H_	amun/3rd_party/blaze/math/simd/Log.h	36;"	d
_BLAZE_MATH_SIMD_MULTIPLICATION_H_	amun/3rd_party/blaze/math/simd/Multiplication.h	36;"	d
_BLAZE_MATH_SIMD_POW_H_	amun/3rd_party/blaze/math/simd/Pow.h	36;"	d
_BLAZE_MATH_SIMD_REDUCTION_H_	amun/3rd_party/blaze/math/simd/Reduction.h	36;"	d
_BLAZE_MATH_SIMD_SETZERO_H_	amun/3rd_party/blaze/math/simd/Setzero.h	36;"	d
_BLAZE_MATH_SIMD_SET_H_	amun/3rd_party/blaze/math/simd/Set.h	36;"	d
_BLAZE_MATH_SIMD_SIMDPACK_H_	amun/3rd_party/blaze/math/simd/SIMDPack.h	36;"	d
_BLAZE_MATH_SIMD_SIMDTRAIT_H_	amun/3rd_party/blaze/math/simd/SIMDTrait.h	36;"	d
_BLAZE_MATH_SIMD_SIMD_H_	amun/3rd_party/blaze/math/simd/SIMD.h	36;"	d
_BLAZE_MATH_SIMD_SINH_H_	amun/3rd_party/blaze/math/simd/Sinh.h	36;"	d
_BLAZE_MATH_SIMD_SIN_H_	amun/3rd_party/blaze/math/simd/Sin.h	36;"	d
_BLAZE_MATH_SIMD_SQRT_H_	amun/3rd_party/blaze/math/simd/Sqrt.h	36;"	d
_BLAZE_MATH_SIMD_STOREA_H_	amun/3rd_party/blaze/math/simd/Storea.h	36;"	d
_BLAZE_MATH_SIMD_STOREU_H_	amun/3rd_party/blaze/math/simd/Storeu.h	36;"	d
_BLAZE_MATH_SIMD_STREAM_H_	amun/3rd_party/blaze/math/simd/Stream.h	36;"	d
_BLAZE_MATH_SIMD_SUBTRACTION_H_	amun/3rd_party/blaze/math/simd/Subtraction.h	36;"	d
_BLAZE_MATH_SIMD_TANH_H_	amun/3rd_party/blaze/math/simd/Tanh.h	36;"	d
_BLAZE_MATH_SIMD_TAN_H_	amun/3rd_party/blaze/math/simd/Tan.h	36;"	d
_BLAZE_MATH_SMP_DEFAULT_DENSEMATRIX_H_	amun/3rd_party/blaze/math/smp/default/DenseMatrix.h	36;"	d
_BLAZE_MATH_SMP_DEFAULT_DENSEVECTOR_H_	amun/3rd_party/blaze/math/smp/default/DenseVector.h	36;"	d
_BLAZE_MATH_SMP_DEFAULT_FUNCTIONS_H_	amun/3rd_party/blaze/math/smp/default/Functions.h	36;"	d
_BLAZE_MATH_SMP_DEFAULT_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/smp/default/SparseMatrix.h	36;"	d
_BLAZE_MATH_SMP_DEFAULT_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/smp/default/SparseVector.h	36;"	d
_BLAZE_MATH_SMP_DENSEMATRIX_H_	amun/3rd_party/blaze/math/smp/DenseMatrix.h	36;"	d
_BLAZE_MATH_SMP_DENSEVECTOR_H_	amun/3rd_party/blaze/math/smp/DenseVector.h	36;"	d
_BLAZE_MATH_SMP_FUNCTIONS_H_	amun/3rd_party/blaze/math/smp/Functions.h	36;"	d
_BLAZE_MATH_SMP_H_	amun/3rd_party/blaze/math/SMP.h	36;"	d
_BLAZE_MATH_SMP_OPENMP_DENSEMATRIX_H_	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	36;"	d
_BLAZE_MATH_SMP_OPENMP_DENSEVECTOR_H_	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	36;"	d
_BLAZE_MATH_SMP_OPENMP_FUNCTIONS_H_	amun/3rd_party/blaze/math/smp/openmp/Functions.h	36;"	d
_BLAZE_MATH_SMP_PARALLELSECTION_H_	amun/3rd_party/blaze/math/smp/ParallelSection.h	36;"	d
_BLAZE_MATH_SMP_SERIALSECTION_H_	amun/3rd_party/blaze/math/smp/SerialSection.h	36;"	d
_BLAZE_MATH_SMP_SMP_H_	amun/3rd_party/blaze/math/smp/SMP.h	36;"	d
_BLAZE_MATH_SMP_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/smp/SparseMatrix.h	36;"	d
_BLAZE_MATH_SMP_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/smp/SparseVector.h	36;"	d
_BLAZE_MATH_SMP_THREADS_DENSEMATRIX_H_	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	36;"	d
_BLAZE_MATH_SMP_THREADS_DENSEVECTOR_H_	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	36;"	d
_BLAZE_MATH_SMP_THREADS_FUNCTIONS_H_	amun/3rd_party/blaze/math/smp/threads/Functions.h	36;"	d
_BLAZE_MATH_SMP_THREADS_THREADBACKEND_H_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	36;"	d
_BLAZE_MATH_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/SparseMatrix.h	36;"	d
_BLAZE_MATH_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/SparseVector.h	36;"	d
_BLAZE_MATH_SPARSE_COMPRESSEDMATRIX_H_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	36;"	d
_BLAZE_MATH_SPARSE_COMPRESSEDVECTOR_H_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	36;"	d
_BLAZE_MATH_SPARSE_FORWARD_H_	amun/3rd_party/blaze/math/sparse/Forward.h	36;"	d
_BLAZE_MATH_SPARSE_MATRIXACCESSPROXY_H_	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	36;"	d
_BLAZE_MATH_SPARSE_SPARSEELEMENT_H_	amun/3rd_party/blaze/math/sparse/SparseElement.h	36;"	d
_BLAZE_MATH_SPARSE_SPARSEMATRIX_H_	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	36;"	d
_BLAZE_MATH_SPARSE_SPARSEVECTOR_H_	amun/3rd_party/blaze/math/sparse/SparseVector.h	36;"	d
_BLAZE_MATH_SPARSE_VALUEINDEXPAIR_H_	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	36;"	d
_BLAZE_MATH_SPARSE_VECTORACCESSPROXY_H_	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	36;"	d
_BLAZE_MATH_STATICMATRIX_H_	amun/3rd_party/blaze/math/StaticMatrix.h	36;"	d
_BLAZE_MATH_STATICVECTOR_H_	amun/3rd_party/blaze/math/StaticVector.h	36;"	d
_BLAZE_MATH_STORAGEORDER_H_	amun/3rd_party/blaze/math/StorageOrder.h	36;"	d
_BLAZE_MATH_STRICTLYLOWERMATRIX_H_	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	36;"	d
_BLAZE_MATH_STRICTLYUPPERMATRIX_H_	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	36;"	d
_BLAZE_MATH_SUBMATRIX_H_	amun/3rd_party/blaze/math/Submatrix.h	36;"	d
_BLAZE_MATH_SYMMETRICMATRIX_H_	amun/3rd_party/blaze/math/SymmetricMatrix.h	36;"	d
_BLAZE_MATH_TRAITS_ADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/AddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_ADDTRAIT_H_	amun/3rd_party/blaze/math/traits/AddTrait.h	36;"	d
_BLAZE_MATH_TRAITS_COLUMNEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/ColumnExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_COLUMNTRAIT_H_	amun/3rd_party/blaze/math/traits/ColumnTrait.h	36;"	d
_BLAZE_MATH_TRAITS_CROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/CrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_CROSSTRAIT_H_	amun/3rd_party/blaze/math/traits/CrossTrait.h	36;"	d
_BLAZE_MATH_TRAITS_CTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/CTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DERESTRICTTRAIT_H_	amun/3rd_party/blaze/math/traits/DerestrictTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DIVTRAIT_H_	amun/3rd_party/blaze/math/traits/DivTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATINVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatInvExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DMATTSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DMatTSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECDVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecDVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECDVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecDVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECDVECDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecDVecDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECDVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecDVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecSVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecSVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECSVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecSVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECTDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecTDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_DVECTSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/DVecTSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_EVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/EvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_FOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/ForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_FOREACHTRAIT_H_	amun/3rd_party/blaze/math/traits/ForEachTrait.h	36;"	d
_BLAZE_MATH_TRAITS_H_	amun/3rd_party/blaze/math/Traits.h	36;"	d
_BLAZE_MATH_TRAITS_IMAGTRAIT_H_	amun/3rd_party/blaze/math/traits/ImagTrait.h	36;"	d
_BLAZE_MATH_TRAITS_INVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/InvExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_MATHTRAIT_H_	amun/3rd_party/blaze/math/traits/MathTrait.h	36;"	d
_BLAZE_MATH_TRAITS_MULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/MultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_MULTTRAIT_H_	amun/3rd_party/blaze/math/traits/MultTrait.h	36;"	d
_BLAZE_MATH_TRAITS_REALTRAIT_H_	amun/3rd_party/blaze/math/traits/RealTrait.h	36;"	d
_BLAZE_MATH_TRAITS_ROWEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/RowExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_ROWTRAIT_H_	amun/3rd_party/blaze/math/traits/RowTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SMATTSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SMatTSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBMATRIXEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SubmatrixExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBMATRIXTRAIT_H_	amun/3rd_party/blaze/math/traits/SubmatrixTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBTRAIT_H_	amun/3rd_party/blaze/math/traits/SubTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBVECTOREXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SubvectorExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SUBVECTORTRAIT_H_	amun/3rd_party/blaze/math/traits/SubvectorTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECDVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecDVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECDVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecDVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECDVECDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecDVecDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECDVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecDVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecSVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecSVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECSVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecSVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECTDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecTDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_SVECTSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/SVecTSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATINVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatInvExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDMATTSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDMatTSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDVECDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDVecDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTDVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTDVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTSVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTSVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTSVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTSVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TDVECTSVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TDVecTSVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TRAITS_H_	amun/3rd_party/blaze/math/traits/Traits.h	36;"	d
_BLAZE_MATH_TRAITS_TRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTDMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTDMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTDMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTDMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTSMATADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTSMatAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSMATTSMATSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSMatTSMatSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECCTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecCTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECEVALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecEvalExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECFOREACHEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecForEachExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECSCALARDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECSCALARMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECSERIALEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecSerialExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDVECDIVEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDVecDivExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTDVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTDVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTRANSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTransExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTSMATMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTSMatMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTSVECADDEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTSVecAddExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTSVECCROSSEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTSVecCrossExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTSVECMULTEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTSVecMultExprTrait.h	36;"	d
_BLAZE_MATH_TRAITS_TSVECTSVECSUBEXPRTRAIT_H_	amun/3rd_party/blaze/math/traits/TSVecTSVecSubExprTrait.h	36;"	d
_BLAZE_MATH_TRANSPOSEFLAG_H_	amun/3rd_party/blaze/math/TransposeFlag.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ARESIMDCOMBINABLE_H_	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	36;"	d
_BLAZE_MATH_TYPETRAITS_COLUMNS_H_	amun/3rd_party/blaze/math/typetraits/Columns.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASCONSTDATAACCESS_H_	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASMUTABLEDATAACCESS_H_	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDABS_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAbs.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDACOSH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAcosh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDACOS_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAcos.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDADD_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDASINH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAsinh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDASIN_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAsin.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDATANH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAtanh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDATAN_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDAtan.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDCBRT_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDCbrt.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDCEIL_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDCeil.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDCONJ_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDConj.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDCOSH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDCosh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDCOS_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDCos.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDDIV_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDERFC_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDErfc.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDERF_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDErf.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDEXP_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDExp.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDFLOOR_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDFloor.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDINVCBRT_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDInvCbrt.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDINVSQRT_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDInvSqrt.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDLOG10_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDLog10.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDLOG_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDLog.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDMULT_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDPOW_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDPow.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDSINH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDSinh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDSIN_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDSin.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDSQRT_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDSUB_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDTANH_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDTanh.h	36;"	d
_BLAZE_MATH_TYPETRAITS_HASSIMDTAN_H_	amun/3rd_party/blaze/math/typetraits/HasSIMDTan.h	36;"	d
_BLAZE_MATH_TYPETRAITS_H_	amun/3rd_party/blaze/math/TypeTraits.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISADAPTOR_H_	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISADDEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsAddExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISALIGNED_H_	amun/3rd_party/blaze/math/typetraits/IsAligned.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISBLASCOMPATIBLE_H_	amun/3rd_party/blaze/math/typetraits/IsBLASCompatible.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCOLUMNMAJORMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsColumnMajorMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCOLUMNVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsColumnVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCOLUMN_H_	amun/3rd_party/blaze/math/typetraits/IsColumn.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCOMPUTATION_H_	amun/3rd_party/blaze/math/typetraits/IsComputation.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCROSSEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsCrossExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISCUSTOM_H_	amun/3rd_party/blaze/math/typetraits/IsCustom.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISDENSEMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsDenseMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISDENSEVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsDenseVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISDIAGONAL_H_	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISDIVEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsDivExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISEVALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsEvalExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISEXPRESSION_H_	amun/3rd_party/blaze/math/typetraits/IsExpression.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISFOREACHEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsForEachExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISGENERAL_H_	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISHERMITIAN_H_	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISIDENTITY_H_	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISINVERTIBLE_H_	amun/3rd_party/blaze/math/typetraits/IsInvertible.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISLOWER_H_	amun/3rd_party/blaze/math/typetraits/IsLower.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATEVALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatEvalExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATFOREACHEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatForEachExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATINVEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatInvExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATMATADDEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatMatAddExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATMATMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatMatMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATMATSUBEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatMatSubExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatScalarDivExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatScalarMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATSERIALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatSerialExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATTRANSEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatTransExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMATVECMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMatVecMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISNUMERICMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsNumericMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISNUMERICVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsNumericVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISOPPOSEDVIEW_H_	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISPADDED_H_	amun/3rd_party/blaze/math/typetraits/IsPadded.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISPROXY_H_	amun/3rd_party/blaze/math/typetraits/IsProxy.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISRESIZABLE_H_	amun/3rd_party/blaze/math/typetraits/IsResizable.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISRESTRICTED_H_	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISROWMAJORMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsRowMajorMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISROWVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsRowVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISROW_H_	amun/3rd_party/blaze/math/typetraits/IsRow.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSERIALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsSerialExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSIMDENABLED_H_	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSIMDPACK_H_	amun/3rd_party/blaze/math/typetraits/IsSIMDPack.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSMPASSIGNABLE_H_	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSPARSEELEMENT_H_	amun/3rd_party/blaze/math/typetraits/IsSparseElement.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSPARSEMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsSparseMatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSPARSEVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsSparseVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSQUARE_H_	amun/3rd_party/blaze/math/typetraits/IsSquare.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSTRICTLYLOWER_H_	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSTRICTLYTRIANGULAR_H_	amun/3rd_party/blaze/math/typetraits/IsStrictlyTriangular.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSTRICTLYUPPER_H_	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSUBEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsSubExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSUBMATRIX_H_	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSUBVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISSYMMETRIC_H_	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISTEMPORARY_H_	amun/3rd_party/blaze/math/typetraits/IsTemporary.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISTRANSEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsTransExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISTRIANGULAR_H_	amun/3rd_party/blaze/math/typetraits/IsTriangular.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISTVECMATMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsTVecMatMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISUNILOWER_H_	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISUNITRIANGULAR_H_	amun/3rd_party/blaze/math/typetraits/IsUniTriangular.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISUNIUPPER_H_	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISUPPER_H_	amun/3rd_party/blaze/math/typetraits/IsUpper.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECEVALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecEvalExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECFOREACHEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecForEachExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECSCALARDIVEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecScalarDivExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECSCALARMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecScalarMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECSERIALEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecSerialExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECTOR_H_	amun/3rd_party/blaze/math/typetraits/IsVector.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECTRANSEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecTransExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECTVECMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecTVecMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECVECADDEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecVecAddExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECVECDIVEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecVecDivExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECVECMULTEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecVecMultExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVECVECSUBEXPR_H_	amun/3rd_party/blaze/math/typetraits/IsVecVecSubExpr.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ISVIEW_H_	amun/3rd_party/blaze/math/typetraits/IsView.h	36;"	d
_BLAZE_MATH_TYPETRAITS_REMOVEADAPTOR_H_	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	36;"	d
_BLAZE_MATH_TYPETRAITS_REQUIRESEVALUATION_H_	amun/3rd_party/blaze/math/typetraits/RequiresEvaluation.h	36;"	d
_BLAZE_MATH_TYPETRAITS_ROWS_H_	amun/3rd_party/blaze/math/typetraits/Rows.h	36;"	d
_BLAZE_MATH_TYPETRAITS_SIZE_H_	amun/3rd_party/blaze/math/typetraits/Size.h	36;"	d
_BLAZE_MATH_TYPETRAITS_STORAGEORDER_H_	amun/3rd_party/blaze/math/typetraits/StorageOrder.h	36;"	d
_BLAZE_MATH_TYPETRAITS_TRANSPOSEFLAG_H_	amun/3rd_party/blaze/math/typetraits/TransposeFlag.h	36;"	d
_BLAZE_MATH_TYPETRAITS_TYPETRAITS_H_	amun/3rd_party/blaze/math/typetraits/TypeTraits.h	36;"	d
_BLAZE_MATH_TYPETRAITS_UNDERLYINGBUILTIN_H_	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	36;"	d
_BLAZE_MATH_TYPETRAITS_UNDERLYINGELEMENT_H_	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	36;"	d
_BLAZE_MATH_TYPETRAITS_UNDERLYINGNUMERIC_H_	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	36;"	d
_BLAZE_MATH_UNILOWERMATRIX_H_	amun/3rd_party/blaze/math/UniLowerMatrix.h	36;"	d
_BLAZE_MATH_UNIUPPERMATRIX_H_	amun/3rd_party/blaze/math/UniUpperMatrix.h	36;"	d
_BLAZE_MATH_UPPERMATRIX_H_	amun/3rd_party/blaze/math/UpperMatrix.h	36;"	d
_BLAZE_MATH_VECTOR_H_	amun/3rd_party/blaze/math/Vector.h	36;"	d
_BLAZE_MATH_VIEWS_COLUMN_BASETEMPLATE_H_	amun/3rd_party/blaze/math/views/column/BaseTemplate.h	36;"	d
_BLAZE_MATH_VIEWS_COLUMN_DENSE_H_	amun/3rd_party/blaze/math/views/column/Dense.h	36;"	d
_BLAZE_MATH_VIEWS_COLUMN_H_	amun/3rd_party/blaze/math/views/Column.h	36;"	d
_BLAZE_MATH_VIEWS_COLUMN_SPARSE_H_	amun/3rd_party/blaze/math/views/column/Sparse.h	36;"	d
_BLAZE_MATH_VIEWS_FORWARD_H_	amun/3rd_party/blaze/math/views/Forward.h	36;"	d
_BLAZE_MATH_VIEWS_H_	amun/3rd_party/blaze/math/Views.h	36;"	d
_BLAZE_MATH_VIEWS_ROW_BASETEMPLATE_H_	amun/3rd_party/blaze/math/views/row/BaseTemplate.h	36;"	d
_BLAZE_MATH_VIEWS_ROW_DENSE_H_	amun/3rd_party/blaze/math/views/row/Dense.h	36;"	d
_BLAZE_MATH_VIEWS_ROW_H_	amun/3rd_party/blaze/math/views/Row.h	36;"	d
_BLAZE_MATH_VIEWS_ROW_SPARSE_H_	amun/3rd_party/blaze/math/views/row/Sparse.h	36;"	d
_BLAZE_MATH_VIEWS_SUBMATRIX_BASETEMPLATE_H_	amun/3rd_party/blaze/math/views/submatrix/BaseTemplate.h	36;"	d
_BLAZE_MATH_VIEWS_SUBMATRIX_DENSE_H_	amun/3rd_party/blaze/math/views/submatrix/Dense.h	36;"	d
_BLAZE_MATH_VIEWS_SUBMATRIX_H_	amun/3rd_party/blaze/math/views/Submatrix.h	36;"	d
_BLAZE_MATH_VIEWS_SUBMATRIX_SPARSE_H_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	36;"	d
_BLAZE_MATH_VIEWS_SUBVECTOR_BASETEMPLATE_H_	amun/3rd_party/blaze/math/views/subvector/BaseTemplate.h	36;"	d
_BLAZE_MATH_VIEWS_SUBVECTOR_DENSE_H_	amun/3rd_party/blaze/math/views/subvector/Dense.h	36;"	d
_BLAZE_MATH_VIEWS_SUBVECTOR_H_	amun/3rd_party/blaze/math/views/Subvector.h	36;"	d
_BLAZE_MATH_VIEWS_SUBVECTOR_SPARSE_H_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	36;"	d
_BLAZE_MATH_VIEWS_VIEWS_H_	amun/3rd_party/blaze/math/views/Views.h	36;"	d
_BLAZE_SYSTEM_ASSERTION_H_	amun/3rd_party/blaze/system/Assertion.h	36;"	d
_BLAZE_SYSTEM_BLAS_H_	amun/3rd_party/blaze/system/BLAS.h	36;"	d
_BLAZE_SYSTEM_BLOCKING_H_	amun/3rd_party/blaze/system/Blocking.h	36;"	d
_BLAZE_SYSTEM_CACHESIZE_H_	amun/3rd_party/blaze/system/CacheSize.h	36;"	d
_BLAZE_SYSTEM_DEBUGGING_H_	amun/3rd_party/blaze/system/Debugging.h	36;"	d
_BLAZE_SYSTEM_DEPRECATED_H_	amun/3rd_party/blaze/system/Deprecated.h	36;"	d
_BLAZE_SYSTEM_INLINE_H_	amun/3rd_party/blaze/system/Inline.h	36;"	d
_BLAZE_SYSTEM_LOGGING_H_	amun/3rd_party/blaze/system/Logging.h	36;"	d
_BLAZE_SYSTEM_MPI_H_	amun/3rd_party/blaze/system/MPI.h	36;"	d
_BLAZE_SYSTEM_OPTIMIZATIONS_H_	amun/3rd_party/blaze/system/Optimizations.h	36;"	d
_BLAZE_SYSTEM_PRECISION_H_	amun/3rd_party/blaze/system/Precision.h	36;"	d
_BLAZE_SYSTEM_RANDOM_H_	amun/3rd_party/blaze/system/Random.h	36;"	d
_BLAZE_SYSTEM_RESTRICT_H_	amun/3rd_party/blaze/system/Restrict.h	36;"	d
_BLAZE_SYSTEM_SIGNATURE_H_	amun/3rd_party/blaze/system/Signature.h	36;"	d
_BLAZE_SYSTEM_SMP_H_	amun/3rd_party/blaze/system/SMP.h	36;"	d
_BLAZE_SYSTEM_STORAGEORDER_H_	amun/3rd_party/blaze/system/StorageOrder.h	36;"	d
_BLAZE_SYSTEM_SYSTEM_H_	amun/3rd_party/blaze/system/System.h	36;"	d
_BLAZE_SYSTEM_THRESHOLDS_H_	amun/3rd_party/blaze/system/Thresholds.h	36;"	d
_BLAZE_SYSTEM_TRANSPOSEFLAG_H_	amun/3rd_party/blaze/system/TransposeFlag.h	36;"	d
_BLAZE_SYSTEM_VECTORIZATION_H_	amun/3rd_party/blaze/system/Vectorization.h	36;"	d
_BLAZE_SYSTEM_VERSION_H_	amun/3rd_party/blaze/system/Version.h	36;"	d
_BLAZE_SYSTEM_WARNINGDISABLE_H_	amun/3rd_party/blaze/system/WarningDisable.h	36;"	d
_BLAZE_TUTORIAL_H_	amun/3rd_party/blaze/Tutorial.h	36;"	d
_BLAZE_UTIL_ALGORITHM_H_	amun/3rd_party/blaze/util/Algorithm.h	36;"	d
_BLAZE_UTIL_ALIGNEDALLOCATOR_H_	amun/3rd_party/blaze/util/AlignedAllocator.h	36;"	d
_BLAZE_UTIL_ALIGNEDARRAY_H_	amun/3rd_party/blaze/util/AlignedArray.h	36;"	d
_BLAZE_UTIL_ALIGNMENTCHECK_H_	amun/3rd_party/blaze/util/AlignmentCheck.h	36;"	d
_BLAZE_UTIL_ASSERT_H_	amun/3rd_party/blaze/util/Assert.h	36;"	d
_BLAZE_UTIL_COLORMACROS_H_	amun/3rd_party/blaze/util/ColorMacros.h	36;"	d
_BLAZE_UTIL_COMPLEX_H_	amun/3rd_party/blaze/util/Complex.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_ARITHMETIC_H_	amun/3rd_party/blaze/util/constraints/Arithmetic.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_ARRAY_H_	amun/3rd_party/blaze/util/constraints/Array.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_ASSIGNABLE_H_	amun/3rd_party/blaze/util/constraints/Assignable.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_BASEOF_H_	amun/3rd_party/blaze/util/constraints/BaseOf.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_BOOLEAN_H_	amun/3rd_party/blaze/util/constraints/Boolean.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_BUILTIN_H_	amun/3rd_party/blaze/util/constraints/Builtin.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_CLASS_H_	amun/3rd_party/blaze/util/constraints/Class.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_COMPARABLE_H_	amun/3rd_party/blaze/util/constraints/Comparable.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_COMPLEXDOUBLE_H_	amun/3rd_party/blaze/util/constraints/ComplexDouble.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_COMPLEXFLOAT_H_	amun/3rd_party/blaze/util/constraints/ComplexFloat.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_COMPLEX_H_	amun/3rd_party/blaze/util/constraints/Complex.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_CONSTRAINTS_H_	amun/3rd_party/blaze/util/constraints/Constraints.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_CONSTRUCTIBLE_H_	amun/3rd_party/blaze/util/constraints/Constructible.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_CONST_H_	amun/3rd_party/blaze/util/constraints/Const.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_CONVERTIBLE_H_	amun/3rd_party/blaze/util/constraints/Convertible.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_DERIVEDFROM_H_	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_DESTRUCTIBLE_H_	amun/3rd_party/blaze/util/constraints/Destructible.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_DOUBLE_H_	amun/3rd_party/blaze/util/constraints/Double.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_EMPTY_H_	amun/3rd_party/blaze/util/constraints/Empty.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_FLOATINGPOINT_H_	amun/3rd_party/blaze/util/constraints/FloatingPoint.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_FLOAT_H_	amun/3rd_party/blaze/util/constraints/Float.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_H_	amun/3rd_party/blaze/util/Constraints.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_INTEGER_H_	amun/3rd_party/blaze/util/constraints/Integer.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_INTEGRAL_H_	amun/3rd_party/blaze/util/constraints/Integral.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_LONGDOUBLE_H_	amun/3rd_party/blaze/util/constraints/LongDouble.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_NUMERIC_H_	amun/3rd_party/blaze/util/constraints/Numeric.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_OBJECT_H_	amun/3rd_party/blaze/util/constraints/Object.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_POD_H_	amun/3rd_party/blaze/util/constraints/Pod.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_POINTER_H_	amun/3rd_party/blaze/util/constraints/Pointer.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_RANK_H_	amun/3rd_party/blaze/util/constraints/Rank.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_REFERENCE_H_	amun/3rd_party/blaze/util/constraints/Reference.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_SAMESIZE_H_	amun/3rd_party/blaze/util/constraints/SameSize.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_SAMETYPE_H_	amun/3rd_party/blaze/util/constraints/SameType.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_SIGNED_H_	amun/3rd_party/blaze/util/constraints/Signed.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_SIZE_H_	amun/3rd_party/blaze/util/constraints/Size.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_SUBSCRIPTABLE_H_	amun/3rd_party/blaze/util/constraints/Subscriptable.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_TYPERESTRICTION_H_	amun/3rd_party/blaze/util/constraints/TypeRestriction.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_UNION_H_	amun/3rd_party/blaze/util/constraints/Union.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_UNSIGNED_H_	amun/3rd_party/blaze/util/constraints/Unsigned.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_VALID_H_	amun/3rd_party/blaze/util/constraints/Valid.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_VECTORIZABLE_H_	amun/3rd_party/blaze/util/constraints/Vectorizable.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_VOID_H_	amun/3rd_party/blaze/util/constraints/Void.h	36;"	d
_BLAZE_UTIL_CONSTRAINTS_VOLATILE_H_	amun/3rd_party/blaze/util/constraints/Volatile.h	36;"	d
_BLAZE_UTIL_CONVERT_H_	amun/3rd_party/blaze/util/Convert.h	36;"	d
_BLAZE_UTIL_DIMENSIONOF_H_	amun/3rd_party/blaze/util/DimensionOf.h	36;"	d
_BLAZE_UTIL_DISABLEIF_H_	amun/3rd_party/blaze/util/DisableIf.h	36;"	d
_BLAZE_UTIL_EMPTYTYPE_H_	amun/3rd_party/blaze/util/EmptyType.h	36;"	d
_BLAZE_UTIL_ENABLEIF_H_	amun/3rd_party/blaze/util/EnableIf.h	36;"	d
_BLAZE_UTIL_EXCEPTION_H_	amun/3rd_party/blaze/util/Exception.h	36;"	d
_BLAZE_UTIL_FALSETYPE_H_	amun/3rd_party/blaze/util/FalseType.h	36;"	d
_BLAZE_UTIL_INDICES_H_	amun/3rd_party/blaze/util/Indices.h	36;"	d
_BLAZE_UTIL_INPUTSTRING_H_	amun/3rd_party/blaze/util/InputString.h	36;"	d
_BLAZE_UTIL_INTEGRALCONSTANT_H_	amun/3rd_party/blaze/util/IntegralConstant.h	36;"	d
_BLAZE_UTIL_INVALIDTYPE_H_	amun/3rd_party/blaze/util/InvalidType.h	36;"	d
_BLAZE_UTIL_LIMITS_H_	amun/3rd_party/blaze/util/Limits.h	36;"	d
_BLAZE_UTIL_LOGGING_DEBUGSECTION_H_	amun/3rd_party/blaze/util/logging/DebugSection.h	36;"	d
_BLAZE_UTIL_LOGGING_DETAILSECTION_H_	amun/3rd_party/blaze/util/logging/DetailSection.h	36;"	d
_BLAZE_UTIL_LOGGING_ERRORSECTION_H_	amun/3rd_party/blaze/util/logging/ErrorSection.h	36;"	d
_BLAZE_UTIL_LOGGING_FUNCTIONTRACE_H_	amun/3rd_party/blaze/util/logging/FunctionTrace.h	36;"	d
_BLAZE_UTIL_LOGGING_H_	amun/3rd_party/blaze/util/Logging.h	36;"	d
_BLAZE_UTIL_LOGGING_INFOSECTION_H_	amun/3rd_party/blaze/util/logging/InfoSection.h	36;"	d
_BLAZE_UTIL_LOGGING_LOGGER_H_	amun/3rd_party/blaze/util/logging/Logger.h	36;"	d
_BLAZE_UTIL_LOGGING_LOGGING_H_	amun/3rd_party/blaze/util/logging/Logging.h	36;"	d
_BLAZE_UTIL_LOGGING_LOGLEVEL_H_	amun/3rd_party/blaze/util/logging/LogLevel.h	36;"	d
_BLAZE_UTIL_LOGGING_LOGSECTION_H_	amun/3rd_party/blaze/util/logging/LogSection.h	36;"	d
_BLAZE_UTIL_LOGGING_PROGRESSSECTION_H_	amun/3rd_party/blaze/util/logging/ProgressSection.h	36;"	d
_BLAZE_UTIL_LOGGING_WARNINGSECTION_H_	amun/3rd_party/blaze/util/logging/WarningSection.h	36;"	d
_BLAZE_UTIL_MEMORYPOOL_H_	amun/3rd_party/blaze/util/MemoryPool.h	36;"	d
_BLAZE_UTIL_MEMORY_H_	amun/3rd_party/blaze/util/Memory.h	36;"	d
_BLAZE_UTIL_MISALIGNMENT_H_	amun/3rd_party/blaze/util/Misalignment.h	36;"	d
_BLAZE_UTIL_MODULE_H_	amun/3rd_party/blaze/Util.h	36;"	d
_BLAZE_UTIL_MPL_AND_H_	amun/3rd_party/blaze/util/mpl/And.h	36;"	d
_BLAZE_UTIL_MPL_BOOL_H_	amun/3rd_party/blaze/util/mpl/Bool.h	36;"	d
_BLAZE_UTIL_MPL_CHAR_H_	amun/3rd_party/blaze/util/mpl/Char.h	36;"	d
_BLAZE_UTIL_MPL_EQUAL_H_	amun/3rd_party/blaze/util/mpl/Equal.h	36;"	d
_BLAZE_UTIL_MPL_GREATER_H_	amun/3rd_party/blaze/util/mpl/Greater.h	36;"	d
_BLAZE_UTIL_MPL_H_	amun/3rd_party/blaze/util/MPL.h	36;"	d
_BLAZE_UTIL_MPL_IF_H_	amun/3rd_party/blaze/util/mpl/If.h	36;"	d
_BLAZE_UTIL_MPL_INT_H_	amun/3rd_party/blaze/util/mpl/Int.h	36;"	d
_BLAZE_UTIL_MPL_LESS_H_	amun/3rd_party/blaze/util/mpl/Less.h	36;"	d
_BLAZE_UTIL_MPL_LONG_H_	amun/3rd_party/blaze/util/mpl/Long.h	36;"	d
_BLAZE_UTIL_MPL_MAX_H_	amun/3rd_party/blaze/util/mpl/Max.h	36;"	d
_BLAZE_UTIL_MPL_MINUS_H_	amun/3rd_party/blaze/util/mpl/Minus.h	36;"	d
_BLAZE_UTIL_MPL_MIN_H_	amun/3rd_party/blaze/util/mpl/Min.h	36;"	d
_BLAZE_UTIL_MPL_MODULUS_H_	amun/3rd_party/blaze/util/mpl/Modulus.h	36;"	d
_BLAZE_UTIL_MPL_MPL_H_	amun/3rd_party/blaze/util/mpl/MPL.h	36;"	d
_BLAZE_UTIL_MPL_NEXTMULTIPLE_H_	amun/3rd_party/blaze/util/mpl/NextMultiple.h	36;"	d
_BLAZE_UTIL_MPL_NOT_H_	amun/3rd_party/blaze/util/mpl/Not.h	36;"	d
_BLAZE_UTIL_MPL_OR_H_	amun/3rd_party/blaze/util/mpl/Or.h	36;"	d
_BLAZE_UTIL_MPL_PLUS_H_	amun/3rd_party/blaze/util/mpl/Plus.h	36;"	d
_BLAZE_UTIL_MPL_SIZET_H_	amun/3rd_party/blaze/util/mpl/SizeT.h	36;"	d
_BLAZE_UTIL_MPL_TIMES_H_	amun/3rd_party/blaze/util/mpl/Times.h	36;"	d
_BLAZE_UTIL_MPL_XOR_H_	amun/3rd_party/blaze/util/mpl/Xor.h	36;"	d
_BLAZE_UTIL_NONCOPYABLE_H_	amun/3rd_party/blaze/util/NonCopyable.h	36;"	d
_BLAZE_UTIL_NONCREATABLE_H_	amun/3rd_party/blaze/util/NonCreatable.h	36;"	d
_BLAZE_UTIL_NULLTYPE_H_	amun/3rd_party/blaze/util/NullType.h	36;"	d
_BLAZE_UTIL_POINTERCAST_H_	amun/3rd_party/blaze/util/PointerCast.h	36;"	d
_BLAZE_UTIL_POLICIES_ARRAYDELETE_H_	amun/3rd_party/blaze/util/policies/ArrayDelete.h	36;"	d
_BLAZE_UTIL_POLICIES_CONSTANTGROWTH_H_	amun/3rd_party/blaze/util/policies/ConstantGrowth.h	36;"	d
_BLAZE_UTIL_POLICIES_DEALLOCATE_H_	amun/3rd_party/blaze/util/policies/Deallocate.h	36;"	d
_BLAZE_UTIL_POLICIES_DEFAULTDELETE_H_	amun/3rd_party/blaze/util/policies/DefaultDelete.h	36;"	d
_BLAZE_UTIL_POLICIES_H_	amun/3rd_party/blaze/util/Policies.h	36;"	d
_BLAZE_UTIL_POLICIES_LINEARGROWTH_H_	amun/3rd_party/blaze/util/policies/LinearGrowth.h	36;"	d
_BLAZE_UTIL_POLICIES_NODELETE_H_	amun/3rd_party/blaze/util/policies/NoDelete.h	36;"	d
_BLAZE_UTIL_POLICIES_OPTIMALGROWTH_H_	amun/3rd_party/blaze/util/policies/OptimalGrowth.h	36;"	d
_BLAZE_UTIL_POLICIES_PTRDELETE_H_	amun/3rd_party/blaze/util/policies/PtrDelete.h	36;"	d
_BLAZE_UTIL_PTRITERATOR_H_	amun/3rd_party/blaze/util/PtrIterator.h	36;"	d
_BLAZE_UTIL_PTRVECTOR_H_	amun/3rd_party/blaze/util/PtrVector.h	36;"	d
_BLAZE_UTIL_RANDOM_H_	amun/3rd_party/blaze/util/Random.h	36;"	d
_BLAZE_UTIL_SERIALIZATION_ARCHIVE_H_	amun/3rd_party/blaze/util/serialization/Archive.h	36;"	d
_BLAZE_UTIL_SERIALIZATION_H_	amun/3rd_party/blaze/util/Serialization.h	36;"	d
_BLAZE_UTIL_SERIALIZATION_SERIALIZATION_H_	amun/3rd_party/blaze/util/serialization/Serialization.h	36;"	d
_BLAZE_UTIL_SINGLETON_DEPENDENCY_H_	amun/3rd_party/blaze/util/singleton/Dependency.h	36;"	d
_BLAZE_UTIL_SINGLETON_H_	amun/3rd_party/blaze/util/Singleton.h	36;"	d
_BLAZE_UTIL_SINGLETON_SINGLETON_H_	amun/3rd_party/blaze/util/singleton/Singleton.h	36;"	d
_BLAZE_UTIL_STATICASSERT_H_	amun/3rd_party/blaze/util/StaticAssert.h	36;"	d
_BLAZE_UTIL_SUFFIX_H_	amun/3rd_party/blaze/util/Suffix.h	36;"	d
_BLAZE_UTIL_SYSTEMCLOCKID_H_	amun/3rd_party/blaze/util/SystemClockID.h	36;"	d
_BLAZE_UTIL_SYSTEMCLOCK_H_	amun/3rd_party/blaze/util/SystemClock.h	36;"	d
_BLAZE_UTIL_TEMPLATE_H_	amun/3rd_party/blaze/util/Template.h	36;"	d
_BLAZE_UTIL_THREADPOOL_TASKQUEUE_H_	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	36;"	d
_BLAZE_UTIL_THREADPOOL_TASK_H_	amun/3rd_party/blaze/util/threadpool/Task.h	36;"	d
_BLAZE_UTIL_THREADPOOL_THREADPOOL_H_	amun/3rd_party/blaze/util/ThreadPool.h	36;"	d
_BLAZE_UTIL_THREADPOOL_THREADPOOL_H_	amun/3rd_party/blaze/util/threadpool/ThreadPool.h	36;"	d
_BLAZE_UTIL_THREAD_H_	amun/3rd_party/blaze/util/Thread.h	36;"	d
_BLAZE_UTIL_TIME_H_	amun/3rd_party/blaze/util/Time.h	36;"	d
_BLAZE_UTIL_TIMING_CPUPOLICY_H_	amun/3rd_party/blaze/util/timing/CpuPolicy.h	36;"	d
_BLAZE_UTIL_TIMING_CPUTIMER_H_	amun/3rd_party/blaze/util/timing/CpuTimer.h	36;"	d
_BLAZE_UTIL_TIMING_H_	amun/3rd_party/blaze/util/Timing.h	36;"	d
_BLAZE_UTIL_TIMING_TIMER_H_	amun/3rd_party/blaze/util/timing/Timer.h	36;"	d
_BLAZE_UTIL_TIMING_TIMING_H_	amun/3rd_party/blaze/util/timing/Timing.h	36;"	d
_BLAZE_UTIL_TIMING_WCPOLICY_H_	amun/3rd_party/blaze/util/timing/WcPolicy.h	36;"	d
_BLAZE_UTIL_TIMING_WCTIMER_H_	amun/3rd_party/blaze/util/timing/WcTimer.h	36;"	d
_BLAZE_UTIL_TRUETYPE_H_	amun/3rd_party/blaze/util/TrueType.h	36;"	d
_BLAZE_UTIL_TYPELIST_H_	amun/3rd_party/blaze/util/TypeList.h	36;"	d
_BLAZE_UTIL_TYPES_H_	amun/3rd_party/blaze/util/Types.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ADDCONST_H_	amun/3rd_party/blaze/util/typetraits/AddConst.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ADDCV_H_	amun/3rd_party/blaze/util/typetraits/AddCV.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ADDPOINTER_H_	amun/3rd_party/blaze/util/typetraits/AddPointer.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ADDREFERENCE_H_	amun/3rd_party/blaze/util/typetraits/AddReference.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ADDVOLATILE_H_	amun/3rd_party/blaze/util/typetraits/AddVolatile.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ALIGNMENTOF_H_	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ALL_H_	amun/3rd_party/blaze/util/typetraits/All.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ANY_H_	amun/3rd_party/blaze/util/typetraits/Any.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_COMMONTYPE_H_	amun/3rd_party/blaze/util/typetraits/CommonType.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_DECAY_H_	amun/3rd_party/blaze/util/typetraits/Decay.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_EXTENT_H_	amun/3rd_party/blaze/util/typetraits/Extent.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_GETMEMBERTYPE_H_	amun/3rd_party/blaze/util/typetraits/GetMemberType.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_HASMEMBER_H_	amun/3rd_party/blaze/util/typetraits/HasMember.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_HASSIZE_H_	amun/3rd_party/blaze/util/typetraits/HasSize.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_HAVESAMESIZE_H_	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_H_	amun/3rd_party/blaze/util/TypeTraits.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISARITHMETIC_H_	amun/3rd_party/blaze/util/typetraits/IsArithmetic.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISARRAY_H_	amun/3rd_party/blaze/util/typetraits/IsArray.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISASSIGNABLE_H_	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISBASEOF_H_	amun/3rd_party/blaze/util/typetraits/IsBaseOf.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISBOOLEAN_H_	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISBUILTIN_H_	amun/3rd_party/blaze/util/typetraits/IsBuiltin.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCHARACTER_H_	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCLASS_H_	amun/3rd_party/blaze/util/typetraits/IsClass.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCOMPLEXDOUBLE_H_	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCOMPLEXFLOAT_H_	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCOMPLEX_H_	amun/3rd_party/blaze/util/typetraits/IsComplex.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCONSTRUCTIBLE_H_	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCONST_H_	amun/3rd_party/blaze/util/typetraits/IsConst.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISCONVERTIBLE_H_	amun/3rd_party/blaze/util/typetraits/IsConvertible.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISDESTRUCTIBLE_H_	amun/3rd_party/blaze/util/typetraits/IsDestructible.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISDOUBLE_H_	amun/3rd_party/blaze/util/typetraits/IsDouble.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISEMPTY_H_	amun/3rd_party/blaze/util/typetraits/IsEmpty.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISFLOATINGPOINT_H_	amun/3rd_party/blaze/util/typetraits/IsFloatingPoint.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISFLOAT_H_	amun/3rd_party/blaze/util/typetraits/IsFloat.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISINTEGER_H_	amun/3rd_party/blaze/util/typetraits/IsInteger.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISINTEGRAL_H_	amun/3rd_party/blaze/util/typetraits/IsIntegral.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISLONGDOUBLE_H_	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISLONG_H_	amun/3rd_party/blaze/util/typetraits/IsLong.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISNUMERIC_H_	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISOBJECT_H_	amun/3rd_party/blaze/util/typetraits/IsObject.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISPOD_H_	amun/3rd_party/blaze/util/typetraits/IsPod.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISPOINTER_H_	amun/3rd_party/blaze/util/typetraits/IsPointer.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISREFERENCE_H_	amun/3rd_party/blaze/util/typetraits/IsReference.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISSAME_H_	amun/3rd_party/blaze/util/typetraits/IsSame.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISSHORT_H_	amun/3rd_party/blaze/util/typetraits/IsShort.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISSIGNED_H_	amun/3rd_party/blaze/util/typetraits/IsSigned.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISUNION_H_	amun/3rd_party/blaze/util/typetraits/IsUnion.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISUNSIGNED_H_	amun/3rd_party/blaze/util/typetraits/IsUnsigned.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISVALID_H_	amun/3rd_party/blaze/util/typetraits/IsValid.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISVECTORIZABLE_H_	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISVOID_H_	amun/3rd_party/blaze/util/typetraits/IsVoid.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_ISVOLATILE_H_	amun/3rd_party/blaze/util/typetraits/IsVolatile.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_MAKESIGNED_H_	amun/3rd_party/blaze/util/typetraits/MakeSigned.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_MAKEUNSIGNED_H_	amun/3rd_party/blaze/util/typetraits/MakeUnsigned.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_RANK_H_	amun/3rd_party/blaze/util/typetraits/Rank.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVEALLEXTENTS_H_	amun/3rd_party/blaze/util/typetraits/RemoveAllExtents.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVECONST_H_	amun/3rd_party/blaze/util/typetraits/RemoveConst.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVECV_H_	amun/3rd_party/blaze/util/typetraits/RemoveCV.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVEEXTENT_H_	amun/3rd_party/blaze/util/typetraits/RemoveExtent.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVEPOINTER_H_	amun/3rd_party/blaze/util/typetraits/RemovePointer.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVEREFERENCE_H_	amun/3rd_party/blaze/util/typetraits/RemoveReference.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_REMOVEVOLATILE_H_	amun/3rd_party/blaze/util/typetraits/RemoveVolatile.h	36;"	d
_BLAZE_UTIL_TYPETRAITS_TYPETRAITS_H_	amun/3rd_party/blaze/util/typetraits/TypeTraits.h	36;"	d
_BLAZE_UTIL_UNSIGNEDVALUE_H_	amun/3rd_party/blaze/util/UnsignedValue.h	36;"	d
_BLAZE_UTIL_UNUSED_H_	amun/3rd_party/blaze/util/Unused.h	36;"	d
_BLAZE_UTIL_UTIL_H_	amun/3rd_party/blaze/util/Util.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_H_	amun/3rd_party/blaze/util/ValueTraits.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_ISEVEN_H_	amun/3rd_party/blaze/util/valuetraits/IsEven.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_ISMULTIPLEOF_H_	amun/3rd_party/blaze/util/valuetraits/IsMultipleOf.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_ISODD_H_	amun/3rd_party/blaze/util/valuetraits/IsOdd.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_ISPOWEROF_H_	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	36;"	d
_BLAZE_UTIL_VALUETRAITS_VALUETRAITS_H_	amun/3rd_party/blaze/util/valuetraits/ValueTraits.h	36;"	d
_Comment	amun/3rd_party/yaml-cpp/emittermanip.h	/^  _Comment(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Comment
_Comment	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Comment {$/;"	s	namespace:YAML
_CreateNewAnchor	amun/3rd_party/yaml-cpp/nodeevents.h	/^    anchor_t _CreateNewAnchor() { return ++m_curAnchor; }$/;"	f	class:YAML::NodeEvents::AliasManager
_DA_H_	amun/3rd_party/fast_align/src/da.h	16;"	d
_Indent	amun/3rd_party/yaml-cpp/emittermanip.h	/^  _Indent(int value_) : value(value_) {}$/;"	f	struct:YAML::_Indent
_Indent	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Indent {$/;"	s	namespace:YAML
_Null	amun/3rd_party/yaml-cpp/null.h	/^struct YAML_CPP_API _Null {};$/;"	s	namespace:YAML
_Precision	amun/3rd_party/yaml-cpp/emittermanip.h	/^  _Precision(int floatPrecision_, int doublePrecision_)$/;"	f	struct:YAML::_Precision
_Precision	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Precision {$/;"	s	namespace:YAML
_ReadAheadTo	amun/3rd_party/yaml-cpp/stream.cpp	/^bool Stream::_ReadAheadTo(size_t i) const {$/;"	f	class:YAML::Stream
_Set	amun/3rd_party/yaml-cpp/emitterstate.h	/^void EmitterState::_Set(Setting<T>& fmt, T value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
_TTABLES_H_	amun/3rd_party/fast_align/src/ttables.h	16;"	d
_Tag	amun/3rd_party/yaml-cpp/emittermanip.h	/^  explicit _Tag(const std::string& prefix_, const std::string& content_,$/;"	f	struct:YAML::_Tag
_Tag	amun/3rd_party/yaml-cpp/emittermanip.h	/^struct _Tag {$/;"	s	namespace:YAML
__AVX2__	amun/3rd_party/blaze/system/Vectorization.h	62;"	d
__AVX__	amun/3rd_party/blaze/system/Vectorization.h	102;"	d
__MMX__	amun/3rd_party/blaze/system/Vectorization.h	81;"	d
__SSE2__	amun/3rd_party/blaze/system/Vectorization.h	87;"	d
__SSE3__	amun/3rd_party/blaze/system/Vectorization.h	90;"	d
__SSE4_1__	amun/3rd_party/blaze/system/Vectorization.h	96;"	d
__SSE4_2__	amun/3rd_party/blaze/system/Vectorization.h	99;"	d
__SSE__	amun/3rd_party/blaze/system/Vectorization.h	84;"	d
__SSSE3__	amun/3rd_party/blaze/system/Vectorization.h	93;"	d
__has_feature	amun/3rd_party/spdlog/details/os.h	52;"	d
_async_log_helper	amun/3rd_party/spdlog/async_logger.h	/^    std::unique_ptr<details::async_log_helper> _async_log_helper;$/;"	m	class:spdlog::async_logger
_async_mode	amun/3rd_party/spdlog/details/registry.h	/^    bool _async_mode = false;$/;"	m	class:spdlog::details::registry_t
_async_q_size	amun/3rd_party/spdlog/details/registry.h	/^    size_t _async_q_size = 0;$/;"	m	class:spdlog::details::registry_t
_base_filename	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::daily_file_sink
_base_filename	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::rotating_file_sink
_callback_logger	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^    logger* _callback_logger;$/;"	m	class:spdlog::details::line_logger
_ch	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    char _ch;$/;"	m	class:spdlog::details::ch_formatter
_current_size	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _current_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_default_err_handler	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_default_err_handler(const std::string &msg)$/;"	f	class:spdlog::logger
_ecvt_s	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal
_ecvt_s	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal
_enabled	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^    bool _enabled;$/;"	m	class:spdlog::details::line_logger
_err_handler	amun/3rd_party/spdlog/details/async_log_helper.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::async_log_helper
_err_handler	amun/3rd_party/spdlog/details/registry.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::registry_t
_err_handler	amun/3rd_party/spdlog/logger.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::logger
_fd	amun/3rd_party/spdlog/details/file_helper.h	/^    FILE* _fd;$/;"	m	class:spdlog::details::file_helper
_file_helper	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::daily_file_sink
_file_helper	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::rotating_file_sink
_file_helper	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::simple_file_sink
_filename	amun/3rd_party/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper
_finite	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal
_finite	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal
_flush_interval_ms	amun/3rd_party/spdlog/details/async_log_helper.h	/^    const std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::async_log_helper
_flush_interval_ms	amun/3rd_party/spdlog/details/registry.h	/^    std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::registry_t
_flush_level	amun/3rd_party/spdlog/logger.h	/^    spdlog::level_t _flush_level;$/;"	m	class:spdlog::logger
_flush_requested	amun/3rd_party/spdlog/details/async_log_helper.h	/^    bool _flush_requested;$/;"	m	class:spdlog::details::async_log_helper
_force_flush	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::simple_file_sink
_force_flush	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::ostream_sink
_formatter	amun/3rd_party/spdlog/details/async_log_helper.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::async_log_helper
_formatter	amun/3rd_party/spdlog/details/registry.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::registry_t
_formatter	amun/3rd_party/spdlog/logger.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::logger
_formatters	amun/3rd_party/spdlog/formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> _formatters;$/;"	m	class:spdlog::pattern_formatter
_ident	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^    const std::string _ident;$/;"	m	class:spdlog::sinks::syslog_sink
_isnan	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal
_isnan	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal
_last_err_time	amun/3rd_party/spdlog/logger.h	/^    std::atomic<time_t> _last_err_time;$/;"	m	class:spdlog::logger
_last_update	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    log_clock::time_point _last_update;$/;"	m	class:spdlog::details::z_formatter
_level	amun/3rd_party/spdlog/details/registry.h	/^    level::level_enum _level = level::info;$/;"	m	class:spdlog::details::registry_t
_level	amun/3rd_party/spdlog/logger.h	/^    spdlog::level_t _level;$/;"	m	class:spdlog::logger
_level	amun/3rd_party/spdlog/sinks/sink.h	/^    level_t _level;$/;"	m	class:spdlog::sinks::sink
_log_msg	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^    log_msg _log_msg;$/;"	m	class:spdlog::details::line_logger
_loggers	amun/3rd_party/spdlog/details/registry.h	/^    std::unordered_map <std::string, std::shared_ptr<logger>> _loggers;$/;"	m	class:spdlog::details::registry_t
_max_files	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _max_files;$/;"	m	class:spdlog::sinks::rotating_file_sink
_max_size	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _max_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_msg	amun/3rd_party/spdlog/common.h	/^    std::string _msg;$/;"	m	class:spdlog::spdlog_ex
_mutex	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    std::mutex _mutex;$/;"	m	class:spdlog::details::z_formatter
_mutex	amun/3rd_party/spdlog/details/registry.h	/^    Mutex _mutex;$/;"	m	class:spdlog::details::registry_t
_mutex	amun/3rd_party/spdlog/sinks/base_sink.h	/^    Mutex _mutex;$/;"	m	class:spdlog::sinks::base_sink
_name	amun/3rd_party/spdlog/logger.h	/^    const std::string _name;$/;"	m	class:spdlog::logger
_next_rotation_tp	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _next_rotation_tp()$/;"	f	class:spdlog::sinks::daily_file_sink
_offset_minutes	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    int _offset_minutes;$/;"	m	class:spdlog::details::z_formatter
_ostream	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^    std::ostream& _ostream;$/;"	m	class:spdlog::sinks::ostream_sink
_overflow_policy	amun/3rd_party/spdlog/details/async_log_helper.h	/^    const async_overflow_policy _overflow_policy;$/;"	m	class:spdlog::details::async_log_helper
_overflow_policy	amun/3rd_party/spdlog/details/registry.h	/^    async_overflow_policy _overflow_policy = async_overflow_policy::block_retry;$/;"	m	class:spdlog::details::registry_t
_pattern	amun/3rd_party/spdlog/formatter.h	/^    const std::string _pattern;$/;"	m	class:spdlog::pattern_formatter
_priorities	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> _priorities;$/;"	m	class:spdlog::sinks::syslog_sink
_q	amun/3rd_party/spdlog/details/async_log_helper.h	/^    q_type _q;$/;"	m	class:spdlog::details::async_log_helper
_rotate	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    void _rotate()$/;"	f	class:spdlog::sinks::rotating_file_sink
_rotation_h	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    int _rotation_h;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_m	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    int _rotation_m;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_tp	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _rotation_tp;$/;"	m	class:spdlog::sinks::daily_file_sink
_set_formatter	amun/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::async_logger
_set_formatter	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
_set_pattern	amun/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::async_logger
_set_pattern	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
_should_flush_on	amun/3rd_party/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::_should_flush_on(const details::log_msg &msg)$/;"	f	class:spdlog::logger
_sink_it	amun/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::async_logger
_sink_it	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::logger
_sinks	amun/3rd_party/spdlog/details/async_log_helper.h	/^    std::vector<std::shared_ptr<sinks::sink>> _sinks;$/;"	m	class:spdlog::details::async_log_helper
_sinks	amun/3rd_party/spdlog/logger.h	/^    std::vector<sink_ptr> _sinks;$/;"	m	class:spdlog::logger
_sinks	amun/3rd_party/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> _sinks;$/;"	m	class:spdlog::sinks::dist_sink
_str	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    std::string _str;$/;"	m	class:spdlog::details::aggregate_formatter
_tag	amun/3rd_party/spdlog/sinks/android_sink.h	/^    std::string _tag;$/;"	m	class:spdlog::sinks::android_sink
_terminate_requested	amun/3rd_party/spdlog/details/async_log_helper.h	/^    bool _terminate_requested;$/;"	m	class:spdlog::details::async_log_helper
_thread_id	amun/3rd_party/spdlog/details/os.h	/^inline size_t _thread_id()$/;"	f	namespace:spdlog::details::os
_worker_teardown_cb	amun/3rd_party/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_teardown_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_teardown_cb	amun/3rd_party/spdlog/details/registry.h	/^    std::function<void()> _worker_teardown_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
_worker_thread	amun/3rd_party/spdlog/details/async_log_helper.h	/^    std::thread _worker_thread;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	amun/3rd_party/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	amun/3rd_party/spdlog/details/registry.h	/^    std::function<void()> _worker_warmup_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
a_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32FmaddExpr
a_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32FmsubExpr
a_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64FmaddExpr
a_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64FmsubExpr
a_	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32MultExpr
a_	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   const T1 a_;  \/\/!< The left-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64MultExpr
a_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class a_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
abs	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Abs,SO> abs( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Abs,SO>& abs( const DMatForEachExpr<MT,Abs,SO>& dm )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Abs,TF> abs( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Abs,TF>& abs( const DVecForEachExpr<VT,Abs,TF>& dv )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Abs,SO> abs( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Abs,SO>& abs( const SMatForEachExpr<MT,Abs,SO>& sm )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Abs,TF> abs( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Abs,TF>& abs( const SVecForEachExpr<VT,Abs,TF>& sv )$/;"	f	namespace:blaze
abs	amun/3rd_party/blaze/math/functors/Abs.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( abs( a ) )$/;"	f	struct:blaze::Abs
abs	amun/3rd_party/blaze/math/functors/Abs.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( abs( a ) )$/;"	f	struct:blaze::Abs
abs	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( abs( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
accessLock_	amun/common/god.h	/^    mutable boost::shared_mutex accessLock_;$/;"	m	class:amunmt::God
accuracy	amun/3rd_party/blaze/math/Accuracy.h	/^const Accuracy accuracy;$/;"	m	namespace:blaze
accuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline double accuracy() { return 1E-8; }$/;"	f	struct:blaze::Limits
accuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline float accuracy() { return 1E-6F; }$/;"	f	struct:blaze::Limits
accuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline long double accuracy() { return 1E-10L; }$/;"	f	struct:blaze::Limits
acos	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Acos,SO> acos( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
acos	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Acos,TF> acos( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
acos	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Acos,SO> acos( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
acos	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Acos,TF> acos( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
acos	amun/3rd_party/blaze/math/functors/Acos.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( acos( a ) )$/;"	f	struct:blaze::Acos
acos	amun/3rd_party/blaze/math/functors/Acos.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( acos( a ) )$/;"	f	struct:blaze::Acos
acos	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( acos( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
acosh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Acosh,SO> acosh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
acosh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Acosh,TF> acosh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
acosh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Acosh,SO> acosh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
acosh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Acosh,TF> acosh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
acosh	amun/3rd_party/blaze/math/functors/Acosh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( acosh( a ) )$/;"	f	struct:blaze::Acosh
acosh	amun/3rd_party/blaze/math/functors/Acosh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( acosh( a ) )$/;"	f	struct:blaze::Acosh
acosh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( acosh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
active	amun/3rd_party/blaze/util/ThreadPool.h	/^inline size_t ThreadPool<TT,MT,LT,CT>::active() const$/;"	f	class:blaze::ThreadPool
active_	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^   static bool active_;  \/\/!< Activity flag for the parallel section.$/;"	m	class:blaze::ParallelSection
active_	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^bool ParallelSection<T>::active_ = false;$/;"	m	class:blaze::ParallelSection
active_	amun/3rd_party/blaze/math/smp/SerialSection.h	/^   static bool active_;  \/\/!< Activity flag for the serial section.$/;"	m	class:blaze::SerialSection
active_	amun/3rd_party/blaze/math/smp/SerialSection.h	/^bool SerialSection<T>::active_ = false;$/;"	m	class:blaze::SerialSection
active_	amun/3rd_party/blaze/util/ThreadPool.h	/^   volatile size_t active_;    \/\/!< Number of currently active\/busy threads.$/;"	m	class:blaze::ThreadPool
active_	amun/common/history.h	/^    bool active_;$/;"	m	class:amunmt::History
addAssign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::addAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
addAssign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::addAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
addAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      addAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      addAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void addAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   friend inline void addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatInvExpr& rhs )$/;"	f	class:blaze::DMatInvExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      addAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void addAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      addAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      addAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const DenseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const DenseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const DenseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const SparseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void addAssign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void addAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void addAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const DVecSVecMultExpr& rhs )$/;"	f	class:blaze::DVecSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void addAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void addAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      addAssign( DenseMatrix<MT,false>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,true>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      addAssign( DenseMatrix<MT,false>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,true>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
addAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void addAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
addAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void addAssign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
addAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void addAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      addAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void addAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      addAssign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void addAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      addAssign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      addAssign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      addAssign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const SVecDVecDivExpr& rhs )$/;"	f	class:blaze::SVecDVecDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      addAssign( DenseVector<VT,TF>& lhs, const SVecDVecMultExpr& rhs )$/;"	f	class:blaze::SVecDVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void addAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void addAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   friend inline void addAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void addAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void addAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      addAssign( DenseMatrix<MT,true>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,false>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,false>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,true>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      addAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
addAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void addAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      addAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      addAssign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      addAssign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      addAssign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      addAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      addAssign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   friend inline void addAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      addAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   friend inline void addAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
addAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void addAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
addAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::addAssign( const DenseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
addAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::addAssign( const SparseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
addAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::addAssign( const DenseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
addAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::addAssign( const SparseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
addAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::addAssign( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
addAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::addAssign( const SparseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
addAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::addAssign( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
addAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::addAssign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
addAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::addAssign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
addAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::addAssign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
addAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::addAssign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
addAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::addAssign( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
addAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::addAssign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
addAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::addAssign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
addAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::addAssign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
addAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::addAssign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
addAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::addAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
addAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::addAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
addAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::addAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
addAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::addAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
addAssign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::addAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
addAssign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::addAssign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
addAssign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^   addAssign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,!SO>& rhs )$/;"	f	namespace:blaze
addAssign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void addAssign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,SO>& rhs )$/;"	f	namespace:blaze
add_ch	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::aggregate_formatter
add_dependency	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void add_dependency(node& rhs) {$/;"	f	class:YAML::detail::node
add_sink	amun/3rd_party/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
advance	amun/3rd_party/utf8/checked.h	/^    void advance (octet_iterator& it, distance_type n, octet_iterator end)$/;"	f	namespace:utf8
advance	amun/3rd_party/utf8/unchecked.h	/^        void advance (octet_iterator& it, distance_type n)$/;"	f	namespace:utf8::unchecked
aggregate_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    aggregate_formatter()$/;"	f	class:spdlog::details::aggregate_formatter
aggregate_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class aggregate_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
align	amun/3rd_party/spdlog/details/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec
align	amun/3rd_party/spdlog/details/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec
align	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec
align	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec
align_	amun/3rd_party/spdlog/details/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec
align_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec
aligned	amun/3rd_party/blaze/math/AlignmentFlag.h	/^const bool aligned = true;$/;"	m	namespace:blaze
alignment_	amun/fpga/decoder.h	/^  Alignment<Weights::DecAlignment> alignment_;$/;"	m	class:amunmt::FPGA::Decoder
alignment_	amun/gpu/dl4mt/decoder.h	/^    Alignment<Weights::DecAlignment> alignment_;$/;"	m	class:amunmt::GPU::Decoder
alignments_	amun/common/hypothesis.h	/^    std::vector<SoftAlignmentPtr> alignments_;$/;"	m	class:amunmt::Hypothesis
allocate	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   AlignedAllocator<Type>::allocate( size_t numObjects, const void* localityHint )$/;"	f	class:blaze::AlignedAllocator
allocate	amun/3rd_party/blaze/util/Memory.h	/^DisableIf_< IsBuiltin<T>, T* > allocate( size_t size )$/;"	f	namespace:blaze
allocate	amun/3rd_party/blaze/util/Memory.h	/^EnableIf_< IsBuiltin<T>, T* > allocate( size_t size )$/;"	f	namespace:blaze
allocate_backend	amun/3rd_party/blaze/util/Memory.h	/^inline byte_t* allocate_backend( size_t size, size_t alignment )$/;"	f	namespace:blaze
alpha	amun/3rd_party/fast_align/src/fast_align.cc	/^double alpha = 0.01;$/;"	v
ampm	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const char* ampm(const tm& t)$/;"	f	namespace:spdlog::details
amunmt	amun/common/base_best_hyps.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/base_best_hyps.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/base_tensor.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/base_tensor.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/beam.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/beam.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/config.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/config.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/exception.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/exception.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/factor_vocab.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/factor_vocab.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/file_stream.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/filter.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/filter.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/god.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/god.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/histories.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/histories.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/history.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/history.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/hypothesis.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/hypothesis.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/loader.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/loader.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/loader_factory.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/loader_factory.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/logging.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/logging.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/output_collector.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/output_collector.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/printer.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/printer.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/processor/bpe.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/processor/bpe.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/processor/processor.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/scorer.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/scorer.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/search.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/search.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/sentence.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/sentence.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/sentences.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/sentences.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/threadpool.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/translation_task.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/translation_task.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/types.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/types.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/utils.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/utils.h	/^namespace amunmt {$/;"	n
amunmt	amun/common/vocab.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/common/vocab.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/decoder/best_hyps.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/decoder/best_hyps.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/decoder/encoder_decoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/decoder/encoder_decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/decoder/encoder_decoder_loader.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/decoder/encoder_decoder_loader.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/decoder/encoder_decoder_state.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/decoder/encoder_decoder_state.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/dl4mt.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/encoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/dl4mt/encoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/encoder_decoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/dl4mt/encoder_decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/gru.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/dl4mt/gru.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/model.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/dl4mt/model.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/dl4mt/transition.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/mblas/phoenix_functions.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/mblas/phoenix_functions.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/mblas/tensor.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/mblas/tensor.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/encoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/nematus/encoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/encoder_decoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/nematus/encoder_decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/gru.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/nematus/gru.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/model.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/nematus/model.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/nematus/transition.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/cpu/nematus/transition.h	/^namespace amunmt {$/;"	n
amunmt	amun/cpu/npz_converter.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/array.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/best_hyps.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/best_hyps.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/decoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/encoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/encoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/encoder_decoder.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/encoder_decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/encoder_decoder_loader.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/encoder_decoder_loader.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/encoder_decoder_state.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/encoder_decoder_state.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/gru.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/hello_world.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/hello_world.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/kernel.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/kernel.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/matrix.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/matrix.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/matrix_functions.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/matrix_functions.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/model.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/model.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/npz_converter.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/npz_converter.h	/^namespace amunmt {$/;"	n
amunmt	amun/fpga/nth_element.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/fpga/nth_element.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/decoder/best_hyps.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/decoder/class_language_model.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/decoder/encoder_decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/decoder/encoder_decoder_loader.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/decoder/encoder_decoder_state.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/cell.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/cellstate.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/decoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/encoder.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/gru.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/lstm.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/model.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/dl4mt/multiplicative.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/handles.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/nth_element.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/nth_element_kernels.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/tensor.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/tensor_functions.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/tensor_wrapper.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/vector.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/mblas/vector_wrapper.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/npz_converter.h	/^namespace amunmt {$/;"	n
amunmt	amun/gpu/types-gpu.h	/^namespace amunmt {$/;"	n
amunmt	amun/plugin/hypo_info.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/plugin/hypo_info.h	/^namespace amunmt {$/;"	n
amunmt	amun/plugin/neural_phrase.cpp	/^namespace amunmt {$/;"	n	file:
amunmt	amun/plugin/neural_phrase.h	/^namespace amunmt {$/;"	n
amunmt	amun/plugin/nmt.h	/^namespace amunmt {$/;"	n
amunmt_UTIL_THROW2	amun/common/exception.h	97;"	d
amunmt_UTIL_THROW_IF2	amun/common/exception.h	121;"	d
anchor_t	amun/3rd_party/yaml-cpp/anchor.h	/^typedef std::size_t anchor_t;$/;"	t	namespace:YAML
android_logger	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::android_logger(const std::string& logger_name, const std::string& tag)$/;"	f	class:spdlog
android_sink	amun/3rd_party/spdlog/sinks/android_sink.h	/^    explicit android_sink(const std::string& tag = "spdlog"): _tag(tag) {}$/;"	f	class:spdlog::sinks::android_sink
android_sink	amun/3rd_party/spdlog/sinks/android_sink.h	/^class android_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::ansicolor_sink(sink_ptr wrapped_sink) : sink_(wrapped_sink)$/;"	f	class:spdlog::sinks::ansicolor_sink
append	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::DiagonalMatrix
append	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::HermitianMatrix
append	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::LowerMatrix
append	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::StrictlyLowerMatrix
append	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::StrictlyUpperMatrix
append	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::SymmetricMatrix
append	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::SymmetricMatrix
append	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::UniLowerMatrix
append	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::UniUpperMatrix
append	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::UpperMatrix
append	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void append( size_t i, size_t j, const ElementType& value, bool check=false ) {$/;"	f	class:blaze::SMatTransposer
append	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   void append( size_t i, size_t j, const ElementType& value, bool check=false ) {$/;"	f	class:blaze::SMatTransposer
append	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline void append( size_t index, const ElementType& value, bool check=false ) {$/;"	f	class:blaze::SVecTransposer
append	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::append( size_t i, size_t j, const ElementType& value, bool check ) const$/;"	f	class:blaze::SparseMatrixProxy
append	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::append( size_t index, const ElementType& value, bool check ) const$/;"	f	class:blaze::SparseVectorProxy
append	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::append( size_t i, size_t j, const Type& value, bool check )$/;"	f	class:blaze::CompressedMatrix
append	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::append( size_t i, size_t j, const Type& value, bool check )$/;"	f	class:blaze::CompressedMatrix
append	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::append( size_t index, const Type& value, bool check )$/;"	f	class:blaze::CompressedVector
append	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Column
append	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Column
append	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Column
append	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Row
append	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Row
append	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Row
append	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::Submatrix
append	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::append( size_t i, size_t j, const ElementType& value, bool check )$/;"	f	class:blaze::Submatrix
append	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::append( size_t index, const ElementType& value, bool check )$/;"	f	class:blaze::Subvector
append	amun/3rd_party/spdlog/details/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer
append	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer
append	amun/3rd_party/utf8/checked.h	/^    octet_iterator append(uint32_t cp, octet_iterator result)$/;"	f	namespace:utf8
append	amun/3rd_party/utf8/unchecked.h	/^        octet_iterator append(uint32_t cp, octet_iterator result)$/;"	f	namespace:utf8::unchecked
append_float_length	amun/3rd_party/spdlog/details/format.h	/^    void append_float_length(Char *&, T)$/;"	f	class:BasicWriter
append_float_length	amun/3rd_party/spdlog/details/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
append_float_length	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&, T)$/;"	f	class:BasicWriter
append_float_length	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
apply_all	amun/3rd_party/spdlog/details/registry.h	/^    void apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog::details::registry_t
apply_all	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog
approx_size	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    size_t approx_size()$/;"	f	class:spdlog::details::mpmc_bounded_queue
arg	amun/3rd_party/spdlog/details/format.h	/^inline internal::NamedArg<char> arg(StringRef name, const T &arg)$/;"	f
arg	amun/3rd_party/spdlog/details/format.h	/^inline internal::NamedArg<wchar_t> arg(WStringRef name, const T &arg)$/;"	f
arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline internal::NamedArgWithType<char, T> arg(StringRef name, const T &arg)$/;"	f
arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline internal::NamedArgWithType<wchar_t, T> arg(WStringRef name, const T &arg)$/;"	f
arg_	amun/3rd_party/spdlog/details/format.cc	/^			fmt::internal::Arg &arg_;$/;"	m	class:fmt::__anon30::ArgConverter	file:
arg_	amun/3rd_party/spdlog/details/format.cc	/^			fmt::internal::Arg &arg_;$/;"	m	class:fmt::__anon30::CharConverter	file:
arg_	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::ArgConverter
arg_	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::CharConverter
args	amun/3rd_party/spdlog/details/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase
args	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase
args_	amun/3rd_party/spdlog/details/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon26
args_	amun/3rd_party/spdlog/details/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase
args_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon60
args_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase
argument_index	amun/3rd_party/thrust_bind/bind.hpp	/^struct argument_index$/;"	s	namespace:thrust::experimental::detail::bind_detail
argument_index	amun/3rd_party/thrust_bind/bind.hpp	/^struct argument_index<$/;"	s	namespace:thrust::experimental::detail::bind_detail
arithmetico_geometric_series	amun/3rd_party/fast_align/src/da.h	/^  inline static double arithmetico_geometric_series(const double a_1, const double g_1, const double r, const double d, const unsigned n) {$/;"	f	struct:DiagonalAlignment
arrSize_	amun/fpga/array.h	/^  uint arrSize_;$/;"	m	class:amunmt::FPGA::Array
arr_	amun/fpga/matrix.cpp	/^,arr_(openCLInfo)$/;"	f	namespace:amunmt::FPGA::mblas
arr_	amun/fpga/matrix.cpp	/^,arr_(openCLInfo, rows * cols)$/;"	f	namespace:amunmt::FPGA::mblas
arr_	amun/fpga/matrix.cpp	/^,arr_(openCLInfo, rows * cols, val)$/;"	f	namespace:amunmt::FPGA::mblas
arr_	amun/fpga/matrix.cpp	/^,arr_(other.arr_)$/;"	f	namespace:amunmt::FPGA::mblas
arr_	amun/fpga/matrix.h	/^  Array<float> arr_;$/;"	m	class:amunmt::FPGA::mblas::Matrix
array	amun/3rd_party/blaze/util/DimensionOf.h	/^   byte_t array[N];$/;"	m	struct:blaze::Array
as	amun/3rd_party/yaml-cpp/node/impl.h	/^inline T Node::as() const {$/;"	f	class:YAML::Node
as	amun/3rd_party/yaml-cpp/node/impl.h	/^inline T Node::as(const S& fallback) const {$/;"	f	class:YAML::Node
as_if	amun/3rd_party/yaml-cpp/node/impl.h	/^  explicit as_if(const Node& node_) : node(node_) {}$/;"	f	struct:YAML::as_if
as_if	amun/3rd_party/yaml-cpp/node/impl.h	/^struct as_if {$/;"	s	namespace:YAML
as_if	amun/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<T, void> {$/;"	s	namespace:YAML
as_if	amun/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<std::string, S> {$/;"	s	namespace:YAML
as_if	amun/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<std::string, void> {$/;"	s	namespace:YAML
asin	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Asin,SO> asin( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
asin	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Asin,TF> asin( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
asin	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Asin,SO> asin( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
asin	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Asin,TF> asin( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
asin	amun/3rd_party/blaze/math/functors/Asin.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( asin( a ) )$/;"	f	struct:blaze::Asin
asin	amun/3rd_party/blaze/math/functors/Asin.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( asin( a ) )$/;"	f	struct:blaze::Asin
asin	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( asin( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
asinh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Asinh,SO> asinh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
asinh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Asinh,TF> asinh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
asinh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Asinh,SO> asinh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
asinh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Asinh,TF> asinh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
asinh	amun/3rd_party/blaze/math/functors/Asinh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( asinh( a ) )$/;"	f	struct:blaze::Asinh
asinh	amun/3rd_party/blaze/math/functors/Asinh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( asinh( a ) )$/;"	f	struct:blaze::Asinh
asinh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( asinh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::assign( DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::assign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::assign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^void SymmetricMatrix<MT,SO,false,false>::assign( DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^void SymmetricMatrix<MT,SO,false,false>::assign( SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^void SymmetricMatrix<MT,SO,false,false>::assign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^void SymmetricMatrix<MT,SO,false,false>::assign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
assign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      assign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      assign( SparseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      assign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      assign( SparseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void assign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void assign( SparseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void assign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
assign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void assign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
assign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   friend inline void assign( DenseMatrix<MT2,SO2>& lhs, const DMatInvExpr& rhs )$/;"	f	class:blaze::DMatInvExpr
assign	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   friend inline void assign( SparseMatrix<MT2,SO2>& lhs, const DMatInvExpr& rhs )$/;"	f	class:blaze::DMatInvExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      assign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      assign( SparseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void assign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
assign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void assign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      assign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      assign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const DenseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const DenseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const DenseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
assign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void assign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
assign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void assign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
assign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
assign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const DVecSVecMultExpr& rhs )$/;"	f	class:blaze::DVecSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const DVecSVecMultExpr& rhs )$/;"	f	class:blaze::DVecSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void assign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
assign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void assign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
assign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      assign( DenseMatrix<MT,false>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,true>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      assign( DenseMatrix<MT,false>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,true>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,true>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
assign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
assign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void assign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
assign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void assign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
assign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void assign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      assign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      assign( SparseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void assign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
assign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void assign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
assign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      assign( SparseMatrix<MT2,false>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      assign( SparseMatrix<MT2,true>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,false>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      assign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,false>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,false>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   friend inline void assign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   friend inline void assign( SparseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void assign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
assign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void assign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      assign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      assign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      assign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      assign( SparseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
assign	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::SMatTransposer
assign	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void assign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::SMatTransposer
assign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const SVecDVecDivExpr& rhs )$/;"	f	class:blaze::SVecDVecDivExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const SVecDVecDivExpr& rhs )$/;"	f	class:blaze::SVecDVecDivExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const SVecDVecMultExpr& rhs )$/;"	f	class:blaze::SVecDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      assign( SparseVector<VT,TF>& lhs, const SVecDVecMultExpr& rhs )$/;"	f	class:blaze::SVecDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void assign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
assign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void assign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
assign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void assign( DenseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^      assign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   friend inline void assign( SparseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
assign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
assign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void assign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
assign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void assign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      assign( DenseMatrix<MT,true>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,false>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,false>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,false>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,true>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,false>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,true>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      assign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      assign( SparseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
assign	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline void assign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::SVecTransposer
assign	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline void assign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::SVecTransposer
assign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void assign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void assign( SparseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void assign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void assign( SparseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void assign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void assign( SparseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void assign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void assign( SparseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      assign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      assign( SparseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void assign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void assign( SparseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      assign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      assign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^      assign( SparseMatrix<MT,true>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   friend inline void assign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   friend inline void assign( SparseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      assign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      assign( SparseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   friend inline void assign( SparseMatrix<MT,true>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      assign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      assign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   friend inline void assign( SparseMatrix<MT,true>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^      assign( SparseMatrix<MT,false>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   friend inline void assign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   friend inline void assign( SparseMatrix<MT,true>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   friend inline void assign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   friend inline void assign( SparseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      assign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      assign( SparseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   friend inline void assign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   friend inline void assign( SparseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
assign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void assign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::assign( const DenseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::assign( const SparseMatrix<MT,!SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::assign( const SparseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::assign( const DenseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::assign( const SparseMatrix<MT,false>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::assign( const SparseMatrix<MT,true>& rhs )$/;"	f	class:blaze::CompressedMatrix
assign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::assign( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
assign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::assign( const SparseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::assign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::assign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::assign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::assign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::assign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::assign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::assign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::assign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::assign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::assign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::assign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::assign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::assign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::assign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::assign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::assign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::assign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::assign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::Submatrix
assign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::assign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
assign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::assign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
assign	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::assign( IteratorType first, IteratorType last )$/;"	f	class:blaze::PtrVector
assign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^   assign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,!SO>& rhs )$/;"	f	namespace:blaze
assign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void assign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,SO>& rhs )$/;"	f	namespace:blaze
async_log_helper	amun/3rd_party/spdlog/details/async_log_helper.h	/^class async_log_helper$/;"	c	namespace:spdlog::details
async_log_helper	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::async_log_helper($/;"	f	class:spdlog::details::async_log_helper
async_logger	amun/3rd_party/spdlog/async_logger.h	/^class async_logger :public logger$/;"	c	namespace:spdlog
async_logger	amun/3rd_party/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string& logger_name,$/;"	f	class:spdlog::async_logger
async_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg(async_msg_type m_type) :msg_type(m_type)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg(const details::log_msg& m) :$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^    struct async_msg$/;"	s	class:spdlog::details::async_log_helper
async_msg_type	amun/3rd_party/spdlog/details/async_log_helper.h	/^    enum class async_msg_type$/;"	c	class:spdlog::details::async_log_helper
async_overflow_policy	amun/3rd_party/spdlog/common.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
at	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
at	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
at	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
at	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
at	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
at	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
at	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
at	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
at	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
at	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
at	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
at	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::at( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::at( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::at( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::at( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
at	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
at	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::at( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
at	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::at( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
at	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatDMatAddExpr
at	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatDMatSubExpr
at	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatEvalExpr
at	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatForEachExpr
at	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DMatSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatScalarDivExpr
at	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatScalarMultExpr
at	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSerialExpr
at	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTDMatAddExpr
at	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTDMatSubExpr
at	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	namespace:blaze
at	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTransExpr
at	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstReference at( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTransposer
at	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Reference at( size_t i, size_t j ) {$/;"	f	class:blaze::DMatTransposer
at	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecDVecAddExpr
at	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecDVecCrossExpr
at	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecDVecDivExpr
at	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecDVecMultExpr
at	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecDVecSubExpr
at	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecEvalExpr
at	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecForEachExpr
at	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecSVecAddExpr
at	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecSVecCrossExpr
at	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecSVecSubExpr
at	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecScalarDivExpr
at	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecScalarMultExpr
at	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecSerialExpr
at	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::DVecTransExpr
at	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstReference at( size_t index ) const {$/;"	f	class:blaze::DVecTransposer
at	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline Reference at( size_t index ) {$/;"	f	class:blaze::DVecTransposer
at	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatDMatSubExpr
at	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SMatDVecMultExpr
at	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatEvalExpr
at	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatForEachExpr
at	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	namespace:blaze
at	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SMatSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarDivExpr
at	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarMultExpr
at	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSerialExpr
at	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	namespace:blaze
at	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTDMatSubExpr
at	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatMultExpr
at	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransExpr
at	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstReference at( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransposer
at	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecDVecCrossExpr
at	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecDVecDivExpr
at	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecDVecMultExpr
at	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecDVecSubExpr
at	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecEvalExpr
at	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecForEachExpr
at	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecSVecAddExpr
at	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecSVecCrossExpr
at	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecSVecSubExpr
at	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecScalarDivExpr
at	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecScalarMultExpr
at	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecSerialExpr
at	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::SVecTSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::SVecTransExpr
at	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstReference at( size_t index ) const {$/;"	f	class:blaze::SVecTransposer
at	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TDMatSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TDMatSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TDVecSMatMultExpr
at	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TDVecTSMatMultExpr
at	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatDMatSubExpr
at	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TSMatDVecMultExpr
at	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	namespace:blaze
at	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TSMatSVecMultExpr
at	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f
at	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatTSMatAddExpr
at	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	namespace:blaze
at	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   inline ReturnType at( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatTSMatSubExpr
at	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TSVecSMatMultExpr
at	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TSVecTDMatMultExpr
at	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   inline ReturnType at( size_t index ) const {$/;"	f	class:blaze::TSVecTSMatMultExpr
at	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::at( size_t i, size_t j ) const$/;"	f	class:blaze::DenseMatrixProxy
at	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   DenseVectorProxy<PT,VT>::at( size_t index ) const$/;"	f	class:blaze::DenseVectorProxy
at	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::at( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
at	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::at( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
at	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::at( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
at	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::at( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
at	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::at( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
at	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::at( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
at	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::at( size_t index ) const$/;"	f	class:blaze::CompressedVector
at	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::at( size_t index )$/;"	f	class:blaze::CompressedVector
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::at( size_t index ) const$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::at( size_t index )$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::at( size_t index ) const$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::at( size_t index )$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::at( size_t index ) const$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::at( size_t index )$/;"	f	class:blaze::Column
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::at( size_t index ) const$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::at( size_t index )$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::at( size_t index ) const$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::at( size_t index )$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstReference Row<MT,true,false,SF>::at( size_t index ) const$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Reference Row<MT,true,false,SF>::at( size_t index )$/;"	f	class:blaze::Row
at	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
at	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::at( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
at	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::at( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
at	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::at( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
at	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::at( size_t index ) const$/;"	f	class:blaze::Subvector
at	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::at( size_t index )$/;"	f	class:blaze::Subvector
at	amun/3rd_party/blaze/util/AlignedArray.h	/^   AlignedArray<Type,N,Alignment>::at( size_t index ) const$/;"	f	class:blaze::AlignedArray
at	amun/3rd_party/blaze/util/AlignedArray.h	/^   AlignedArray<Type,N,Alignment>::at( size_t index )$/;"	f	class:blaze::AlignedArray
at	amun/common/histories.h	/^    std::shared_ptr<History> at(unsigned id) const {$/;"	f	class:amunmt::Histories
at	amun/common/sentences.cpp	/^SentencePtr Sentences::at(unsigned id) const$/;"	f	class:amunmt::Sentences
atan	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Atan,SO> atan( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
atan	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Atan,TF> atan( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
atan	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Atan,SO> atan( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
atan	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Atan,TF> atan( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
atan	amun/3rd_party/blaze/math/functors/Atan.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( atan( a ) )$/;"	f	struct:blaze::Atan
atan	amun/3rd_party/blaze/math/functors/Atan.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( atan( a ) )$/;"	f	struct:blaze::Atan
atan	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( atan( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
atanh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Atanh,SO> atanh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
atanh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Atanh,TF> atanh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
atanh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Atanh,SO> atanh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
atanh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Atanh,TF> atanh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
atanh	amun/3rd_party/blaze/math/functors/Atanh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( atanh( a ) )$/;"	f	struct:blaze::Atanh
atanh	amun/3rd_party/blaze/math/functors/Atanh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( atanh( a ) )$/;"	f	struct:blaze::Atanh
atanh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( atanh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
attention_	amun/cpu/dl4mt/decoder.h	/^    Attention<Weights::DecAttention> attention_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
attention_	amun/cpu/nematus/decoder.h	/^    Attention<Weights::DecAttention> attention_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
average	amun/3rd_party/blaze/util/timing/Timer.h	/^inline double Timer<TP>::average() const$/;"	f	class:blaze::timing::Timer
b0_	amun/3rd_party/fast_align/src/corpus.h	/^  std::string b0_;$/;"	m	class:Dict
b4_	amun/gpu/dl4mt/decoder.h	/^    std::shared_ptr<mblas::Tensor> b4_;$/;"	m	class:amunmt::GPU::Decoder
b_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32FmaddExpr
b_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32FmsubExpr
b_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64FmaddExpr
b_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64FmsubExpr
b_	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf32MultExpr
b_	amun/3rd_party/blaze/math/simd/Multiplication.h	/^   const T2 b_;  \/\/!< The right-hand side operand for the multiplication.$/;"	m	struct:blaze::SIMDf64MultExpr
b_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class b_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
back	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ConstReferenceType PtrVector<T,D,G>::back() const$/;"	f	class:blaze::PtrVector
back	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ReferenceType PtrVector<T,D,G>::back()$/;"	f	class:blaze::PtrVector
back	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  T& back() {$/;"	f	class:YAML::ptr_vector
back	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  const T& back() const {$/;"	f	class:YAML::ptr_vector
backwardRnn_	amun/cpu/dl4mt/encoder.h	/^    RNN<Weights::GRU> backwardRnn_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder
backwardRnn_	amun/cpu/nematus/encoder.h	/^    EncoderRNN<Weights::GRU, Weights::Transition> backwardRnn_;$/;"	m	class:amunmt::CPU::Nematus::Encoder
backwardRnn_	amun/fpga/encoder.h	/^  RNN<Weights::EncBackwardGRU> backwardRnn_;$/;"	m	class:amunmt::FPGA::Encoder
backwardRnn_	amun/gpu/dl4mt/encoder.h	/^    RNN backwardRnn_;$/;"	m	class:amunmt::GPU::Encoder
bad	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline bool Archive<Stream>::bad() const$/;"	f	class:blaze::Archive
base	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
base	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
base	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
base	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
base	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
base	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
base	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
base	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
base	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline IteratorType base() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
base	amun/3rd_party/blaze/util/PtrIterator.h	/^inline const typename PtrIterator<Type>::IteratorType& PtrIterator<Type>::base() const$/;"	f	class:blaze::PtrIterator
base	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::base() const$/;"	f	class:blaze::PtrVector::CastIterator
base	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::base() const$/;"	f	class:blaze::PtrVector::ConstCastIterator
base	amun/3rd_party/utf8/checked.h	/^      octet_iterator base () const { return it; }$/;"	f	class:utf8::iterator
base	amun/3rd_party/utf8/unchecked.h	/^            octet_iterator base () const { return it; }$/;"	f	class:utf8::unchecked::iterator
base_sink	amun/3rd_party/spdlog/sinks/base_sink.h	/^    base_sink():_mutex() {}$/;"	f	class:spdlog::sinks::base_sink
base_sink	amun/3rd_party/spdlog/sinks/base_sink.h	/^class base_sink:public sink$/;"	c	namespace:spdlog::sinks
base_type	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  typedef node_iterator base_type;$/;"	t	class:YAML::detail::iterator_base
basic_logger_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_mt(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
basic_logger_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_st(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
batchMapping_	amun/fpga/encoder_decoder.h	/^  Array<int> batchMapping_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
beam_threshold	amun/3rd_party/fast_align/src/fast_align.cc	/^double beam_threshold = -4.0;$/;"	v
begin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
begin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::DiagonalMatrix
begin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
begin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::DiagonalMatrix
begin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
begin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::HermitianMatrix
begin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
begin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::HermitianMatrix
begin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::LowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::LowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::LowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::LowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::begin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::begin( size_t i )$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::begin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::begin( size_t i )$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::begin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::begin( size_t i )$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::begin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::begin( size_t i )$/;"	f	class:blaze::SymmetricMatrix
begin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::UniLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::UniLowerMatrix
begin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::UniUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::UniUpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::begin( size_t i ) const$/;"	f	class:blaze::UpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::begin( size_t i )$/;"	f	class:blaze::UpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::begin( size_t i ) const$/;"	f	class:blaze::UpperMatrix
begin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::begin( size_t i )$/;"	f	class:blaze::UpperMatrix
begin	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatDMatAddExpr
begin	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatDMatSubExpr
begin	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatForEachExpr
begin	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatScalarDivExpr
begin	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatScalarMultExpr
begin	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatTransExpr
begin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::DMatTransposer
begin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator begin( size_t j ) const {$/;"	f	class:blaze::DMatTransposer
begin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Iterator begin( size_t i ) {$/;"	f	class:blaze::DMatTransposer
begin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Iterator begin( size_t j ) {$/;"	f	class:blaze::DMatTransposer
begin	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecDVecAddExpr
begin	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecDVecDivExpr
begin	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecDVecMultExpr
begin	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecDVecSubExpr
begin	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecForEachExpr
begin	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecSVecMultExpr
begin	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecScalarDivExpr
begin	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecScalarMultExpr
begin	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f
begin	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f
begin	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecTransExpr
begin	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::DVecTransposer
begin	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline Iterator begin() {$/;"	f	class:blaze::DVecTransposer
begin	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::ConstIterator begin( const Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::Iterator begin( Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::SMatForEachExpr
begin	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::SMatScalarDivExpr
begin	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::SMatScalarMultExpr
begin	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::SMatTransExpr
begin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f	class:blaze::SMatTransposer
begin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator begin( size_t j ) const {$/;"	f	class:blaze::SMatTransposer
begin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline Iterator begin( size_t i ) {$/;"	f	class:blaze::SMatTransposer
begin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline Iterator begin( size_t j ) {$/;"	f	class:blaze::SMatTransposer
begin	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecDVecDivExpr
begin	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecDVecMultExpr
begin	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecForEachExpr
begin	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecScalarDivExpr
begin	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecScalarMultExpr
begin	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ConstIterator begin( size_t i ) const {$/;"	f
begin	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecTransExpr
begin	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstIterator begin() const {$/;"	f	class:blaze::SVecTransposer
begin	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline Iterator begin() {$/;"	f	class:blaze::SVecTransposer
begin	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::ConstIterator begin( const Vector<VT,TF>& vector )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::Iterator begin( Vector<VT,TF>& vector )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::begin( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
begin	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   begin( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   begin( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline typename DenseVectorProxy<PT,VT>::Iterator DenseVectorProxy<PT,VT>::begin() const$/;"	f	class:blaze::DenseVectorProxy
begin	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::begin( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
begin	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   begin( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   begin( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
begin	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline typename SparseVectorProxy<PT,VT>::Iterator SparseVectorProxy<PT,VT>::begin() const$/;"	f	class:blaze::SparseVectorProxy
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::begin() const$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::begin() const$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,false,false,false>::Iterator Column<MT,false,false,false>::begin()$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,false,false,true>::Iterator Column<MT,false,false,true>::begin()$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::ConstIterator Column<MT,true,false,SF>::begin() const$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::begin()$/;"	f	class:blaze::Column
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::ConstIterator Row<MT,false,false,false>::begin() const$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::Iterator Row<MT,false,false,false>::begin()$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::ConstIterator Row<MT,false,false,true>::begin() const$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::Iterator Row<MT,false,false,true>::begin()$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::begin() const$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::begin()$/;"	f	class:blaze::Row
begin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::begin( size_t i ) const$/;"	f	class:blaze::Submatrix
begin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::begin( size_t i )$/;"	f	class:blaze::Submatrix
begin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::begin( size_t j ) const$/;"	f	class:blaze::Submatrix
begin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::begin( size_t j )$/;"	f	class:blaze::Submatrix
begin	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::ConstIterator Subvector<VT,AF,TF,false>::begin() const$/;"	f	class:blaze::Subvector
begin	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::Iterator Subvector<VT,AF,TF,false>::begin()$/;"	f	class:blaze::Subvector
begin	amun/3rd_party/blaze/util/Indices.h	/^inline Indices::ConstIterator Indices::begin() const$/;"	f	class:blaze::Indices
begin	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::BLAZE_TEMPLATE CastIterator<C> PtrVector<T,D,G>::begin()$/;"	f	class:blaze::PtrVector
begin	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::BLAZE_TEMPLATE ConstCastIterator<C> PtrVector<T,D,G>::begin() const$/;"	f	class:blaze::PtrVector
begin	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ConstIterator PtrVector<T,D,G>::begin() const$/;"	f	class:blaze::PtrVector
begin	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::Iterator PtrVector<T,D,G>::begin()$/;"	f	class:blaze::PtrVector
begin	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const_node_iterator begin() const {$/;"	f	class:YAML::detail::node
begin	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node_iterator begin() { return m_pRef->begin(); }$/;"	f	class:YAML::detail::node
begin	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const_node_iterator begin() const {$/;"	f	class:YAML::detail::node_ref
begin	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_iterator begin() { return m_pData->begin(); }$/;"	f	class:YAML::detail::node_ref
begin	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const_iterator Node::begin() const {$/;"	f	class:YAML::Node
begin	amun/3rd_party/yaml-cpp/node/impl.h	/^inline iterator Node::begin() {$/;"	f	class:YAML::Node
begin	amun/3rd_party/yaml-cpp/node_data.cpp	/^const_node_iterator node_data::begin() const {$/;"	f	class:YAML::detail::node_data
begin	amun/3rd_party/yaml-cpp/node_data.cpp	/^node_iterator node_data::begin() {$/;"	f	class:YAML::detail::node_data
begin	amun/cpu/mblas/tensor.h	/^    const_iterator begin() const{$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
begin	amun/cpu/mblas/tensor.h	/^    iterator begin() {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
begin	amun/gpu/decoder/kenlm.cpp	/^WordPairs::const_iterator LM::begin() const {$/;"	f	class:LM
begin_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   Iterator* begin_;  \/\/!< Pointers to the first non-zero element of each column.$/;"	m	class:blaze::CompressedMatrix
begin_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   Iterator* begin_;  \/\/!< Pointers to the first non-zero element of each row.$/;"	m	class:blaze::CompressedMatrix
begin_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   Iterator begin_;          \/\/!< Pointer to the first non-zero element of the compressed vector.$/;"	m	class:blaze::CompressedVector
begin_	amun/3rd_party/blaze/util/PtrVector.h	/^   PointerType* begin_;  \/\/!< Pointer to the first element of the pointer vector.$/;"	m	class:blaze::PtrVector
begin_col	amun/3rd_party/fast_align/src/array2d.h	/^  const_iterator begin_col(unsigned j) const {$/;"	f	class:Array2D
begin_col	amun/3rd_party/fast_align/src/array2d.h	/^  iterator begin_col(unsigned j) {$/;"	f	class:Array2D
bestHyps_	amun/common/search.h	/^    BaseBestHypsPtr bestHyps_;$/;"	m	class:amunmt::Search
bind	amun/3rd_party/thrust_bind/bind.hpp	/^> bind(F&& f, BoundArgs&&... bound_args)$/;"	f	namespace:thrust::experimental
bind_detail	amun/3rd_party/thrust_bind/bind.hpp	/^namespace bind_detail$/;"	n	namespace:thrust::experimental::detail
bind_expression	amun/3rd_party/thrust_bind/bind.hpp	/^    bind_expression(const F& f, const BoundArgs&... bound_args)$/;"	f	class:thrust::experimental::detail::bind_detail::bind_expression
bind_expression	amun/3rd_party/thrust_bind/bind.hpp	/^class bind_expression$/;"	c	namespace:thrust::experimental::detail::bind_detail
blaze	amun/3rd_party/blaze/Blaze.h	/^namespace blaze {}$/;"	n
blaze	amun/3rd_party/blaze/config/CacheSize.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Debugging.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Logging.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Optimizations.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Precision.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Random.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/SMP.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/StorageOrder.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/Thresholds.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/config/TransposeFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Accuracy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Aliases.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/AlignmentFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Column.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/CompressedMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/CompressedVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Constants.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/CustomMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/CustomVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/DynamicMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/DynamicVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Epsilon.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Functions.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/HermitianMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/HybridMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/HybridVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Infinity.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/InitializerList.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/InversionFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/LowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Matrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/PaddingFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Row.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/StaticMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/StaticVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/StorageOrder.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Submatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Subvector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/TransposeFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/UpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/Vector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/lowermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uppermatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/dot.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/gemm.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/gemv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/trmm.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/trmv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/blas/trsm.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Adaptor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/AddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Aligned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/BLASCompatible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Column.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/ColumnMajorMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/ColumnVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Columns.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Computation.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/ConstDataAccess.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/CrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Custom.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Diagonal.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/DivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/EvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Expression.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/ForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/General.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Hermitian.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Identity.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Invertible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Lower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatInvExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MatVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Matrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/MutableDataAccess.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/NumericMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/NumericVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/OpposedView.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Padded.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Proxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/RequiresEvaluation.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Resizable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Restricted.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Row.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/RowMajorMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/RowVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Rows.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SIMDEnabled.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SIMDPack.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SMPAssignable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Size.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SparseElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SparseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SparseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Square.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/StorageOrder.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/StrictlyLower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/StrictlyTriangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/StrictlyUpper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/SubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Submatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Subvector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Symmetric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/TVecMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/TransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/TransposeFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Triangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/UniLower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/UniTriangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/UniUpper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Upper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecTVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecVecDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/VecVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/Vector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/constraints/View.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/CustomVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/HybridVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/Inversion.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/LLH.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/LQ.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/LU.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/QL.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/QR.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/RQ.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/dense/StaticVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/AddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/Computation.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/CrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/DivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/EvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/Expression.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/ForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatInvExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MatVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/Matrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/MultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SparseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SparseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/SubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDMatTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecDVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecSVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TVecMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/TransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecTVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecVecDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/VecVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/Vector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/expressions/View.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Abs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Acos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Acosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Asin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Asinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Atan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Atanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/CTrans.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Cbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Ceil.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Conj.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Cos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Cosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Erf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Erfc.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Eval.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Exp.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Floor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Imag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Inv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/InvCbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/InvSqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Log.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Log10.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Pow.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Real.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Serial.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Sin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Sinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Sqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Tan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Tanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/functors/Trans.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/geqp3.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/getri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/hesv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/hetrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/hetri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/hetrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/orglq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/orgql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/orgqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/orgrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ormlq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ormql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ormqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ormrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/posv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/potri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/unglq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ungql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ungqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/ungrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/unmlq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/unmql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/unmqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/clapack/unmrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/gelqf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/geqlf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/geqrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/gerqf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/gesv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/getrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/getri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/getrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/hesv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/hetrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/hetri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/hetrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/orglq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/orgql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/orgqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/orgrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ormlq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ormql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ormqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ormrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/posv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/potrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/potri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/potrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/sysv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/sytrf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/sytri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/sytrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/trsv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/trtri.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/trtrs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/unglq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ungql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ungqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/ungrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/unmlq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/unmql.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/unmqr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/lapack/unmrq.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/DefaultProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/Proxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Abs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Acos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Acosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Asin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Asinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Atan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Atanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Cbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Ceil.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Clear.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Conjugate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Cos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Cosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Equal.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Erf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Erfc.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Exp.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Floor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Imaginary.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/InvCbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/InvSqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Invert.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsDefault.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsDivisor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsNaN.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsOne.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsReal.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/IsZero.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Log.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Log10.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Pow.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Real.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Reset.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Serial.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Sin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Sinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Sqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Square.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Tan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/shims/Tanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Abs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Acos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Acosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Addition.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Asin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Asinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Atan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Atanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Cbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Ceil.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Conj.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Cos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Cosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/DerivedTypes.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Division.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Erf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Erfc.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Exp.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/FMA.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Floor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/InvCbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/InvSqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Loada.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Loadu.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Log.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Log10.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Multiplication.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Pow.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Reduction.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/SIMDPack.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Set.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Setzero.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Sin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Sinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Sqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Storea.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Storeu.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Stream.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Subtraction.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Tan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/simd/Tanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/SerialSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/default/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/default/Functions.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/default/SparseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/default/SparseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/openmp/Functions.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/threads/Functions.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/SparseElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/AddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/AddTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/CTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/ColumnExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/ColumnTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/CrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/CrossTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatInvExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DMatTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecDVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecDVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecDVecDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecDVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecSVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecSVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecSVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecTDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecTSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DVecTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DerestrictTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/DivTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/EvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/ForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/ForEachTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/ImagTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/InvExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/MathTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/MultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/MultTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/RealTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/RowExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/RowTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SMatTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecDVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecDVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecDVecDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecDVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecSVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecSVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecSVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecTDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecTSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SVecTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubmatrixExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubmatrixTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubvectorExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/SubvectorTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatInvExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDMatTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDVecDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTDVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTSVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTSVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTSVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TDVecTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTDMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTDMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTSMatAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTSMatSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSMatTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecCTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecEvalExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecForEachExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecScalarDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecScalarMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecSerialExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDVecDivExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTDVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTSMatMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTSVecAddExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTSVecCrossExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTSVecMultExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTSVecSubExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TSVecTransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/traits/TransExprTrait.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/AreSIMDCombinable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/Columns.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasConstDataAccess.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasMutableDataAccess.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAbs.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAcos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAcosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAdd.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAsin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAsinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAtan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDAtanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDCbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDCeil.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDConj.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDCos.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDCosh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDDiv.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDErf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDErfc.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDExp.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDFloor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDInvCbrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDInvSqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDLog.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDLog10.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDMult.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDPow.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDSin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDSinh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDSqrt.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDSub.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDTan.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/HasSIMDTanh.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsAdaptor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsAligned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsBLASCompatible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsColumn.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsColumnMajorMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsColumnVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsComputation.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsCrossExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsCustom.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsDenseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsDenseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsDiagonal.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsExpression.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsGeneral.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsHermitian.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsIdentity.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsInvertible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsLower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatInvExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatMatAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatMatSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsNumericMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsNumericVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsOpposedView.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsPadded.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsResizable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsRestricted.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsRow.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsRowMajorMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsRowVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSIMDPack.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSparseElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSparseMatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSparseVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSquare.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsStrictlyLower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsStrictlyTriangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsStrictlyUpper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSubmatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSubvector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsSymmetric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsTVecMatMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsTemporary.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsTriangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsUniLower.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsUniTriangular.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsUniUpper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsUpper.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecEvalExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecForEachExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecScalarDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecScalarMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecSerialExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecTVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecTransExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecVecAddExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecVecDivExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecVecMultExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVecVecSubExpr.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/IsView.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/RemoveAdaptor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/RequiresEvaluation.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/Rows.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/Size.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/StorageOrder.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/TransposeFlag.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/UnderlyingBuiltin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/UnderlyingElement.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/typetraits/UnderlyingNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/Column.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/Forward.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/Row.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/Submatrix.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/Subvector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/column/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/column/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/column/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/row/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/row/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/row/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/submatrix/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/subvector/BaseTemplate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/system/Blocking.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/system/Thresholds.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Algorithm.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/AlignedAllocator.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/AlignedArray.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/AlignmentCheck.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Assert.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Complex.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Convert.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/DimensionOf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/DisableIf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/EmptyType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/EnableIf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/FalseType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Indices.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/InputString.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/IntegralConstant.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/InvalidType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Limits.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Memory.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/MemoryPool.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Misalignment.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/NonCopyable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/NonCreatable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/NullType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/PointerCast.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/PtrIterator.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/PtrVector.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Random.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/StaticAssert.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/SystemClock.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/SystemClockID.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Thread.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/ThreadPool.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Time.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/TrueType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/TypeList.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Types.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/UnsignedValue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/Unused.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Arithmetic.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Array.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Assignable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/BaseOf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Boolean.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Builtin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Class.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Comparable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Complex.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/ComplexDouble.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/ComplexFloat.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Const.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Constructible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Convertible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/DerivedFrom.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Destructible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Double.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Empty.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Float.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/FloatingPoint.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Integer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Integral.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/LongDouble.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Numeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Object.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Pod.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Pointer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Rank.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Reference.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/SameSize.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/SameType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Signed.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Size.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Subscriptable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/TypeRestriction.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Union.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Unsigned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Valid.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Vectorizable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Void.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/constraints/Volatile.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/DebugSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/DetailSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/ErrorSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/InfoSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/LogLevel.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/LogSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/Logger.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/Logging.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/ProgressSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/logging/WarningSection.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/And.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Bool.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Char.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Equal.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Greater.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/If.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Int.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Less.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Long.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Max.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Min.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Minus.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Modulus.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/NextMultiple.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Not.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Or.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Plus.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/SizeT.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Times.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/mpl/Xor.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/ArrayDelete.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/ConstantGrowth.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/Deallocate.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/DefaultDelete.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/LinearGrowth.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/NoDelete.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/OptimalGrowth.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/policies/PtrDelete.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/serialization/Archive.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/singleton/Dependency.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/singleton/Singleton.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/threadpool/Task.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/threadpool/ThreadPool.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/CpuPolicy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/CpuTimer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/Timer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/Timing.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/WcPolicy.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/timing/WcTimer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AddCV.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AddConst.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AddPointer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AddReference.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AddVolatile.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/All.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/Any.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/CommonType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/Decay.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/Extent.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/GetMemberType.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/HasSize.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/HaveSameSize.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsArithmetic.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsArray.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsAssignable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsBaseOf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsBoolean.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsBuiltin.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsCharacter.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsClass.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsComplex.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsComplexDouble.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsComplexFloat.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsConst.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsConstructible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsConvertible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsDestructible.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsDouble.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsEmpty.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsFloat.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsFloatingPoint.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsInteger.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsIntegral.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsLong.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsLongDouble.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsNumeric.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsObject.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsPod.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsPointer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsReference.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsSame.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsShort.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsSigned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsUnion.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsUnsigned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsValid.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsVectorizable.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsVoid.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/IsVolatile.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/MakeSigned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/MakeUnsigned.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/Rank.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveAllExtents.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveCV.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveConst.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveExtent.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemovePointer.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveReference.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/typetraits/RemoveVolatile.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/valuetraits/IsEven.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/valuetraits/IsMultipleOf.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/valuetraits/IsOdd.h	/^namespace blaze {$/;"	n
blaze	amun/3rd_party/blaze/util/valuetraits/IsPowerOf.h	/^namespace blaze {$/;"	n
blink	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink      = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink
block_retry	amun/3rd_party/spdlog/common.h	/^    block_retry, \/\/ Block \/ yield \/ sleep until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
blocks_	amun/3rd_party/blaze/util/MemoryPool.h	/^   Blocks blocks_;         \/\/!< Vector of available memory blocks.$/;"	m	class:blaze::MemoryPool
blue	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue       = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bold	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold       = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bom	amun/3rd_party/utf8/core.h	/^    const uint8_t bom[] = {0xef, 0xbb, 0xbf};$/;"	m	namespace:utf8
bool	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : bool { smpAssignable = !evaluateMatrix && MT::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT1>::value && !IsDiagonal<MT2>::value &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : bool { simdEnabled = VT1::simdEnabled && VT2::simdEnabled &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : bool { smpAssignable = VT1::smpAssignable && !evaluateRight };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   enum : bool { smpAssignable = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   enum : bool { smpAssignable = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : bool { simdEnabled = !( IsDiagonal<MT1>::value && IsDiagonal<MT2>::value ) &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : bool { smpAssignable = !evaluateMatrix && MT::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateVector && VT::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateVector && VT::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	g
bool	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	g
bound	amun/common/threadpool.h	/^    std::size_t bound;$/;"	m	class:amunmt::ThreadPool
bound_args_	amun/3rd_party/thrust_bind/bind.hpp	/^    tuple<BoundArgs...> bound_args_;$/;"	m	class:thrust::experimental::detail::bind_detail::bind_expression
bounded_condition	amun/common/threadpool.h	/^    std::condition_variable bounded_condition;$/;"	m	class:amunmt::ThreadPool
bpeCodes_	amun/common/processor/bpe.h	/^    std::unordered_map<BPEPair, size_t> bpeCodes_;$/;"	m	class:amunmt::BPE
bpeFactors	amun/common/processor/bpe.h	/^typedef std::vector<std::string> bpeFactors;$/;"	t	namespace:amunmt
buffer_	amun/3rd_party/blaze/util/InputString.h	/^   std::string buffer_;  \/\/!< The character buffer.$/;"	m	class:blaze::InputString
buffer_	amun/3rd_party/spdlog/details/format.h	/^        : BasicWriter<Char>(buffer_), buffer_(array, SIZE)$/;"	f	class:BasicArrayWriter
buffer_	amun/3rd_party/spdlog/details/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:BasicWriter
buffer_	amun/3rd_party/spdlog/details/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::FormatBuf
buffer_	amun/3rd_party/spdlog/details/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8
buffer_	amun/3rd_party/spdlog/details/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16
buffer_	amun/3rd_party/spdlog/details/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:BasicArrayWriter
buffer_	amun/3rd_party/spdlog/details/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:BasicMemoryWriter
buffer_	amun/3rd_party/spdlog/details/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:FormatInt
buffer_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cell_t* const           buffer_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        : BasicWriter<Char>(buffer_), buffer_(array, SIZE)$/;"	f	class:BasicArrayWriter
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:BasicWriter
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:BasicArrayWriter
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:BasicMemoryWriter
buffer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:FormatInt
buffer_	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::internal::FormatBuf
buffer_mask_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    size_t const            buffer_mask_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
build_what	amun/3rd_party/yaml-cpp/exceptions.h	/^  static const std::string build_what(const Mark& mark,$/;"	f	class:YAML::Exception
byColumn	amun/cpu/mblas/tensor.h	/^const bool byColumn = false;$/;"	m	namespace:amunmt::CPU::mblas
byDefault	amun/3rd_party/blaze/math/InversionFlag.h	/^   byDefault = 0,  \/\/!< Flag for the default, optimal inversion algorithm.$/;"	e	enum:blaze::InversionFlag
byLDLH	amun/3rd_party/blaze/math/InversionFlag.h	/^   byLDLH    = 3,  \/\/!< Flag for the Bunch-Kaufman-based inversion for Hermitian matrices.$/;"	e	enum:blaze::InversionFlag
byLDLT	amun/3rd_party/blaze/math/InversionFlag.h	/^   byLDLT    = 2,  \/\/!< Flag for the Bunch-Kaufman-based inversion for symmetric matrices.$/;"	e	enum:blaze::InversionFlag
byLLH	amun/3rd_party/blaze/math/InversionFlag.h	/^   byLLH     = 4   \/\/!< Flag for the Cholesky-based inversion for positive-definite matrices.$/;"	e	enum:blaze::InversionFlag
byLU	amun/3rd_party/blaze/math/InversionFlag.h	/^   byLU      = 1,  \/\/!< Flag for the LU-based matrix inversion.$/;"	e	enum:blaze::InversionFlag
byRow	amun/cpu/mblas/tensor.h	/^const bool byRow = true;$/;"	m	namespace:amunmt::CPU::mblas
c_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T3 c_;  \/\/!< The right-hand side operand for the addition.$/;"	m	struct:blaze::SIMDf32FmaddExpr
c_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T3 c_;  \/\/!< The right-hand side operand for the addition.$/;"	m	struct:blaze::SIMDf64FmaddExpr
c_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T3 c_;  \/\/!< The right-hand side operand for the subtraction.$/;"	m	struct:blaze::SIMDf32FmsubExpr
c_	amun/3rd_party/blaze/math/simd/FMA.h	/^   const T3 c_;  \/\/!< The right-hand side operand for the subtraction.$/;"	m	struct:blaze::SIMDf64FmsubExpr
c_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class c_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
c_str	amun/3rd_party/blaze/util/InputString.h	/^inline const char* InputString::c_str() const$/;"	f	class:blaze::InputString
c_str	amun/3rd_party/spdlog/details/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	amun/3rd_party/spdlog/details/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef
c_str	amun/3rd_party/spdlog/details/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	amun/3rd_party/spdlog/details/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
c_str	amun/3rd_party/spdlog/details/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
c_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef
c_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
c_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
c_str	amun/3rd_party/yaml-cpp/emitter.cpp	/^const char* Emitter::c_str() const { return m_stream.str(); }$/;"	f	class:YAML::Emitter
cacheSize	amun/3rd_party/blaze/config/CacheSize.h	/^constexpr size_t cacheSize = 3145728UL;$/;"	m	namespace:blaze
cache_	amun/common/processor/bpe.h	/^    mutable std::unordered_map<std::string, std::vector<std::string>> cache_;$/;"	m	class:amunmt::BPE
cache_refresh	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::z_formatter
cacheline_pad_t	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    typedef char            cacheline_pad_t [cacheline_size];$/;"	t	class:spdlog::details::mpmc_bounded_queue
cacheline_size	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    static size_t const     cacheline_size = 64;$/;"	m	class:spdlog::details::mpmc_bounded_queue
calcCapacity	amun/3rd_party/blaze/util/PtrVector.h	/^inline size_t PtrVector<T,D,G>::calcCapacity( size_t minCapacity ) const$/;"	f	class:blaze::PtrVector
calc_filename	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename)$/;"	f	struct:spdlog::sinks::dateonly_daily_file_name_calculator
calc_filename	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename)$/;"	f	struct:spdlog::sinks::default_daily_file_name_calculator
calc_filename	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& filename, std::size_t index)$/;"	f	class:spdlog::sinks::rotating_file_sink
canAlias	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline bool Column<MT,false,false,false>::canAlias( const Other* alias ) const$/;"	f	class:blaze::Column
capacity	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::capacity( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
capacity	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::capacity() const$/;"	f	class:blaze::DenseMatrixProxy
capacity	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline size_t DenseVectorProxy<PT,VT>::capacity() const$/;"	f	class:blaze::DenseVectorProxy
capacity	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::capacity( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
capacity	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::capacity() const$/;"	f	class:blaze::SparseMatrixProxy
capacity	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
capacity	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline size_t SparseVectorProxy<PT,VT>::capacity() const$/;"	f	class:blaze::SparseVectorProxy
capacity	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline size_t Column<MT,false,false,false>::capacity() const$/;"	f	class:blaze::Column
capacity	amun/3rd_party/blaze/util/InputString.h	/^inline InputString::SizeType InputString::capacity() const$/;"	f	class:blaze::InputString
capacity	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::SizeType PtrVector<T,D,G>::capacity() const$/;"	f	class:blaze::PtrVector
capacity	amun/3rd_party/spdlog/details/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer
capacity	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer
capacity_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   size_t capacity_;  \/\/!< The current capacity of the pointer array.$/;"	m	class:blaze::CompressedMatrix
capacity_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   size_t capacity_;         \/\/!< The maximum capacity of the compressed vector.$/;"	m	class:blaze::CompressedVector
capacity_	amun/3rd_party/blaze/util/PtrVector.h	/^   SizeType capacity_;   \/\/!< The capacity of the pointer vector.$/;"	m	class:blaze::PtrVector
capacity_	amun/3rd_party/spdlog/details/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer
capacity_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer
cast	amun/3rd_party/spdlog/details/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits
cast	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits
cbegin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::LowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::LowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::cbegin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::cbegin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::cbegin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::cbegin( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::cbegin( size_t i ) const$/;"	f	class:blaze::UpperMatrix
cbegin	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::cbegin( size_t i ) const$/;"	f	class:blaze::UpperMatrix
cbegin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator cbegin( size_t i ) const {$/;"	f	class:blaze::DMatTransposer
cbegin	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator cbegin( size_t j ) const {$/;"	f	class:blaze::DMatTransposer
cbegin	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstIterator cbegin() const {$/;"	f	class:blaze::DVecTransposer
cbegin	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::ConstIterator cbegin( const Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator cbegin( size_t i ) const {$/;"	f	class:blaze::SMatTransposer
cbegin	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator cbegin( size_t j ) const {$/;"	f	class:blaze::SMatTransposer
cbegin	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstIterator cbegin() const {$/;"	f	class:blaze::SVecTransposer
cbegin	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::ConstIterator cbegin( const Vector<VT,TF>& vector )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::cbegin( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
cbegin	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   cbegin( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   cbegin( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline typename DenseVectorProxy<PT,VT>::ConstIterator DenseVectorProxy<PT,VT>::cbegin() const$/;"	f	class:blaze::DenseVectorProxy
cbegin	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::cbegin( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
cbegin	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   cbegin( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   cbegin( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
cbegin	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline typename SparseVectorProxy<PT,VT>::ConstIterator SparseVectorProxy<PT,VT>::cbegin() const$/;"	f	class:blaze::SparseVectorProxy
cbegin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::cbegin() const$/;"	f	class:blaze::Column
cbegin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::cbegin() const$/;"	f	class:blaze::Column
cbegin	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::ConstIterator Column<MT,true,false,SF>::cbegin() const$/;"	f	class:blaze::Column
cbegin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::ConstIterator Row<MT,false,false,false>::cbegin() const$/;"	f	class:blaze::Row
cbegin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::ConstIterator Row<MT,false,false,true>::cbegin() const$/;"	f	class:blaze::Row
cbegin	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::cbegin() const$/;"	f	class:blaze::Row
cbegin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::cbegin( size_t i ) const$/;"	f	class:blaze::Submatrix
cbegin	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::cbegin( size_t j ) const$/;"	f	class:blaze::Submatrix
cbegin	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::ConstIterator Subvector<VT,AF,TF,false>::cbegin() const$/;"	f	class:blaze::Subvector
cbrt	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Cbrt,SO> cbrt( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
cbrt	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Cbrt,TF> cbrt( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
cbrt	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Cbrt,SO> cbrt( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
cbrt	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Cbrt,TF> cbrt( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
cbrt	amun/3rd_party/blaze/math/functors/Cbrt.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( cbrt( a ) )$/;"	f	struct:blaze::Cbrt
cbrt	amun/3rd_party/blaze/math/functors/Cbrt.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( cbrt( a ) )$/;"	f	struct:blaze::Cbrt
cbrt	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( cbrt( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Ceil,SO> ceil( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Ceil,SO>& ceil( const DMatForEachExpr<MT,Ceil,SO>& dm )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Ceil,TF> ceil( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Ceil,TF>& ceil( const DVecForEachExpr<VT,Ceil,TF>& dv )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Ceil,SO> ceil( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Ceil,SO>& ceil( const SMatForEachExpr<MT,Ceil,SO>& sm )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Ceil,TF> ceil( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Ceil,TF>& ceil( const SVecForEachExpr<VT,Ceil,TF>& sv )$/;"	f	namespace:blaze
ceil	amun/3rd_party/blaze/math/functors/Ceil.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( ceil( a ) )$/;"	f	struct:blaze::Ceil
ceil	amun/3rd_party/blaze/math/functors/Ceil.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( ceil( a ) )$/;"	f	struct:blaze::Ceil
ceil	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( ceil( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
cell	amun/gpu/dl4mt/cell.h	/^  size_t cell;$/;"	m	struct:amunmt::GPU::CellLength
cell	amun/gpu/dl4mt/cellstate.h	/^  std::unique_ptr<mblas::Tensor> cell;$/;"	m	struct:amunmt::GPU::CellState
cell_t	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    struct cell_t$/;"	s	class:spdlog::details::mpmc_bounded_queue
cend	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
cend	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
cend	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
cend	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
cend	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::LowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::LowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
cend	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
cend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::cend( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::cend( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::cend( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::cend( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
cend	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
cend	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
cend	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
cend	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::cend( size_t i ) const$/;"	f	class:blaze::UpperMatrix
cend	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::cend( size_t i ) const$/;"	f	class:blaze::UpperMatrix
cend	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator cend( size_t i ) const {$/;"	f	class:blaze::DMatTransposer
cend	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator cend( size_t j ) const {$/;"	f	class:blaze::DMatTransposer
cend	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstIterator cend() const {$/;"	f	class:blaze::DVecTransposer
cend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::ConstIterator cend( const Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator cend( size_t i ) const {$/;"	f	class:blaze::SMatTransposer
cend	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator cend( size_t j ) const {$/;"	f	class:blaze::SMatTransposer
cend	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstIterator cend() const {$/;"	f	class:blaze::SVecTransposer
cend	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::ConstIterator cend( const Vector<VT,TF>& vector )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::cend( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
cend	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   cend( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   cend( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline typename DenseVectorProxy<PT,VT>::ConstIterator DenseVectorProxy<PT,VT>::cend() const$/;"	f	class:blaze::DenseVectorProxy
cend	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::cend( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
cend	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   cend( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   cend( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
cend	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline typename SparseVectorProxy<PT,VT>::ConstIterator SparseVectorProxy<PT,VT>::cend() const$/;"	f	class:blaze::SparseVectorProxy
cend	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::cend() const$/;"	f	class:blaze::Column
cend	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::cend() const$/;"	f	class:blaze::Column
cend	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::ConstIterator Column<MT,true,false,SF>::cend() const$/;"	f	class:blaze::Column
cend	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::ConstIterator Row<MT,false,false,false>::cend() const$/;"	f	class:blaze::Row
cend	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::ConstIterator Row<MT,false,false,true>::cend() const$/;"	f	class:blaze::Row
cend	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::cend() const$/;"	f	class:blaze::Row
cend	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::cend( size_t i ) const$/;"	f	class:blaze::Submatrix
cend	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::cend( size_t j ) const$/;"	f	class:blaze::Submatrix
cend	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::ConstIterator Subvector<VT,AF,TF,false>::cend() const$/;"	f	class:blaze::Subvector
ch_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    explicit ch_formatter(char ch): _ch(ch)$/;"	f	class:spdlog::details::ch_formatter
ch_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class ch_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
check	amun/3rd_party/spdlog/details/format.h	/^inline T check(T value)$/;"	f	namespace:fmt::internal
checkAlignment	amun/3rd_party/blaze/util/AlignmentCheck.h	/^BLAZE_ALWAYS_INLINE bool checkAlignment( const T* address )$/;"	f	namespace:blaze
checkMemory	amun/3rd_party/blaze/util/MemoryPool.h	/^inline bool MemoryPool<Type,Blocksize>::checkMemory( FreeObject* toRelease ) const$/;"	f	class:blaze::MemoryPool
check_no_auto_index	amun/3rd_party/spdlog/details/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
check_no_auto_index	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
childCount	amun/3rd_party/yaml-cpp/emitterstate.h	/^    std::size_t childCount;$/;"	m	struct:YAML::EmitterState::Group
chomp	amun/3rd_party/yaml-cpp/scanscalar.h	/^  CHOMP chomp;  \/\/ do we strip, clip, or keep trailing newlines (at the very$/;"	m	struct:YAML::ScanScalarParams
classes_	amun/gpu/decoder/class_language_model.h	/^    std::vector<std::vector<Word>> classes_;$/;"	m	class:amunmt::GPU::ClassLanguageModel
clear	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void clear( DiagonalMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void clear( HermitianMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void clear( LowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline void clear( StrictlyLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline void clear( StrictlyUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void clear( SymmetricMatrix<MT,SO,DF,NF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void clear( UniLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void clear( UniUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void clear( UpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline void DiagonalMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::DiagonalMatrix
clear	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline void clear( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::DiagonalMatrix
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline void HermitianMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::HermitianMatrix
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void HermitianProxy<MT>::clear() const$/;"	f	class:blaze::HermitianProxy
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void clear( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::clear() const$/;"	f	class:blaze::HermitianValue
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void clear( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::HermitianMatrix
clear	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline void LowerMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::LowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline void clear( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::LowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline void StrictlyLowerMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::StrictlyLowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::StrictlyLowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline void clear( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline void StrictlyUpperMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::StrictlyUpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::StrictlyUpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline void clear( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::clear()$/;"	f	class:blaze::SymmetricMatrix
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,true>::clear()$/;"	f	class:blaze::SymmetricMatrix
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline void clear( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void NumericProxy<MT>::clear() const$/;"	f	class:blaze::NumericProxy
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void clear( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::clear()$/;"	f	class:blaze::SymmetricMatrix
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::clear()$/;"	f	class:blaze::SymmetricMatrix
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::clear() const$/;"	f	class:blaze::SymmetricValue
clear	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void clear( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline void UniLowerMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::UniLowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::UniLowerMatrix
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void UniLowerProxy<MT>::clear() const$/;"	f	class:blaze::UniLowerProxy
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void clear( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void UniLowerValue<MT>::clear() const$/;"	f	class:blaze::UniLowerValue
clear	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void clear( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline void UniUpperMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::UniUpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::UniUpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void UniUpperProxy<MT>::clear() const$/;"	f	class:blaze::UniUpperProxy
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void clear( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void UniUpperValue<MT>::clear() const$/;"	f	class:blaze::UniUpperValue
clear	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void clear( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline void UpperMatrix<MT,SO,true>::clear()$/;"	f	class:blaze::UpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::clear()$/;"	f	class:blaze::UpperMatrix
clear	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline void clear( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void clear( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::clear() const$/;"	f	class:blaze::DenseMatrixProxy
clear	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void clear( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::clear() const$/;"	f	class:blaze::DenseVectorProxy
clear	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void clear( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::clear() const$/;"	f	class:blaze::SparseMatrixProxy
clear	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void clear( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::clear() const$/;"	f	class:blaze::SparseVectorProxy
clear	amun/3rd_party/blaze/math/shims/Clear.h	/^BLAZE_ALWAYS_INLINE void clear( Type& clearable )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::clear()$/;"	f	class:blaze::CompressedMatrix
clear	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::clear()$/;"	f	class:blaze::CompressedMatrix
clear	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void clear( CompressedMatrix<Type,SO>& m )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::clear()$/;"	f	class:blaze::CompressedVector
clear	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void clear( CompressedVector<Type,TF>& v )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline void clear( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline void clear( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/views/Column.h	/^inline void clear( Column<MT,SO,DF,SF>& column )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/views/Row.h	/^inline void clear( Row<MT,SO,DF,SF>& row )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline void clear( Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/math/views/Subvector.h	/^inline void clear( Subvector<VT,AF,TF,DF>& sv )$/;"	f	namespace:blaze
clear	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::clear()$/;"	f	class:blaze::PtrVector
clear	amun/3rd_party/blaze/util/ThreadPool.h	/^void ThreadPool<TT,MT,LT,CT>::clear()$/;"	f	class:blaze::ThreadPool
clear	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline void Archive<Stream>::clear( std::ios_base::iostate state )$/;"	f	class:blaze::Archive
clear	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline void TaskQueue::clear()$/;"	f	class:blaze::threadpool::TaskQueue
clear	amun/3rd_party/fast_align/src/array2d.h	/^  void clear() { data_.clear(); width_=0; height_=0; }$/;"	f	class:Array2D
clear	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  void clear() {$/;"	f	class:YAML::ptr_vector
clear	amun/3rd_party/yaml-cpp/setting.h	/^  void clear() {$/;"	f	class:YAML::SettingChanges
clear	amun/gpu/mblas/vector.h	/^  void clear()$/;"	f	class:amunmt::GPU::mblas::Vector
close	amun/3rd_party/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper
clz	amun/3rd_party/spdlog/details/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal
clz	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal
clzll	amun/3rd_party/spdlog/details/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal
clzll	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal
cnpy	amun/3rd_party/cnpy/cnpy.h	/^namespace cnpy {$/;"	n
code_point	amun/3rd_party/utf8/checked.h	/^        uint32_t code_point() const {return cp;}$/;"	f	class:utf8::invalid_code_point
col	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t col() const { return m_col; }$/;"	f	class:YAML::ostream_wrapper
col_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   const size_t col_;     \/\/!< The index of the column in the matrix.$/;"	m	class:blaze::Column
coll_	amun/common/histories.h	/^    std::vector<std::shared_ptr<History>> coll_;$/;"	m	class:amunmt::Histories
coll_	amun/common/sentences.h	/^    std::vector<SentencePtr> coll_;$/;"	m	class:amunmt::Sentences
collectionStack	amun/3rd_party/yaml-cpp/collectionstack.h	/^  std::stack<CollectionType::value> collectionStack;$/;"	m	class:YAML::CollectionStack
colors_	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    std::map<level::level_enum, std::string> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
colors_	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    std::map<level::level_enum, WORD> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink
column	amun/3rd_party/blaze/math/views/Column.h	/^   column( Matrix<MT,SO>& matrix, size_t index )$/;"	f	namespace:blaze
column	amun/3rd_party/blaze/math/views/Column.h	/^   column( const Matrix<MT,SO>& matrix, size_t index )$/;"	f	namespace:blaze
column	amun/3rd_party/yaml-cpp/mark.h	/^  int line, column;$/;"	m	struct:YAML::Mark
column	amun/3rd_party/yaml-cpp/scanner.h	/^    int column;$/;"	m	struct:YAML::Scanner::IndentMarker
column	amun/3rd_party/yaml-cpp/stream.h	/^  int column() const { return m_mark.column; }$/;"	f	class:YAML::Stream
columnMajor	amun/3rd_party/blaze/math/StorageOrder.h	/^const bool columnMajor = true;$/;"	m	namespace:blaze
columnVector	amun/3rd_party/blaze/math/TransposeFlag.h	/^const bool columnVector = false;$/;"	m	namespace:blaze
column_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::DiagonalMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::DiagonalMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^         , column_( column  )  \/\/ The current column index of the iterator$/;"	f	class:blaze::HermitianMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      size_t column_;  \/\/!< The current column index of the iterator.$/;"	m	class:blaze::HermitianMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::LowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::LowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::StrictlyLowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::StrictlyUpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^         , column_( column  )  \/\/ The current column index of the iterator$/;"	f	class:blaze::SymmetricMatrix::MatrixIterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^         , column_( it.column_ )  \/\/ The current column index of the iterator$/;"	f	class:blaze::SymmetricMatrix::MatrixIterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      size_t      column_;  \/\/!< The current column index of the iterator.$/;"	m	class:blaze::SymmetricMatrix::MatrixIterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^         , column_( column  )  \/\/ The current column index of the iterator$/;"	f	class:blaze::SymmetricMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      size_t column_;  \/\/!< The current column index of the iterator.$/;"	m	class:blaze::SymmetricMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   size_t column_;  \/\/!< Column index of the accessed matrix element.$/;"	m	class:blaze::NumericProxy
column_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::UniLowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::UniLowerMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   size_t column_;        \/\/!< Column index of the accessed matrix element.$/;"	m	class:blaze::UniLowerProxy
column_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::UniUpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::UniUpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   size_t column_;        \/\/!< Column index of the accessed matrix element.$/;"	m	class:blaze::UniUpperProxy
column_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^         , column_( column  )  \/\/ The current column-index of the iterator$/;"	f	class:blaze::UpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      size_t column_;  \/\/!< The current column-index of the iterator.$/;"	m	class:blaze::UpperMatrix::Iterator
column_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      size_t       column_;  \/\/!< The current column index.$/;"	m	class:blaze::Column::ColumnIterator
column_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      size_t       column_;  \/\/!< The current column index.$/;"	m	class:blaze::Row::RowIterator
column_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      size_t column_;     \/\/!< Index of the according column.$/;"	m	class:blaze::Row::RowElement
column_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   const size_t column_;  \/\/!< The first column of the submatrix.$/;"	m	class:blaze::Submatrix
columns	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t columns( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
columns	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::columns() const$/;"	f	class:blaze::DenseMatrixProxy
columns	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t columns( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
columns	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::columns() const$/;"	f	class:blaze::SparseMatrixProxy
columns_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint64_t columns_;      \/\/!< The number of columns of the matrix.$/;"	m	class:blaze::MatrixSerializer
command	amun/3rd_party/fast_align/src/atools.cc	/^string command;$/;"	v
commands	amun/3rd_party/fast_align/src/atools.cc	/^map<string, shared_ptr<Command> > commands;$/;"	v
commands	amun/fpga/types-fpga.h	/^  cl_command_queue commands;$/;"	m	struct:OpenCLInfo
comment	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  bool comment() const { return m_comment; }$/;"	f	class:YAML::ostream_wrapper
compare	amun/3rd_party/spdlog/details/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef
compare	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef
compile_pattern	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::compile_pattern(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
compute_map_size	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::compute_map_size() const {$/;"	f	class:YAML::detail::node_data
compute_seq_size	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::compute_seq_size() const {$/;"	f	class:YAML::detail::node_data
concealed	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed  = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink
condition	amun/common/threadpool.h	/^    std::condition_variable condition;$/;"	m	class:amunmt::ThreadPool
conditional_probability_filename	amun/3rd_party/fast_align/src/fast_align.cc	/^string conditional_probability_filename = "";$/;"	v
config_	amun/common/config.h	/^    YAML::Node config_;$/;"	m	class:amunmt::Config
config_	amun/common/god.h	/^    Config config_;$/;"	m	class:amunmt::God
config_	amun/common/loader.h	/^    const YAML::Node config_;$/;"	m	class:amunmt::Loader
config_	amun/common/scorer.h	/^    const YAML::Node& config_;$/;"	m	class:amunmt::Scorer
conj	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Conj,SO> conj( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatTransExpr<MT,!SO> conj( const DMatTransExpr<DMatForEachExpr<MT,Conj,SO>,!SO>& dm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline typename DMatForEachExpr<MT,Conj,SO>::Operand conj( const DMatForEachExpr<MT,Conj,SO>& dm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Conj,TF> conj( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecTransExpr<VT,!TF> conj( const DVecTransExpr<DVecForEachExpr<VT,Conj,TF>,!TF>& dv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline typename DVecForEachExpr<VT,Conj,TF>::Operand conj( const DVecForEachExpr<VT,Conj,TF>& dv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Conj,SO> conj( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatTransExpr<MT,!SO> conj( const SMatTransExpr<SMatForEachExpr<MT,Conj,SO>,!SO>& sm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline typename SMatForEachExpr<MT,Conj,TF>::Operand conj( const SMatForEachExpr<MT,Conj,TF>& sm )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Conj,TF> conj( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecTransExpr<VT,!TF> conj( const SVecTransExpr<SVecForEachExpr<VT,Conj,TF>,!TF>& sv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline typename SVecForEachExpr<VT,Conj,TF>::Operand conj( const SVecForEachExpr<VT,Conj,TF>& sv )$/;"	f	namespace:blaze
conj	amun/3rd_party/blaze/math/functors/Conj.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( conj( a ) )$/;"	f	struct:blaze::Conj
conj	amun/3rd_party/blaze/math/functors/Conj.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( conj( a ) )$/;"	f	struct:blaze::Conj
conj	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( conj( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
const_check	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline T const_check(T value)$/;"	f	namespace:fmt::internal
const_iterator	amun/3rd_party/fast_align/src/array2d.h	/^  typedef typename std::vector<T>::const_iterator const_iterator;$/;"	t	class:Array2D
const_iterator	amun/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^typedef detail::iterator_base<const detail::iterator_value> const_iterator;$/;"	t	namespace:YAML
const_iterator	amun/3rd_party/yaml-cpp/node/node.h	/^  typedef YAML::const_iterator const_iterator;$/;"	t	class:YAML::Node
const_iterator	amun/cpu/mblas/tensor.h	/^    typedef typename std::vector<value_type>::const_iterator const_iterator;$/;"	t	class:amunmt::CPU::mblas::BlazeMatrix
const_node_iterator	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef node_iterator_base<const node> const_node_iterator;$/;"	t	namespace:YAML::detail
const_pointer	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef ConstPointer    const_pointer;    \/\/!< Type of a pointer-to-const to the allocated values.$/;"	t	class:blaze::AlignedAllocator
const_pointer	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ConstPointerType      const_pointer;       \/\/!< Pointer to a const object.$/;"	t	class:blaze::PtrVector
const_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline S<To> const_pointer_cast( S<From> ptr )$/;"	f	namespace:blaze
const_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline To* const_pointer_cast( From* ptr)$/;"	f	namespace:blaze
const_reference	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef ConstReference  const_reference;  \/\/!< Type of a reference-to-const to the allocated values.$/;"	t	class:blaze::AlignedAllocator
const_reference	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ConstReferenceType    const_reference;     \/\/!< Reference to a const object.$/;"	t	class:blaze::PtrVector
const_reference	amun/3rd_party/fast_align/src/array2d.h	/^  typedef typename std::vector<T>::const_reference const_reference;$/;"	t	class:Array2D
construct	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline const MT DiagonalMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::DiagonalMatrix
construct	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline const MT DiagonalMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::DiagonalMatrix
construct	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline const MT DiagonalMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::DiagonalMatrix
construct	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::construct( const Matrix<MT2,!SO>& m, TrueType )$/;"	f	class:blaze::HermitianMatrix
construct	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline const MT2& HermitianMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::HermitianMatrix
construct	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::construct( const Matrix<MT2,!SO>& m, TrueType )$/;"	f	class:blaze::HermitianMatrix
construct	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline const MT2& HermitianMatrix<MT,SO,false>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::HermitianMatrix
construct	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline const MT LowerMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::LowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline const MT LowerMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::LowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline const MT LowerMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::LowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline const MT StrictlyLowerMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::StrictlyLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline const MT StrictlyLowerMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::StrictlyLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline const MT StrictlyLowerMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::StrictlyLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline const MT StrictlyUpperMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::StrictlyUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline const MT StrictlyUpperMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::StrictlyUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline const MT StrictlyUpperMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::StrictlyUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline const MT UniLowerMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::UniLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline const MT UniLowerMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::UniLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline const MT UniLowerMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::UniLowerMatrix
construct	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline const MT UniUpperMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::UniUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline const MT UniUpperMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::UniUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline const MT UniUpperMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::UniUpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline const MT UpperMatrix<MT,SO,true>::construct( const ElementType& init, FalseType )$/;"	f	class:blaze::UpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline const MT UpperMatrix<MT,SO,true>::construct( const Matrix<MT2,SO2>& m, T )$/;"	f	class:blaze::UpperMatrix
construct	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline const MT UpperMatrix<MT,SO,true>::construct( size_t n, TrueType )$/;"	f	class:blaze::UpperMatrix
construct	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline void AlignedAllocator<Type>::construct( Pointer ptr, ConstReference value )$/;"	f	class:blaze::AlignedAllocator
content	amun/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Alias
content	amun/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Anchor
content	amun/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Comment
content	amun/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Tag
context	amun/fpga/types-fpga.h	/^  cl_context context;$/;"	m	struct:OpenCLInfo
conversion	amun/3rd_party/yaml-cpp/node/convert.h	/^namespace conversion {$/;"	n	namespace:YAML
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To Converter<To,From>::convert( const From& from )$/;"	f	class:blaze::Converter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To Converter<To,std::string>::convert( const std::string& from )$/;"	f	class:blaze::Converter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To convert( char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To convert( const From& from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To convert( const char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To* CastConverter<To*,From*,0>::convert( From* from )$/;"	f	class:blaze::CastConverter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To* CastConverter<To*,From*,1>::convert( From* from )$/;"	f	class:blaze::CastConverter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline To* Converter<To*,From*>::convert( From* from )$/;"	f	class:blaze::Converter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline double convert<double,std::string>( const std::string& from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline double convert<double>( char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline double convert<double>( const char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline float convert<float,std::string>( const std::string& from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline float convert<float>( char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline float convert<float>( const char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline int convert<int,std::string>( const std::string& from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline int convert<int>( char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline int convert<int>( const char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline std::string Converter<std::string,From>::convert( const From& from )$/;"	f	class:blaze::Converter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline std::string Converter<std::string,std::string>::convert( const std::string& from )$/;"	f	class:blaze::Converter
convert	amun/3rd_party/blaze/util/Convert.h	/^inline unsigned int convert<unsigned int,std::string>( const std::string& from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline unsigned int convert<unsigned int>( char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/blaze/util/Convert.h	/^inline unsigned int convert<unsigned int>( const char* const from )$/;"	f	namespace:blaze
convert	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::internal::UTF16ToUTF8::convert(fmt::WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
convert	amun/3rd_party/spdlog/details/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/spdlog/details/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/spdlog/details/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC int internal::UTF16ToUTF8::convert(WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
convert	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<Binary> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<Node> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<_Null> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<bool> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<const char*> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<const char[N]> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::list<T> > {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::map<K, V> > {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::pair<T, U> > {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::string> {$/;"	s	namespace:YAML
convert	amun/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::vector<T> > {$/;"	s	namespace:YAML
convert_sequence_to_map	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::convert_sequence_to_map(shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
convert_to_android	amun/3rd_party/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::android_sink
convert_to_map	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::convert_to_map(shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
convert_to_node	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node& node_data::convert_to_node(const T& rhs,$/;"	f	class:YAML::detail::node_data
copy	amun/fpga/nth_element.h	/^  NthElement(const NthElement &copy) = delete;$/;"	m	class:amunmt::FPGA::NthElement
copy	amun/gpu/decoder/best_hyps.h	/^    BestHyps(const BestHyps &copy) = delete;$/;"	m	class:amunmt::GPU::BestHyps
copy	amun/gpu/mblas/nth_element.h	/^    NthElement(const NthElement &copy) = delete;$/;"	m	class:amunmt::GPU::NthElement
copy	amun/gpu/mblas/tensor_functions.h	/^void copy(const T *in, unsigned count, T *out,  cudaMemcpyKind kind) {$/;"	f	namespace:amunmt::GPU::mblas
cos	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Cos,SO> cos( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
cos	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Cos,TF> cos( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
cos	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Cos,SO> cos( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
cos	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Cos,TF> cos( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
cos	amun/3rd_party/blaze/math/functors/Cos.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( cos( a ) )$/;"	f	struct:blaze::Cos
cos	amun/3rd_party/blaze/math/functors/Cos.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( cos( a ) )$/;"	f	struct:blaze::Cos
cos	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( cos( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
cosh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Cosh,SO> cosh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
cosh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Cosh,TF> cosh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
cosh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Cosh,SO> cosh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
cosh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Cosh,TF> cosh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
cosh	amun/3rd_party/blaze/math/functors/Cosh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( cosh( a ) )$/;"	f	struct:blaze::Cosh
cosh	amun/3rd_party/blaze/math/functors/Cosh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( cosh( a ) )$/;"	f	struct:blaze::Cosh
cosh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( cosh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
cost	amun/common/history.h	/^      float cost;$/;"	m	struct:amunmt::History::HypothesisCoord
costBreakdown_	amun/common/hypothesis.h	/^    std::vector<float> costBreakdown_;$/;"	m	class:amunmt::Hypothesis
cost_	amun/common/hypothesis.h	/^    const float cost_;$/;"	m	class:amunmt::Hypothesis
costs_	amun/gpu/decoder/ape_penalty.h	/^    std::vector<float> costs_;$/;"	m	class:GPU::ApePenalty
costs_	amun/gpu/decoder/best_hyps.h	/^    mblas::Vector<float> costs_;$/;"	m	class:amunmt::GPU::BestHyps
count_digits	amun/3rd_party/spdlog/details/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal
count_digits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal
counter_	amun/3rd_party/blaze/util/timing/Timer.h	/^   size_t counter_;  \/\/!< Number of performed time measurements.$/;"	m	class:blaze::timing::Timer
counts	amun/3rd_party/fast_align/src/ttables.h	/^  Word2Word2Double counts;$/;"	m	class:TTable
cp	amun/3rd_party/utf8/checked.h	/^        uint32_t cp;$/;"	m	class:utf8::invalid_code_point
cpuLoaders_	amun/common/god.h	/^    Loaders cpuLoaders_, gpuLoaders_, fpgaLoaders_;$/;"	m	class:amunmt::God
create	amun/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog::details::registry_t
create	amun/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t
create	amun/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t
create	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, Args... args)$/;"	f	class:spdlog
create	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog
create	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const spdlog::sink_ptr& sink)$/;"	f	class:spdlog
create	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, spdlog::sinks_init_list sinks)$/;"	f	class:spdlog
createThread	amun/3rd_party/blaze/util/ThreadPool.h	/^void ThreadPool<TT,MT,LT,CT>::createThread()$/;"	f	class:blaze::ThreadPool
create_connection	amun/python/test2.py	/^from websocket import create_connection$/;"	i
create_node	amun/3rd_party/yaml-cpp/memory.cpp	/^node& memory::create_node() {$/;"	f	class:YAML::detail::memory
create_node	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^  node& create_node() { return m_pMemory->create_node(); }$/;"	f	class:YAML::detail::memory_holder
create_npy_header	amun/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::vector<char> create_npy_header(const T* data, const unsigned int* shape, const unsigned int ndims) {  $/;"	f	namespace:cnpy
critical	amun/3rd_party/spdlog/common.h	/^    critical = 5,$/;"	e	enum:spdlog::level::__anon34
critical	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T& msg)$/;"	f	class:spdlog::logger
critical	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
cross	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   cross( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
cross	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   cross( const DenseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
cross	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   cross( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
cross	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   cross( const SparseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
cswap_backend	amun/3rd_party/blaze/math/shims/Conjugate.h	/^BLAZE_ALWAYS_INLINE DisableIf_< IsNumeric<T> > cswap_backend( T& a, T& b )$/;"	f	namespace:blaze
ctrans	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const CTransExprTrait_<MT> ctrans( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
ctrans	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const CTransExprTrait_<VT> ctrans( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
ctrans	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const CTransExprTrait_<MT> ctrans( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
ctrans	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const CTransExprTrait_<VT> ctrans( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
ctrans	amun/3rd_party/blaze/math/functors/CTrans.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( ctrans( a ) )$/;"	f	struct:blaze::CTrans
ctrans	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( ctrans( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
ctranspose	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>& HermitianMatrix<MT,SO,true>::ctranspose()$/;"	f	class:blaze::HermitianMatrix
ctranspose	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>& HermitianMatrix<MT,SO,false>::ctranspose()$/;"	f	class:blaze::HermitianMatrix
ctranspose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>& SymmetricMatrix<MT,SO,true,false>::ctranspose()$/;"	f	class:blaze::SymmetricMatrix
ctranspose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>& SymmetricMatrix<MT,SO,true,true>::ctranspose()$/;"	f	class:blaze::SymmetricMatrix
ctranspose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>& SymmetricMatrix<MT,SO,false,false>::ctranspose()$/;"	f	class:blaze::SymmetricMatrix
ctranspose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>& SymmetricMatrix<MT,SO,false,true>::ctranspose()$/;"	f	class:blaze::SymmetricMatrix
ctranspose	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void ctranspose( Matrix<MT,SO>& matrix )$/;"	f	namespace:blaze
ctranspose	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::ctranspose() const$/;"	f	class:blaze::DenseMatrixProxy
ctranspose	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline void ctranspose( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
ctranspose	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::ctranspose() const$/;"	f	class:blaze::SparseMatrixProxy
ctranspose	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>& CompressedMatrix<Type,SO>::ctranspose()$/;"	f	class:blaze::CompressedMatrix
ctranspose	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::ctranspose()$/;"	f	class:blaze::CompressedMatrix
ctranspose	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,false,false>& Submatrix<MT,AF,false,false>::ctranspose()$/;"	f	class:blaze::Submatrix
ctranspose	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,true,false>& Submatrix<MT,AF,true,false>::ctranspose()$/;"	f	class:blaze::Submatrix
cur_	amun/3rd_party/blaze/util/PtrVector.h	/^   IteratorType cur_;  \/\/!< Pointer to the current memory location.$/;"	m	class:blaze::PtrVector::CastIterator
cur_	amun/3rd_party/blaze/util/PtrVector.h	/^   IteratorType cur_;  \/\/!< Pointer to the current memory location.$/;"	m	class:blaze::PtrVector::ConstCastIterator
custom	amun/3rd_party/spdlog/details/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon17
custom	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon51
cyan	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan       = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink
d	amun/3rd_party/fast_align/src/fast_align.cc	/^Dict d; \/\/ integerization map$/;"	v
dBatchMapping_	amun/fpga/decoder.h	/^      Array<int> dBatchMapping_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
dBatchMapping_	amun/gpu/dl4mt/decoder.h	/^        mblas::Vector<unsigned> dBatchMapping_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
d_	amun/3rd_party/fast_align/src/corpus.h	/^  MAP_TYPE d_;$/;"	m	class:Dict
d_batchPosition	amun/gpu/mblas/nth_element.h	/^    mblas::Vector<unsigned> d_batchPosition;$/;"	m	class:amunmt::GPU::NthElement
d_breakdown	amun/gpu/mblas/nth_element.h	/^    mblas::Vector<float> d_breakdown;$/;"	m	class:amunmt::GPU::NthElement
d_cumBeamSizes	amun/gpu/mblas/nth_element.h	/^    mblas::Vector<unsigned> d_cumBeamSizes;$/;"	m	class:amunmt::GPU::NthElement
d_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class d_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
d_ind	amun/fpga/nth_element.h	/^  Array<unsigned> d_ind;$/;"	m	class:amunmt::FPGA::NthElement
d_out	amun/fpga/nth_element.h	/^  Array<float> d_out;$/;"	m	class:amunmt::FPGA::NthElement
d_out	amun/gpu/mblas/nth_element.h	/^    mblas::Vector<NthOut> d_out;$/;"	m	class:amunmt::GPU::NthElement
d_res	amun/gpu/mblas/nth_element.h	/^    mblas::Vector<NthOut> d_res;$/;"	m	class:amunmt::GPU::NthElement
daily_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    daily_file_sink($/;"	f	class:spdlog::sinks::daily_file_sink
daily_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^class daily_file_sink :public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
daily_file_sink_mt	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<std::mutex> daily_file_sink_mt;$/;"	t	namespace:spdlog::sinks
daily_file_sink_st	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<details::null_mutex> daily_file_sink_st;$/;"	t	namespace:spdlog::sinks
daily_logger_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
daily_logger_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
dark	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark       = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink
data	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline typename DenseMatrixProxy<PT,MT>::Pointer DenseMatrixProxy<PT,MT>::data( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
data	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline typename DenseMatrixProxy<PT,MT>::Pointer DenseMatrixProxy<PT,MT>::data() const$/;"	f	class:blaze::DenseMatrixProxy
data	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline typename DenseVectorProxy<PT,VT>::Pointer DenseVectorProxy<PT,VT>::data() const$/;"	f	class:blaze::DenseVectorProxy
data	amun/3rd_party/cnpy/cnpy.h	/^        char* data;$/;"	m	struct:cnpy::NpyArray
data	amun/3rd_party/spdlog/details/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef
data	amun/3rd_party/spdlog/details/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	amun/3rd_party/spdlog/details/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt
data	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef
data	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt
data	amun/3rd_party/yaml-cpp/binary.h	/^  const unsigned char *data() const {$/;"	f	class:YAML::Binary
data	amun/3rd_party/yaml-cpp/token.h	/^  int data;$/;"	m	struct:YAML::Token
data	amun/cpu/npz_converter.h	/^        float* data() const {$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
data	amun/fpga/array.h	/^  const cl_mem &data() const$/;"	f	class:amunmt::FPGA::Array
data	amun/fpga/matrix.h	/^  const cl_mem &data() const$/;"	f	class:amunmt::FPGA::mblas::Matrix
data	amun/fpga/npz_converter.h	/^    float* data() const {$/;"	f	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
data	amun/gpu/mblas/tensor.h	/^    const value_type* data() const {$/;"	f	class:amunmt::GPU::mblas::TTensor
data	amun/gpu/mblas/tensor.h	/^    value_type* data() {$/;"	f	class:amunmt::GPU::mblas::TTensor
data	amun/gpu/mblas/tensor_wrapper.h	/^  T* data()$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
data	amun/gpu/mblas/tensor_wrapper.h	/^  const T* data() const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
data	amun/gpu/mblas/vector.h	/^  T *data()$/;"	f	class:amunmt::GPU::mblas::Vector
data	amun/gpu/mblas/vector.h	/^  const T *data() const$/;"	f	class:amunmt::GPU::mblas::Vector
data	amun/gpu/mblas/vector_wrapper.h	/^  T* data()$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
data	amun/gpu/mblas/vector_wrapper.h	/^  const T* data() const$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
data	amun/gpu/npz_converter.h	/^        float* data() const {$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
dataConst_	amun/gpu/mblas/tensor_wrapper.h	/^  const T *dataConst_;$/;"	m	class:amunmt::GPU::mblas::TensorWrapper
dataConst_	amun/gpu/mblas/vector_wrapper.h	/^  const T *dataConst_;$/;"	m	class:amunmt::GPU::mblas::VectorWrapper
data_	amun/3rd_party/fast_align/src/array2d.h	/^  std::vector<T> data_;$/;"	m	class:Array2D
data_	amun/3rd_party/spdlog/details/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer
data_	amun/3rd_party/spdlog/details/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef
data_	amun/3rd_party/spdlog/details/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef
data_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^        T                     data_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
data_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer
data_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef
data_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef
data_	amun/cpu/decoder/best_hyps.cpp	/^  const float* data_;$/;"	m	struct:amunmt::CPU::ProbCompare	file:
data_	amun/cpu/mblas/tensor.h	/^    std::vector<value_type> data_;$/;"	m	class:amunmt::CPU::mblas::BlazeMatrix
data_	amun/gpu/mblas/tensor_wrapper.h	/^  T *data_;$/;"	m	class:amunmt::GPU::mblas::TensorWrapper
data_	amun/gpu/mblas/vector.h	/^  T *data_;$/;"	m	class:amunmt::GPU::mblas::Vector
data_	amun/gpu/mblas/vector_wrapper.h	/^  T *data_;$/;"	m	class:amunmt::GPU::mblas::VectorWrapper
data_	amun/plugin/nbest.h	/^    std::vector<std::vector<std::string> > data_;$/;"	m	class:NBest
dateonly_daily_file_name_calculator	amun/3rd_party/spdlog/sinks/file_sinks.h	/^struct dateonly_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
days	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const days_array& days()$/;"	f	namespace:spdlog::details
deallocate	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline void AlignedAllocator<Type>::deallocate( Pointer ptr, size_t numObjects )$/;"	f	class:blaze::AlignedAllocator
deallocate	amun/3rd_party/blaze/util/Memory.h	/^DisableIf_< IsBuiltin<T> > deallocate( T* address )$/;"	f	namespace:blaze
deallocate	amun/3rd_party/spdlog/details/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer
deallocate	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer
debug	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   debug    = 5,  \/\/!< Log level for debug information.$/;"	e	enum:blaze::logging::LogLevel
debug	amun/3rd_party/spdlog/common.h	/^    debug = 1,$/;"	e	enum:spdlog::level::__anon34
debug	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T& msg)$/;"	f	class:spdlog::logger
debug	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
decAlignment_	amun/fpga/model.h	/^  DecAlignment decAlignment_;$/;"	m	struct:amunmt::FPGA::Weights
decAlignment_	amun/gpu/dl4mt/model.h	/^  const DecAlignment decAlignment_;$/;"	m	struct:amunmt::GPU::Weights
decAttention_	amun/cpu/dl4mt/model.h	/^  const DecAttention decAttention_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decAttention_	amun/cpu/nematus/model.h	/^  const DecAttention decAttention_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decEmbeddings_	amun/cpu/dl4mt/model.h	/^  const Embeddings decEmbeddings_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decEmbeddings_	amun/cpu/nematus/model.h	/^  const Embeddings decEmbeddings_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decEmbeddings_	amun/fpga/model.h	/^  DecEmbeddings decEmbeddings_;$/;"	m	struct:amunmt::FPGA::Weights
decEmbeddings_	amun/gpu/dl4mt/model.h	/^  const DecEmbeddings decEmbeddings_;$/;"	m	struct:amunmt::GPU::Weights
decGru1_	amun/cpu/dl4mt/model.h	/^  const GRU decGru1_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decGru1_	amun/cpu/nematus/model.h	/^  const GRU decGru1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decGru1_	amun/fpga/model.h	/^  DecGRU1 decGru1_;$/;"	m	struct:amunmt::FPGA::Weights
decGru1_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<DecGRU1> decGru1_;$/;"	m	struct:amunmt::GPU::Weights
decGru2_	amun/cpu/dl4mt/model.h	/^  const DecGRU2 decGru2_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decGru2_	amun/cpu/nematus/model.h	/^  const DecGRU2 decGru2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decGru2_	amun/fpga/model.h	/^  DecGRU2 decGru2_;$/;"	m	struct:amunmt::FPGA::Weights
decGru2_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<DecGRU2> decGru2_;$/;"	m	struct:amunmt::GPU::Weights
decInit_	amun/cpu/dl4mt/model.h	/^  const DecInit decInit_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decInit_	amun/cpu/nematus/model.h	/^  const DecInit decInit_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decInit_	amun/fpga/model.h	/^  DecInit decInit_;$/;"	m	struct:amunmt::FPGA::Weights
decInit_	amun/gpu/dl4mt/model.h	/^  const DecInit decInit_;$/;"	m	struct:amunmt::GPU::Weights
decLSTM1_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<DecLSTM1> decLSTM1_;$/;"	m	struct:amunmt::GPU::Weights
decLSTM2_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<DecLSTM2> decLSTM2_;$/;"	m	struct:amunmt::GPU::Weights
decMLSTM1_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<MultWeights<DecLSTM1>> decMLSTM1_;$/;"	m	struct:amunmt::GPU::Weights
decMLSTM2_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<MultWeights<DecLSTM2>> decMLSTM2_;$/;"	m	struct:amunmt::GPU::Weights
decSoftmax_	amun/cpu/dl4mt/model.h	/^  const DecSoftmax decSoftmax_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
decSoftmax_	amun/cpu/nematus/model.h	/^  const DecSoftmax decSoftmax_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decSoftmax_	amun/fpga/model.h	/^  DecSoftmax decSoftmax_;$/;"	m	struct:amunmt::FPGA::Weights
decSoftmax_	amun/gpu/dl4mt/model.h	/^  const DecSoftmax decSoftmax_;$/;"	m	struct:amunmt::GPU::Weights
decTransition_	amun/cpu/nematus/model.h	/^  const Transition decTransition_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
decltype	amun/3rd_party/thrust_bind/bind.hpp	/^      -> decltype($/;"	f	class:thrust::experimental::detail::bind_detail::bind_expression
decode	amun/3rd_party/yaml-cpp/convert.cpp	/^bool convert<bool>::decode(const Node& node, bool& rhs) {$/;"	f	class:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, Binary& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, Node& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, _Null& \/* rhs *\/) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::list<T>& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::map<K, V>& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::pair<T, U>& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::string& rhs) {$/;"	f	struct:YAML::convert
decode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::vector<T>& rhs) {$/;"	f	struct:YAML::convert
decoder_	amun/cpu/dl4mt/encoder_decoder.h	/^    std::unique_ptr<Decoder> decoder_;$/;"	m	class:amunmt::CPU::dl4mt::EncoderDecoder
decoder_	amun/cpu/nematus/encoder_decoder.h	/^    std::unique_ptr<Nematus::Decoder> decoder_;$/;"	m	class:amunmt::CPU::Nematus::EncoderDecoder
decoder_	amun/fpga/encoder_decoder.h	/^  std::unique_ptr<Decoder> decoder_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
decoder_	amun/gpu/decoder/encoder_decoder.h	/^    std::unique_ptr<Decoder> decoder_;$/;"	m	class:amunmt::GPU::EncoderDecoder
decoding	amun/3rd_party/yaml-cpp/binary.cpp	/^static const unsigned char decoding[] = {$/;"	m	namespace:YAML	file:
defaultAlignment	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t defaultAlignment = std::alignment_of<T>::value;$/;"	m	struct:blaze::AlignmentOfHelper
defaultSeed	amun/3rd_party/blaze/util/Random.h	/^inline uint32_t defaultSeed()$/;"	f	namespace:blaze
defaultStorageOrder	amun/3rd_party/blaze/config/StorageOrder.h	/^constexpr bool defaultStorageOrder = rowMajor;$/;"	m	namespace:blaze
defaultTransposeFlag	amun/3rd_party/blaze/config/TransposeFlag.h	/^constexpr bool defaultTransposeFlag = columnVector;$/;"	m	namespace:blaze
default_daily_file_name_calculator	amun/3rd_party/spdlog/sinks/file_sinks.h	/^struct default_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
deleteElement	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::deleteElement( PointerType ptr ) const$/;"	f	class:blaze::PtrVector
dependency_	amun/3rd_party/blaze/util/singleton/Dependency.h	/^   std::shared_ptr<T> dependency_;  \/\/!< Handle to the lifetime dependency.$/;"	m	class:blaze::Dependency
depth_	amun/cpu/nematus/model.h	/^      int depth_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
dequeue	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    bool dequeue(T& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
dequeue_pos_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     dequeue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
derestrict	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline MT& derestrict( DiagonalMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline MT& derestrict( LowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline MT& derestrict( StrictlyLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline MT& derestrict( StrictlyUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline MT& derestrict( UniLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline MT& derestrict( UniUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline MT& derestrict( UpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE MT& derestrict( Matrix<MT,SO>& matrix )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE VT& derestrict( Vector<VT,TF>& vector )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/views/Column.h	/^inline DerestrictTrait_< Column<MT,SO,DF,SF> > derestrict( Column<MT,SO,DF,SF>& column )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/views/Row.h	/^inline DerestrictTrait_< Row<MT,SO,DF,SF> > derestrict( Row<MT,SO,DF,SF>& row )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline DerestrictTrait_< Submatrix<MT,AF,SO,DF> > derestrict( Submatrix<MT,AF,SO,DF>& dm )$/;"	f	namespace:blaze
derestrict	amun/3rd_party/blaze/math/views/Subvector.h	/^inline DerestrictTrait_< Subvector<VT,AF,TF,DF> > derestrict( Subvector<VT,AF,TF,DF>& sv )$/;"	f	namespace:blaze
deserialize	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserialize( Archive& archive, Matrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserialize	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void deserialize( Archive& archive, Matrix<MT,SO>& mat )$/;"	f	namespace:blaze
deserialize	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserialize( Archive& archive, Vector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
deserialize	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void deserialize( Archive& archive, Vector<VT,TF>& vec )$/;"	f	namespace:blaze
deserializeDenseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   MatrixSerializer::deserializeDenseColumnMatrix( Archive& archive, DenseMatrix<MT,columnMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   MatrixSerializer::deserializeDenseColumnMatrix( Archive& archive, SparseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeDenseColumnMatrix( Archive& archive, DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   MatrixSerializer::deserializeDenseRowMatrix( Archive& archive, DenseMatrix<MT,rowMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   MatrixSerializer::deserializeDenseRowMatrix( Archive& archive, SparseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeDenseRowMatrix( Archive& archive, DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeDenseVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   VectorSerializer::deserializeDenseVector( Archive& archive, DenseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
deserializeDenseVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserializeDenseVector( Archive& archive, SparseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
deserializeHeader	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeHeader( Archive& archive, const MT& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeHeader	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserializeHeader( Archive& archive, const VT& vec )$/;"	f	class:blaze::VectorSerializer
deserializeMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeMatrix( Archive& archive, MT& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseColumnMatrix( Archive& archive, DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseColumnMatrix( Archive& archive, SparseMatrix<MT,columnMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseColumnMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseColumnMatrix( Archive& archive, SparseMatrix<MT,rowMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseRowMatrix( Archive& archive, DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseRowMatrix( Archive& archive, SparseMatrix<MT,columnMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseRowMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::deserializeSparseRowMatrix( Archive& archive, SparseMatrix<MT,rowMajor>& mat )$/;"	f	class:blaze::MatrixSerializer
deserializeSparseVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserializeSparseVector( Archive& archive, DenseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
deserializeSparseVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserializeSparseVector( Archive& archive, SparseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
deserializeVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::deserializeVector( Archive& archive, VT& vec )$/;"	f	class:blaze::VectorSerializer
destruct	amun/3rd_party/cnpy/cnpy.h	/^        void destruct() {delete[] data;}$/;"	f	struct:cnpy::NpyArray
destruct	amun/3rd_party/cnpy/cnpy.h	/^        void destruct()$/;"	f	struct:cnpy::npz_t
destructed_	amun/cpu/npz_converter.h	/^    bool destructed_;$/;"	m	class:amunmt::CPU::NpzConverter
destructed_	amun/gpu/npz_converter.h	/^    bool destructed_;$/;"	m	class:amunmt::GPU::NpzConverter
det	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
det2x2	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det2x2( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
det3x3	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det3x3( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
det4x4	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det4x4( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
det5x5	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det5x5( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
det6x6	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^inline ElementType_<MT> det6x6( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
detNxN	amun/3rd_party/blaze/math/expressions/DMatDetExpr.h	/^ElementType_<MT> detNxN( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
detail	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   detail   = 6   \/\/!< Log level for detail information.$/;"	e	enum:blaze::logging::LogLevel
detail	amun/3rd_party/thrust_bind/bind.hpp	/^namespace detail$/;"	n	namespace:thrust::experimental
detail	amun/3rd_party/yaml-cpp/memory.cpp	/^namespace detail {$/;"	n	namespace:YAML	file:
detail	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/node.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/impl.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/node.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node/ptr.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/node_data.cpp	/^namespace detail {$/;"	n	namespace:YAML	file:
detail	amun/3rd_party/yaml-cpp/nodebuilder.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/3rd_party/yaml-cpp/nodeevents.h	/^namespace detail {$/;"	n	namespace:YAML
detail	amun/gpu/mblas/thrust_functions.h	/^  namespace detail$/;"	n	namespace:thrust
details	amun/3rd_party/spdlog/async_logger.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/common.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/async_log_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/file_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/log_msg.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/null_mutex.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/os.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/details/registry.h	/^namespace details$/;"	n	namespace:spdlog
details	amun/3rd_party/spdlog/formatter.h	/^namespace details$/;"	n	namespace:spdlog
detectIndent	amun/3rd_party/yaml-cpp/scanscalar.h	/^  bool detectIndent;  \/\/ should we try to autodetect the indent?$/;"	m	struct:YAML::ScanScalarParams
device	amun/fpga/types-fpga.h	/^  cl_device_id device;$/;"	m	struct:OpenCLInfo
deviceId	amun/common/types.h	/^  unsigned deviceId;$/;"	m	struct:amunmt::DeviceInfo
deviceInfo_	amun/common/search.h	/^    DeviceInfo deviceInfo_;$/;"	m	class:amunmt::Search
deviceType	amun/common/types.h	/^  DeviceType deviceType;$/;"	m	struct:amunmt::DeviceInfo
device_	amun/gpu/dl4mt/model.h	/^  const unsigned device_;$/;"	m	struct:amunmt::GPU::Weights
devices	amun/fpga/types-fpga.h	/^  cl_device_id devices[100];$/;"	m	struct:OpenCLInfo
diagonal_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   const bool diagonal_;  \/\/!< Flag for the accessed matrix element.$/;"	m	class:blaze::HermitianProxy
diagonal_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   bool    diagonal_;  \/\/!< \\a true in case the element is on the diagonal, \\a false if not.$/;"	m	class:blaze::UniLowerElement
diagonal_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   bool             diagonal_;  \/\/!< \\a true in case the element is on the diagonal, \\a false if not.$/;"	m	class:blaze::UniLowerValue
diagonal_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   bool    diagonal_;  \/\/!< \\a true in case the element is on the diagonal, \\a false if not.$/;"	m	class:blaze::UniUpperElement
diagonal_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   bool             diagonal_;  \/\/!< \\a true in case the element is on the diagonal, \\a false if not.$/;"	m	class:blaze::UniUpperValue
diagonal_tension	amun/3rd_party/fast_align/src/fast_align.cc	/^double diagonal_tension = 4.0;$/;"	v
difference_type	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DiagonalMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::HermitianMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::HermitianMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::LowerMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
difference_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
difference_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SymmetricMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniLowerMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniLowerMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniUpperMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UniUpperMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::UpperMatrix::Iterator
difference_type	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DenseIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:ConstIterator
difference_type	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
difference_type	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Column::ColumnIterator
difference_type	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Row::RowIterator
difference_type	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
difference_type	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
difference_type	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Subvector::SubvectorIterator
difference_type	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef DifferenceType    difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::Subvector::SubvectorIterator
difference_type	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef DifferenceType  difference_type;  \/\/!< Difference type of the aligned allocator.$/;"	t	class:blaze::AlignedAllocator
difference_type	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef DifferenceType                   difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrIterator
difference_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef DifferenceType             difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrVector::CastIterator
difference_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef DifferenceType             difference_type;    \/\/!< Difference between two iterators.$/;"	t	class:blaze::PtrVector::ConstCastIterator
digamma	amun/3rd_party/fast_align/src/ttables.h	/^  static double digamma(double x) {$/;"	f	struct:Md
digit_index_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    unsigned digit_index_;$/;"	m	class:fmt::internal::ThousandsSep
dim	amun/cpu/mblas/tensor.h	/^    virtual unsigned dim(unsigned i) const$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
dim	amun/cpu/mblas/tensor.h	/^  virtual unsigned dim(unsigned i) const$/;"	f	class:amunmt::CPU::mblas::Tensor
dim	amun/fpga/matrix.h	/^  virtual size_t dim(size_t i) const$/;"	f	class:amunmt::FPGA::mblas::Matrix
dim	amun/gpu/mblas/tensor.h	/^    virtual unsigned dim(unsigned i) const$/;"	f	class:amunmt::GPU::mblas::TTensor
dim	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned dim(unsigned i) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
dimUInt	amun/fpga/matrix.h	/^  const uint &dimUInt(size_t i) const$/;"	f	class:amunmt::FPGA::mblas::Matrix
dim_	amun/gpu/mblas/tensor.h	/^    unsigned dim_[SHAPE_SIZE];$/;"	m	class:amunmt::GPU::mblas::TTensor
dim_	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned dim_[SHAPE_SIZE];$/;"	m	class:amunmt::GPU::mblas::TensorWrapper
dims_	amun/fpga/matrix.h	/^  uint dims_[SHAPE_SIZE];$/;"	m	class:amunmt::FPGA::mblas::Matrix
disable	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::disable()$/;"	f	class:spdlog::details::line_logger
disable_if	amun/3rd_party/yaml-cpp/traits.h	/^struct disable_if : public disable_if_c<Cond::value, T> {};$/;"	s	namespace:YAML
disable_if_c	amun/3rd_party/yaml-cpp/traits.h	/^struct disable_if_c {$/;"	s	namespace:YAML
disable_if_c	amun/3rd_party/yaml-cpp/traits.h	/^struct disable_if_c<true, T> {};$/;"	s	namespace:YAML
dist_sink	amun/3rd_party/spdlog/sinks/dist_sink.h	/^    explicit dist_sink() :_sinks() {}$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	amun/3rd_party/spdlog/sinks/dist_sink.h	/^class dist_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink_mt	amun/3rd_party/spdlog/sinks/dist_sink.h	/^typedef dist_sink<std::mutex> dist_sink_mt;$/;"	t	namespace:spdlog::sinks
dist_sink_st	amun/3rd_party/spdlog/sinks/dist_sink.h	/^typedef dist_sink<details::null_mutex> dist_sink_st;$/;"	t	namespace:spdlog::sinks
distance	amun/3rd_party/utf8/checked.h	/^    distance (octet_iterator first, octet_iterator last)$/;"	f	namespace:utf8
distance	amun/3rd_party/utf8/unchecked.h	/^        distance (octet_iterator first, octet_iterator last)$/;"	f	namespace:utf8::unchecked
divAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void divAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
divAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      divAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      divAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      divAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      divAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      divAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void divAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void divAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      divAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      divAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      divAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void divAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void divAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      divAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
divAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void divAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
divAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      divAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
divAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
divAssign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void divAssign( DenseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
divAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void divAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
divAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void divAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
divAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void divAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void divAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
divAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      divAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void divAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      divAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
divAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void divAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
divAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::divAssign( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
dl4mt	amun/cpu/decoder/encoder_decoder_loader.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mt	amun/cpu/dl4mt/decoder.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mt	amun/cpu/dl4mt/encoder.cpp	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU	file:
dl4mt	amun/cpu/dl4mt/encoder.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mt	amun/cpu/dl4mt/encoder_decoder.cpp	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU	file:
dl4mt	amun/cpu/dl4mt/encoder_decoder.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mt	amun/cpu/dl4mt/gru.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mt	amun/cpu/dl4mt/model.cpp	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU	file:
dl4mt	amun/cpu/dl4mt/model.h	/^namespace dl4mt {$/;"	n	namespace:amunmt::CPU
dl4mtModels_	amun/cpu/decoder/encoder_decoder_loader.h	/^    std::vector<std::unique_ptr<dl4mt::Weights>> dl4mtModels_;$/;"	m	class:amunmt::CPU::EncoderDecoderLoader
dm_	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^      : dm_( dm )  \/\/ Dense matrix of the evaluation expression$/;"	f	class:blaze::DMatEvalExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   Operand dm_;  \/\/!< Dense matrix of the evaluation expression.$/;"	m	class:blaze::DMatEvalExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   Operand   dm_;  \/\/!< Dense matrix of the for-each expression.$/;"	m	class:blaze::DMatForEachExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^      : dm_( dm )  \/\/ Dense matrix of the inversion expression$/;"	f	class:blaze::DMatInvExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   Operand dm_;  \/\/!< Dense matrix of the inversion expression.$/;"	m	class:blaze::DMatInvExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^      : dm_( dm )  \/\/ Dense matrix of the serial evaluation expression$/;"	f	class:blaze::DMatSerialExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   Operand dm_;  \/\/!< Dense matrix of the serial evaluation expression.$/;"	m	class:blaze::DMatSerialExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      : dm_( dm )  \/\/ Dense matrix of the transposition expression$/;"	f	class:blaze::DMatTransExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   Operand dm_;  \/\/!< Dense matrix of the transposition expression.$/;"	m	class:blaze::DMatTransExpr
dm_	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^      : dm_( dm )  \/\/ The dense matrix operand$/;"	f	class:blaze::DMatTransposer
dm_	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   MT& dm_;  \/\/!< The dense matrix operand.$/;"	m	class:blaze::DMatTransposer
do_get_arg	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC Arg fmt::internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase
do_get_arg	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC Arg internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase
dot	amun/3rd_party/blaze/math/Vector.h	/^   dot( const Vector<T1,false>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/Vector.h	/^   dot( const Vector<T1,false>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/Vector.h	/^   dot( const Vector<T1,true>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/Vector.h	/^   dot( const Vector<T1,true>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/blas/dot.h	/^BLAZE_ALWAYS_INLINE complex<double> dot( const int n, const complex<double>* x, const int incX,$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/blas/dot.h	/^BLAZE_ALWAYS_INLINE complex<float> dot( const int n, const complex<float>* x, const int incX,$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/blas/dot.h	/^BLAZE_ALWAYS_INLINE double dot( const int n, const double* x, const int incX,$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/blas/dot.h	/^BLAZE_ALWAYS_INLINE float dot( const int n, const float* x, const int incX,$/;"	f	namespace:blaze
dot	amun/3rd_party/blaze/math/blas/dot.h	/^ElementType_<VT1> dot( const DenseVector<VT1,TF1>& x, const DenseVector<VT2,TF2>& y )$/;"	f	namespace:blaze
doublePrecision	amun/3rd_party/yaml-cpp/emittermanip.h	/^  int doublePrecision;$/;"	m	struct:YAML::_Precision
double_value	amun/3rd_party/spdlog/details/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon17
double_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon51
drop	amun/3rd_party/spdlog/details/registry.h	/^    void drop(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
drop	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop(const std::string &name)$/;"	f	class:spdlog
drop_all	amun/3rd_party/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry_t
drop_all	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop_all()$/;"	f	class:spdlog
dummy_	amun/3rd_party/blaze/util/MemoryPool.h	/^      byte_t dummy_[ sizeof(Type) ];  \/\/!< Dummy array to create an object of the appropriate size.$/;"	m	union:blaze::MemoryPool::FreeObject
dv_	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^      : dv_( dv )  \/\/ Dense vector of the evaluation expression$/;"	f	class:blaze::DVecEvalExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   Operand dv_;  \/\/!< Dense vector of the evaluation expression.$/;"	m	class:blaze::DVecEvalExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   Operand   dv_;  \/\/!< Dense vector of the for-each expression.$/;"	m	class:blaze::DVecForEachExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^      : dv_( dv )  \/\/ Dense vector of the serial evaluation expression$/;"	f	class:blaze::DVecSerialExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   Operand dv_;  \/\/!< Dense vector of the serial evaluation expression.$/;"	m	class:blaze::DVecSerialExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      : dv_( dv )  \/\/ Dense vector of the transposition expression$/;"	f	class:blaze::DVecTransExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   Operand dv_;  \/\/!< Dense vector of the transposition expression.$/;"	m	class:blaze::DVecTransExpr
dv_	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^      : dv_( dv )  \/\/ The dense vector operand$/;"	f	class:blaze::DVecTransposer
dv_	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   VT& dv_;  \/\/!< The dense vector operand.$/;"	m	class:blaze::DVecTransposer
dynamic_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline S<To> dynamic_pointer_cast( S<From> ptr )$/;"	f	namespace:blaze
dynamic_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline To* dynamic_pointer_cast( From* ptr )$/;"	f	namespace:blaze
e_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class e_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
eat	amun/3rd_party/yaml-cpp/stream.cpp	/^void Stream::eat(int n) {$/;"	f	class:YAML::Stream
eatEnd	amun/3rd_party/yaml-cpp/scanscalar.h	/^  bool eatEnd;        \/\/ should we eat that condition when we see it?$/;"	m	struct:YAML::ScanScalarParams
eatLeadingWhitespace	amun/3rd_party/yaml-cpp/scanscalar.h	/^  bool eatLeadingWhitespace;  \/\/ should we continue eating this delicious$/;"	m	struct:YAML::ScanScalarParams
elapsed	amun/3rd_party/blaze/util/SystemClock.h	/^inline time_t SystemClock::elapsed() const$/;"	f	class:blaze::SystemClock
elementSize_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint8_t  elementSize_;  \/\/!< The size in bytes of a single element of the matrix.$/;"	m	class:blaze::MatrixSerializer
elementSize_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint8_t  elementSize_;  \/\/!< The size in bytes of a single element of the vector.$/;"	m	class:blaze::VectorSerializer
elementType_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint8_t  elementType_;  \/\/!< The type of an element.$/;"	m	class:blaze::MatrixSerializer
elementType_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint8_t  elementType_;  \/\/!< The type of an element.$/;"	m	class:blaze::VectorSerializer
embeddedWords_	amun/fpga/encoder.h	/^  std::vector<mblas::Tensor> embeddedWords_;$/;"	m	class:amunmt::FPGA::Encoder
embeddedWords_	amun/gpu/dl4mt/encoder.h	/^    std::vector<mblas::Tensor> embeddedWords_;$/;"	m	class:amunmt::GPU::Encoder
embeddings_	amun/cpu/decoder/encoder_decoder_state.h	/^    CPU::mblas::Tensor embeddings_;$/;"	m	class:amunmt::CPU::EncoderDecoderState
embeddings_	amun/cpu/dl4mt/decoder.h	/^    Embeddings<Weights::Embeddings> embeddings_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
embeddings_	amun/cpu/dl4mt/encoder.h	/^    Embeddings<Weights::Embeddings> embeddings_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder
embeddings_	amun/cpu/nematus/decoder.h	/^    Embeddings<Weights::Embeddings> embeddings_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
embeddings_	amun/cpu/nematus/encoder.h	/^    Embeddings<Weights::Embeddings> embeddings_;$/;"	m	class:amunmt::CPU::Nematus::Encoder
embeddings_	amun/fpga/decoder.h	/^  Embeddings<Weights::DecEmbeddings> embeddings_;$/;"	m	class:amunmt::FPGA::Decoder
embeddings_	amun/fpga/encoder.h	/^  Embeddings<Weights::EncEmbeddings> embeddings_;$/;"	m	class:amunmt::FPGA::Encoder
embeddings_	amun/fpga/encoder_decoder_state.h	/^  mblas::Tensor embeddings_;$/;"	m	class:amunmt::FPGA::EncoderDecoderState
embeddings_	amun/gpu/decoder/encoder_decoder_state.h	/^    mblas::Tensor embeddings_;$/;"	m	class:amunmt::GPU::EncoderDecoderState
embeddings_	amun/gpu/dl4mt/decoder.h	/^    Embeddings<Weights::DecEmbeddings> embeddings_;$/;"	m	class:amunmt::GPU::Decoder
embeddings_	amun/gpu/dl4mt/encoder.h	/^    Embeddings<Weights::EncEmbeddings> embeddings_;$/;"	m	class:amunmt::GPU::Encoder
empty	amun/3rd_party/blaze/util/InputString.h	/^inline bool InputString::empty() const$/;"	f	class:blaze::InputString
empty	amun/3rd_party/fast_align/src/array2d.h	/^  bool empty() const { return data_.empty(); }$/;"	f	class:Array2D
empty	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  bool empty() const { return m_data.empty(); }$/;"	f	class:YAML::ptr_vector
empty	amun/3rd_party/yaml-cpp/scanner.cpp	/^bool Scanner::empty() {$/;"	f	class:YAML::Scanner
empty	amun/common/base_tensor.h	/^    bool empty() const {$/;"	f	class:amunmt::BaseTensor
empty_scalar	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  static std::string empty_scalar;$/;"	m	class:YAML::detail::node_data
empty_scalar	amun/3rd_party/yaml-cpp/node_data.cpp	/^std::string node_data::empty_scalar;$/;"	m	class:YAML::detail::node_data	file:
enable_conversion	amun/3rd_party/spdlog/details/format.h	/^        enable_conversion = sizeof(convert(get<T>())) == sizeof(Yes)$/;"	e	enum:fmt::internal::ConvertToInt::__anon22
enable_conversion	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        enable_conversion = sizeof(fmt::internal::convert(get<T>())) == sizeof(Yes)$/;"	e	enum:fmt::internal::ConvertToInt::__anon55
enable_if	amun/3rd_party/yaml-cpp/traits.h	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:YAML
enable_if_c	amun/3rd_party/yaml-cpp/traits.h	/^struct enable_if_c {$/;"	s	namespace:YAML
enable_if_c	amun/3rd_party/yaml-cpp/traits.h	/^struct enable_if_c<false, T> {};$/;"	s	namespace:YAML
enabler	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  struct enabler {};$/;"	s	class:YAML::detail::iterator_base
enabler	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  struct enabler {};$/;"	s	class:YAML::detail::node_iterator_base
encBackwardGRU_	amun/cpu/dl4mt/model.h	/^  const GRU encBackwardGRU_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
encBackwardGRU_	amun/cpu/nematus/model.h	/^  const GRU encBackwardGRU_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
encBackwardGRU_	amun/fpga/model.h	/^  EncBackwardGRU encBackwardGRU_;$/;"	m	struct:amunmt::FPGA::Weights
encBackwardGRU_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<EncBackwardGRU> encBackwardGRU_;$/;"	m	struct:amunmt::GPU::Weights
encBackwardLSTM_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<EncBackwardLSTM> encBackwardLSTM_;$/;"	m	struct:amunmt::GPU::Weights
encBackwardMLSTM_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<MultWeights<EncBackwardLSTM>> encBackwardMLSTM_;$/;"	m	struct:amunmt::GPU::Weights
encBackwardTransition_	amun/cpu/nematus/model.h	/^  const Transition encBackwardTransition_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
encEmbeddings_	amun/cpu/dl4mt/model.h	/^  const Embeddings encEmbeddings_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
encEmbeddings_	amun/cpu/nematus/model.h	/^  const Embeddings encEmbeddings_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
encEmbeddings_	amun/fpga/model.h	/^  EncEmbeddings encEmbeddings_;$/;"	m	struct:amunmt::FPGA::Weights
encEmbeddings_	amun/gpu/dl4mt/model.h	/^  const EncEmbeddings encEmbeddings_;$/;"	m	struct:amunmt::GPU::Weights
encForwardGRU_	amun/cpu/dl4mt/model.h	/^  const GRU encForwardGRU_;$/;"	m	struct:amunmt::CPU::dl4mt::Weights
encForwardGRU_	amun/cpu/nematus/model.h	/^  const GRU encForwardGRU_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
encForwardGRU_	amun/fpga/model.h	/^  EncForwardGRU encForwardGRU_;$/;"	m	struct:amunmt::FPGA::Weights
encForwardGRU_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<EncForwardGRU> encForwardGRU_;$/;"	m	struct:amunmt::GPU::Weights
encForwardLSTM_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<EncForwardLSTM> encForwardLSTM_;$/;"	m	struct:amunmt::GPU::Weights
encForwardMLSTM_	amun/gpu/dl4mt/model.h	/^  std::shared_ptr<MultWeights<EncForwardLSTM>> encForwardMLSTM_;$/;"	m	struct:amunmt::GPU::Weights
encForwardTransition_	amun/cpu/nematus/model.h	/^  const Transition encForwardTransition_;$/;"	m	struct:amunmt::CPU::Nematus::Weights
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(bool rhs) { return rhs ? Node("true") : Node("false"); }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const Binary& rhs) {$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const Node& rhs) { return rhs; }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const _Null& \/* rhs *\/) { return Node(); }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const char(&rhs)[N]) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const char*& rhs) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::list<T>& rhs) {$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::map<K, V>& rhs) {$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::pair<T, U>& rhs) {$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::string& rhs) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	amun/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::vector<T>& rhs) {$/;"	f	struct:YAML::convert
encoder_	amun/cpu/dl4mt/encoder_decoder.h	/^    std::unique_ptr<Encoder> encoder_;$/;"	m	class:amunmt::CPU::dl4mt::EncoderDecoder
encoder_	amun/cpu/nematus/encoder_decoder.h	/^    std::unique_ptr<Nematus::Encoder> encoder_;$/;"	m	class:amunmt::CPU::Nematus::EncoderDecoder
encoder_	amun/fpga/encoder_decoder.h	/^  std::unique_ptr<Encoder> encoder_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
encoder_	amun/gpu/decoder/encoder_decoder.h	/^    std::unique_ptr<Encoder> encoder_;$/;"	m	class:amunmt::GPU::EncoderDecoder
encoding	amun/3rd_party/yaml-cpp/binary.cpp	/^static const char encoding[] =$/;"	m	namespace:YAML	file:
end	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
end	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::DiagonalMatrix
end	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
end	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::DiagonalMatrix
end	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
end	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::HermitianMatrix
end	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
end	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::HermitianMatrix
end	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::LowerMatrix
end	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::LowerMatrix
end	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::LowerMatrix
end	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::LowerMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::end( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::end( size_t i )$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::end( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::end( size_t i )$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::end( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::end( size_t i )$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::end( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::end( size_t i )$/;"	f	class:blaze::SymmetricMatrix
end	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::UniLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::UniLowerMatrix
end	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::UniUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::UniUpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::end( size_t i ) const$/;"	f	class:blaze::UpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::end( size_t i )$/;"	f	class:blaze::UpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::end( size_t i ) const$/;"	f	class:blaze::UpperMatrix
end	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::end( size_t i )$/;"	f	class:blaze::UpperMatrix
end	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatDMatAddExpr
end	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatDMatSubExpr
end	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatForEachExpr
end	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatScalarDivExpr
end	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatScalarMultExpr
end	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatTransExpr
end	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::DMatTransposer
end	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstIterator end( size_t j ) const {$/;"	f	class:blaze::DMatTransposer
end	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Iterator end( size_t i ) {$/;"	f	class:blaze::DMatTransposer
end	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Iterator end( size_t j ) {$/;"	f	class:blaze::DMatTransposer
end	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecDVecAddExpr
end	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecDVecDivExpr
end	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecDVecMultExpr
end	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecDVecSubExpr
end	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecForEachExpr
end	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecSVecMultExpr
end	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecScalarDivExpr
end	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecScalarMultExpr
end	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f
end	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f
end	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecTransExpr
end	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::DVecTransposer
end	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline Iterator end() {$/;"	f	class:blaze::DVecTransposer
end	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::ConstIterator end( const Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE typename MT::Iterator end( Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::SMatForEachExpr
end	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::SMatScalarDivExpr
end	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::SMatScalarMultExpr
end	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::SMatTransExpr
end	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f	class:blaze::SMatTransposer
end	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstIterator end( size_t j ) const {$/;"	f	class:blaze::SMatTransposer
end	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline Iterator end( size_t i ) {$/;"	f	class:blaze::SMatTransposer
end	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline Iterator end( size_t j ) {$/;"	f	class:blaze::SMatTransposer
end	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecDVecDivExpr
end	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecDVecMultExpr
end	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecForEachExpr
end	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecScalarDivExpr
end	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecScalarMultExpr
end	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ConstIterator end( size_t i ) const {$/;"	f
end	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecTransExpr
end	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstIterator end() const {$/;"	f	class:blaze::SVecTransposer
end	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline Iterator end() {$/;"	f	class:blaze::SVecTransposer
end	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::ConstIterator end( const Vector<VT,TF>& vector )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE typename VT::Iterator end( Vector<VT,TF>& vector )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::end( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
end	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   end( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   end( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline typename DenseVectorProxy<PT,VT>::Iterator DenseVectorProxy<PT,VT>::end() const$/;"	f	class:blaze::DenseVectorProxy
end	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::end( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
end	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   end( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   end( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
end	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline typename SparseVectorProxy<PT,VT>::Iterator SparseVectorProxy<PT,VT>::end() const$/;"	f	class:blaze::SparseVectorProxy
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::end() const$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::end() const$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,false,false,false>::Iterator Column<MT,false,false,false>::end()$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,false,false,true>::Iterator Column<MT,false,false,true>::end()$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::ConstIterator Column<MT,true,false,SF>::end() const$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::end()$/;"	f	class:blaze::Column
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::ConstIterator Row<MT,false,false,false>::end() const$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::Iterator Row<MT,false,false,false>::end()$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::ConstIterator Row<MT,false,false,true>::end() const$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,true>::Iterator Row<MT,false,false,true>::end()$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::end() const$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::end()$/;"	f	class:blaze::Row
end	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::end( size_t i ) const$/;"	f	class:blaze::Submatrix
end	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::end( size_t i )$/;"	f	class:blaze::Submatrix
end	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::end( size_t j ) const$/;"	f	class:blaze::Submatrix
end	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^  Submatrix<MT,AF,true,false>::end( size_t j )$/;"	f	class:blaze::Submatrix
end	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::ConstIterator Subvector<VT,AF,TF,false>::end() const$/;"	f	class:blaze::Subvector
end	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::Iterator Subvector<VT,AF,TF,false>::end()$/;"	f	class:blaze::Subvector
end	amun/3rd_party/blaze/util/Indices.h	/^inline Indices::ConstIterator Indices::end() const$/;"	f	class:blaze::Indices
end	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::BLAZE_TEMPLATE CastIterator<C> PtrVector<T,D,G>::end()$/;"	f	class:blaze::PtrVector
end	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::BLAZE_TEMPLATE ConstCastIterator<C> PtrVector<T,D,G>::end() const$/;"	f	class:blaze::PtrVector
end	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ConstIterator PtrVector<T,D,G>::end() const$/;"	f	class:blaze::PtrVector
end	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::Iterator PtrVector<T,D,G>::end()$/;"	f	class:blaze::PtrVector
end	amun/3rd_party/blaze/util/timing/Timer.h	/^inline void Timer<TP>::end()$/;"	f	class:blaze::timing::Timer
end	amun/3rd_party/fast_align/src/array2d.h	/^  const_iterator end() const { return data_.end(); }$/;"	f	class:Array2D
end	amun/3rd_party/fast_align/src/array2d.h	/^  iterator end() { return data_.end(); }$/;"	f	class:Array2D
end	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const_node_iterator end() const {$/;"	f	class:YAML::detail::node
end	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node_iterator end() { return m_pRef->end(); }$/;"	f	class:YAML::detail::node
end	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const_node_iterator end() const {$/;"	f	class:YAML::detail::node_ref
end	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_iterator end() { return m_pData->end(); }$/;"	f	class:YAML::detail::node_ref
end	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const_iterator Node::end() const {$/;"	f	class:YAML::Node
end	amun/3rd_party/yaml-cpp/node/impl.h	/^inline iterator Node::end() {$/;"	f	class:YAML::Node
end	amun/3rd_party/yaml-cpp/node_data.cpp	/^const_node_iterator node_data::end() const {$/;"	f	class:YAML::detail::node_data
end	amun/3rd_party/yaml-cpp/node_data.cpp	/^node_iterator node_data::end() {$/;"	f	class:YAML::detail::node_data
end	amun/3rd_party/yaml-cpp/scanscalar.h	/^  const RegEx* end;   \/\/ what condition ends this scalar?$/;"	m	struct:YAML::ScanScalarParams
end	amun/cpu/mblas/tensor.h	/^    const_iterator end() const {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
end	amun/cpu/mblas/tensor.h	/^    iterator end() {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
end	amun/gpu/decoder/kenlm.cpp	/^WordPairs::const_iterator LM::end() const {$/;"	f	class:LM
endPos	amun/plugin/neural_phrase.h	/^   int startPos, endPos;$/;"	m	class:amunmt::NeuralPhrase
end_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   , end_     ( sm.end_ )       \/\/ Pointers one past the last non-zero element of each column$/;"	f	namespace:blaze
end_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   , end_     ( sm.end_ )       \/\/ Pointers one past the last non-zero element of each row$/;"	f	namespace:blaze
end_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   Iterator* end_;    \/\/!< Pointers one past the last non-zero element of each column.$/;"	m	class:blaze::CompressedMatrix
end_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   Iterator* end_;    \/\/!< Pointers one past the last non-zero element of each row.$/;"	m	class:blaze::CompressedMatrix
end_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   , end_     ( nullptr )  \/\/ Pointer to the last non-zero element of the compressed vector$/;"	f	namespace:blaze
end_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   , end_     ( sv.end_ )       \/\/ Pointer to the last non-zero element of the compressed vector$/;"	f	namespace:blaze
end_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   Iterator end_;            \/\/!< Pointer one past the last non-zero element of the compressed vector.$/;"	m	class:blaze::CompressedVector
end_	amun/3rd_party/blaze/util/PtrVector.h	/^   IteratorType end_;  \/\/!< Pointer to the element one past the last element in the element range.$/;"	m	class:blaze::PtrVector::CastIterator
end_	amun/3rd_party/blaze/util/PtrVector.h	/^   IteratorType end_;  \/\/!< Pointer to the element one past the last element in the element range.$/;"	m	class:blaze::PtrVector::ConstCastIterator
end_	amun/3rd_party/blaze/util/PtrVector.h	/^   PointerType* end_;    \/\/!< Pointer to the last element of the pointer vector.$/;"	m	class:blaze::PtrVector
end_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double end_;      \/\/!< End of the current time measurement.$/;"	m	class:blaze::timing::Timer
end_col	amun/3rd_party/fast_align/src/array2d.h	/^  const_iterator end_col(unsigned j) const {$/;"	f	class:Array2D
end_col	amun/3rd_party/fast_align/src/array2d.h	/^  iterator end_col(unsigned j) {$/;"	f	class:Array2D
enqueue	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    bool enqueue(T&& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
enqueue_pos_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     enqueue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
eof	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline bool Archive<Stream>::eof() const$/;"	f	class:blaze::Archive
eof	amun/3rd_party/yaml-cpp/stream.h	/^  static char eof() { return 0x04; }$/;"	f	class:YAML::Stream
eol	amun/3rd_party/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char* eol = SPDLOG_EOL;$/;"	m	namespace:spdlog::details::os
eol_size	amun/3rd_party/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static int eol_size = sizeof(SPDLOG_EOL) - 1;$/;"	m	namespace:spdlog::details::os
epsilon	amun/3rd_party/blaze/math/Epsilon.h	/^const Epsilon epsilon;$/;"	m	namespace:blaze
epsilon	amun/3rd_party/blaze/util/Limits.h	/^   static inline double epsilon() { return std::numeric_limits<double>::epsilon(); }$/;"	f	struct:blaze::Limits
epsilon	amun/3rd_party/blaze/util/Limits.h	/^   static inline float epsilon() { return std::numeric_limits<float>::epsilon(); }$/;"	f	struct:blaze::Limits
epsilon	amun/3rd_party/blaze/util/Limits.h	/^   static inline long double epsilon() { return std::numeric_limits<long double>::epsilon(); }$/;"	f	struct:blaze::Limits
equal	amun/3rd_party/blaze/math/Infinity.h	/^inline bool Infinity::equal( const T& rhs ) const$/;"	f	class:blaze::Infinity
equal	amun/3rd_party/blaze/math/Infinity.h	/^inline bool NegativeInfinity<I>::equal( const T& rhs ) const$/;"	f	class:blaze::NegativeInfinity
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( T1 a, complex<T2> b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( complex<T1> a, T2 b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( complex<T1> a, complex<T2> b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( const T1& a, const T2& b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( double a, double b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( double a, float b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( double a, long double b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( float a, double b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( float a, float b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( float a, long double b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( long double a, double b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( long double a, float b )$/;"	f	namespace:blaze
equal	amun/3rd_party/blaze/math/shims/Equal.h	/^inline bool equal( long double a, long double b )$/;"	f	namespace:blaze
equals	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node::equals(const T& rhs, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
equals	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node::equals(const char* rhs, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
erase	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::DiagonalMatrix
erase	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::DiagonalMatrix
erase	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
erase	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::HermitianMatrix
erase	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::HermitianMatrix
erase	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
erase	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::LowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::LowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::StrictlyLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::StrictlyLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::StrictlyUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::StrictlyUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::erase( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
erase	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::UniLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::UniLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
erase	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::UniUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::UniUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::UpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::UpperMatrix
erase	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
erase	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::erase( size_t i, Iterator first, Iterator last ) const$/;"	f	class:blaze::SparseMatrixProxy
erase	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::erase( size_t i, Iterator pos ) const$/;"	f	class:blaze::SparseMatrixProxy
erase	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::erase( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
erase	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::erase( Iterator first, Iterator last ) const$/;"	f	class:blaze::SparseVectorProxy
erase	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline typename SparseVectorProxy<PT,VT>::Iterator SparseVectorProxy<PT,VT>::erase( Iterator pos ) const$/;"	f	class:blaze::SparseVectorProxy
erase	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::erase( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::erase( size_t j, Iterator first, Iterator last )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::erase( size_t j, Iterator pos )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::erase( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::erase( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
erase	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::CompressedVector
erase	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline typename CompressedVector<Type,TF>::Iterator CompressedVector<Type,TF>::erase( Iterator pos )$/;"	f	class:blaze::CompressedVector
erase	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::erase( size_t index )$/;"	f	class:blaze::CompressedVector
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::erase( Iterator pos )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::erase( Iterator pos )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::erase( Iterator pos )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::erase( size_t index )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::erase( size_t index )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::erase( size_t index )$/;"	f	class:blaze::Column
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::erase( Iterator pos )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::Iterator Row<MT,false,false,false>::erase( Iterator pos )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::erase( Iterator pos )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::erase( size_t index )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::erase( size_t index )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::erase( size_t index )$/;"	f	class:blaze::Row
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::erase( size_t i, Iterator first, Iterator last )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::erase( size_t i, Iterator pos )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::erase( size_t j, Iterator first, Iterator last )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::erase( size_t j, Iterator pos )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::erase( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
erase	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::erase( Iterator first, Iterator last )$/;"	f	class:blaze::Subvector
erase	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline typename Subvector<VT,AF,TF,false>::Iterator Subvector<VT,AF,TF,false>::erase( Iterator pos )$/;"	f	class:blaze::Subvector
erase	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::erase( size_t index )$/;"	f	class:blaze::Subvector
erase	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::erase( CastIterator<C> pos )$/;"	f	class:blaze::PtrVector
erase	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::Iterator PtrVector<T,D,G>::erase( Iterator pos )$/;"	f	class:blaze::PtrVector
erf	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Erf,SO> erf( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
erf	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Erf,TF> erf( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
erf	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Erf,SO> erf( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
erf	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Erf,TF> erf( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
erf	amun/3rd_party/blaze/math/functors/Erf.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( erf( a ) )$/;"	f	struct:blaze::Erf
erf	amun/3rd_party/blaze/math/functors/Erf.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( erf( a ) )$/;"	f	struct:blaze::Erf
erf	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( erf( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
erfc	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Erfc,SO> erfc( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
erfc	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Erfc,TF> erfc( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
erfc	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Erfc,SO> erfc( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
erfc	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Erfc,TF> erfc( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
erfc	amun/3rd_party/blaze/math/functors/Erfc.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( erfc( a ) )$/;"	f	struct:blaze::Erfc
erfc	amun/3rd_party/blaze/math/functors/Erfc.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( erfc( a ) )$/;"	f	struct:blaze::Erfc
erfc	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( erfc( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
err	amun/3rd_party/spdlog/common.h	/^    err = 4,$/;"	e	enum:spdlog::level::__anon34
errno_	amun/3rd_party/extract_lex/exception.h	/^    int errno_;$/;"	m	class:util::ErrnoException
errno_	amun/common/exception.h	/^    int errno_;$/;"	m	class:amunmt::util::ErrnoException
errno_str	amun/3rd_party/spdlog/details/os.h	/^inline std::string errno_str(int err_num)$/;"	f	namespace:spdlog::details::os
error	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   error    = 1,  \/\/!< Log level for (sever) errors.$/;"	e	enum:blaze::logging::LogLevel
error	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T& msg)$/;"	f	class:spdlog::logger
error	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
error_code	amun/3rd_party/spdlog/details/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_code	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_code_	amun/3rd_party/spdlog/details/format.h	/^    int error_code_;$/;"	m	class:SystemError
error_code_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int error_code_;$/;"	m	class:SystemError
error_handler	amun/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler()$/;"	f	class:spdlog::logger
escape	amun/3rd_party/yaml-cpp/scanscalar.h	/^  char escape;  \/\/ what character do we escape on (i.e., slash or single quote)$/;"	m	struct:YAML::ScanScalarParams
eval	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^inline const DMatEvalExpr<MT,SO> eval( const DMatEvalExpr<MT,SO>& dm )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^inline const DMatEvalExpr<MT,SO> eval( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^inline const DVecEvalExpr<VT,TF> eval( const DVecEvalExpr<VT,TF>& dv )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^inline const DVecEvalExpr<VT,TF> eval( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^inline const SMatEvalExpr<MT,SO> eval( const SMatEvalExpr<MT,SO>& sm )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^inline const SMatEvalExpr<MT,SO> eval( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^inline const SVecEvalExpr<VT,TF> eval( const SVecEvalExpr<VT,TF>& sv )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^inline const SVecEvalExpr<VT,TF> eval( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
eval	amun/3rd_party/blaze/math/functors/Eval.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( eval( a ) )$/;"	f	struct:blaze::Eval
exception	amun/3rd_party/utf8/checked.h	/^    class exception : public std::exception {$/;"	c	namespace:utf8
executeTask	amun/3rd_party/blaze/util/ThreadPool.h	/^bool ThreadPool<TT,MT,LT,CT>::executeTask()$/;"	f	class:blaze::ThreadPool
exp	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Exp,SO> exp( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
exp	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Exp,TF> exp( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
exp	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Exp,SO> exp( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
exp	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Exp,TF> exp( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
exp	amun/3rd_party/blaze/math/functors/Exp.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( exp( a ) )$/;"	f	struct:blaze::Exp
exp	amun/3rd_party/blaze/math/functors/Exp.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( exp( a ) )$/;"	f	struct:blaze::Exp
exp	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( exp( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
exp	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( pow( std::declval< RepresentedType_<PT> >(), exp ) );$/;"	m	namespace:blaze
exp_	amun/3rd_party/blaze/math/functors/Pow.h	/^   ET     exp_;      \/\/!< The scalar exponent.$/;"	m	struct:blaze::Pow
exp_cst1	amun/cpu/mblas/phoenix_functions.h	/^  const float exp_cst1 = 2139095040.f;$/;"	m	namespace:amunmt::CPU::mblas
exp_cst1	amun/cpu/mblas/simd_math_prims.h	/^const float exp_cst1 = 2139095040.f;$/;"	v
exp_cst2	amun/cpu/mblas/phoenix_functions.h	/^  const float exp_cst2 = 0.f;$/;"	m	namespace:amunmt::CPU::mblas
exp_cst2	amun/cpu/mblas/simd_math_prims.h	/^const float exp_cst2 = 0.f;$/;"	v
expapprox	amun/cpu/mblas/phoenix_functions.h	/^  inline float expapprox(float val) {$/;"	f	namespace:amunmt::CPU::mblas
expapprox	amun/cpu/mblas/simd_math_prims.h	/^inline float expapprox(float val) {$/;"	f
expected_	amun/3rd_party/blaze/util/ThreadPool.h	/^   volatile size_t expected_;  \/\/!< Expected number of threads in the thread pool.$/;"	m	class:blaze::ThreadPool
experimental	amun/3rd_party/thrust_bind/bind.hpp	/^namespace experimental$/;"	n	namespace:thrust
extend	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline void DiagonalMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::DiagonalMatrix
extend	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline void HermitianMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::HermitianMatrix
extend	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline void LowerMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::LowerMatrix
extend	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline void StrictlyLowerMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyLowerMatrix
extend	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline void StrictlyUpperMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyUpperMatrix
extend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::extend( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
extend	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
extend	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline void UniLowerMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::UniLowerMatrix
extend	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline void UniUpperMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::UniUpperMatrix
extend	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline void UpperMatrix<MT,SO,true>::extend( size_t n, bool preserve )$/;"	f	class:blaze::UpperMatrix
extend	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::extend( size_t m, size_t n, bool preserve ) const$/;"	f	class:blaze::DenseMatrixProxy
extend	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::extend( size_t n, bool preserve ) const$/;"	f	class:blaze::DenseVectorProxy
extendCapacity	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline size_t Row<MT,false,false,true>::extendCapacity() const$/;"	f	class:blaze::Row
extract	amun/3rd_party/extract_lex/extract-lex.h	/^namespace extract {$/;"	n
f_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class f_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
factors_	amun/common/sentence.h	/^    std::vector<FactWords> factors_;$/;"	m	class:amunmt::Sentence
fail	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline bool Archive<Stream>::fail() const$/;"	f	class:blaze::Archive
favor_diagonal	amun/3rd_party/fast_align/src/fast_align.cc	/^int favor_diagonal = 0;$/;"	v
file_	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   std::string file_;      \/\/!< The file name the traced function is contained in.$/;"	m	class:blaze::logging::FunctionTrace
file_	amun/3rd_party/extract_lex/file_stream.h	/^    boost::filesystem::path file_;$/;"	m	class:InputFileStream
file_	amun/common/file_stream.h	/^    boost::filesystem::path file_;$/;"	m	class:amunmt::InputFileStream
file_exists	amun/3rd_party/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t& name)$/;"	f	class:spdlog::details::file_helper
file_exists	amun/3rd_party/spdlog/details/os.h	/^inline bool file_exists(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
file_helper	amun/3rd_party/spdlog/details/file_helper.h	/^    explicit file_helper() :$/;"	f	class:spdlog::details::file_helper
file_helper	amun/3rd_party/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
filename	amun/3rd_party/spdlog/details/file_helper.h	/^    const filename_t& filename() const$/;"	f	class:spdlog::details::file_helper
filename_to_str	amun/3rd_party/spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
filesize	amun/3rd_party/spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os
fill	amun/3rd_party/fast_align/src/array2d.h	/^  void fill(const T& v) { data_.assign(data_.size(), v); }$/;"	f	class:Array2D
fill	amun/3rd_party/spdlog/details/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec
fill	amun/3rd_party/spdlog/details/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec
fill	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec
fill	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec
fill_	amun/3rd_party/spdlog/details/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec
fill_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec
fill_log_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^        void fill_log_msg(log_msg &msg)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
fill_padding	amun/3rd_party/spdlog/details/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
fill_padding	amun/3rd_party/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
filterIndices_	amun/common/search.h	/^    Words filterIndices_;$/;"	m	class:amunmt::Search
filter_	amun/common/god.h	/^    std::shared_ptr<const Filter> filter_;$/;"	m	class:amunmt::God
filter_	amun/common/search.h	/^    std::shared_ptr<const Filter> filter_;$/;"	m	class:amunmt::Search
filtered_	amun/cpu/dl4mt/decoder.h	/^        bool filtered_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
filtered_	amun/cpu/nematus/decoder.h	/^        bool filtered_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
filtered_	amun/fpga/decoder.h	/^    bool filtered_;$/;"	m	class:amunmt::FPGA::Decoder::Softmax
filtered_	amun/gpu/dl4mt/decoder.h	/^        bool filtered_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
finalize	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::DiagonalMatrix
finalize	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::HermitianMatrix
finalize	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::LowerMatrix
finalize	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
finalize	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
finalize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::finalize( size_t i )$/;"	f	class:blaze::SymmetricMatrix
finalize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::finalize( size_t i )$/;"	f	class:blaze::SymmetricMatrix
finalize	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::UniLowerMatrix
finalize	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::UniUpperMatrix
finalize	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::finalize( size_t i )$/;"	f	class:blaze::UpperMatrix
finalize	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void finalize( size_t i ) {$/;"	f	class:blaze::SMatTransposer
finalize	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void finalize( size_t j ) {$/;"	f	class:blaze::SMatTransposer
finalize	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::finalize( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
finalize	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::finalize( size_t i )$/;"	f	class:blaze::CompressedMatrix
finalize	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::finalize( size_t j )$/;"	f	class:blaze::CompressedMatrix
finalize	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::finalize( size_t i )$/;"	f	class:blaze::Submatrix
finalize	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::finalize( size_t j )$/;"	f	class:blaze::Submatrix
find	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
find	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
find	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
find	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
find	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
find	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
find	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
find	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
find	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
find	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
find	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
find	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::find( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
find	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::find( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
find	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::find( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
find	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
find	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
find	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
find	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
find	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
find	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::find( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
find	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::DVecSVecMultExpr
find	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f
find	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatForEachExpr
find	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarDivExpr
find	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarMultExpr
find	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransExpr
find	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecDVecDivExpr
find	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecDVecMultExpr
find	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecForEachExpr
find	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecScalarDivExpr
find	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecScalarMultExpr
find	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ConstIterator find( size_t i, size_t j ) const {$/;"	f
find	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ConstIterator find( size_t index ) const {$/;"	f	class:blaze::SVecTransExpr
find	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline Iterator find( size_t index ) {$/;"	f	class:blaze::SVecTransposer
find	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::find( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
find	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::find( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
find	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::find( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
find	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::find( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
find	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::find( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
find	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::find( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
find	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline typename CompressedVector<Type,TF>::ConstIterator CompressedVector<Type,TF>::find( size_t index ) const$/;"	f	class:blaze::CompressedVector
find	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline typename CompressedVector<Type,TF>::Iterator CompressedVector<Type,TF>::find( size_t index )$/;"	f	class:blaze::CompressedVector
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::find( size_t index ) const$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::find( size_t index )$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::find( size_t index ) const$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::find( size_t index )$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::find( size_t index ) const$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::find( size_t index )$/;"	f	class:blaze::Column
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::find( size_t index ) const$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::find( size_t index ) const$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::find( size_t index )$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,false,false,false>::Iterator Row<MT,false,false,false>::find( size_t index )$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::find( size_t index ) const$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::find( size_t index )$/;"	f	class:blaze::Row
find	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
find	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::find( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
find	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::find( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
find	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::find( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
find	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::find( size_t index ) const$/;"	f	class:blaze::Subvector
find	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::find( size_t index )$/;"	f	class:blaze::Subvector
find	amun/3rd_party/spdlog/details/format.h	/^    const internal::Arg* find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap
find	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const internal::Arg *find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap
findTransitionDepth	amun/cpu/nematus/model.cpp	/^int Weights::Transition::findTransitionDepth(const NpzConverter& model, std::string prefix, std::string infix) {$/;"	f	class:amunmt::CPU::Nematus::Weights::Transition
find_invalid	amun/3rd_party/utf8/core.h	/^    octet_iterator find_invalid(octet_iterator start, octet_iterator end)$/;"	f	namespace:utf8
fits_in_int	amun/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(T value)$/;"	f	struct:fmt::__anon30::IntChecker
fits_in_int	amun/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(bool)$/;"	f	struct:fmt::__anon30::IntChecker
fits_in_int	amun/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(int)$/;"	f	struct:fmt::__anon30::IntChecker
fits_in_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(T value)$/;"	f	struct:fmt::internal::IntChecker
fits_in_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(bool)$/;"	f	struct:fmt::internal::IntChecker
fits_in_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(int)$/;"	f	struct:fmt::internal::IntChecker
fix	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^void fix(std::ostream& stream)$/;"	f
flag	amun/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec
flag	amun/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec
flag	amun/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec
flag	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec
flag	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec
flag	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec
flag_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags_	amun/3rd_party/spdlog/details/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec
flags_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec
floatPrecision	amun/3rd_party/yaml-cpp/emittermanip.h	/^  int floatPrecision;$/;"	m	struct:YAML::_Precision
floor	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Floor,SO> floor( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Floor,SO>& floor( const DMatForEachExpr<MT,Floor,SO>& dm )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Floor,TF> floor( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Floor,TF>& floor( const DVecForEachExpr<VT,Floor,TF>& dv )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Floor,SO> floor( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Floor,SO>& floor( const SMatForEachExpr<MT,Floor,SO>& sm )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Floor,TF> floor( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Floor,TF>& floor( const SVecForEachExpr<VT,Floor,TF>& sv )$/;"	f	namespace:blaze
floor	amun/3rd_party/blaze/math/functors/Floor.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( floor( a ) )$/;"	f	struct:blaze::Floor
floor	amun/3rd_party/blaze/math/functors/Floor.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( floor( a ) )$/;"	f	struct:blaze::Floor
floor	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( floor( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
flowLevel	amun/3rd_party/yaml-cpp/scanner.h	/^    std::size_t flowLevel;$/;"	m	struct:YAML::Scanner::SimpleKey
flowType	amun/3rd_party/yaml-cpp/emitterstate.h	/^    FlowType::value flowType;$/;"	m	struct:YAML::EmitterState::Group
flush	amun/3rd_party/spdlog/details/async_log_helper.h	/^        flush,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
flush	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush(bool wait_for_q)$/;"	f	class:spdlog::details::async_log_helper
flush	amun/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush()$/;"	f	class:spdlog::async_logger
flush	amun/3rd_party/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper
flush	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger
flush	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::flush()$/;"	f	class:spdlog::sinks::ansicolor_sink
flush_on	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger
fmt	amun/3rd_party/spdlog/details/format.cc	/^namespace fmt {$/;"	n	file:
fmt	amun/3rd_party/spdlog/details/format.h	/^namespace fmt$/;"	n
fmt	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^namespace fmt {$/;"	n	file:
fmt	amun/3rd_party/spdlog/fmt/bundled/format.h	/^namespace fmt$/;"	n
fmt	amun/3rd_party/spdlog/fmt/bundled/ostream.cc	/^namespace fmt {$/;"	n	file:
fmt	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^namespace fmt$/;"	n
fmt	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^namespace fmt$/;"	n
fold	amun/3rd_party/yaml-cpp/scanscalar.h	/^  FOLD fold;    \/\/ how do we fold line ends?$/;"	m	struct:YAML::ScanScalarParams
fopen_s	amun/3rd_party/spdlog/details/os.h	/^inline int fopen_s(FILE** fp, const filename_t& filename, const filename_t& mode)$/;"	f	namespace:spdlog::details::os
forEach	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,OP,SO> forEach( const DenseMatrix<MT,SO>& dm, OP op )$/;"	f	namespace:blaze
forEach	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,OP,TF> forEach( const DenseVector<VT,TF>& dv, OP op )$/;"	f	namespace:blaze
forEach	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,OP,SO> forEach( const SparseMatrix<MT,SO>& sm, OP op )$/;"	f	namespace:blaze
forEach	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,OP,TF> forEach( const SparseVector<VT,TF>& sv, OP op )$/;"	f	namespace:blaze
forbidUNK_	amun/common/base_best_hyps.h	/^    const bool forbidUNK_;$/;"	m	class:amunmt::BaseBestHyps
force_align	amun/3rd_party/fast_align/src/fast_align.cc	/^bool force_align = false;$/;"	v
force_insert	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline void node_data::force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node_data
force_insert	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node
force_insert	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node_ref
force_insert	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::force_insert(const Key& key, const Value& value) {$/;"	f	class:YAML::Node
format	amun/3rd_party/spdlog/details/format.cc	/^void fmt::internal::PrintfFormatter<Char>::format($/;"	f	class:fmt::internal::PrintfFormatter
format	amun/3rd_party/spdlog/details/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue
format	amun/3rd_party/spdlog/details/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	amun/3rd_party/spdlog/details/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	amun/3rd_party/spdlog/details/format.h	/^void format(BasicFormatter<Char> &f, const Char *&format_str, const T &value)$/;"	f
format	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::format(details::log_msg& msg)$/;"	f	class:spdlog::pattern_formatter
format	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue
format	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::format(BasicCStringRef<Char> format_str)$/;"	f	class:fmt::PrintfFormatter
format_	amun/3rd_party/spdlog/details/format.h	/^    const Char *format_;$/;"	m	class:fmt::internal::BasicArgFormatter
format_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *format_;$/;"	m	class:fmt::BasicArgFormatter
format_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void format_arg(Formatter &, const Char *, const T &)$/;"	f	namespace:fmt::internal
format_arg	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^void format_arg(BasicFormatter<Char, ArgFormatter> &f,$/;"	f	namespace:fmt
format_custom_arg	amun/3rd_party/spdlog/details/format.h	/^    static void format_custom_arg($/;"	f	class:fmt::internal::MakeValue
format_custom_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static void format_custom_arg($/;"	f	class:fmt::internal::MakeValue
format_decimal	amun/3rd_party/spdlog/details/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	amun/3rd_party/spdlog/details/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal
format_decimal	amun/3rd_party/spdlog/details/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal
format_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits,$/;"	f	namespace:fmt::internal
format_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_float	amun/3rd_party/spdlog/details/format.cc	/^int fmt::internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	amun/3rd_party/spdlog/details/format.cc	/^int fmt::internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	int internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	int internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits
formatted	amun/3rd_party/spdlog/details/log_msg.h	/^    fmt::MemoryWriter formatted;$/;"	m	struct:spdlog::details::log_msg
formatter	amun/3rd_party/spdlog/details/registry.h	/^    void formatter(formatter_ptr f)$/;"	f	class:spdlog::details::registry_t
formatter	amun/3rd_party/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	amun/3rd_party/spdlog/details/format.h	/^    BasicFormatter<Char> &formatter_;$/;"	m	class:fmt::internal::BasicArgFormatter
formatter_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicFormatter<Char, Impl> &formatter_;$/;"	m	class:fmt::BasicArgFormatter
fortran_order	amun/3rd_party/cnpy/cnpy.h	/^        bool fortran_order;$/;"	m	struct:cnpy::NpyArray
forward	amun/3rd_party/thrust_bind/bind.hpp	/^       std::forward<BoundArg>(bound_arg)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward	amun/3rd_party/thrust_bind/bind.hpp	/^       std::forward<F>(f)($/;"	f	namespace:thrust::experimental::detail::bind_detail
forwardRnn_	amun/cpu/dl4mt/encoder.h	/^    RNN<Weights::GRU> forwardRnn_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder
forwardRnn_	amun/cpu/nematus/encoder.h	/^    EncoderRNN<Weights::GRU, Weights::Transition> forwardRnn_;$/;"	m	class:amunmt::CPU::Nematus::Encoder
forwardRnn_	amun/fpga/encoder.h	/^  RNN<Weights::EncForwardGRU> forwardRnn_;$/;"	m	class:amunmt::FPGA::Encoder
forwardRnn_	amun/gpu/dl4mt/encoder.h	/^    RNN forwardRnn_;$/;"	m	class:amunmt::GPU::Encoder
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^       forward_as_tuple($/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<> forward_as_tuple()$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T&> forward_as_tuple(T& arg)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,T2&,T3&> forward_as_tuple(T1& arg1, T2& arg2, T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,T2&,const T3&> forward_as_tuple(T1& arg1, T2& arg2, const T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,T2&> forward_as_tuple(T1& arg1, T2& arg2)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,const T2&,T3&> forward_as_tuple(T1& arg1, const T2& arg2, T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,const T2&,const T3&> forward_as_tuple(T1& arg1, const T2& arg2, const T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<T1&,const T2&> forward_as_tuple(T1& arg1, const T2& arg2)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T&> forward_as_tuple(const T& arg)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,T2&,T3&> forward_as_tuple(const T1& arg1, T2& arg2, T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,T2&,const T3&> forward_as_tuple(const T1& arg1, T2& arg2, const T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,T2&> forward_as_tuple(const T1& arg1, T2& arg2)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,const T2&,T3&> forward_as_tuple(const T1& arg1, const T2& arg2, T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,const T2&,const T3&> forward_as_tuple(const T1& arg1, const T2& arg2, const T3& arg3)$/;"	f	namespace:thrust::experimental::detail::bind_detail
forward_as_tuple	amun/3rd_party/thrust_bind/bind.hpp	/^tuple<const T1&,const T2&> forward_as_tuple(const T1& arg1, const T2& arg2)$/;"	f	namespace:thrust::experimental::detail::bind_detail
fpgaLoaders_	amun/common/god.h	/^    Loaders cpuLoaders_, gpuLoaders_, fpgaLoaders_;$/;"	m	class:amunmt::God
fprintf	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::fprintf(std::FILE *f, CStringRef format, ArgList args)$/;"	f	class:fmt
fprintf	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::fprintf(std::ostream &os, CStringRef format, ArgList args)$/;"	f	class:fmt
fprintf	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::ostream &os, CStringRef format_str, ArgList args)$/;"	f	namespace:fmt
fpuAccuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline double fpuAccuracy() { return 1E-15; }$/;"	f	struct:blaze::Limits
fpuAccuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline float fpuAccuracy() { return 1E-12F; }$/;"	f	struct:blaze::Limits
fpuAccuracy	amun/3rd_party/blaze/util/Limits.h	/^   static inline long double fpuAccuracy() { return 1E-15L; }$/;"	f	struct:blaze::Limits
free	amun/3rd_party/blaze/util/MemoryPool.h	/^inline void MemoryPool<Type,Blocksize>::Block::free()$/;"	f	class:blaze::MemoryPool::Block
free	amun/3rd_party/blaze/util/MemoryPool.h	/^inline void MemoryPool<Type,Blocksize>::free( void* rawMemory )$/;"	f	class:blaze::MemoryPool
freeList_	amun/3rd_party/blaze/util/MemoryPool.h	/^   FreeObject* freeList_;  \/\/!< Head of the free list.$/;"	m	class:blaze::MemoryPool
front	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ConstReferenceType PtrVector<T,D,G>::front() const$/;"	f	class:blaze::PtrVector
front	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ReferenceType PtrVector<T,D,G>::front()$/;"	f	class:blaze::PtrVector
front	amun/common/history.h	/^    Beam& front() {$/;"	f	class:amunmt::History
frozen_	amun/3rd_party/fast_align/src/ttables.h	/^  bool frozen_; \/\/ Disallow new e,f pairs to be added to counts$/;"	m	class:TTable
full_days	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const days_array& full_days()$/;"	f	namespace:spdlog::details
full_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class full_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
full_months	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const months_array& full_months()$/;"	f	namespace:spdlog::details
fun_	amun/3rd_party/thrust_bind/bind.hpp	/^    F fun_;$/;"	m	class:thrust::experimental::detail::bind_detail::bind_expression
function_	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   std::string function_;  \/\/!< The name of the traced function.$/;"	m	class:blaze::logging::FunctionTrace
functional	amun/gpu/mblas/thrust_functions.h	/^    namespace functional$/;"	n	namespace:thrust::detail
future	amun/common/threadpool.h	/^        -> std::future<typename std::result_of<F(Args...)>::type>;$/;"	m	class:amunmt::ThreadPool::std
gBroadcast	amun/gpu/mblas/tensor_functions.h	/^__global__ void gBroadcast(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
gBroadcastVec	amun/gpu/mblas/tensor_functions.h	/^__global__ void gBroadcastVec(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
gBroadcastVecColumn	amun/gpu/mblas/tensor_functions.h	/^__global__ void gBroadcastVecColumn(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
gElement	amun/gpu/mblas/tensor_functions.h	/^__global__ void gElement(Functor functor,$/;"	f	namespace:amunmt::GPU::mblas
gelqf	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	/^inline void gelqf( int m, int n, complex<double>* A, int lda, complex<double>* tau,$/;"	f	namespace:blaze
gelqf	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	/^inline void gelqf( int m, int n, complex<float>* A, int lda, complex<float>* tau,$/;"	f	namespace:blaze
gelqf	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	/^inline void gelqf( int m, int n, double* A, int lda, double* tau,$/;"	f	namespace:blaze
gelqf	amun/3rd_party/blaze/math/lapack/clapack/gelqf.h	/^inline void gelqf( int m, int n, float* A, int lda, float* tau,$/;"	f	namespace:blaze
gelqf	amun/3rd_party/blaze/math/lapack/gelqf.h	/^inline void gelqf( DenseMatrix<MT,SO>& A, ElementType_<MT>* tau )$/;"	f	namespace:blaze
gemm	amun/3rd_party/blaze/math/blas/gemm.h	/^BLAZE_ALWAYS_INLINE void gemm( CBLAS_ORDER order, CBLAS_TRANSPOSE transA, CBLAS_TRANSPOSE transB,$/;"	f	namespace:blaze
gemm	amun/3rd_party/blaze/math/blas/gemm.h	/^BLAZE_ALWAYS_INLINE void gemm( DenseMatrix<MT1,SO1>& C, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
gemv	amun/3rd_party/blaze/math/blas/gemv.h	/^BLAZE_ALWAYS_INLINE void gemv( CBLAS_ORDER order, CBLAS_TRANSPOSE transA, int m, int n,$/;"	f	namespace:blaze
gemv	amun/3rd_party/blaze/math/blas/gemv.h	/^BLAZE_ALWAYS_INLINE void gemv( DenseVector<VT1,false>& y, const DenseMatrix<MT1,SO>& A,$/;"	f	namespace:blaze
gemv	amun/3rd_party/blaze/math/blas/gemv.h	/^BLAZE_ALWAYS_INLINE void gemv( DenseVector<VT1,true>& y, const DenseVector<VT2,true>& x,$/;"	f	namespace:blaze
generate	amun/3rd_party/blaze/math/CompressedMatrix.h	/^   Rand< CompressedMatrix<Type,SO> >::generate( size_t m, size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedMatrix.h	/^   Rand< CompressedMatrix<Type,SO> >::generate( size_t m, size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedMatrix.h	/^   Rand< CompressedMatrix<Type,SO> >::generate( size_t m, size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedMatrix.h	/^   Rand< CompressedMatrix<Type,SO> >::generate( size_t m, size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedVector.h	/^   Rand< CompressedVector<Type,TF> >::generate( size_t size ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedVector.h	/^   Rand< CompressedVector<Type,TF> >::generate( size_t size, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedVector.h	/^   Rand< CompressedVector<Type,TF> >::generate( size_t size, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/CompressedVector.h	/^   Rand< CompressedVector<Type,TF> >::generate( size_t size, size_t nonzeros, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^   Rand< DiagonalMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^   Rand< DiagonalMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^   Rand< DiagonalMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^   Rand< DiagonalMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^   Rand< DiagonalMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline const DiagonalMatrix<MT,SO,DF> Rand< DiagonalMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DynamicMatrix.h	/^   Rand< DynamicMatrix<Type,SO> >::generate( size_t m, size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DynamicMatrix.h	/^   Rand< DynamicMatrix<Type,SO> >::generate( size_t m, size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DynamicVector.h	/^   Rand< DynamicVector<Type,TF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/DynamicVector.h	/^inline const DynamicVector<Type,TF> Rand< DynamicVector<Type,TF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^   Rand< HermitianMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^   Rand< HermitianMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^   Rand< HermitianMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^   Rand< HermitianMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^   Rand< HermitianMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline const HermitianMatrix<MT,SO,DF> Rand< HermitianMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HybridMatrix.h	/^   Rand< HybridMatrix<Type,M,N,SO> >::generate( size_t m, size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HybridMatrix.h	/^   Rand< HybridMatrix<Type,M,N,SO> >::generate( size_t m, size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HybridVector.h	/^   Rand< HybridVector<Type,N,TF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/HybridVector.h	/^inline const HybridVector<Type,N,TF> Rand< HybridVector<Type,N,TF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^   Rand< LowerMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^   Rand< LowerMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^   Rand< LowerMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^   Rand< LowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^   Rand< LowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline const LowerMatrix<MT,SO,DF> Rand< LowerMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StaticMatrix.h	/^   Rand< StaticMatrix<Type,M,N,SO> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StaticMatrix.h	/^inline const StaticMatrix<Type,M,N,SO> Rand< StaticMatrix<Type,M,N,SO> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StaticVector.h	/^   Rand< StaticVector<Type,N,TF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StaticVector.h	/^inline const StaticVector<Type,N,TF> Rand< StaticVector<Type,N,TF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^   Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^   Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^   Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^   Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^   Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline const StrictlyLowerMatrix<MT,SO,DF> Rand< StrictlyLowerMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^   Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^   Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^   Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^   Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^   Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline const StrictlyUpperMatrix<MT,SO,DF> Rand< StrictlyUpperMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^   Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^   Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^   Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^   Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^   Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline const SymmetricMatrix<MT,SO,DF,NF> Rand< SymmetricMatrix<MT,SO,DF,NF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^   Rand< UniLowerMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^   Rand< UniLowerMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^   Rand< UniLowerMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^   Rand< UniLowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^   Rand< UniLowerMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline const UniLowerMatrix<MT,SO,DF> Rand< UniLowerMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^   Rand< UniUpperMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^   Rand< UniUpperMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^   Rand< UniUpperMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^   Rand< UniUpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^   Rand< UniUpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline const UniUpperMatrix<MT,SO,DF> Rand< UniUpperMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^   Rand< UpperMatrix<MT,SO,DF> >::generate( const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^   Rand< UpperMatrix<MT,SO,DF> >::generate( size_t n ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^   Rand< UpperMatrix<MT,SO,DF> >::generate( size_t n, const Arg& min, const Arg& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^   Rand< UpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^   Rand< UpperMatrix<MT,SO,DF> >::generate( size_t n, size_t nonzeros,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline const UpperMatrix<MT,SO,DF> Rand< UpperMatrix<MT,SO,DF> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline T Rand<T>::generate( T min, T max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline T Rand<T>::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline const complex<T> Rand< complex<T> >::generate( const T& min, const T& max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline const complex<T> Rand< complex<T> >::generate( const T& realmin, const T& realmax,$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline const complex<T> Rand< complex<T> >::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline double Rand<double>::generate( double min, double max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline double Rand<double>::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline float Rand<float>::generate( float min, float max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline float Rand<float>::generate() const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline long double Rand<long double>::generate( long double min, long double max ) const$/;"	f	class:blaze::Rand
generate	amun/3rd_party/blaze/util/Random.h	/^inline long double Rand<long double>::generate() const$/;"	f	class:blaze::Rand
geqlf	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	/^inline void geqlf( int m, int n, complex<double>* A, int lda, complex<double>* tau,$/;"	f	namespace:blaze
geqlf	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	/^inline void geqlf( int m, int n, complex<float>* A, int lda, complex<float>* tau,$/;"	f	namespace:blaze
geqlf	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	/^inline void geqlf( int m, int n, double* A, int lda, double* tau,$/;"	f	namespace:blaze
geqlf	amun/3rd_party/blaze/math/lapack/clapack/geqlf.h	/^inline void geqlf( int m, int n, float* A, int lda, float* tau,$/;"	f	namespace:blaze
geqlf	amun/3rd_party/blaze/math/lapack/geqlf.h	/^inline void geqlf( DenseMatrix<MT,SO>& A, ElementType_<MT>* tau )$/;"	f	namespace:blaze
geqp3	amun/3rd_party/blaze/math/lapack/clapack/geqp3.h	/^inline void geqp3( int m, int n, double* A, int lda, int* jpvt, double* tau,$/;"	f	namespace:blaze
geqp3	amun/3rd_party/blaze/math/lapack/clapack/geqp3.h	/^inline void geqp3( int m, int n, float* A, int lda, int* jpvt, float* tau,$/;"	f	namespace:blaze
geqrf	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	/^inline void geqrf( int m, int n, complex<double>* A, int lda, complex<double>* tau,$/;"	f	namespace:blaze
geqrf	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	/^inline void geqrf( int m, int n, complex<float>* A, int lda, complex<float>* tau,$/;"	f	namespace:blaze
geqrf	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	/^inline void geqrf( int m, int n, double* A, int lda, double* tau,$/;"	f	namespace:blaze
geqrf	amun/3rd_party/blaze/math/lapack/clapack/geqrf.h	/^inline void geqrf( int m, int n, float* A, int lda, float* tau,$/;"	f	namespace:blaze
geqrf	amun/3rd_party/blaze/math/lapack/geqrf.h	/^inline void geqrf( DenseMatrix<MT,SO>& A, ElementType_<MT>* tau )$/;"	f	namespace:blaze
gerqf	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	/^inline void gerqf( int m, int n, complex<double>* A, int lda, complex<double>* tau,$/;"	f	namespace:blaze
gerqf	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	/^inline void gerqf( int m, int n, complex<float>* A, int lda, complex<float>* tau,$/;"	f	namespace:blaze
gerqf	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	/^inline void gerqf( int m, int n, double* A, int lda, double* tau,$/;"	f	namespace:blaze
gerqf	amun/3rd_party/blaze/math/lapack/clapack/gerqf.h	/^inline void gerqf( int m, int n, float* A, int lda, float* tau,$/;"	f	namespace:blaze
gerqf	amun/3rd_party/blaze/math/lapack/gerqf.h	/^inline void gerqf( DenseMatrix<MT,SO>& A, ElementType_<MT>* tau )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	/^inline void gesv( int n, int nrhs, complex<double>* A, int lda, int* ipiv, complex<double>* B, int ldb, int* info )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	/^inline void gesv( int n, int nrhs, complex<float>* A, int lda, int* ipiv, complex<float>* B, int ldb, int* info )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	/^inline void gesv( int n, int nrhs, double* A, int lda, int* ipiv, double* B, int ldb, int* info )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/clapack/gesv.h	/^inline void gesv( int n, int nrhs, float* A, int lda, int* ipiv, float* B, int ldb, int* info )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/gesv.h	/^inline void gesv( DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, int* ipiv )$/;"	f	namespace:blaze
gesv	amun/3rd_party/blaze/math/lapack/gesv.h	/^inline void gesv( DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, int* ipiv )$/;"	f	namespace:blaze
get	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline T UnsignedValue<T>::get() const$/;"	f	class:blaze::UnsignedValue
get	amun/3rd_party/spdlog/details/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	amun/3rd_party/spdlog/details/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
get	amun/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
get	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::get(const std::string& name)$/;"	f	class:spdlog
get	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
get	amun/3rd_party/thrust_bind/bind.hpp	/^       thrust::get<$/;"	f	namespace:thrust::experimental::detail::bind_detail
get	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(const std::vector<node*>& \/* sequence *\/,$/;"	f	struct:YAML::detail::get_idx
get	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(const std::vector<node*>& sequence, const Key& key,$/;"	f	struct:YAML::detail::get_idx
get	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(std::vector<node*>& sequence, const Key& key,$/;"	f	struct:YAML::detail::get_idx
get	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
get	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node* node_data::get(const Key& key,$/;"	f	class:YAML::detail::node_data
get	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node& get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
get	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node& get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
get	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node* get(const Key& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node
get	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node* get(node& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node
get	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node& get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
get	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node& get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
get	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node* get(const Key& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node_ref
get	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node* get(node& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node_ref
get	amun/3rd_party/yaml-cpp/node_data.cpp	/^node& node_data::get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
get	amun/3rd_party/yaml-cpp/node_data.cpp	/^node* node_data::get(node& key, shared_memory_holder \/* pMemory *\/) const {$/;"	f	class:YAML::detail::node_data
get	amun/3rd_party/yaml-cpp/setting.h	/^  const T get() const { return m_value; }$/;"	f	class:YAML::Setting
get	amun/3rd_party/yaml-cpp/stream.cpp	/^char Stream::get() {$/;"	f	class:YAML::Stream
get	amun/3rd_party/yaml-cpp/stream.cpp	/^std::string Stream::get(int n) {$/;"	f	class:YAML::Stream
get	amun/common/scorer.h	/^    T& get() {$/;"	f	class:amunmt::State
get	amun/common/scorer.h	/^    const T& get() const {$/;"	f	class:amunmt::State
getCounter	amun/3rd_party/blaze/util/timing/Timer.h	/^inline size_t Timer<TP>::getCounter() const$/;"	f	class:blaze::timing::Timer
getCoverage	amun/plugin/neural_phrase.h	/^    std::pair<int, int> getCoverage() {$/;"	f	class:amunmt::NeuralPhrase
getCpuTime	amun/3rd_party/blaze/util/Time.h	/^inline double getCpuTime()$/;"	f	namespace:blaze
getDate	amun/3rd_party/blaze/util/Time.h	/^inline std::string getDate()$/;"	f	namespace:blaze
getFirstOfMany	amun/cpu/npz_converter.h	/^    mblas::Tensor getFirstOfMany(const std::vector<std::pair<std::string, bool>> keys) const {$/;"	f	class:amunmt::CPU::NpzConverter
getNBestList	amun/fpga/nth_element.cpp	/^void NthElement::getNBestList(const std::vector<uint>& beamSizes, mblas::Tensor& Probs,$/;"	f	class:amunmt::FPGA::NthElement
getNumTasks	amun/common/threadpool.h	/^    size_t getNumTasks() const {$/;"	f	class:amunmt::ThreadPool
getNumThreads	amun/3rd_party/blaze/math/smp/default/Functions.h	/^BLAZE_ALWAYS_INLINE size_t getNumThreads()$/;"	f	namespace:blaze
getNumThreads	amun/3rd_party/blaze/math/smp/openmp/Functions.h	/^BLAZE_ALWAYS_INLINE size_t getNumThreads()$/;"	f	namespace:blaze
getNumThreads	amun/3rd_party/blaze/math/smp/threads/Functions.h	/^BLAZE_ALWAYS_INLINE size_t getNumThreads()$/;"	f	namespace:blaze
getScore	amun/plugin/neural_phrase.h	/^    float getScore(int i) {$/;"	f	class:amunmt::NeuralPhrase
getSeed	amun/3rd_party/blaze/util/Random.h	/^inline uint32_t getSeed()$/;"	f	namespace:blaze
getTime	amun/3rd_party/blaze/util/Time.h	/^inline std::string getTime()$/;"	f	namespace:blaze
getTimestamp	amun/3rd_party/blaze/util/timing/CpuPolicy.h	/^inline double CpuPolicy::getTimestamp()$/;"	f	class:blaze::timing::CpuPolicy
getTimestamp	amun/3rd_party/blaze/util/timing/WcPolicy.h	/^inline double WcPolicy::getTimestamp()$/;"	f	class:blaze::timing::WcPolicy
getWcTime	amun/3rd_party/blaze/util/Time.h	/^inline double getWcTime()$/;"	f	namespace:blaze
get_allocator	amun/3rd_party/spdlog/details/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer
get_allocator	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer
get_arg	amun/3rd_party/spdlog/details/format.cc	/^Arg fmt::internal::PrintfFormatter<Char>::get_arg($/;"	f	class:fmt::internal::PrintfFormatter
get_arg	amun/3rd_party/spdlog/details/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase
get_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase
get_arg	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^internal::Arg PrintfFormatter<Char, AF>::get_arg(const Char *s,$/;"	f	class:fmt::PrintfFormatter
get_cached_offset	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    int get_cached_offset(const log_msg& msg, const std::tm& tm_time)$/;"	f	class:spdlog::details::z_formatter
get_idx	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx {$/;"	s	namespace:YAML::detail
get_idx	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx<Key, typename std::enable_if<std::is_signed<Key>::value>::type> {$/;"	s	namespace:YAML::detail
get_idx	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx<Key,$/;"	s	namespace:YAML::detail
get_sequence_1	amun/3rd_party/utf8/core.h	/^    utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_2	amun/3rd_party/utf8/core.h	/^    utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_3	amun/3rd_party/utf8/core.h	/^    utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_4	amun/3rd_party/utf8/core.h	/^    utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
getrf	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	/^inline void getrf( int m, int n, complex<double>* A, int lda, int* ipiv, int* info )$/;"	f	namespace:blaze
getrf	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	/^inline void getrf( int m, int n, complex<float>* A, int lda, int* ipiv, int* info )$/;"	f	namespace:blaze
getrf	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	/^inline void getrf( int m, int n, double* A, int lda, int* ipiv, int* info )$/;"	f	namespace:blaze
getrf	amun/3rd_party/blaze/math/lapack/clapack/getrf.h	/^inline void getrf( int m, int n, float* A, int lda, int* ipiv, int* info )$/;"	f	namespace:blaze
getrf	amun/3rd_party/blaze/math/lapack/getrf.h	/^inline void getrf( DenseMatrix<MT,SO>& A, int* ipiv )$/;"	f	namespace:blaze
getri	amun/3rd_party/blaze/math/lapack/clapack/getri.h	/^inline void getri( int n, complex<double>* A, int lda, const int* ipiv,$/;"	f	namespace:blaze
getri	amun/3rd_party/blaze/math/lapack/clapack/getri.h	/^inline void getri( int n, complex<float>* A, int lda, const int* ipiv,$/;"	f	namespace:blaze
getri	amun/3rd_party/blaze/math/lapack/clapack/getri.h	/^inline void getri( int n, double* A, int lda, const int* ipiv, double* work, int lwork, int* info )$/;"	f	namespace:blaze
getri	amun/3rd_party/blaze/math/lapack/clapack/getri.h	/^inline void getri( int n, float* A, int lda, const int* ipiv, float* work, int lwork, int* info )$/;"	f	namespace:blaze
getri	amun/3rd_party/blaze/math/lapack/getri.h	/^inline void getri( DenseMatrix<MT,SO>& A, const int* ipiv )$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	/^inline void getrs( char trans, int n, int nrhs, const complex<double>* A, int lda,$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	/^inline void getrs( char trans, int n, int nrhs, const complex<float>* A, int lda,$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	/^inline void getrs( char trans, int n, int nrhs, const double* A, int lda,$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/clapack/getrs.h	/^inline void getrs( char trans, int n, int nrhs, const float* A, int lda,$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/getrs.h	/^inline void getrs( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char trans, const int* ipiv )$/;"	f	namespace:blaze
getrs	amun/3rd_party/blaze/math/lapack/getrs.h	/^inline void getrs( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B,$/;"	f	namespace:blaze
gmtime	amun/3rd_party/spdlog/details/os.h	/^inline std::tm gmtime()$/;"	f	namespace:spdlog::details::os
gmtime	amun/3rd_party/spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
god_	amun/common/base_best_hyps.h	/^    const God &god_;$/;"	m	class:amunmt::BaseBestHyps
god_	amun/common/scorer.h	/^    const God &god_;$/;"	m	class:amunmt::Scorer
god_	amun/plugin/nmt.h	/^    amunmt::God god_;$/;"	m	class:amunmt::MosesPlugin
good	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline bool Archive<Stream>::good() const$/;"	f	class:blaze::Archive
good	amun/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::good() const { return m_pState->good(); }$/;"	f	class:YAML::Emitter
good	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool good() const { return m_isGood; }$/;"	f	class:YAML::EmitterState
gpuLoaders_	amun/common/god.h	/^    Loaders cpuLoaders_, gpuLoaders_, fpgaLoaders_;$/;"	m	class:amunmt::God
green	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string green      = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grey	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string grey       = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grow	amun/3rd_party/spdlog/details/format.cc	/^void fmt::internal::FixedBuffer<Char>::grow(std::size_t)$/;"	f	class:fmt::internal::FixedBuffer
grow	amun/3rd_party/spdlog/details/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer
grow	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	void internal::FixedBuffer<Char>::grow(std::size_t)$/;"	f	class:fmt::internal::FixedBuffer
grow	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer
grow_buffer	amun/3rd_party/spdlog/details/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
grow_buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
gru_	amun/cpu/dl4mt/decoder.h	/^        const GRU<Weights2> gru_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
gru_	amun/cpu/dl4mt/decoder.h	/^        const GRU<Weights> gru_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::RNNFinal
gru_	amun/cpu/dl4mt/encoder.h	/^        const GRU<Weights> gru_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder::RNN
gru_	amun/cpu/nematus/decoder.h	/^        const GRU<Weights2> gru_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNHidden
gru_	amun/cpu/nematus/decoder.h	/^        const GRU<WeightsGRU> gru_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNFinal
gru_	amun/cpu/nematus/encoder.h	/^        const GRU<WeightsGRU> gru_;$/;"	m	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
gru_	amun/fpga/decoder.h	/^      const GRU<Weights2> gru_;$/;"	m	class:amunmt::FPGA::Decoder::RNNHidden
gru_	amun/fpga/decoder.h	/^      const GRU<Weights> gru_;$/;"	m	class:amunmt::FPGA::Decoder::RNNFinal
gru_	amun/fpga/encoder.h	/^      const GRU<Weights> gru_;$/;"	m	class:amunmt::FPGA::Encoder::RNN
gru_	amun/gpu/dl4mt/decoder.h	/^        std::unique_ptr<Cell> gru_;$/;"	m	class:amunmt::GPU::Decoder::RNNFinal
gru_	amun/gpu/dl4mt/decoder.h	/^        std::unique_ptr<Cell> gru_;$/;"	m	class:amunmt::GPU::Decoder::RNNHidden
gru_	amun/gpu/dl4mt/encoder.h	/^        const std::unique_ptr<Cell> gru_;$/;"	m	class:amunmt::GPU::Encoder::RNN
h_res	amun/gpu/mblas/nth_element.h	/^    std::vector<NthOut> h_res;$/;"	m	class:amunmt::GPU::NthElement
h_sentenceLengths_	amun/gpu/decoder/encoder_decoder.h	/^    std::vector<unsigned> h_sentenceLengths_;$/;"	m	class:amunmt::GPU::EncoderDecoder
handle	amun/3rd_party/yaml-cpp/tag.h	/^  std::string handle, value;$/;"	m	struct:YAML::Tag
handle_	amun/gpu/mblas/handles.h	/^    cublasHandle_t handle_;$/;"	m	class:amunmt::GPU::mblas::CublasHandler
handle_flag	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::handle_flag(char flag)$/;"	f	class:spdlog::pattern_formatter
handle_flush_interval	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::handle_flush_interval(log_clock::time_point& now, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
has	amun/cpu/npz_converter.h	/^    bool has(std::string key) const {$/;"	f	class:amunmt::CPU::NpzConverter
hasTerminated	amun/3rd_party/blaze/util/Thread.h	/^inline bool Thread<TT,MT,LT,CT>::hasTerminated() const$/;"	f	class:blaze::Thread
hash	amun/common/processor/bpe.h	/^  template<typename S, typename T> struct hash<pair<S, T>>$/;"	s	namespace:std
hash_combine	amun/common/processor/bpe.h	/^inline void hash_combine(std::size_t & seed, const T & v)$/;"	f
height	amun/3rd_party/fast_align/src/array2d.h	/^  unsigned height() const { return height_; }$/;"	f	class:Array2D
height_	amun/3rd_party/fast_align/src/array2d.h	/^  unsigned height_;$/;"	m	class:Array2D
hesv	amun/3rd_party/blaze/math/lapack/clapack/hesv.h	/^inline void hesv( char uplo, int n, int nrhs, complex<double>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
hesv	amun/3rd_party/blaze/math/lapack/clapack/hesv.h	/^inline void hesv( char uplo, int n, int nrhs, complex<float>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
hesv	amun/3rd_party/blaze/math/lapack/hesv.h	/^inline void hesv( DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, int* ipiv )$/;"	f	namespace:blaze
hesv	amun/3rd_party/blaze/math/lapack/hesv.h	/^inline void hesv( DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B,$/;"	f	namespace:blaze
hetrf	amun/3rd_party/blaze/math/lapack/clapack/hetrf.h	/^inline void hetrf( char uplo, int n, complex<double>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
hetrf	amun/3rd_party/blaze/math/lapack/clapack/hetrf.h	/^inline void hetrf( char uplo, int n, complex<float>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
hetrf	amun/3rd_party/blaze/math/lapack/hetrf.h	/^inline void hetrf( DenseMatrix<MT,SO>& A, char uplo, int* ipiv )$/;"	f	namespace:blaze
hetri	amun/3rd_party/blaze/math/lapack/clapack/hetri.h	/^inline void hetri( char uplo, int n, complex<double>* A, int lda,$/;"	f	namespace:blaze
hetri	amun/3rd_party/blaze/math/lapack/clapack/hetri.h	/^inline void hetri( char uplo, int n, complex<float>* A, int lda,$/;"	f	namespace:blaze
hetri	amun/3rd_party/blaze/math/lapack/hetri.h	/^inline void hetri( DenseMatrix<MT,SO>& A, char uplo, const int* ipiv )$/;"	f	namespace:blaze
hetrs	amun/3rd_party/blaze/math/lapack/clapack/hetrs.h	/^inline void hetrs( char uplo, int n, int nrhs, const complex<double>* A, int lda,$/;"	f	namespace:blaze
hetrs	amun/3rd_party/blaze/math/lapack/clapack/hetrs.h	/^inline void hetrs( char uplo, int n, int nrhs, const complex<float>* A, int lda,$/;"	f	namespace:blaze
hetrs	amun/3rd_party/blaze/math/lapack/hetrs.h	/^inline void hetrs( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, const int* ipiv )$/;"	f	namespace:blaze
hetrs	amun/3rd_party/blaze/math/lapack/hetrs.h	/^inline void hetrs( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, char uplo, const int* ipiv )$/;"	f	namespace:blaze
history_	amun/common/history.h	/^    std::vector<Beam> history_;$/;"	m	class:amunmt::History
i	amun/common/history.h	/^      unsigned i;$/;"	m	struct:amunmt::History::HypothesisCoord
i_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   size_t i_;       \/\/!< Row-index of the accessed matrix element.$/;"	m	class:blaze::NonNumericProxy
i_	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   size_t i_;   \/\/!< Row-index of the accessed sparse matrix element.$/;"	m	class:blaze::MatrixAccessProxy
i_	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   size_t i_;   \/\/!< Index of the accessed sparse vector element.$/;"	m	class:blaze::VectorAccessProxy
id2Indices	amun/gpu/mblas/tensor_wrapper.h	/^  void id2Indices(unsigned id, unsigned *out) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
id2str_	amun/common/vocab.h	/^    Id2Str id2str_;$/;"	m	class:amunmt::Vocab
ifstream_	amun/3rd_party/extract_lex/file_stream.h	/^    boost::filesystem::ifstream ifstream_;$/;"	m	class:InputFileStream
ifstream_	amun/common/file_stream.h	/^    boost::filesystem::ifstream ifstream_;$/;"	m	class:amunmt::InputFileStream
imag	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline typename HermitianProxy<MT>::ValueType HermitianProxy<MT>::imag() const$/;"	f	class:blaze::HermitianProxy
imag	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void HermitianProxy<MT>::imag( ValueType value ) const$/;"	f	class:blaze::HermitianProxy
imag	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline typename HermitianValue<MT>::ValueType HermitianValue<MT>::imag() const$/;"	f	class:blaze::HermitianValue
imag	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::imag( ValueType value ) const$/;"	f	class:blaze::HermitianValue
imag	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline typename NumericProxy<MT>::ValueType NumericProxy<MT>::imag() const$/;"	f	class:blaze::NumericProxy
imag	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void NumericProxy<MT>::imag( ValueType value ) const$/;"	f	class:blaze::NumericProxy
imag	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline typename SymmetricValue<MT>::ValueType SymmetricValue<MT>::imag() const$/;"	f	class:blaze::SymmetricValue
imag	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::imag( ValueType value ) const$/;"	f	class:blaze::SymmetricValue
imag	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline typename UniLowerProxy<MT>::ValueType UniLowerProxy<MT>::imag() const$/;"	f	class:blaze::UniLowerProxy
imag	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void UniLowerProxy<MT>::imag( ValueType value ) const$/;"	f	class:blaze::UniLowerProxy
imag	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline typename UniLowerValue<MT>::ValueType UniLowerValue<MT>::imag() const$/;"	f	class:blaze::UniLowerValue
imag	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void UniLowerValue<MT>::imag( ValueType value ) const$/;"	f	class:blaze::UniLowerValue
imag	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline typename UniUpperProxy<MT>::ValueType UniUpperProxy<MT>::imag() const$/;"	f	class:blaze::UniUpperProxy
imag	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void UniUpperProxy<MT>::imag( ValueType value ) const$/;"	f	class:blaze::UniUpperProxy
imag	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline typename UniUpperValue<MT>::ValueType UniUpperValue<MT>::imag() const$/;"	f	class:blaze::UniUpperValue
imag	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void UniUpperValue<MT>::imag( ValueType value ) const$/;"	f	class:blaze::UniUpperValue
imag	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Imag,SO> imag( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
imag	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Imag,TF> imag( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
imag	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Imag,SO> imag( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
imag	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Imag,SO>& imag( const SMatForEachExpr<MT,Imag,SO>& sm )$/;"	f	namespace:blaze
imag	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Imag,TF> imag( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
imag	amun/3rd_party/blaze/math/functors/Imag.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( imag( a ) )$/;"	f	struct:blaze::Imag
imag	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^inline typename ComplexProxy<PT,CT>::ValueType ComplexProxy<PT,CT>::imag() const$/;"	f	class:blaze::ComplexProxy
imag	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^inline void ComplexProxy<PT,CT>::imag( ValueType value ) const$/;"	f	class:blaze::ComplexProxy
imag	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( imag( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
in_	amun/3rd_party/fast_align/src/atools.cc	/^  Array2D<bool> in_;   \/\/ intersection alignment$/;"	m	struct:RefineCommand	file:
inactive	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   inactive = 0,  \/\/!< Log level for no logging.$/;"	e	enum:blaze::logging::LogLevel
increment_until_defined	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter increment_until_defined(MapIter it) {$/;"	f	class:YAML::detail::node_iterator_base
ind	amun/gpu/mblas/nth_element_kernels.h	/^  unsigned ind;$/;"	m	struct:amunmt::GPU::NthOut
ind	amun/gpu/mblas/nth_element_kernels.h	/^  unsigned ind;$/;"	m	struct:amunmt::GPU::NthOutBatch
indent	amun/3rd_party/yaml-cpp/emitterstate.h	/^    int indent;$/;"	m	struct:YAML::EmitterState::Group
indent	amun/3rd_party/yaml-cpp/scanscalar.h	/^  int indent;         \/\/ what level of indentation should be eaten and ignored?$/;"	m	struct:YAML::ScanScalarParams
index	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline typename HermitianElement<MT>::IndexType HermitianElement<MT>::index() const$/;"	f	class:blaze::HermitianElement
index	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline IndexType index() const {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
index	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline typename SymmetricElement<MT>::IndexType SymmetricElement<MT>::index() const$/;"	f	class:blaze::SymmetricElement
index	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline typename UniLowerElement<MT>::IndexType UniLowerElement<MT>::index() const$/;"	f	class:blaze::UniLowerElement
index	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline typename UniUpperElement<MT>::IndexType UniUpperElement<MT>::index() const$/;"	f	class:blaze::UniUpperElement
index	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline size_t index() const {$/;"	f	class:ConstIterator
index	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline size_t index() const {$/;"	f	class:ConstIterator
index	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline size_t index() const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
index	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline typename ValueIndexPair<Type>::IndexType ValueIndexPair<Type>::index() const$/;"	f	class:blaze::ValueIndexPair
index	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline IndexType index() const {$/;"	f	class:blaze::Column::ColumnElement
index	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline IndexType index() const {$/;"	f	class:blaze::Row::RowElement
index	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline IndexType index() const {$/;"	f	class:blaze::Submatrix::SubmatrixElement
index	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline IndexType index() const {$/;"	f	class:blaze::Subvector::SubvectorElement
index_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::HermitianElement
index_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::HermitianValue
index_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::HermitianMatrix::Iterator
index_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::SymmetricMatrix::Iterator
index_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::SymmetricElement
index_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   size_t       index_;   \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::SymmetricValue
index_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      size_t       index_;  \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::UniLowerMatrix::Iterator
index_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      size_t       index_;  \/\/!< The row\/column index of the iterator.$/;"	m	class:blaze::UniUpperMatrix::Iterator
index_	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   size_t index_;  \/\/!< Index of the value-index-pair.$/;"	m	class:blaze::ValueIndexPair
indexes_	amun/plugin/nbest.h	/^    std::vector<size_t> indexes_;$/;"	m	class:NBest
indices2Id	amun/gpu/mblas/tensor_wrapper.h	/^  inline unsigned indices2Id(unsigned a) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
indices2Id	amun/gpu/mblas/tensor_wrapper.h	/^  inline unsigned indices2Id(unsigned a, unsigned b) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
indices2Id	amun/gpu/mblas/tensor_wrapper.h	/^  inline unsigned indices2Id(unsigned a, unsigned b, unsigned c) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
indices2Id	amun/gpu/mblas/tensor_wrapper.h	/^  inline unsigned indices2Id(unsigned a, unsigned b, unsigned c, unsigned d) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
indices_	amun/3rd_party/blaze/util/Indices.h	/^   std::vector<size_t> indices_;  \/\/!< The generated indices.$/;"	m	class:blaze::Indices
indices_	amun/fpga/decoder.h	/^    Array<uint> indices_;$/;"	m	class:amunmt::FPGA::Decoder::Embeddings
indices_	amun/fpga/encoder_decoder.h	/^  Array<uint> indices_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
indices_	amun/gpu/decoder/encoder_decoder.h	/^    mblas::Vector<unsigned> indices_;$/;"	m	class:amunmt::GPU::EncoderDecoder
indices_	amun/gpu/dl4mt/decoder.h	/^        mblas::Vector<unsigned> indices_;$/;"	m	class:amunmt::GPU::Decoder::Embeddings
inf	amun/3rd_party/blaze/math/Infinity.h	/^const Infinity inf;$/;"	m	namespace:blaze
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline char inf () { return std::numeric_limits<char>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline double inf () { return  std::numeric_limits<double>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline float inf () { return  std::numeric_limits<float>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline int inf () { return std::numeric_limits<int>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline long double inf () { return  std::numeric_limits<long double>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline long inf () { return std::numeric_limits<long>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline ptrdiff_t inf () { return std::numeric_limits<ptrdiff_t>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline short inf () { return std::numeric_limits<short>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline signed char inf () { return std::numeric_limits<signed char>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline size_t inf() { return std::numeric_limits<size_t>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline unsigned char inf() { return std::numeric_limits<unsigned char>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline unsigned int inf() { return std::numeric_limits<unsigned int>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline unsigned long inf() { return std::numeric_limits<unsigned long>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline unsigned short inf() { return std::numeric_limits<unsigned short>::max(); }$/;"	f	struct:blaze::Limits
inf	amun/3rd_party/blaze/util/Limits.h	/^   static inline wchar_t inf () { return std::numeric_limits<wchar_t>::max(); }$/;"	f	struct:blaze::Limits
info	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   info     = 3,  \/\/!< Log level for high-level information.$/;"	e	enum:blaze::logging::LogLevel
info	amun/3rd_party/spdlog/common.h	/^    info = 2,$/;"	e	enum:spdlog::level::__anon34
info	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T& msg)$/;"	f	class:spdlog::logger
info	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
info_	amun/common/god.h	/^    std::shared_ptr<spdlog::logger> info_;$/;"	m	class:amunmt::God
init	amun/3rd_party/blaze/util/MemoryPool.h	/^inline void MemoryPool<Type,Blocksize>::Block::init()$/;"	f	class:blaze::MemoryPool::Block
init	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::SystemError::init($/;"	f	class:fmt::SystemError
init	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::WindowsError::init($/;"	f	class:fmt::WindowsError
init	amun/3rd_party/spdlog/details/format.cc	/^void fmt::internal::ArgMap<Char>::init(const ArgList &args)$/;"	f	class:fmt::internal::ArgMap
init	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void SystemError::init($/;"	f	class:fmt::SystemError
init	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void WindowsError::init($/;"	f	class:fmt::WindowsError
init	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	void internal::ArgMap<Char>::init(const ArgList &args)$/;"	f	class:fmt::internal::ArgMap
init	amun/python/amunmt.cpp	/^void init(const std::string &options) { god_.Init(options); }$/;"	f
init	amun/python/bk.cpp	/^void init(const std::string &options) { god_.Init(options); }$/;"	f
init	amun/python/new.cpp	/^void init(const std::string &options) { god_.Init(options); }$/;"	f
initPool	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline size_t ThreadBackend<TT,MT,LT,CT>::initPool()$/;"	f	class:blaze::ThreadBackend
innerCell_	amun/gpu/dl4mt/multiplicative.h	/^    CellType<InnerWeights> innerCell_;$/;"	m	class:amunmt::GPU::Multiplicative
input	amun/3rd_party/fast_align/src/fast_align.cc	/^string input;$/;"	v
inputPath	amun/common/config.h	/^    std::string inputPath;$/;"	m	class:amunmt::Config
inputStream_	amun/common/god.h	/^    mutable std::unique_ptr<InputFileStream> inputStream_;$/;"	m	class:amunmt::God
input_1	amun/3rd_party/fast_align/src/atools.cc	/^string input_1;$/;"	v
input_2	amun/3rd_party/fast_align/src/atools.cc	/^string input_2;$/;"	v
input_model_file	amun/3rd_party/fast_align/src/fast_align.cc	/^string input_model_file = "";$/;"	v
insert	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::DiagonalMatrix
insert	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::HermitianMatrix
insert	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::LowerMatrix
insert	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::StrictlyLowerMatrix
insert	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::StrictlyUpperMatrix
insert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::SymmetricMatrix
insert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::SymmetricMatrix
insert	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UniLowerMatrix
insert	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UniUpperMatrix
insert	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UpperMatrix
insert	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline Iterator insert( size_t i, size_t j, const ElementType& value ) {$/;"	f	class:blaze::SMatTransposer
insert	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline Iterator insert( size_t index, const ElementType& value ) {$/;"	f	class:blaze::SVecTransposer
insert	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::insert( size_t i, size_t j, const ElementType& value ) const$/;"	f	class:blaze::SparseMatrixProxy
insert	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::insert( size_t index, const ElementType& value ) const$/;"	f	class:blaze::SparseVectorProxy
insert	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::insert( Iterator pos, size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
insert	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::insert( size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
insert	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::insert( Iterator pos, size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
insert	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::insert( size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
insert	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::insert( Iterator pos, size_t index, const Type& value )$/;"	f	class:blaze::CompressedVector
insert	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::insert( size_t index, const Type& value )$/;"	f	class:blaze::CompressedVector
insert	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
insert	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
insert	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
insert	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
insert	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
insert	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
insert	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::Submatrix
insert	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::insert( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::Submatrix
insert	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::insert( size_t index, const ElementType& value )$/;"	f	class:blaze::Subvector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::Iterator PtrVector<T,D,G>::insert( Iterator pos, PointerType p )$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::insert( Iterator pos, IteratorType first, IteratorType last )$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::insert( Iterator pos, IteratorType first, IteratorType last,$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::insert( Iterator pos, IteratorType* first, IteratorType* last )$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^void PtrVector<T,D,G>::insert( T** pos, IteratorType first, IteratorType last, SizeType n )$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/blaze/util/PtrVector.h	/^void PtrVector<T,D,G>::insert( T**const pos, PointerType p )$/;"	f	class:blaze::PtrVector
insert	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
insert	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
insert	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
insert_map_pair	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::insert_map_pair(node& key, node& value) {$/;"	f	class:YAML::detail::node_data
instance	amun/3rd_party/spdlog/details/registry.h	/^    static registry_t<Mutex>& instance()$/;"	f	class:spdlog::details::registry_t
instance	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stderr_sink
instance	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stdout_sink
instance_	amun/gpu/mblas/handles.h	/^    static thread_local CublasHandler instance_;$/;"	m	class:amunmt::GPU::mblas::CublasHandler
instance_	amun/gpu/mblas/handles.h	/^    static thread_local CudaStreamHandler instance_;$/;"	m	class:amunmt::GPU::mblas::CudaStreamHandler
int_type	amun/3rd_party/spdlog/details/format.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::FormatBuf
int_type	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::internal::FormatBuf
int_value	amun/3rd_party/spdlog/details/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon17
int_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon51
integer_sequence	amun/3rd_party/thrust_bind/bind.hpp	/^struct integer_sequence$/;"	s	namespace:thrust::experimental::detail::bind_detail
internal	amun/3rd_party/spdlog/details/format.cc	/^	namespace internal {$/;"	n	namespace:fmt	file:
internal	amun/3rd_party/spdlog/details/format.h	/^namespace internal$/;"	n	namespace:fmt
internal	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	namespace internal {$/;"	n	namespace:fmt	file:
internal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^namespace internal$/;"	n	namespace:fmt
internal	amun/3rd_party/spdlog/fmt/bundled/ostream.cc	/^	namespace internal {$/;"	n	namespace:fmt	file:
internal	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^namespace internal$/;"	n	namespace:fmt
internal	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^namespace internal$/;"	n	namespace:fmt
internal	amun/3rd_party/utf8/core.h	/^namespace internal$/;"	n	namespace:utf8
intmax_t	amun/3rd_party/spdlog/details/format.h	/^typedef __int64          intmax_t;$/;"	t
intmax_t	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef __int64          intmax_t;$/;"	t
inv	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^inline const DMatInvExpr<MT,SO> inv( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
inv	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^inline typename DMatInvExpr<MT,SO>::Operand inv( const DMatInvExpr<MT,SO>& dm )$/;"	f	namespace:blaze
inv	amun/3rd_party/blaze/math/functors/Inv.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( inv( a ) )$/;"	f	struct:blaze::Inv
inv	amun/3rd_party/blaze/math/shims/InvCbrt.h	/^inline auto invcbrt( T a ) noexcept -> decltype( inv( cbrt( a ) ) )$/;"	f	namespace:blaze
inv	amun/3rd_party/blaze/math/shims/InvSqrt.h	/^inline auto invsqrt( T a ) noexcept -> decltype( inv( sqrt( a ) ) )$/;"	f	namespace:blaze
inv	amun/3rd_party/blaze/math/shims/InvSqrt.h	/^inline auto invsqrt( const complex<T>& a ) noexcept -> decltype( inv( sqrt( a ) ) )$/;"	f	namespace:blaze
invalid_code_point	amun/3rd_party/utf8/checked.h	/^        invalid_code_point(uint32_t cp) : cp(cp) {}$/;"	f	class:utf8::invalid_code_point
invalid_code_point	amun/3rd_party/utf8/checked.h	/^    class invalid_code_point : public exception {$/;"	c	namespace:utf8
invalid_utf16	amun/3rd_party/utf8/checked.h	/^        invalid_utf16 (uint16_t u) : u16(u) {}$/;"	f	class:utf8::invalid_utf16
invalid_utf16	amun/3rd_party/utf8/checked.h	/^    class invalid_utf16 : public exception {$/;"	c	namespace:utf8
invalid_utf8	amun/3rd_party/utf8/checked.h	/^        invalid_utf8 (uint8_t u) : u8(u) {}$/;"	f	class:utf8::invalid_utf8
invalid_utf8	amun/3rd_party/utf8/checked.h	/^    class invalid_utf8 : public exception {$/;"	c	namespace:utf8
invcbrt	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,InvCbrt,SO> invcbrt( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invcbrt	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,InvCbrt,TF> invcbrt( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
invcbrt	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,InvCbrt,SO> invcbrt( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
invcbrt	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,InvCbrt,TF> invcbrt( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
invcbrt	amun/3rd_party/blaze/math/functors/InvCbrt.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( invcbrt( a ) )$/;"	f	struct:blaze::InvCbrt
invcbrt	amun/3rd_party/blaze/math/functors/InvCbrt.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( invcbrt( a ) )$/;"	f	struct:blaze::InvCbrt
invcbrt	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( invcbrt( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void HermitianProxy<MT>::invert() const$/;"	f	class:blaze::HermitianProxy
invert	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void invert( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::invert() const$/;"	f	class:blaze::HermitianValue
invert	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void invert( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void NumericProxy<MT>::invert() const$/;"	f	class:blaze::NumericProxy
invert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void invert( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::invert() const$/;"	f	class:blaze::SymmetricValue
invert	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void invert( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void UniLowerProxy<MT>::invert() const$/;"	f	class:blaze::UniLowerProxy
invert	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void invert( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void UniLowerValue<MT>::invert() const$/;"	f	class:blaze::UniLowerValue
invert	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void invert( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void UniUpperProxy<MT>::invert() const$/;"	f	class:blaze::UniUpperProxy
invert	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void invert( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void UniUpperValue<MT>::invert() const$/;"	f	class:blaze::UniUpperValue
invert	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void invert( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline void invert( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
invert	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline DisableIf_< HasMutableDataAccess<MT> > invert( Submatrix<MT,AF,SO,true>& sm )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invert2x2( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invert2x2( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invert2x2( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invert2x2( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invert2x2( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invert2x2( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invert2x2( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert2x2	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert2x2( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invert3x3( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invert3x3( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invert3x3( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invert3x3( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invert3x3( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invert3x3( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invert3x3( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert3x3	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert3x3( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invert4x4( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invert4x4( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invert4x4( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invert4x4( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invert4x4( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invert4x4( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invert4x4( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert4x4	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert4x4( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invert5x5( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invert5x5( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invert5x5( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invert5x5( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invert5x5( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invert5x5( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invert5x5( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert5x5	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert5x5( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invert6x6( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invert6x6( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invert6x6( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invert6x6( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invert6x6( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invert6x6( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invert6x6( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invert6x6	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invert6x6( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invertByDefault( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invertByDefault( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invertByDefault( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invertByDefault( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invertByDefault( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invertByDefault( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByDefault	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invertByDefault( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invertByLDLH( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invertByLDLH( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invertByLDLH( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invertByLDLH( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invertByLDLH( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invertByLDLH( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLH	amun/3rd_party/blaze/math/dense/Inversion.h	/^   invertByLDLH( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invertByLDLT( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invertByLDLT( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invertByLDLT( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invertByLDLT( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invertByLDLT( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invertByLDLT( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLDLT	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invertByLDLT( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invertByLLH( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invertByLLH( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invertByLLH( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invertByLLH( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invertByLLH( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invertByLLH( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLLH	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invertByLLH( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void invertByLU( HermitianMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void invertByLU( LowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void invertByLU( SymmetricMatrix<MT,SO,true,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void invertByLU( UniLowerMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void invertByLU( UniUpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void invertByLU( UpperMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertByLU	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invertByLU( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invertNxN	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void invertNxN( DiagonalMatrix<MT,SO,true>& m )$/;"	f	namespace:blaze
invertNxN	amun/3rd_party/blaze/math/dense/Inversion.h	/^inline void invertNxN( DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invsqrt	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,InvSqrt,SO> invsqrt( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
invsqrt	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,InvSqrt,TF> invsqrt( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
invsqrt	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,InvSqrt,SO> invsqrt( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
invsqrt	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,InvSqrt,TF> invsqrt( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
invsqrt	amun/3rd_party/blaze/math/functors/InvSqrt.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( invsqrt( a ) )$/;"	f	struct:blaze::InvSqrt
invsqrt	amun/3rd_party/blaze/math/functors/InvSqrt.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( invsqrt( a ) )$/;"	f	struct:blaze::InvSqrt
invsqrt	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( invsqrt( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
is	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  bool is(const node& rhs) const { return m_pRef == rhs.m_pRef; }$/;"	f	class:YAML::detail::node
is	amun/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::is(const Node& rhs) const {$/;"	f	class:YAML::Node
isAliased	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   inline bool isAliased( const T* alias ) const {$/;"	f
isAliased	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline bool Column<MT,false,false,false>::isAliased( const Other* alias ) const$/;"	f	class:blaze::Column
isAligned	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool isAligned() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
isAligned_	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      bool         isAligned_;  \/\/!< Memory alignment flag.$/;"	m	class:blaze::Submatrix::SubmatrixIterator
isAligned_	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      bool         isAligned_;  \/\/!< Memory alignment flag.$/;"	m	class:blaze::Subvector::SubvectorIterator
isDefault	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool isDefault( const DiagonalMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool isDefault( const HermitianMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool isDefault( const LowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool isDefault( const StrictlyLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool isDefault( const StrictlyUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline bool isDefault( const SymmetricMatrix<MT,SO,DF,NF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool isDefault( const UniLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool isDefault( const UniUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool isDefault( const UpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline bool isDefault( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline bool isDefault( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline bool isDefault( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline bool isDefault( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline bool isDefault( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline bool isDefault( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline bool isDefault( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline bool isDefault( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline bool isDefault( const SharedValue<Type>& value )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline bool isDefault( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline bool isDefault( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline bool isDefault( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline bool isDefault( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline bool isDefault( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline bool isDefault( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline bool isDefault( const CompressedMatrix<Type,SO>& m )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline bool isDefault( const CompressedVector<Type,TF>& v )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline bool isDefault( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline bool isDefault( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Column.h	/^inline bool isDefault( const Column<MT,SO,DF,SF>& column )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Column.h	/^inline bool isDefault( const Column<MT,SO,false,SF>& column )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Row.h	/^inline bool isDefault( const Row<MT,SO,DF,SF>& row )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Row.h	/^inline bool isDefault( const Row<MT,SO,false,SF>& row )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isDefault( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isDefault( const Submatrix<MT,AF,SO,false>& sm )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isDefault( const Subvector<VT,AF,TF,DF>& sv )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isDefault( const Subvector<VT,AF,TF,false>& sv )$/;"	f	namespace:blaze
isDefault	amun/3rd_party/yaml-cpp/directives.h	/^  bool isDefault;$/;"	m	struct:YAML::Version
isDefault_backend	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool isDefault_backend( const StrictlyLowerMatrix<MT,SO,DF>& m, FalseType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool isDefault_backend( const StrictlyLowerMatrix<MT,SO,DF>& m, TrueType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool isDefault_backend( const StrictlyUpperMatrix<MT,SO,DF>& m, FalseType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool isDefault_backend( const StrictlyUpperMatrix<MT,SO,DF>& m, TrueType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool isDefault_backend( const UniLowerMatrix<MT,SO,DF>& m, FalseType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool isDefault_backend( const UniLowerMatrix<MT,SO,DF>& m, TrueType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool isDefault_backend( const UniUpperMatrix<MT,SO,DF>& m, FalseType )$/;"	f	namespace:blaze
isDefault_backend	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool isDefault_backend( const UniUpperMatrix<MT,SO,DF>& m, TrueType )$/;"	f	namespace:blaze
isDiagonal	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isDiagonal( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isDiagonal	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isDiagonal( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isDivisor	amun/3rd_party/blaze/math/dense/DenseVector.h	/^bool isDivisor( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
isDivisor	amun/3rd_party/blaze/math/shims/IsDivisor.h	/^BLAZE_ALWAYS_INLINE bool isDivisor( const Type& v )$/;"	f	namespace:blaze
isEmpty	amun/3rd_party/blaze/util/PtrVector.h	/^inline bool PtrVector<T,D,G>::isEmpty() const$/;"	f	class:blaze::PtrVector
isEmpty	amun/3rd_party/blaze/util/ThreadPool.h	/^inline bool ThreadPool<TT,MT,LT,CT>::isEmpty() const$/;"	f	class:blaze::ThreadPool
isEmpty	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline bool TaskQueue::isEmpty() const$/;"	f	class:blaze::threadpool::TaskQueue
isHermitian	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isHermitian( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isHermitian	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isHermitian( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isHermitian	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isHermitian( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isIdentity	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isIdentity( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isIdentity	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isIdentity( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isInputFiltered_	amun/common/base_best_hyps.h	/^    const bool isInputFiltered_;$/;"	m	class:amunmt::BaseBestHyps
isIntact	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool isIntact( const DiagonalMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool isIntact( const HermitianMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool isIntact( const LowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool isIntact( const StrictlyLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool isIntact( const StrictlyUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline bool isIntact( const SymmetricMatrix<MT,SO,DF,NF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool isIntact( const UniLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool isIntact( const UniUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool isIntact( const UpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
isIntact	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline bool isIntact( const CompressedMatrix<Type,SO>& m )$/;"	f	namespace:blaze
isLower	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isLower( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isLower	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isLower( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isLower	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isLower( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isMap	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    bool isMap() const { return pPrevKeyNode != &sequenceMarker; }$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
isOne	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline bool isOne( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline bool isOne( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline bool isOne( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline bool isOne( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline bool isOne( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline bool isOne( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline bool isOne( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline bool isOne( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline bool isOne( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline bool isOne( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline bool isOne( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline bool isOne( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline bool isOne( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline bool isOne( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool isOne( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/shims/IsOne.h	/^BLAZE_ALWAYS_INLINE EnableIf_< IsNumeric<Type>, bool > isOne( const Type& v )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline bool isOne( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
isOne	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline bool isOne( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
isParallelSectionActive	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^inline bool isParallelSectionActive()$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline bool isReal( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline bool isReal( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline bool isReal( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline bool isReal( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline bool isReal( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline bool isReal( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline bool isReal( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline bool isReal( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline bool isReal( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline bool isReal( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline bool isReal( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline bool isReal( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline bool isReal( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline bool isReal( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool isReal( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline bool isReal( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
isReal	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline bool isReal( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
isSerialSectionActive	amun/3rd_party/blaze/math/smp/SerialSection.h	/^inline bool isSerialSectionActive()$/;"	f	namespace:blaze
isStrictlyLower	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isStrictlyLower( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isStrictlyLower	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isStrictlyLower( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isStrictlyLower	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isStrictlyLower( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isStrictlyUpper	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isStrictlyUpper( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isStrictlyUpper	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isStrictlyUpper( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isStrictlyUpper	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isStrictlyUpper( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isSymmetric	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isSymmetric( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isSymmetric	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isSymmetric( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isSymmetric	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isSymmetric( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isSynced	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline bool HermitianElement<MT>::isSynced() const$/;"	f	class:blaze::HermitianElement
isSynced	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline bool SymmetricElement<MT>::isSynced() const$/;"	f	class:blaze::SymmetricElement
isUniLower	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniLower( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isUniLower	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniLower( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isUniLower	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isUniLower( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isUniUpper	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniUpper( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isUniUpper	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniUpper( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isUniUpper	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isUniUpper( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isUniform	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniform( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isUniform	amun/3rd_party/blaze/math/dense/DenseVector.h	/^bool isUniform( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
isUniform	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniform( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isUniform	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^bool isUniform( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniform_backend( const DenseMatrix<MT,false>& dm, FalseType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniform_backend( const DenseMatrix<MT,false>& dm, TrueType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniform_backend( const DenseMatrix<MT,true>& dm, FalseType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUniform_backend( const DenseMatrix<MT,true>& dm, TrueType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniform_backend( const SparseMatrix<MT,false>& sm, FalseType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniform_backend( const SparseMatrix<MT,false>& sm, TrueType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniform_backend( const SparseMatrix<MT,true>& sm, FalseType )$/;"	f	namespace:blaze
isUniform_backend	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUniform_backend( const SparseMatrix<MT,true>& sm, TrueType )$/;"	f	namespace:blaze
isUpper	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isUpper( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isUpper	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isUpper( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isUpper	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isUpper( const Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline bool isZero( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline bool isZero( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline bool isZero( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline bool isZero( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline bool isZero( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline bool isZero( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline bool isZero( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline bool isZero( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline bool isZero( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline bool isZero( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline bool isZero( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline bool isZero( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline bool isZero( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline bool isZero( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool isZero( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline bool isZero( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
isZero	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline bool isZero( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
is_bom	amun/3rd_party/utf8/core.h	/^    inline bool is_bom (octet_iterator it)$/;"	f	namespace:utf8
is_code_point_valid	amun/3rd_party/utf8/core.h	/^    inline bool is_code_point_valid(u32 cp)$/;"	f	namespace:utf8::internal
is_defined	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  bool is_defined() const { return m_pRef->is_defined(); }$/;"	f	class:YAML::detail::node
is_defined	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  bool is_defined() const { return m_isDefined; }$/;"	f	class:YAML::detail::node_data
is_defined	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool is_defined(MapIter it) const {$/;"	f	class:YAML::detail::node_iterator_base
is_defined	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool is_defined() const { return m_pData->is_defined(); }$/;"	f	class:YAML::detail::node_ref
is_digit	amun/3rd_party/fast_align/src/alignment_io.cc	/^static bool is_digit(char x) { return x >= '0' && x <= '9'; }$/;"	f	file:
is_enabled	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline bool spdlog::details::line_logger::is_enabled() const$/;"	f	class:spdlog::details::line_logger
is_i_aligned_	amun/3rd_party/fast_align/src/atools.cc	/^  vector<bool> is_i_aligned_;$/;"	m	struct:RefineCommand	file:
is_j_aligned_	amun/3rd_party/fast_align/src/atools.cc	/^  vector<bool> is_j_aligned_;$/;"	m	struct:RefineCommand	file:
is_lead_surrogate	amun/3rd_party/utf8/core.h	/^    inline bool is_lead_surrogate(u16 cp)$/;"	f	namespace:utf8::internal
is_negative	amun/3rd_party/spdlog/details/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker
is_negative	amun/3rd_party/spdlog/details/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker
is_negative	amun/3rd_party/spdlog/details/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal
is_negative	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker
is_negative	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker
is_negative	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal
is_null	amun/3rd_party/yaml-cpp/mark.h	/^  bool is_null() const { return pos == -1 && line == -1 && column == -1; }$/;"	f	struct:YAML::Mark
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<__int64> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<char> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<double> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<float> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<int> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long double> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long int> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long long> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<short int> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned __int64> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned char> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned int> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned long int> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned long long> {$/;"	s	namespace:YAML
is_numeric	amun/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned short int> {$/;"	s	namespace:YAML
is_overlong_sequence	amun/3rd_party/utf8/core.h	/^    inline bool is_overlong_sequence(uint32_t cp, octet_difference_type length)$/;"	f	namespace:utf8::internal
is_placeholder	amun/3rd_party/thrust_bind/bind.hpp	/^struct is_placeholder : thrust::detail::false_type {};$/;"	s	namespace:thrust::experimental
is_placeholder	amun/3rd_party/thrust_bind/bind.hpp	/^struct is_placeholder<$/;"	s	namespace:thrust::experimental
is_reverse	amun/3rd_party/fast_align/src/fast_align.cc	/^int is_reverse = 0;$/;"	v
is_same	amun/3rd_party/spdlog/details/format.cc	/^		struct is_same$/;"	s	namespace:fmt::__anon30	file:
is_same	amun/3rd_party/spdlog/details/format.cc	/^		struct is_same<T, T>$/;"	s	namespace:fmt::__anon30	file:
is_same	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^struct is_same$/;"	s	namespace:fmt::internal
is_same	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^struct is_same<T, T>$/;"	s	namespace:fmt::internal
is_surrogate	amun/3rd_party/utf8/core.h	/^    inline bool is_surrogate(u16 cp)$/;"	f	namespace:utf8::internal
is_trail	amun/3rd_party/utf8/core.h	/^    inline bool is_trail(octet_type oc)$/;"	f	namespace:utf8::internal
is_trail_surrogate	amun/3rd_party/utf8/core.h	/^    inline bool is_trail_surrogate(u16 cp)$/;"	f	namespace:utf8::internal
is_valid	amun/3rd_party/utf8/core.h	/^    inline bool is_valid(octet_iterator start, octet_iterator end)$/;"	f	namespace:utf8
is_ws	amun/3rd_party/fast_align/src/corpus.h	/^  static bool is_ws(char x) {$/;"	f	class:Dict
isinf	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal
isinf	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal
isinfinity	amun/3rd_party/spdlog/details/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isinfinity	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isnan	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline bool isnan( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline bool isnan( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline bool isnan( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline bool isnan( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline bool isnan( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline bool isnan( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline bool isnan( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline bool isnan( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline bool isnan( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline bool isnan( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline bool isnan( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline bool isnan( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline bool isnan( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline bool isnan( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^bool isnan( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/dense/DenseVector.h	/^bool isnan( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool isnan( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/shims/IsNaN.h	53;"	d
isnan	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline bool isnan( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^bool isnan( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^inline bool isnan( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
isnan	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline bool isnan( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
isnan	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal
isnan	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal
isnegative	amun/3rd_party/spdlog/details/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnegative	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnotanumber	amun/3rd_party/spdlog/details/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
isnotanumber	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
istream_	amun/3rd_party/extract_lex/file_stream.h	/^    boost::iostreams::filtering_istream istream_;$/;"	m	class:InputFileStream
istream_	amun/common/file_stream.h	/^    boost::iostreams::filtering_istream istream_;$/;"	m	class:amunmt::InputFileStream
it	amun/3rd_party/utf8/checked.h	/^      octet_iterator it;$/;"	m	class:utf8::iterator
it	amun/3rd_party/utf8/unchecked.h	/^            octet_iterator it;$/;"	m	class:utf8::unchecked::iterator
it_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      IteratorType it_;  \/\/!< Iterator to the current matrix element.$/;"	m	class:blaze::DMatForEachExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      IteratorType it_;  \/\/!< Iterator to the current vector element.$/;"	m	class:blaze::DVecForEachExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the right-hand side sparse vector expression.$/;"	m	class:blaze::DVecSVecMultExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the right-hand side sparse vector expression$/;"	m	class:ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the sparse matrix expression.$/;"	m	class:blaze::SMatForEachExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the sparse matrix expression.$/;"	m	class:blaze::SMatTransExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      IteratorType it_;   \/\/!< Iterator over the elements of the left-hand side sparse vector expression.$/;"	m	class:blaze::SVecDVecDivExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      IteratorType it_;   \/\/!< Iterator over the elements of the left-hand side sparse vector expression.$/;"	m	class:blaze::SVecDVecMultExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the sparse vector expression.$/;"	m	class:blaze::SVecForEachExpr::ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the left-hand side sparse vector expression$/;"	m	class:ConstIterator
it_	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      IteratorType it_;  \/\/!< Iterator over the elements of the sparse vector expression.$/;"	m	class:blaze::SVecTransExpr::ConstIterator
it_	amun/3rd_party/blaze/util/PtrIterator.h	/^   IteratorType it_;  \/\/!< Pointer to the current memory location.$/;"	m	class:blaze::PtrIterator
iterator	amun/3rd_party/fast_align/src/array2d.h	/^  typedef typename std::vector<T>::iterator iterator;$/;"	t	class:Array2D
iterator	amun/3rd_party/utf8/checked.h	/^      explicit iterator (const octet_iterator& octet_it,$/;"	f	class:utf8::iterator
iterator	amun/3rd_party/utf8/checked.h	/^      iterator () {};$/;"	f	class:utf8::iterator
iterator	amun/3rd_party/utf8/checked.h	/^    class iterator : public std::iterator <std::bidirectional_iterator_tag, uint32_t> {$/;"	c	namespace:utf8
iterator	amun/3rd_party/utf8/unchecked.h	/^            explicit iterator (const octet_iterator& octet_it): it(octet_it) {}$/;"	f	class:utf8::unchecked::iterator
iterator	amun/3rd_party/utf8/unchecked.h	/^            iterator () {};$/;"	f	class:utf8::unchecked::iterator
iterator	amun/3rd_party/utf8/unchecked.h	/^          class iterator : public std::iterator <std::bidirectional_iterator_tag, uint32_t> { $/;"	c	namespace:utf8::unchecked
iterator	amun/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^typedef detail::iterator_base<detail::iterator_value> iterator;$/;"	t	namespace:YAML
iterator	amun/3rd_party/yaml-cpp/node/node.h	/^  typedef YAML::iterator iterator;$/;"	t	class:YAML::Node
iterator	amun/cpu/mblas/tensor.h	/^    typedef typename std::vector<value_type>::iterator iterator;$/;"	t	class:amunmt::CPU::mblas::BlazeMatrix
iterator_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DMatScalarDivExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DMatScalarMultExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DMatTransExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DVecScalarDivExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DVecScalarMultExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      IteratorType iterator_;  \/\/!< Iterator to the current element.$/;"	m	class:blaze::DVecTransExpr::ConstIterator
iterator_	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      IteratorType iterator_;   \/\/!< Iterator to the current submatrix element.$/;"	m	class:blaze::Submatrix::SubmatrixIterator
iterator_	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      IteratorType iterator_;   \/\/!< Iterator to the current subvector element.$/;"	m	class:blaze::Subvector::SubvectorIterator
iterator_base	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  explicit iterator_base(base_type rhs, shared_memory_holder pMemory)$/;"	f	class:YAML::detail::iterator_base
iterator_base	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base() : m_iterator(), m_pMemory() {}$/;"	f	class:YAML::detail::iterator_base
iterator_base	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base(const iterator_base<W>& rhs,$/;"	f	class:YAML::detail::iterator_base
iterator_base	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^class iterator_base : public std::iterator<std::forward_iterator_tag, V,$/;"	c	namespace:YAML::detail
iterator_category	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DiagonalMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::HermitianMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::HermitianMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::LowerMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
iterator_category	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
iterator_category	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SymmetricMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::UniLowerMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::UniLowerMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::UniUpperMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::UniUpperMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::UpperMatrix::Iterator
iterator_category	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DenseIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:ConstIterator
iterator_category	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
iterator_category	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Column::ColumnIterator
iterator_category	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Row::RowIterator
iterator_category	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
iterator_category	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
iterator_category	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Subvector::SubvectorIterator
iterator_category	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef IteratorCategory  iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::Subvector::SubvectorIterator
iterator_category	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef IteratorCategory                 iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::PtrIterator
iterator_category	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef IteratorCategory           iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::PtrVector::CastIterator
iterator_category	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef IteratorCategory           iterator_category;  \/\/!< The iterator category.$/;"	t	class:blaze::PtrVector::ConstCastIterator
iterator_type	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct iterator_type {$/;"	s	namespace:YAML::detail
iterator_value	amun/3rd_party/yaml-cpp/node/iterator.h	/^  explicit iterator_value(const Node& key, const Node& value)$/;"	f	struct:YAML::detail::iterator_value
iterator_value	amun/3rd_party/yaml-cpp/node/iterator.h	/^  explicit iterator_value(const Node& rhs)$/;"	f	struct:YAML::detail::iterator_value
iterator_value	amun/3rd_party/yaml-cpp/node/iterator.h	/^  iterator_value() {}$/;"	f	struct:YAML::detail::iterator_value
iterator_value	amun/3rd_party/yaml-cpp/node/iterator.h	/^struct iterator_value : public Node, std::pair<Node, Node> {$/;"	s	namespace:YAML::detail
j	amun/common/history.h	/^      unsigned j;$/;"	m	struct:amunmt::History::HypothesisCoord
j_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   size_t j_;       \/\/!< Column-index of the accessed matrix element.$/;"	m	class:blaze::NonNumericProxy
j_	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   size_t j_;   \/\/!< Column-index of the accessed sparse matrix element.$/;"	m	class:blaze::MatrixAccessProxy
join	amun/3rd_party/blaze/util/Thread.h	/^inline void Thread<TT,MT,LT,CT>::join()$/;"	f	class:blaze::Thread
joinable	amun/3rd_party/blaze/util/Thread.h	/^inline bool Thread<TT,MT,LT,CT>::joinable() const$/;"	f	class:blaze::Thread
kNONE	amun/3rd_party/fast_align/src/alignment_io.h	/^  enum AlignmentType { kNONE = 0, kTRANSLATION = 1, kTRANSLITERATION = 2 };$/;"	e	enum:AlignmentIO::AlignmentType
kTRANSLATION	amun/3rd_party/fast_align/src/alignment_io.h	/^  enum AlignmentType { kNONE = 0, kTRANSLATION = 1, kTRANSLITERATION = 2 };$/;"	e	enum:AlignmentIO::AlignmentType
kTRANSLITERATION	amun/3rd_party/fast_align/src/alignment_io.h	/^  enum AlignmentType { kNONE = 0, kTRANSLATION = 1, kTRANSLITERATION = 2 };$/;"	e	enum:AlignmentIO::AlignmentType
key	amun/3rd_party/yaml-cpp/exceptions.h	/^  T key;$/;"	m	class:YAML::TypedKeyNotFound
keys	amun/fpga/best_hyps.h	/^  Array<unsigned> keys;$/;"	m	class:amunmt::FPGA::BestHyps
keys_	amun/gpu/decoder/best_hyps.h	/^    mblas::Vector<unsigned> keys_;$/;"	m	class:amunmt::GPU::BestHyps
kv	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef std::pair<V*, V*> kv;$/;"	t	struct:YAML::detail::node_iterator_value
kv_pair	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::pair<node*, node*> kv_pair;$/;"	t	class:YAML::detail::node_data
kv_pairs	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::list<kv_pair> kv_pairs;$/;"	t	class:YAML::detail::node_data
last	amun/3rd_party/blaze/util/timing/Timer.h	/^inline double Timer<TP>::last() const$/;"	f	class:blaze::timing::Timer
last_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double last_;     \/\/!< The last measured time.$/;"	m	class:blaze::timing::Timer
layerNormalization_	amun/cpu/dl4mt/transition.h	/^    bool layerNormalization_;$/;"	m	class:amunmt::CPU::Transition
layerNormalization_	amun/cpu/nematus/gru.h	/^    bool layerNormalization_;$/;"	m	class:amunmt::CPU::GRU
layerNormalization_	amun/cpu/nematus/transition.h	/^    bool layerNormalization_;$/;"	m	class:amunmt::CPU::Nematus::Transition
leadingSpaces	amun/3rd_party/yaml-cpp/scanscalar.h	/^  bool leadingSpaces;$/;"	m	struct:YAML::ScanScalarParams
leftOperand	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   inline LeftOperand leftOperand() const {$/;"	f	class:blaze::DMatSMatAddExpr
leftOperand	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   inline LeftOperand leftOperand() const {$/;"	f	class:blaze::DMatTSMatAddExpr
left_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DMatDMatAddExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DMatDMatSubExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DVecDVecAddExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DVecDVecDivExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DVecDVecMultExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:blaze::DVecDVecSubExpr::ConstIterator
left_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      LeftIteratorType  left_;   \/\/!< Iterator to the current left-hand side element.$/;"	m	class:ConstIterator
level	amun/3rd_party/spdlog/common.h	/^namespace level$/;"	n	namespace:spdlog
level	amun/3rd_party/spdlog/details/async_log_helper.h	/^        level::level_enum level;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
level	amun/3rd_party/spdlog/details/log_msg.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::log_msg
level	amun/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger
level	amun/3rd_party/spdlog/sinks/sink.h	/^inline level::level_enum sink::level() const$/;"	f	class:spdlog::sinks::sink
level_	amun/3rd_party/blaze/util/logging/LogSection.h	/^   LogLevel          level_;    \/\/!< The logging level of the log section.$/;"	m	class:blaze::logging::LogSection
level_enum	amun/3rd_party/spdlog/common.h	/^} level_enum;$/;"	t	namespace:spdlog::level	typeref:enum:spdlog::level::__anon34
level_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
lhs_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatDMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatDMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatTDMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatTDMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatTSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	m	namespace:blaze
lhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatTSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the addition expression.$/;"	m	class:blaze::DVecDVecAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the cross product expression.$/;"	m	class:blaze::DVecDVecCrossExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the division expression.$/;"	m	class:blaze::DVecDVecDivExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::DVecDVecMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the subtraction expression.$/;"	m	class:blaze::DVecDVecSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the addition expression.$/;"	m	class:blaze::DVecSVecAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the cross product expression.$/;"	m	class:blaze::DVecSVecCrossExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::DVecSVecMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the subtraction expression.$/;"	m	class:blaze::DVecSVecSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatDMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::SMatSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
lhs_	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
lhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatTDMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::SMatTSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::SMatTSMatMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatTSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the cross product expression.$/;"	m	class:blaze::SVecDVecCrossExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the division expression.$/;"	m	class:blaze::SVecDVecDivExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecDVecMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the subtraction expression.$/;"	m	class:blaze::SVecDVecSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the addition expression.$/;"	m	class:blaze::SVecSVecAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the cross product expression.$/;"	m	class:blaze::SVecSVecCrossExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecSVecMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the subtraction expression.$/;"	m	class:blaze::SVecSVecSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecTSVecMultExpr
lhs_	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the addition expression.$/;"	m	class:blaze::TDMatSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::TDMatSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TSMatDMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
lhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TSMatSMatSubExpr
lhs_	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	v
lhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::TSMatTSMatAddExpr
lhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
lhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   LeftOperand  lhs_;  \/\/!< Left-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TSMatTSMatSubExpr
line	amun/3rd_party/yaml-cpp/mark.h	/^  int line, column;$/;"	m	struct:YAML::Mark
line	amun/3rd_party/yaml-cpp/stream.h	/^  int line() const { return m_mark.line; }$/;"	f	class:YAML::Stream
lineNo_	amun/common/history.h	/^    unsigned lineNo_;$/;"	m	class:amunmt::History
lineNum_	amun/common/sentence.h	/^    unsigned lineNum_;$/;"	m	class:amunmt::Sentence
line_logger	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^class line_logger$/;"	c	namespace:spdlog::details
line_logger	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::line_logger(line_logger&& other) :$/;"	f	class:spdlog::details::line_logger
line_logger	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::line_logger(logger* callback_logger, level::level_enum msg_level, bool enabled):$/;"	f	class:spdlog::details::line_logger
llh	amun/3rd_party/blaze/math/dense/LLH.h	/^void llh( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& L )$/;"	f	namespace:blaze
lm	amun/gpu/decoder/kenlm.h	/^namespace lm {$/;"	n
lm_	amun/gpu/decoder/kenlm.h	/^    std::unique_ptr<KenlmModel> lm_;$/;"	m	class:LM
lm_	amun/gpu/decoder/language_model.h	/^    const LM& lm_;$/;"	m	class:LanguageModel
lnb_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lnb_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecInit
lnb_1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lnb_1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lnb_2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lnb_2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lnb_3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lnb_3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lnb_UUx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor lnb_UUx_;$/;"	m	class:amunmt::CPU::GRU
lnb_WWx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor lnb_WWx_;$/;"	m	class:amunmt::CPU::GRU
lns_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lns_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecInit
lns_1_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lns_1_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lns_2_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lns_2_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lns_3_	amun/cpu/nematus/model.h	/^    const mblas::Tensor lns_3_;$/;"	m	struct:amunmt::CPU::Nematus::Weights::DecSoftmax
lns_UUx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor lns_UUx_;$/;"	m	class:amunmt::CPU::GRU
lns_WWx_	amun/cpu/nematus/gru.h	/^    mutable mblas::Tensor lns_WWx_;$/;"	m	class:amunmt::CPU::GRU
load	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::LowerMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
load	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::UpperMatrix::Iterator
load	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SIMDType load() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
load	amun/3rd_party/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int
load_the_npy_file	amun/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray load_the_npy_file(FILE* fp) {$/;"	f
loada	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::LowerMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
loada	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::UpperMatrix::Iterator
loada	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SIMDType loada() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
loadu	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::LowerMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
loadu	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::UpperMatrix::Iterator
loadu	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SIMDType loadu() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
localtime	amun/3rd_party/spdlog/details/os.h	/^inline std::tm localtime()$/;"	f	namespace:spdlog::details::os
localtime	amun/3rd_party/spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
lock	amun/3rd_party/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex
log	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Log,SO> log( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
log	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Log,TF> log( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
log	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Log,SO> log( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
log	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Log,TF> log( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
log	amun/3rd_party/blaze/math/functors/Log.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( log( a ) )$/;"	f	struct:blaze::Log
log	amun/3rd_party/blaze/math/functors/Log.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( log( a ) )$/;"	f	struct:blaze::Log
log	amun/3rd_party/blaze/util/logging/LogSection.h	/^inline void LogSection::log( const Type& message )$/;"	f	class:blaze::logging::LogSection
log	amun/3rd_party/blaze/util/logging/Logger.h	/^void Logger::log( const Type& message )$/;"	f	class:blaze::logging::Logger
log	amun/3rd_party/spdlog/details/async_log_helper.h	/^        log,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
log	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::log(const details::log_msg& msg)$/;"	f	class:spdlog::details::async_log_helper
log	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T& msg)$/;"	f	class:spdlog::logger
log	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
log	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* msg)$/;"	f	class:spdlog::logger
log	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::log(const details::log_msg& msg)$/;"	f	class:spdlog::sinks::ansicolor_sink
log10	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Log10,SO> log10( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
log10	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Log10,TF> log10( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
log10	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Log10,SO> log10( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
log10	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Log10,TF> log10( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
log10	amun/3rd_party/blaze/math/functors/Log10.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( log10( a ) )$/;"	f	struct:blaze::Log10
log10	amun/3rd_party/blaze/math/functors/Log10.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( log10( a ) )$/;"	f	struct:blaze::Log10
log_	amun/3rd_party/blaze/util/logging/Logger.h	/^   std::ofstream log_;    \/\/!< The log file.$/;"	m	class:blaze::logging::Logger
log_msg	amun/3rd_party/spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl) : logger_name(loggers_name), level(lvl)$/;"	f	struct:spdlog::details::log_msg
log_msg	amun/3rd_party/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
log_poisson	amun/3rd_party/fast_align/src/ttables.h	/^  static inline double log_poisson(unsigned x, const double& lambda) {$/;"	f	struct:Md
logapprox	amun/cpu/mblas/phoenix_functions.h	/^  inline float logapprox(float val) {$/;"	f	namespace:amunmt::CPU::mblas
logapprox	amun/cpu/mblas/simd_math_prims.h	/^inline float logapprox(float val) {$/;"	f
logger	amun/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, const It& begin, const It& end):$/;"	f	class:spdlog::logger
logger	amun/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, sinks_init_list sinks_list):$/;"	f	class:spdlog::logger
logger	amun/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, spdlog::sink_ptr single_sink):$/;"	f	class:spdlog::logger
logger	amun/3rd_party/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_name	amun/3rd_party/spdlog/details/async_log_helper.h	/^        std::string logger_name;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
logger_name	amun/3rd_party/spdlog/details/log_msg.h	/^    const std::string *logger_name;$/;"	m	struct:spdlog::details::log_msg
logging	amun/3rd_party/blaze/config/Logging.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/DebugSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/DetailSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/ErrorSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/InfoSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/LogLevel.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/LogSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/Logger.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/Logging.h	/^namespace logging {}$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/ProgressSection.h	/^namespace logging {$/;"	n	namespace:blaze
logging	amun/3rd_party/blaze/util/logging/WarningSection.h	/^namespace logging {$/;"	n	namespace:blaze
logitapprox	amun/cpu/mblas/phoenix_functions.h	/^  inline float logitapprox(float x) {$/;"	f	namespace:amunmt::CPU::mblas
logitapprox	amun/cpu/mblas/simd_math_prims.h	/^inline float logitapprox(float x) {$/;"	f
loglevel	amun/3rd_party/blaze/config/Logging.h	/^constexpr LogLevel loglevel = info;$/;"	m	namespace:blaze::logging
longKey	amun/3rd_party/yaml-cpp/emitterstate.h	/^    bool longKey;$/;"	m	struct:YAML::EmitterState::Group
long_double_value	amun/3rd_party/spdlog/details/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon17
long_double_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon51
long_long_value	amun/3rd_party/spdlog/details/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon17
long_long_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon51
lowerBound	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
lowerBound	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
lowerBound	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::DVecSVecMultExpr
lowerBound	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f
lowerBound	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatForEachExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarDivExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarMultExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecDVecDivExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecDVecMultExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecForEachExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecScalarDivExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecScalarMultExpr
lowerBound	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ConstIterator lowerBound( size_t i, size_t j ) const {$/;"	f
lowerBound	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ConstIterator lowerBound( size_t index ) const {$/;"	f	class:blaze::SVecTransExpr
lowerBound	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
lowerBound	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::lowerBound( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::lowerBound( size_t index ) const$/;"	f	class:blaze::CompressedVector
lowerBound	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::lowerBound( size_t index )$/;"	f	class:blaze::CompressedVector
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::lowerBound( size_t index ) const$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::lowerBound( size_t index )$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::lowerBound( size_t index ) const$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::lowerBound( size_t index )$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::lowerBound( size_t index ) const$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::lowerBound( size_t index )$/;"	f	class:blaze::Column
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::lowerBound( size_t index ) const$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::lowerBound( size_t index )$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::lowerBound( size_t index ) const$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::lowerBound( size_t index )$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::lowerBound( size_t index ) const$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::lowerBound( size_t index )$/;"	f	class:blaze::Row
lowerBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
lowerBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
lowerBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::lowerBound( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
lowerBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::lowerBound( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
lowerBound	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::lowerBound( size_t index ) const$/;"	f	class:blaze::Subvector
lowerBound	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::lowerBound( size_t index )$/;"	f	class:blaze::Subvector
lq	amun/3rd_party/blaze/math/dense/LQ.h	/^void lq( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& L, DenseMatrix<MT3,SO3>& Q )$/;"	f	namespace:blaze
lq_backend	amun/3rd_party/blaze/math/dense/LQ.h	/^   lq_backend( MT1& A, const ElementType_<MT1>* tau )$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void lu( const DiagonalMatrix<MT1,SO1,true>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void lu( const LowerMatrix<MT1,SO1,true>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void lu( const UniLowerMatrix<MT1,SO1,true>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void lu( const UniUpperMatrix<MT1,SO1,true>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void lu( const UpperMatrix<MT1,SO1,true>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/dense/LU.h	/^void lu( DenseMatrix<MT1,SO1>& A, Matrix<MT2,SO2>& P )$/;"	f	namespace:blaze
lu	amun/3rd_party/blaze/math/dense/LU.h	/^void lu( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO1>& L,$/;"	f	namespace:blaze
m_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   size_t m_;         \/\/!< The current number of rows of the sparse matrix.$/;"	m	class:blaze::CompressedMatrix
m_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   const size_t m_;       \/\/!< The number of rows of the submatrix.$/;"	m	class:blaze::Submatrix
m_a	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  char m_a, m_z;$/;"	m	class:YAML::RegEx
m_anchorByIdentity	amun/3rd_party/yaml-cpp/nodeevents.h	/^    AnchorByIdentity m_anchorByIdentity;$/;"	m	class:YAML::NodeEvents::AliasManager
m_anchors	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  AnchorMap m_anchors;$/;"	m	class:YAML::GraphBuilderAdapter
m_anchors	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  Nodes m_anchors;$/;"	m	class:YAML::NodeBuilder
m_anchors	amun/3rd_party/yaml-cpp/singledocparser.h	/^  Anchors m_anchors;$/;"	m	class:YAML::SingleDocParser
m_boolCaseFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolCaseFmt;$/;"	m	class:YAML::EmitterState
m_boolFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolFmt;$/;"	m	class:YAML::EmitterState
m_boolLengthFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolLengthFmt;$/;"	m	class:YAML::EmitterState
m_buffer	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  mutable std::vector<char> m_buffer;$/;"	m	class:YAML::ostream_wrapper
m_builder	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  GraphBuilderInterface& m_builder;$/;"	m	class:YAML::GraphBuilderAdapter
m_canBeJSONFlow	amun/3rd_party/yaml-cpp/scanner.h	/^  bool m_canBeJSONFlow;$/;"	m	class:YAML::Scanner
m_charSet	amun/3rd_party/yaml-cpp/stream.h	/^  CharacterSet m_charSet;$/;"	m	class:YAML::Stream
m_charset	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_charset;$/;"	m	class:YAML::EmitterState
m_col	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_row, m_col;$/;"	m	class:YAML::ostream_wrapper
m_coll	amun/3rd_party/extract_lex/extract-lex.h	/^  std::map<const std::string*, WordCount> m_coll;$/;"	m	class:extract::WordCount
m_coll	amun/3rd_party/extract_lex/extract-lex.h	/^  std::set<std::string> m_coll;$/;"	m	class:extract::Vocab
m_collS2T	amun/3rd_party/extract_lex/extract-lex.h	/^  std::map<const std::string*, WordCount> m_collS2T, m_collT2S;$/;"	m	class:extract::ExtractLex
m_collT2S	amun/3rd_party/extract_lex/extract-lex.h	/^  std::map<const std::string*, WordCount> m_collS2T, m_collT2S;$/;"	m	class:extract::ExtractLex
m_comment	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  bool m_comment;$/;"	m	class:YAML::ostream_wrapper
m_containers	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  ContainerStack m_containers;$/;"	m	class:YAML::GraphBuilderAdapter
m_count	amun/3rd_party/extract_lex/extract-lex.h	/^  float m_count;$/;"	m	class:extract::WordCount
m_curAnchor	amun/3rd_party/yaml-cpp/nodeevents.h	/^    anchor_t m_curAnchor;$/;"	m	class:YAML::NodeEvents::AliasManager
m_curAnchor	amun/3rd_party/yaml-cpp/singledocparser.h	/^  anchor_t m_curAnchor;$/;"	m	class:YAML::SingleDocParser
m_curIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t m_curIndent;$/;"	m	class:YAML::EmitterState
m_data	amun/3rd_party/yaml-cpp/binary.h	/^  std::vector<unsigned char> m_data;$/;"	m	class:YAML::Binary
m_data	amun/3rd_party/yaml-cpp/contrib/anchordict.h	/^  std::vector<T> m_data;$/;"	m	class:YAML::AnchorDict
m_data	amun/3rd_party/yaml-cpp/ptr_vector.h	/^   std::vector<std::unique_ptr<T>> m_data;$/;"	m	class:YAML::ptr_vector
m_dependencies	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  nodes m_dependencies;$/;"	m	class:YAML::detail::node
m_directives	amun/3rd_party/yaml-cpp/singledocparser.h	/^  const Directives& m_directives;$/;"	m	class:YAML::SingleDocParser
m_docCount	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t m_docCount;$/;"	m	class:YAML::EmitterState
m_doublePrecision	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<int> m_doublePrecision;$/;"	m	class:YAML::EmitterState
m_emitter	amun/3rd_party/yaml-cpp/emitfromevents.h	/^  Emitter& m_emitter;$/;"	m	class:YAML::EmitFromEvents
m_endedStream	amun/3rd_party/yaml-cpp/scanner.h	/^  bool m_startedStream, m_endedStream;$/;"	m	class:YAML::Scanner
m_floatPrecision	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<int> m_floatPrecision;$/;"	m	class:YAML::EmitterState
m_flows	amun/3rd_party/yaml-cpp/scanner.h	/^  std::stack<FLOW_MARKER> m_flows;$/;"	m	class:YAML::Scanner
m_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class m_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
m_globalModifiedSettings	amun/3rd_party/yaml-cpp/emitterstate.h	/^  SettingChanges m_globalModifiedSettings;$/;"	m	class:YAML::EmitterState
m_groups	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::vector<std::unique_ptr<Group>> m_groups;$/;"	m	class:YAML::EmitterState
m_hasAnchor	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasAnchor;$/;"	m	class:YAML::EmitterState
m_hasNonContent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasNonContent;$/;"	m	class:YAML::EmitterState
m_hasTag	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasTag;$/;"	m	class:YAML::EmitterState
m_impl	amun/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  Impl &m_impl;$/;"	m	class:YAML::GraphBuilder
m_indent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_indent;$/;"	m	class:YAML::EmitterState
m_indentRefs	amun/3rd_party/yaml-cpp/scanner.h	/^  ptr_vector<IndentMarker> m_indentRefs;  \/\/ for "garbage collection"$/;"	m	class:YAML::Scanner
m_indents	amun/3rd_party/yaml-cpp/scanner.h	/^  std::stack<IndentMarker *> m_indents;$/;"	m	class:YAML::Scanner
m_input	amun/3rd_party/yaml-cpp/stream.h	/^  std::istream& m_input;$/;"	m	class:YAML::Stream
m_intFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_intFmt;$/;"	m	class:YAML::EmitterState
m_isDefined	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  bool m_isDefined;$/;"	m	class:YAML::detail::node_data
m_isGood	amun/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_isGood;$/;"	m	class:YAML::EmitterState
m_isValid	amun/3rd_party/yaml-cpp/node/node.h	/^  bool m_isValid;$/;"	m	class:YAML::Node
m_iterator	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  base_type m_iterator;$/;"	m	class:YAML::detail::iterator_base
m_keys	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  std::vector<PushedKey> m_keys;$/;"	m	class:YAML::NodeBuilder
m_lastError	amun/3rd_party/yaml-cpp/emitterstate.h	/^  std::string m_lastError;$/;"	m	class:YAML::EmitterState
m_map	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  node_map m_map;$/;"	m	class:YAML::detail::node_data
m_mapDepth	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  std::size_t m_mapDepth;$/;"	m	class:YAML::NodeBuilder
m_mapEnd	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter m_mapIt, m_mapEnd;$/;"	m	class:YAML::detail::node_iterator_base
m_mapFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_mapFmt;$/;"	m	class:YAML::EmitterState
m_mapIt	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter m_mapIt, m_mapEnd;$/;"	m	class:YAML::detail::node_iterator_base
m_mapKeyFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_mapKeyFmt;$/;"	m	class:YAML::EmitterState
m_mark	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  Mark m_mark;$/;"	m	class:YAML::detail::node_data
m_mark	amun/3rd_party/yaml-cpp/stream.h	/^  Mark m_mark;$/;"	m	class:YAML::Stream
m_modifiedSettings	amun/3rd_party/yaml-cpp/emitterstate.h	/^  SettingChanges m_modifiedSettings;$/;"	m	class:YAML::EmitterState
m_nPrefetchedAvailable	amun/3rd_party/yaml-cpp/stream.h	/^  mutable size_t m_nPrefetchedAvailable;$/;"	m	class:YAML::Stream
m_nPrefetchedUsed	amun/3rd_party/yaml-cpp/stream.h	/^  mutable size_t m_nPrefetchedUsed;$/;"	m	class:YAML::Stream
m_nodes	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^  Nodes m_nodes;$/;"	m	class:YAML::detail::memory
m_offset	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  std::size_t m_offset;$/;"	m	class:YAML::StreamCharSource
m_offset	amun/3rd_party/yaml-cpp/stringsource.h	/^  std::size_t m_offset;$/;"	m	class:YAML::StringCharSource
m_oldSetting	amun/3rd_party/yaml-cpp/setting.h	/^  Setting<T> m_oldSetting;$/;"	m	class:YAML::SettingChange
m_op	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_OP m_op;$/;"	m	class:YAML::RegEx
m_pCollectionStack	amun/3rd_party/yaml-cpp/singledocparser.h	/^  std::unique_ptr<CollectionStack> m_pCollectionStack;$/;"	m	class:YAML::SingleDocParser
m_pCurSetting	amun/3rd_party/yaml-cpp/setting.h	/^  Setting<T>* m_pCurSetting;$/;"	m	class:YAML::SettingChange
m_pData	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  shared_node_data m_pData;$/;"	m	class:YAML::detail::node_ref
m_pDirectives	amun/3rd_party/yaml-cpp/parser.h	/^  std::unique_ptr<Directives> m_pDirectives;$/;"	m	class:YAML::Parser
m_pKeyNode	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* m_pKeyNode;$/;"	m	class:YAML::GraphBuilderAdapter
m_pMemory	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  shared_memory_holder m_pMemory;$/;"	m	class:YAML::detail::iterator_base
m_pMemory	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^  shared_memory m_pMemory;$/;"	m	class:YAML::detail::memory_holder
m_pMemory	amun/3rd_party/yaml-cpp/node/node.h	/^  mutable detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::Node
m_pMemory	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::NodeBuilder
m_pMemory	amun/3rd_party/yaml-cpp/nodeevents.h	/^  detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::NodeEvents
m_pNode	amun/3rd_party/yaml-cpp/node/node.h	/^  mutable detail::node* m_pNode;$/;"	m	class:YAML::Node
m_pPrefetched	amun/3rd_party/yaml-cpp/stream.h	/^  unsigned char* const m_pPrefetched;$/;"	m	class:YAML::Stream
m_pRef	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  shared_node_ref m_pRef;$/;"	m	class:YAML::detail::node
m_pRoot	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  detail::node* m_pRoot;$/;"	m	class:YAML::NodeBuilder
m_pRootNode	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* m_pRootNode;$/;"	m	class:YAML::GraphBuilderAdapter
m_pScanner	amun/3rd_party/yaml-cpp/parser.h	/^  std::unique_ptr<Scanner> m_pScanner;$/;"	m	class:YAML::Parser
m_pState	amun/3rd_party/yaml-cpp/emitter.h	/^  std::unique_ptr<EmitterState> m_pState;$/;"	m	class:YAML::Emitter
m_pStream	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::ostream* const m_pStream;$/;"	m	class:YAML::ostream_wrapper::std
m_params	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  std::vector<RegEx> m_params;$/;"	m	class:YAML::RegEx
m_pos	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_pos;$/;"	m	class:YAML::ostream_wrapper
m_postCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_preCommentIndent, m_postCommentIndent;$/;"	m	class:YAML::EmitterState
m_preCommentIndent	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_preCommentIndent, m_postCommentIndent;$/;"	m	class:YAML::EmitterState
m_readahead	amun/3rd_party/yaml-cpp/stream.h	/^  mutable std::deque<char> m_readahead;$/;"	m	class:YAML::Stream
m_ref	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^    V m_ref;$/;"	m	struct:YAML::detail::iterator_base::proxy
m_ref	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    node_iterator_value<V> m_ref;$/;"	m	struct:YAML::detail::node_iterator_base::proxy
m_refCount	amun/3rd_party/yaml-cpp/nodeevents.h	/^  RefCount m_refCount;$/;"	m	class:YAML::NodeEvents
m_root	amun/3rd_party/yaml-cpp/nodeevents.h	/^  detail::node* m_root;$/;"	m	class:YAML::NodeEvents
m_row	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_row, m_col;$/;"	m	class:YAML::ostream_wrapper
m_scalar	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  std::string m_scalar;$/;"	m	class:YAML::detail::node_data
m_scanner	amun/3rd_party/yaml-cpp/singledocparser.h	/^  Scanner& m_scanner;$/;"	m	class:YAML::SingleDocParser
m_seqFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_seqFmt;$/;"	m	class:YAML::EmitterState
m_seqIt	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  SeqIter m_seqIt;$/;"	m	class:YAML::detail::node_iterator_base
m_seqSize	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  mutable std::size_t m_seqSize;$/;"	m	class:YAML::detail::node_data
m_sequence	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  node_seq m_sequence;$/;"	m	class:YAML::detail::node_data
m_settingChanges	amun/3rd_party/yaml-cpp/setting.h	/^  setting_changes m_settingChanges;$/;"	m	class:YAML::SettingChanges
m_simpleKeyAllowed	amun/3rd_party/yaml-cpp/scanner.h	/^  bool m_simpleKeyAllowed;$/;"	m	class:YAML::Scanner
m_simpleKeys	amun/3rd_party/yaml-cpp/scanner.h	/^  std::stack<SimpleKey> m_simpleKeys;$/;"	m	class:YAML::Scanner
m_size	amun/3rd_party/yaml-cpp/stringsource.h	/^  std::size_t m_size;$/;"	m	class:YAML::StringCharSource
m_stack	amun/3rd_party/yaml-cpp/nodebuilder.h	/^  Nodes m_stack;$/;"	m	class:YAML::NodeBuilder
m_startedStream	amun/3rd_party/yaml-cpp/scanner.h	/^  bool m_startedStream, m_endedStream;$/;"	m	class:YAML::Scanner
m_stateStack	amun/3rd_party/yaml-cpp/emitfromevents.h	/^  std::stack<State::value> m_stateStack;$/;"	m	class:YAML::EmitFromEvents
m_str	amun/3rd_party/yaml-cpp/stringsource.h	/^  const char* m_str;$/;"	m	class:YAML::StringCharSource
m_strFmt	amun/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_strFmt;$/;"	m	class:YAML::EmitterState
m_stream	amun/3rd_party/yaml-cpp/emitter.h	/^  ostream_wrapper m_stream;$/;"	m	class:YAML::Emitter
m_stream	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  const Stream& m_stream;$/;"	m	class:YAML::StreamCharSource
m_style	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  EmitterStyle::value m_style;$/;"	m	class:YAML::detail::node_data
m_tag	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  std::string m_tag;$/;"	m	class:YAML::detail::node_data
m_tokens	amun/3rd_party/yaml-cpp/scanner.h	/^  std::queue<Token> m_tokens;$/;"	m	class:YAML::Scanner
m_type	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  NodeType::value m_type;$/;"	m	class:YAML::detail::node_data
m_type	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typename iterator_type::value m_type;$/;"	m	class:YAML::detail::node_iterator_base
m_undefinedPairs	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  mutable kv_pairs m_undefinedPairs;$/;"	m	class:YAML::detail::node_data
m_unownedData	amun/3rd_party/yaml-cpp/binary.h	/^  const unsigned char *m_unownedData;$/;"	m	class:YAML::Binary
m_unownedSize	amun/3rd_party/yaml-cpp/binary.h	/^  std::size_t m_unownedSize;$/;"	m	class:YAML::Binary
m_value	amun/3rd_party/yaml-cpp/setting.h	/^  T m_value;$/;"	m	class:YAML::Setting
m_vocab	amun/3rd_party/extract_lex/extract-lex.h	/^  Vocab m_vocab;$/;"	m	class:extract::ExtractLex
m_z	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  char m_a, m_z;$/;"	m	class:YAML::RegEx
magenta	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta    = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink
main	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	amun/3rd_party/fast_align/src/atools.cc	/^int main(int argc, char **argv) {$/;"	f
main	amun/3rd_party/fast_align/src/fast_align.cc	/^int main(int argc, char** argv) {$/;"	f
main	amun/common/decoder_main.cpp	/^int main(int argc, char* argv[])$/;"	f
major	amun/3rd_party/yaml-cpp/directives.h	/^  int major, minor;$/;"	m	struct:YAML::Version
make	amun/3rd_party/spdlog/details/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::ArgArray
make	amun/3rd_party/spdlog/details/format.h	/^static Value make(const T &value)$/;"	f	namespace:fmt::internal
make	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::ArgArray
make	amun/3rd_party/spdlog/fmt/bundled/format.h	/^static Value make(const T &value)$/;"	f	namespace:fmt::internal
makeHermitian	amun/3rd_party/blaze/math/CustomMatrix.h	/^void makeHermitian( CustomMatrix<Type,AF,PF,SO>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/CustomMatrix.h	/^void makeHermitian( CustomMatrix<Type,AF,PF,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^void makeHermitian( DiagonalMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^void makeHermitian( DiagonalMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/DynamicMatrix.h	/^void makeHermitian( DynamicMatrix<Type,SO>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/DynamicMatrix.h	/^void makeHermitian( DynamicMatrix<Type,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/HermitianMatrix.h	/^void makeHermitian( HermitianMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/HermitianMatrix.h	/^void makeHermitian( HermitianMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/HybridMatrix.h	/^void makeHermitian( HybridMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/HybridMatrix.h	/^void makeHermitian( HybridMatrix<Type,M,N,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/LowerMatrix.h	/^void makeHermitian( LowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/LowerMatrix.h	/^void makeHermitian( LowerMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/StaticMatrix.h	/^void makeHermitian( StaticMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/StaticMatrix.h	/^void makeHermitian( StaticMatrix<Type,M,N,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^void makeHermitian( SymmetricMatrix<MT,SO,true,NF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^void makeHermitian( SymmetricMatrix<MT,SO,true,NF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^void makeHermitian( UniLowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^void makeHermitian( UniLowerMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^void makeHermitian( UniUpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^void makeHermitian( UniUpperMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UpperMatrix.h	/^void makeHermitian( UpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeHermitian	amun/3rd_party/blaze/math/UpperMatrix.h	/^void makeHermitian( UpperMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/CustomMatrix.h	/^void makePositiveDefinite( CustomMatrix<Type,AF,PF,SO>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^void makePositiveDefinite( DiagonalMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/DynamicMatrix.h	/^void makePositiveDefinite( DynamicMatrix<Type,SO>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/HermitianMatrix.h	/^void makePositiveDefinite( HermitianMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/HybridMatrix.h	/^void makePositiveDefinite( HybridMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/LowerMatrix.h	/^void makePositiveDefinite( LowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/StaticMatrix.h	/^void makePositiveDefinite( StaticMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^void makePositiveDefinite( SymmetricMatrix<MT,SO,true,NF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^void makePositiveDefinite( UniLowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^void makePositiveDefinite( UniUpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makePositiveDefinite	amun/3rd_party/blaze/math/UpperMatrix.h	/^void makePositiveDefinite( UpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/CustomMatrix.h	/^void makeSymmetric( CustomMatrix<Type,AF,PF,SO>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/CustomMatrix.h	/^void makeSymmetric( CustomMatrix<Type,AF,PF,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^void makeSymmetric( DiagonalMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^void makeSymmetric( DiagonalMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/DynamicMatrix.h	/^void makeSymmetric( DynamicMatrix<Type,SO>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/DynamicMatrix.h	/^void makeSymmetric( DynamicMatrix<Type,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/HermitianMatrix.h	/^void makeSymmetric( HermitianMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/HermitianMatrix.h	/^void makeSymmetric( HermitianMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/HybridMatrix.h	/^void makeSymmetric( HybridMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/HybridMatrix.h	/^void makeSymmetric( HybridMatrix<Type,M,N,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/LowerMatrix.h	/^void makeSymmetric( LowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/LowerMatrix.h	/^void makeSymmetric( LowerMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/StaticMatrix.h	/^void makeSymmetric( StaticMatrix<Type,M,N,SO>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/StaticMatrix.h	/^void makeSymmetric( StaticMatrix<Type,M,N,SO>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^void makeSymmetric( SymmetricMatrix<MT,SO,true,NF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^void makeSymmetric( SymmetricMatrix<MT,SO,true,NF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^void makeSymmetric( UniLowerMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^void makeSymmetric( UniLowerMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^void makeSymmetric( UniUpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^void makeSymmetric( UniUpperMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UpperMatrix.h	/^void makeSymmetric( UpperMatrix<MT,SO,DF>& matrix )$/;"	f	namespace:blaze
makeSymmetric	amun/3rd_party/blaze/math/UpperMatrix.h	/^void makeSymmetric( UpperMatrix<MT,SO,DF>& matrix, const Arg& min, const Arg& max )$/;"	f	namespace:blaze
make_index_sequence	amun/3rd_party/thrust_bind/bind.hpp	/^         make_index_sequence<thrust::tuple_size<decay_t<BoundArgTuple>>::value>()$/;"	f	namespace:thrust::experimental::detail::bind_detail
make_index_sequence	amun/3rd_party/thrust_bind/bind.hpp	/^         make_index_sequence<thrust::tuple_size<decay_t<Tuple>>::value>()$/;"	f	namespace:thrust::experimental::detail::bind_detail
make_integer_sequence_impl	amun/3rd_party/thrust_bind/bind.hpp	/^struct make_integer_sequence_impl$/;"	s	namespace:thrust::experimental::detail::bind_detail
make_integer_sequence_impl_unchecked	amun/3rd_party/thrust_bind/bind.hpp	/^struct make_integer_sequence_impl_unchecked<_Tp, _Ep, _Ep,$/;"	s	namespace:thrust::experimental::detail::bind_detail
make_integer_sequence_impl_unchecked	amun/3rd_party/thrust_bind/bind.hpp	/^struct make_integer_sequence_impl_unchecked<_Tp, _Sp, _Ep,$/;"	s	namespace:thrust::experimental::detail::bind_detail
make_ptr	amun/3rd_party/spdlog/details/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal
make_ptr	amun/3rd_party/spdlog/details/format.h	/^inline stdext::checked_array_iterator<T*> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal
make_ptr	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal
make_ptr	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T*> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal
make_type	amun/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal
make_type	amun/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fmt
make_type	amun/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal
make_type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal
make_type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fmt
make_type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal
malloc	amun/3rd_party/blaze/util/MemoryPool.h	/^inline void* MemoryPool<Type,Blocksize>::malloc()$/;"	f	class:blaze::MemoryPool
map	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_map::const_iterator map;$/;"	t	struct:YAML::detail::node_iterator_type
map	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_map::iterator map;$/;"	t	struct:YAML::detail::node_iterator_type
map_	amun/3rd_party/spdlog/details/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap
map_	amun/3rd_party/spdlog/details/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter
map_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap
map_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter
map_type	amun/3rd_party/cnpy/cnpy.cpp	/^char cnpy::map_type(const std::type_info& t)$/;"	f	class:cnpy
mapper_	amun/common/filter.h	/^    const std::vector<Words> mapper_;$/;"	m	class:amunmt::Filter
mark	amun/3rd_party/yaml-cpp/exceptions.h	/^  Mark mark;$/;"	m	class:YAML::Exception
mark	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const Mark& mark() const { return m_pRef->mark(); }$/;"	f	class:YAML::detail::node
mark	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const Mark& mark() const { return m_mark; }$/;"	f	class:YAML::detail::node_data
mark	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const Mark& mark() const { return m_pData->mark(); }$/;"	f	class:YAML::detail::node_ref
mark	amun/3rd_party/yaml-cpp/scanner.cpp	/^Mark Scanner::mark() const { return INPUT.mark(); }$/;"	f	class:YAML::Scanner
mark	amun/3rd_party/yaml-cpp/scanner.h	/^    Mark mark;$/;"	m	struct:YAML::Scanner::SimpleKey
mark	amun/3rd_party/yaml-cpp/stream.h	/^  const Mark mark() const { return m_mark; }$/;"	f	class:YAML::Stream
mark	amun/3rd_party/yaml-cpp/token.h	/^  Mark mark;$/;"	m	struct:YAML::Token
mark_defined	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void mark_defined() {$/;"	f	class:YAML::detail::node
mark_defined	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void mark_defined() { m_pData->mark_defined(); }$/;"	f	class:YAML::detail::node_ref
mark_defined	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::mark_defined() {$/;"	f	class:YAML::detail::node_data
mask16	amun/3rd_party/utf8/core.h	/^    inline uint16_t mask16(u16_type oc)$/;"	f	namespace:utf8::internal
mask8	amun/3rd_party/utf8/core.h	/^    inline uint8_t mask8(octet_type oc)$/;"	f	namespace:utf8::internal
mat_	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
mat_	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	m	class:blaze::DMatSVecMultExpr
mat_	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::SMatDVecMultExpr
mat_	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::SMatSVecMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	v
mat_	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
mat_	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
mat_	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	class:blaze::TDVecSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TDVecSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
mat_	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
mat_	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	class:blaze::TDVecTSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TDVecTSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TSMatDVecMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   LeftOperand  mat_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TSMatSVecMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	class:blaze::TSVecSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TSVecSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f	class:blaze::TSVecTDMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	m	class:blaze::TSVecTDMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^      , mat_( mat )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	class:blaze::TSVecTSMatMultExpr
mat_	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   RightOperand mat_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::TSVecTSMatMultExpr
matches	amun/3rd_party/fast_align/src/atools.cc	/^  int matches;$/;"	m	struct:FMeasureCommand	file:
matrix	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::DiagonalMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::HermitianMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::LowerMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::StrictlyLowerMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::StrictlyUpperMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::SymmetricMatrix::MatrixIterator
matrix	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::SymmetricMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::UniLowerMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::UniUpperMatrix::Iterator
matrix	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^         : matrix_( &matrix )  \/\/ Reference to the adapted dense matrix$/;"	m	class:blaze::UpperMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::DiagonalMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::DiagonalMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::DiagonalMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::HermitianMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::HermitianMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::HermitianElement
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::HermitianValue
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::HermitianMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::HermitianMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::LowerMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::LowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::LowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::StrictlyLowerMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::StrictlyLowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::StrictlyLowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::StrictlyUpperMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::StrictlyUpperMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::StrictlyUpperMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      MatrixType* matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::SymmetricMatrix::MatrixIterator
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::SymmetricMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::SymmetricMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::SymmetricMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   MT&    matrix_;  \/\/!< Reference to the adapted matrix.$/;"	m	class:blaze::NonNumericProxy
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   MT&    matrix_;  \/\/!< Reference to the adapted matrix.$/;"	m	class:blaze::NumericProxy
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   MatrixType matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::SymmetricMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::SymmetricMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::SymmetricMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::SymmetricElement
matrix_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   MT*          matrix_;  \/\/!< The sparse matrix containing the iterator.$/;"	m	class:blaze::SymmetricValue
matrix_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::UniLowerMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::UniLowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::UniLowerMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::UniUpperMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::UniUpperMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::UniUpperMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      MT*    matrix_;  \/\/!< Reference to the adapted dense matrix.$/;"	m	class:blaze::UpperMatrix::Iterator
matrix_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   : matrix_( array )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
matrix_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   MT matrix_;  \/\/!< The adapted dense matrix.$/;"	m	class:blaze::UpperMatrix
matrix_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   MT matrix_;  \/\/!< The adapted sparse matrix.$/;"	m	class:blaze::UpperMatrix
matrix_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   LeftOperand  matrix_;  \/\/!< Left-hand side dense matrix of the division expression.$/;"	m	class:blaze::DMatScalarDivExpr
matrix_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   LeftOperand  matrix_;  \/\/!< Left-hand side dense matrix of the multiplication expression.$/;"	m	class:blaze::DMatScalarMultExpr
matrix_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      IteratorType matrix_;  \/\/!< Iterator over the elements of the left-hand side sparse matrix expression.$/;"	m	class:blaze::SMatScalarDivExpr::ConstIterator
matrix_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   LeftOperand  matrix_;  \/\/!< Left-hand side sparse matrix of the division expression.$/;"	m	class:blaze::SMatScalarDivExpr
matrix_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      IteratorType matrix_;  \/\/!< Iterator over the elements of the left-hand side sparse matrix expression.$/;"	m	class:blaze::SMatScalarMultExpr::ConstIterator
matrix_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   LeftOperand  matrix_;  \/\/!< Left-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::SMatScalarMultExpr
matrix_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      MatrixType*  matrix_;  \/\/!< The sparse matrix containing the column.$/;"	m	class:blaze::Column::ColumnIterator
matrix_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Operand      matrix_;  \/\/!< The sparse matrix containing the column.$/;"	m	class:blaze::Column
matrix_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      MatrixType*  matrix_;  \/\/!< The sparse matrix containing the row.$/;"	m	class:blaze::Row::RowIterator
matrix_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Operand      matrix_;  \/\/!< The sparse matrix containing the row.$/;"	m	class:blaze::Row
matrix_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Operand      matrix_;  \/\/!< The sparse matrix containing the submatrix.$/;"	m	class:blaze::Submatrix
max	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^const ElementType_<MT> max( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
max	amun/3rd_party/blaze/math/dense/DenseVector.h	/^const ElementType_<VT> max( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
max	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^const ElementType_<MT> max( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
max	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^const ElementType_<VT> max( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
max	amun/3rd_party/blaze/util/timing/Timer.h	/^inline double Timer<TP>::max() const$/;"	f	class:blaze::timing::Timer
max	amun/3rd_party/fast_align/src/corpus.h	/^  inline unsigned max() const { return words_.size(); }$/;"	f	class:Dict
maxBatchSize_	amun/fpga/nth_element.h	/^  size_t maxBatchSize_;$/;"	m	class:amunmt::FPGA::NthElement
maxBatchSize_	amun/gpu/mblas/nth_element.h	/^    unsigned maxBeamSize_, maxBatchSize_;$/;"	m	class:amunmt::GPU::NthElement
maxBatchSize_	amun/plugin/nbest.h	/^    const size_t maxBatchSize_;$/;"	m	class:NBest
maxBeamSize_	amun/common/search.h	/^    const unsigned maxBeamSize_;$/;"	m	class:amunmt::Search
maxBeamSize_	amun/fpga/nth_element.h	/^  size_t maxBeamSize_;$/;"	m	class:amunmt::FPGA::NthElement
maxBeamSize_	amun/gpu/decoder/best_hyps.h	/^    unsigned maxBeamSize_;$/;"	m	class:amunmt::GPU::BestHyps
maxBeamSize_	amun/gpu/mblas/nth_element.h	/^    unsigned maxBeamSize_, maxBatchSize_;$/;"	m	class:amunmt::GPU::NthElement
maxLengthMult_	amun/common/search.h	/^    const float maxLengthMult_;$/;"	m	class:amunmt::Search
maxLength_	amun/common/history.h	/^    unsigned maxLength_;$/;"	m	class:amunmt::History
maxLength_	amun/common/sentences.h	/^    unsigned maxLength_;$/;"	m	class:amunmt::Sentences
maxSize	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::SizeType PtrVector<T,D,G>::maxSize() const$/;"	f	class:blaze::PtrVector
maxSize	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline TaskQueue::SizeType TaskQueue::maxSize() const$/;"	f	class:blaze::threadpool::TaskQueue
maxSize	amun/gpu/mblas/vector.h	/^  unsigned maxSize() const$/;"	f	class:amunmt::GPU::mblas::Vector
maxSize_	amun/gpu/mblas/vector.h	/^  unsigned size_, maxSize_;$/;"	m	class:amunmt::GPU::mblas::Vector
max_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double max_;      \/\/!< The maximal time of all measurements.$/;"	m	class:blaze::timing::Timer
max_size_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    size_t const max_size_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
mblas	amun/cpu/mblas/phoenix_functions.cpp	/^namespace mblas$/;"	n	namespace:amunmt::CPU	file:
mblas	amun/cpu/mblas/phoenix_functions.h	/^namespace mblas$/;"	n	namespace:amunmt::CPU
mblas	amun/cpu/mblas/tensor.cpp	/^namespace mblas {$/;"	n	namespace:amunmt::CPU	file:
mblas	amun/cpu/mblas/tensor.h	/^namespace mblas {$/;"	n	namespace:amunmt::CPU
mblas	amun/fpga/matrix.cpp	/^namespace mblas {$/;"	n	namespace:amunmt::FPGA	file:
mblas	amun/fpga/matrix.h	/^namespace mblas {$/;"	n	namespace:amunmt::FPGA
mblas	amun/fpga/matrix_functions.cpp	/^namespace mblas {$/;"	n	namespace:amunmt::FPGA	file:
mblas	amun/fpga/matrix_functions.h	/^namespace mblas {$/;"	n	namespace:amunmt::FPGA
mblas	amun/gpu/mblas/handles.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mblas	amun/gpu/mblas/tensor.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mblas	amun/gpu/mblas/tensor_functions.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mblas	amun/gpu/mblas/tensor_wrapper.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mblas	amun/gpu/mblas/vector.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mblas	amun/gpu/mblas/vector_wrapper.h	/^namespace mblas {$/;"	n	namespace:amunmt::GPU
mean_srclen_multiplier	amun/3rd_party/fast_align/src/fast_align.cc	/^double mean_srclen_multiplier = 1.0;$/;"	v
mem_	amun/fpga/array.h	/^  cl_mem mem_;$/;"	m	class:amunmt::FPGA::Array
memory	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^class YAML_CPP_API memory {$/;"	c	namespace:YAML::detail
memory_holder	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^  memory_holder() : m_pMemory(new memory) {}$/;"	f	class:YAML::detail::memory_holder
memory_holder	amun/3rd_party/yaml-cpp/node/detail/memory.h	/^class YAML_CPP_API memory_holder {$/;"	c	namespace:YAML::detail
merge	amun/3rd_party/yaml-cpp/memory.cpp	/^void memory::merge(const memory& rhs) {$/;"	f	class:YAML::detail::memory
merge	amun/3rd_party/yaml-cpp/memory.cpp	/^void memory_holder::merge(memory_holder& rhs) {$/;"	f	class:YAML::detail::memory_holder
message_	amun/3rd_party/blaze/util/logging/LogSection.h	/^   std::stringstream message_;  \/\/!< Intermediate buffer for log messages.$/;"	m	class:blaze::logging::LogSection
min	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^const ElementType_<MT> min( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
min	amun/3rd_party/blaze/math/dense/DenseVector.h	/^const ElementType_<VT> min( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
min	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^const ElementType_<MT> min( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
min	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^const ElementType_<VT> min( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
min	amun/3rd_party/blaze/util/timing/Timer.h	/^inline double Timer<TP>::min() const$/;"	f	class:blaze::timing::Timer
min_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double min_;      \/\/!< The minimal time of all measurements.$/;"	m	class:blaze::timing::Timer
minor	amun/3rd_party/yaml-cpp/directives.h	/^  int major, minor;$/;"	m	struct:YAML::Version
misalignment	amun/3rd_party/blaze/util/Misalignment.h	/^BLAZE_ALWAYS_INLINE size_t misalignment( const T* address )$/;"	f	namespace:blaze
model_	amun/cpu/dl4mt/encoder_decoder.h	/^    const Weights& model_;$/;"	m	class:amunmt::CPU::dl4mt::EncoderDecoder
model_	amun/cpu/nematus/encoder_decoder.h	/^    const Nematus::Weights& model_;$/;"	m	class:amunmt::CPU::Nematus::EncoderDecoder
model_	amun/cpu/npz_converter.h	/^    cnpy::npz_t model_;$/;"	m	class:amunmt::CPU::NpzConverter
model_	amun/fpga/encoder_decoder.h	/^  const Weights& model_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
model_	amun/fpga/npz_converter.h	/^  cnpy::npz_t model_;$/;"	m	class:amunmt::FPGA::NpzConverter
model_	amun/gpu/decoder/encoder_decoder.h	/^    const Weights& model_;$/;"	m	class:amunmt::GPU::EncoderDecoder
model_	amun/gpu/npz_converter.h	/^    cnpy::npz_t model_;$/;"	m	class:amunmt::GPU::NpzConverter
modifiedSettings	amun/3rd_party/yaml-cpp/emitterstate.h	/^    SettingChanges modifiedSettings;$/;"	m	struct:YAML::EmitterState::Group
months	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const months_array& months()$/;"	f	namespace:spdlog::details
move	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted dense matrix$/;"	f	namespace:blaze
move	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   : matrix_( std::move( m.matrix_ ) )  \/\/ The adapted sparse matrix$/;"	f	namespace:blaze
move	amun/3rd_party/spdlog/details/async_log_helper.h	/^                    msg_type(std::move(other.msg_type))$/;"	f	struct:spdlog::details::async_log_helper::async_msg
move	amun/3rd_party/spdlog/details/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer
move	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer
mpmc_bounded_queue	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    mpmc_bounded_queue(size_t buffer_size)$/;"	f	class:spdlog::details::mpmc_bounded_queue
mpmc_bounded_queue	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^class mpmc_bounded_queue$/;"	c	namespace:spdlog::details
msg	amun/3rd_party/yaml-cpp/exceptions.h	/^  std::string msg;$/;"	m	class:YAML::Exception
msg_type	amun/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
msvc_sink	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink()$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<std::mutex> msvc_sink_mt;$/;"	t	namespace:spdlog::sinks
msvc_sink_st	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<details::null_mutex> msvc_sink_st;$/;"	t	namespace:spdlog::sinks
multAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
multAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void multAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void multAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      multAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void multAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void multAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      multAssign( SparseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void multAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void multAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const DVecSVecMultExpr& rhs )$/;"	f	class:blaze::DVecSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void multAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void multAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
multAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void multAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
multAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void multAssign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
multAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void multAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
multAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      multAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void multAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void multAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void multAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void multAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const SVecDVecDivExpr& rhs )$/;"	f	class:blaze::SVecDVecDivExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      multAssign( DenseVector<VT,TF>& lhs, const SVecDVecMultExpr& rhs )$/;"	f	class:blaze::SVecDVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void multAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void multAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void multAssign( SparseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   friend inline void multAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void multAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void multAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
multAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      multAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
multAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
multAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
multAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void multAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
multAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      multAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      multAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   friend inline void multAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
multAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void multAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
multAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::multAssign( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
mutex_	amun/3rd_party/blaze/util/ThreadPool.h	/^   mutable Mutex mutex_;       \/\/!< Synchronization mutex.$/;"	m	class:blaze::ThreadPool
mutex_	amun/3rd_party/blaze/util/logging/Logger.h	/^   std::mutex    mutex_;  \/\/!< Synchronization mutex for thread-parallel logging.$/;"	m	class:blaze::logging::Logger
mutex_	amun/common/output_collector.h	/^  boost::mutex mutex_;$/;"	m	class:amunmt::OutputCollector
n	amun/3rd_party/yaml-cpp/indentation.h	/^  std::size_t n;$/;"	m	struct:YAML::IndentTo
n	amun/3rd_party/yaml-cpp/indentation.h	/^  std::size_t n;$/;"	m	struct:YAML::Indentation
nBest_	amun/gpu/dl4mt/decoder.h	/^    mblas::Vector<NthOutBatch> nBest_;$/;"	m	class:amunmt::GPU::Decoder
n_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   size_t n_;         \/\/!< The current number of columns of the sparse matrix.$/;"	m	class:blaze::CompressedMatrix
n_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   const size_t n_;       \/\/!< The number of columns of the submatrix.$/;"	m	class:blaze::Submatrix
name	amun/3rd_party/spdlog/details/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg
name	amun/3rd_party/spdlog/details/logger_impl.h	/^inline const std::string& spdlog::logger::name() const$/;"	f	class:spdlog::logger
name	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg
name	amun/cpu/nematus/model.cpp	/^std::string Weights::Transition::name(const std::string& prefix, std::string name, std::string infix,$/;"	f	class:amunmt::CPU::Nematus::Weights::Transition
name_	amun/common/loader.h	/^    const std::string name_;$/;"	m	class:amunmt::Loader
name_	amun/common/scorer.h	/^    const std::string& name_;$/;"	m	class:amunmt::Scorer
name_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class name_formatter:public flag_formatter$/;"	c	namespace:spdlog::details::__anon33
neighbors_	amun/3rd_party/fast_align/src/atools.cc	/^  vector<pair<int,int> > neighbors_;$/;"	m	struct:RefineCommand	file:
nematusModels_	amun/cpu/decoder/encoder_decoder_loader.h	/^    std::vector<std::unique_ptr<Nematus::Weights>> nematusModels_;$/;"	m	class:amunmt::CPU::EncoderDecoderLoader
newSize	amun/gpu/mblas/vector.h	/^  void newSize(unsigned newSize)$/;"	f	class:amunmt::GPU::mblas::Vector
next	amun/3rd_party/utf8/checked.h	/^    uint32_t next(octet_iterator& it, octet_iterator end)$/;"	f	namespace:utf8
next	amun/3rd_party/utf8/unchecked.h	/^        uint32_t next(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
nextId_	amun/common/output_collector.h	/^  long nextId_;$/;"	m	class:amunmt::OutputCollector
next_	amun/3rd_party/blaze/util/MemoryPool.h	/^      FreeObject* next_;              \/\/!< Pointer to the next free object.$/;"	m	union:blaze::MemoryPool::FreeObject
next_arg	amun/3rd_party/spdlog/details/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
next_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
next_arg_index_	amun/3rd_party/spdlog/details/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase
next_arg_index_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase
ngram	amun/gpu/decoder/kenlm.h	/^  namespace ngram {$/;"	n	namespace:lm
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline char ninf() { return std::numeric_limits<char>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline double ninf() { return -std::numeric_limits<double>::max(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline float ninf() { return -std::numeric_limits<float>::max(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline int ninf() { return std::numeric_limits<int>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline long double ninf() { return -std::numeric_limits<long double>::max(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline long ninf() { return std::numeric_limits<long>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline ptrdiff_t ninf() { return std::numeric_limits<ptrdiff_t>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline short ninf() { return std::numeric_limits<short>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline signed char ninf() { return std::numeric_limits<signed char>::min(); }$/;"	f	struct:blaze::Limits
ninf	amun/3rd_party/blaze/util/Limits.h	/^   static inline wchar_t ninf() { return std::numeric_limits<wchar_t>::min(); }$/;"	f	struct:blaze::Limits
nmt	amun/python/test.py	/^import libamunmt as nmt$/;"	i
no	amun/3rd_party/blaze/util/TypeList.h	/^   class Yes { No no[2]; };$/;"	m	class:blaze::ContainsRelated::Yes
no_null_word	amun/3rd_party/fast_align/src/fast_align.cc	/^int no_null_word = 0;$/;"	v
node	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  node() : m_pRef(new node_ref) {}$/;"	f	class:YAML::detail::node
node	amun/3rd_party/yaml-cpp/node/detail/node.h	/^class node {$/;"	c	namespace:YAML::detail
node	amun/3rd_party/yaml-cpp/node/impl.h	/^  const Node& node;$/;"	m	struct:YAML::as_if
node_data	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^class YAML_CPP_API node_data {$/;"	c	namespace:YAML::detail
node_data	amun/3rd_party/yaml-cpp/node_data.cpp	/^node_data::node_data()$/;"	f	class:YAML::detail::node_data
node_iterator	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef node_iterator_base<node> node_iterator;$/;"	t	namespace:YAML::detail
node_iterator_base	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_base(MapIter mapIt, MapIter mapEnd)$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_base(SeqIter seqIt)$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base()$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base(const node_iterator_base<W>& rhs,$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^class node_iterator_base$/;"	c	namespace:YAML::detail
node_iterator_type	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_type {$/;"	s	namespace:YAML::detail
node_iterator_type	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_type<const V> {$/;"	s	namespace:YAML::detail
node_iterator_value	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_value(V& key, V& value) : kv(&key, &value), pNode(0) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_value(V& rhs) : kv(), pNode(&rhs) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_value() : kv(), pNode(0) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_value : public std::pair<V*, V*> {$/;"	s	namespace:YAML::detail
node_map	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::map<node*, node*> node_map;$/;"	t	class:YAML::detail::node_data
node_map	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef std::map<node*, node*> node_map;$/;"	t	namespace:YAML::detail
node_ref	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_ref() : m_pData(new node_data) {}$/;"	f	class:YAML::detail::node_ref
node_ref	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^class node_ref {$/;"	c	namespace:YAML::detail
node_seq	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::vector<node*> node_seq;$/;"	t	class:YAML::detail::node_data
node_seq	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef std::vector<node*> node_seq;$/;"	t	namespace:YAML::detail
nodes	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  typedef std::set<node*> nodes;$/;"	t	class:YAML::detail::node
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   max( const T1& a, const T2& b ) noexcept( All<IsNumeric,T1,T2>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   max( const T1& a, const T2& b, const Ts&... args ) noexcept( All<IsNumeric,T1,T2,Ts...>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   min( const T1& a, const T2& b ) noexcept( All<IsNumeric,T1,T2>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   min( const T1& a, const T2& b, const Ts&... args ) noexcept( All<IsNumeric,T1,T2,Ts...>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   noexcept( IsBuiltin< CommonType_<T1,T2> >::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^   noexcept( IsBuiltin<T>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^BLAZE_ALWAYS_INLINE T round( T a ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^BLAZE_ALWAYS_INLINE constexpr T nextMultiple( T value, T factor ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^inline constexpr int sign( T a ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/Functions.h	/^inline size_t digits( T a ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void swap( DiagonalMatrix<MT,SO,DF>& a, DiagonalMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void swap( HermitianMatrix<MT,SO,DF>& a, HermitianMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void swap( LowerMatrix<MT,SO,DF>& a, LowerMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline void swap( StrictlyLowerMatrix<MT,SO,DF>& a, StrictlyLowerMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline void swap( StrictlyUpperMatrix<MT,SO,DF>& a, StrictlyUpperMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void swap( SymmetricMatrix<MT,SO,DF,NF>& a, SymmetricMatrix<MT,SO,DF,NF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void swap( UniLowerMatrix<MT,SO,DF>& a, UniLowerMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void swap( UniUpperMatrix<MT,SO,DF>& a, UniUpperMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void swap( UpperMatrix<MT,SO,DF>& a, UpperMatrix<MT,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline size_t          capacity( size_t i ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline size_t          capacity() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline size_t          columns() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline size_t          rows() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline size_t          spacing() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^                              inline void            swap( DiagonalMatrix& m ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline DiagonalMatrix& operator=( DiagonalMatrix&& rhs ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline DiagonalMatrix( DiagonalMatrix&& m ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::DiagonalProxy
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::DiagonalProxy
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::DiagonalProxy
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^                              inline size_t          capacity( size_t i ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^                              inline size_t          capacity() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^                              inline size_t          columns() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^                              inline size_t          rows() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^                              inline void            swap( DiagonalMatrix& m ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   inline DiagonalMatrix& operator=( DiagonalMatrix&& rhs ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   inline DiagonalMatrix( DiagonalMatrix&& m ) noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::DiagonalMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline size_t           spacing() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^                              inline void             swap( HermitianMatrix& m ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline HermitianMatrix& operator=( HermitianMatrix&& rhs ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline HermitianMatrix( HermitianMatrix&& m ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline void store ( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline void storea( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline void storeu( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   inline void stream( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   inline Pointer operator->() noexcept;$/;"	m	class:blaze::HermitianElement
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   inline ConstPointer operator->() const noexcept;$/;"	m	class:blaze::HermitianProxy
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   inline ConstReference get() const noexcept;$/;"	m	class:blaze::HermitianProxy
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   inline Pointer      operator->() noexcept;$/;"	m	class:blaze::HermitianProxy
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::HermitianProxy
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   inline RepresentedType get() const noexcept;$/;"	m	class:blaze::HermitianValue
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::HermitianValue
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^                              inline void             swap( HermitianMatrix& m ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   inline HermitianMatrix& operator=( HermitianMatrix&& rhs ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   inline HermitianMatrix( HermitianMatrix&& m ) noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::HermitianMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline size_t       capacity( size_t i ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline size_t       capacity() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline size_t       columns() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline size_t       rows() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline size_t       spacing() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^                              inline void         swap( LowerMatrix& m ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline LowerMatrix& operator=( LowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline LowerMatrix( LowerMatrix&& m ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros()  noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::LowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::LowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::LowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^                              inline size_t       capacity( size_t i ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^                              inline size_t       capacity() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^                              inline size_t       columns() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^                              inline size_t       rows() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^                              inline void         swap( LowerMatrix& m ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   inline LowerMatrix& operator=( LowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   inline LowerMatrix( LowerMatrix&& m ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::LowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline StrictlyLowerMatrix& operator=( StrictlyLowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline StrictlyLowerMatrix( StrictlyLowerMatrix&& m ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline size_t capacity() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline size_t columns() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline size_t rows() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline size_t spacing() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   inline void swap( StrictlyLowerMatrix& m ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline StrictlyLowerMatrix& operator=( StrictlyLowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline StrictlyLowerMatrix( StrictlyLowerMatrix&& m ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline size_t   capacity( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline size_t   capacity() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline size_t   columns() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline size_t   rows() const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   inline void swap( StrictlyLowerMatrix& m ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::StrictlyLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::StrictlyLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::StrictlyLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline StrictlyUpperMatrix& operator=( StrictlyUpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline StrictlyUpperMatrix( StrictlyUpperMatrix&& m ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline size_t capacity() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline size_t columns() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline size_t rows() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline size_t spacing() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   inline void swap( StrictlyUpperMatrix& m ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline StrictlyUpperMatrix& operator=( StrictlyUpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline StrictlyUpperMatrix( StrictlyUpperMatrix&& m ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline size_t   capacity( size_t i ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline size_t   capacity() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline size_t   columns() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline size_t   rows() const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   inline void swap( StrictlyUpperMatrix& m ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::StrictlyUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::StrictlyUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::StrictlyUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::StrictlyUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline size_t           spacing() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^                              inline void             swap( SymmetricMatrix& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline SymmetricMatrix& operator=( SymmetricMatrix&& rhs ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline SymmetricMatrix( SymmetricMatrix&& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline size_t           spacing() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^                              inline void             swap( SymmetricMatrix& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline SymmetricMatrix& operator=( SymmetricMatrix&& rhs ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline SymmetricMatrix( SymmetricMatrix&& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline void store ( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline void storea( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline void storeu( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   inline void stream( size_t i, size_t j, const SIMDType& value ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   inline RawReference get() const noexcept;$/;"	m	class:blaze::NonNumericProxy
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^   inline operator RawReference() const noexcept;$/;"	m	class:blaze::NonNumericProxy
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   inline ConstReference get() const noexcept;$/;"	m	class:blaze::NumericProxy
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::NumericProxy
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   inline Pointer base() const noexcept;$/;"	m	class:blaze::SharedValue
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^                              inline void             swap( SymmetricMatrix& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   inline SymmetricMatrix& operator=( SymmetricMatrix&& rhs ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   inline SymmetricMatrix( SymmetricMatrix&& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^                              inline size_t           capacity( size_t i ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^                              inline size_t           capacity() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^                              inline void             swap( SymmetricMatrix& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   inline SymmetricMatrix& operator=( SymmetricMatrix&& rhs ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   inline SymmetricMatrix( SymmetricMatrix&& m ) noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::SymmetricMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   inline Pointer operator->() noexcept;$/;"	m	class:blaze::SymmetricElement
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   inline RepresentedType get() const noexcept;$/;"	m	class:blaze::SymmetricValue
noexcept	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::SymmetricValue
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline UniLowerMatrix& operator=( UniLowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline UniLowerMatrix( UniLowerMatrix&& m ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline size_t capacity() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline size_t columns() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline size_t rows() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline size_t spacing() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   inline void   swap( UniLowerMatrix& m ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline UniLowerMatrix& operator=( UniLowerMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline UniLowerMatrix( UniLowerMatrix&& m ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline size_t   capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline size_t   capacity() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline size_t   columns() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline size_t   rows() const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   inline void     swap( UniLowerMatrix& m ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniLowerMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   inline Pointer operator->() noexcept;$/;"	m	class:blaze::UniLowerElement
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   inline RepresentedType get() const noexcept;$/;"	m	class:blaze::UniLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   inline bool            isRestricted() const noexcept;$/;"	m	class:blaze::UniLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::UniLowerProxy
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   inline RepresentedType get() const noexcept;$/;"	m	class:blaze::UniLowerValue
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   inline bool            isRestricted() const noexcept;$/;"	m	class:blaze::UniLowerValue
noexcept	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::UniLowerValue
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline UniUpperMatrix& operator=( UniUpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline UniUpperMatrix( UniUpperMatrix&& m ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline size_t capacity() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline size_t columns() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline size_t rows() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline size_t spacing() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   inline void   swap( UniUpperMatrix& m ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline UniUpperMatrix& operator=( UniUpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline UniUpperMatrix( UniUpperMatrix&& m ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline size_t   capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline size_t   capacity() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline size_t   columns() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline size_t   rows() const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   inline void     swap( UniUpperMatrix& m ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UniUpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   inline Pointer operator->() noexcept;$/;"	m	class:blaze::UniUpperElement
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   inline RepresentedType get()          const noexcept;$/;"	m	class:blaze::UniUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   inline bool            isRestricted() const noexcept;$/;"	m	class:blaze::UniUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::UniUpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   inline RepresentedType get() const noexcept;$/;"	m	class:blaze::UniUpperValue
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   inline bool            isRestricted() const noexcept;$/;"	m	class:blaze::UniUpperValue
noexcept	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   inline operator RepresentedType() const noexcept;$/;"	m	class:blaze::UniUpperValue
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline size_t       capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline size_t       capacity() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline size_t       columns() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline size_t       rows() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline size_t       spacing() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^                              inline void         swap( UpperMatrix& m ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType load ( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loada( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   BLAZE_ALWAYS_INLINE SIMDType loadu( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline UpperMatrix& operator=( UpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline UpperMatrix( UpperMatrix&& m ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline bool isAligned   () const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^                              inline size_t       capacity( size_t i ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^                              inline size_t       capacity() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^                              inline size_t       columns() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^                              inline size_t       rows() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^                              inline void         swap( UpperMatrix& m ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   inline UpperMatrix& operator=( UpperMatrix&& rhs ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   inline UpperMatrix( UpperMatrix&& m ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   inline bool isIntact() const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros( size_t n ) noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   static inline constexpr size_t maxNonZeros() noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::UpperMatrix
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::UpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::UpperProxy
noexcept	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   inline operator ConstReference() const noexcept;$/;"	m	class:blaze::UpperProxy
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline size_t        capacity( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline size_t        capacity() const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline size_t        columns() const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline size_t        rows() const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline size_t        spacing() const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^                              inline void          swap( CustomMatrix& m ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstIterator  begin ( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstIterator  cbegin( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstIterator  cend  ( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstIterator  end   ( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline ConstReference operator()( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline CustomMatrix& operator=( CustomMatrix&& rhs ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline CustomMatrix( CustomMatrix&& m ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline Iterator       begin ( size_t i ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline Iterator       end   ( size_t i ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline Pointer        data  ( size_t i ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomMatrix.h	/^   inline Reference      operator()( size_t i, size_t j ) noexcept;$/;"	m	class:blaze::CustomMatrix
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^                                inline size_t        capacity() const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^                                inline size_t        size() const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^                                inline void          swap( CustomVector& v ) noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstIterator  begin () const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstIterator  end   () const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline CustomVector& operator=( CustomVector&& rhs ) noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline CustomVector( CustomVector&& v ) noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline Iterator       begin () noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline Iterator       end   () noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/CustomVector.h	/^   inline Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::CustomVector
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   explicit inline DenseIterator( Type* ptr ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   explicit inline DenseIterator() noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline DenseIterator&      operator++()      noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline DenseIterator&      operator--()      noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline DenseIterator& operator+=( ptrdiff_t inc ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline DenseIterator& operator-=( ptrdiff_t inc ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline DenseIterator( const DenseIterator<Other,AF2>& it ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline PointerType   operator->() const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline PointerType base() const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline ReferenceType operator* () const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline ReferenceType operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline const DenseIterator operator++( int ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline const DenseIterator operator--( int ) noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline const SIMDType load  () const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline const SIMDType loada () const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline const SIMDType loadu () const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline void           store ( const SIMDType& value ) const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline void           storea( const SIMDType& value ) const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline void           storeu( const SIMDType& value ) const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   inline void           stream( const SIMDType& value ) const noexcept;$/;"	m	class:blaze::DenseIterator
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator!=( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator<( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator<=( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator==( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator>( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline bool operator>=( const DenseIterator<T1,AF1>& lhs, const DenseIterator<T2,AF2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline const DenseIterator<Type,AF> operator+( const DenseIterator<Type,AF>& it, ptrdiff_t inc ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline const DenseIterator<Type,AF> operator+( ptrdiff_t inc, const DenseIterator<Type,AF>& it ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline const DenseIterator<Type,AF> operator-( const DenseIterator<Type,AF>& it, ptrdiff_t inc ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^inline ptrdiff_t operator-( const DenseIterator<Type,AF>& lhs, const DenseIterator<Type,AF>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                                     inline DynamicMatrix( DynamicMatrix&& m ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline size_t         capacity( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline size_t         capacity() const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline size_t         columns() const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline size_t         rows() const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline size_t         spacing() const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^                              inline void           swap( DynamicMatrix& m ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   explicit inline DynamicMatrix() noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstIterator  begin ( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstIterator  cbegin( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstIterator  cend  ( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstIterator  end   ( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline ConstReference operator()( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline DynamicMatrix& operator=( DynamicMatrix&& rhs ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline Iterator       begin ( size_t i ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline Iterator       end   ( size_t i ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline Pointer        data  ( size_t i ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicMatrix.h	/^   inline Reference      operator()( size_t i, size_t j ) noexcept;$/;"	m	class:blaze::DynamicMatrix
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^                              inline size_t         capacity() const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^                              inline size_t         size() const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^                              inline void           swap( DynamicVector& v ) noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^                           inline DynamicVector( DynamicVector&& v ) noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   explicit inline DynamicVector() noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstIterator  begin () const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstIterator  end   () const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline DynamicVector& operator=( DynamicVector&& rhs ) noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline Iterator       begin () noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline Iterator       end   () noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/DynamicVector.h	/^   inline Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::DynamicVector
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline           size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline constexpr size_t capacity() const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline constexpr size_t spacing() const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline size_t           columns() const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline size_t           rows() const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^                              inline void             swap( HybridMatrix& m ) noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstIterator  begin ( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstIterator  cbegin( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstIterator  cend  ( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstIterator  end   ( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline ConstReference operator()( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline Iterator       begin ( size_t i ) noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline Iterator       end   ( size_t i ) noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline Pointer        data  ( size_t i ) noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridMatrix.h	/^   inline Reference      operator()( size_t i, size_t j ) noexcept;$/;"	m	class:blaze::HybridMatrix
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^                              inline size_t        capacity() const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^                              inline size_t        size() const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^                              inline void          swap( HybridVector& v ) noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstIterator  begin () const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstIterator  end   () const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline Iterator       begin () noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline Iterator       end   () noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/HybridVector.h	/^   inline Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::HybridVector
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline           size_t capacity( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline constexpr size_t capacity() const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline constexpr size_t columns() const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline constexpr size_t rows() const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline constexpr size_t spacing() const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^                              inline void             swap( StaticMatrix& m ) noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstIterator  begin ( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstIterator  cbegin( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstIterator  cend  ( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstIterator  end   ( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline ConstReference operator()( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline Iterator       begin ( size_t i ) noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline Iterator       end   ( size_t i ) noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline Pointer        data  ( size_t i ) noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticMatrix.h	/^   inline Reference      operator()( size_t i, size_t j ) noexcept;$/;"	m	class:blaze::StaticMatrix
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^                              inline constexpr size_t capacity() const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^                              inline constexpr size_t size() const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^                              inline void             swap( StaticVector& v ) noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstIterator  begin () const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstIterator  end   () const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline Iterator       begin () noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline Iterator       end   () noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/dense/StaticVector.h	/^   inline Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::StaticVector
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool isSame( const Matrix<MT1,SO1>& a, const Matrix<MT2,SO2>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool isSquare( const Matrix<MT,SO>& matrix ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const Matrix<MT,SO>& matrix ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const Matrix<MT,SO>& matrix, size_t i ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t columns( const Matrix<MT,SO>& matrix ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t rows( const Matrix<MT,SO>& matrix ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool isSame( const Vector<VT1,TF1>& a, const Vector<VT2,TF2>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE size_t capacity( const Vector<VT,TF>& vector ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE size_t size( const Vector<VT,TF>& vector ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/Conjugate.h	/^BLAZE_ALWAYS_INLINE void conjugate( T& a ) noexcept( IsNumeric<T>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/Conjugate.h	/^BLAZE_ALWAYS_INLINE void cswap( T& a, T& b ) noexcept( IsNumeric<T>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/IsDefault.h	/^BLAZE_ALWAYS_INLINE bool isDefault( const Type& v ) noexcept( IsBuiltin<Type>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/IsDefault.h	/^BLAZE_ALWAYS_INLINE bool isDefault( const complex<T>& v ) noexcept( IsBuiltin<T>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/IsReal.h	/^BLAZE_ALWAYS_INLINE bool isReal( const complex<Type>& v ) noexcept( IsBuiltin<Type>::value )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/shims/Square.h	/^   noexcept( noexcept( a * a ) )$/;"	f	namespace:blaze
noexcept	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDint8() noexcept : value( 0 ) {}$/;"	m	struct:blaze::SIMDint8
noexcept	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDuint8( const SIMDi8<T>& v ) noexcept : value( (~v).value ) {}$/;"	f
noexcept	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDuint8() noexcept : value( 0 ) {}$/;"	m	struct:SIMDuint8
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                                     inline CompressedMatrix( CompressedMatrix&& sm ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                                    inline CompressedMatrix( CompressedMatrix&& sm ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline size_t            capacity( size_t i ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline size_t            capacity( size_t j ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline size_t            capacity() const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline size_t            columns() const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline size_t            rows() const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^                              inline void              swap( CompressedMatrix& sm ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline CompressedMatrix& operator=( CompressedMatrix&& rhs ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline ConstIterator  begin ( size_t i ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline ConstIterator  cbegin( size_t i ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline ConstIterator  cend  ( size_t i ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline ConstIterator  end   ( size_t i ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline ConstReference operator()( size_t i, size_t j ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline Iterator       begin ( size_t i ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline Iterator       end   ( size_t i ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline Reference      operator()( size_t i, size_t j ) noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   inline size_t   extendCapacity() const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::CompressedMatrix
noexcept	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void swap( CompressedMatrix<Type,SO>& a, CompressedMatrix<Type,SO>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                                    inline CompressedVector( CompressedVector&& sv ) noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                              inline size_t            capacity() const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                              inline size_t            size() const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                              inline void              swap( CompressedVector& sv ) noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                           explicit inline CompressedVector( size_t size ) noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^                           explicit inline CompressedVector() noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline CompressedVector& operator=( CompressedVector&& rhs ) noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline ConstIterator  begin () const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline ConstIterator  end   () const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline Iterator       begin () noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline Iterator       end   () noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   inline size_t   extendCapacity() const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::CompressedVector
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline bool isIntact( const CompressedVector<Type,TF>& v ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void swap( CompressedVector<Type,TF>& a, CompressedVector<Type,TF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::MatrixAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::MatrixAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   inline operator RawReference() const noexcept;$/;"	m	class:blaze::MatrixAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline void swap( T& a, const MatrixAccessProxy<MT>& v ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline void swap( const MatrixAccessProxy<MT>& a, T& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline void swap( const MatrixAccessProxy<MT>& a, const MatrixAccessProxy<MT>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   inline RawReference get()          const noexcept;$/;"	m	class:blaze::VectorAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   inline bool         isRestricted() const noexcept;$/;"	m	class:blaze::VectorAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   inline operator RawReference() const noexcept;$/;"	m	class:blaze::VectorAccessProxy
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline void swap( T& a, const VectorAccessProxy<VT>& v ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline void swap( const VectorAccessProxy<VT>& a, T& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline void swap( const VectorAccessProxy<VT>& a, const VectorAccessProxy<VT>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Column.h	/^inline bool isIntact( const Column<MT,SO,DF,SF>& column ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Column.h	/^inline bool isSame( const Column<MT,SO,DF,SF>& a, const Column<MT,SO,DF,SF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Row.h	/^inline bool isIntact( const Row<MT,SO,DF,SF>& row ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Row.h	/^inline bool isSame( const Row<MT,SO,DF,SF>& a, const Row<MT,SO,DF,SF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isIntact( const Submatrix<MT,AF,SO,DF>& sm ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isSame( const Matrix<MT,SO>& a, const Submatrix<MT,AF,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isSame( const Submatrix<MT,AF,SO,DF>& a, const Matrix<MT,SO>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool isSame( const Submatrix<MT,AF,SO,DF>& a, const Submatrix<MT,AF,SO,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isIntact( const Subvector<VT,AF,TF,DF>& sv ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isSame( const Subvector<VT,AF,TF,DF>& a, const Subvector<VT,AF,TF,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isSame( const Subvector<VT,AF,TF,DF>& a, const Vector<VT,TF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool isSame( const Vector<VT,TF>& a, const Subvector<VT,AF,TF,DF>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/math/views/column/Dense.h	/^                              inline size_t  capacity() const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Dense.h	/^                              inline size_t  size() const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Dense.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^                              inline size_t   capacity() const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^                              inline size_t   size() const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   friend bool isIntact( const Column<MT2,SO2,DF2,SF2>& column ) noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   friend bool isSame( const Column<MT2,SO2,DF2,SF2>& a, const Column<MT2,SO2,DF2,SF2>& b ) noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   inline size_t extendCapacity() const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::Column
noexcept	amun/3rd_party/blaze/math/views/row/Dense.h	/^                              inline size_t capacity() const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Dense.h	/^                              inline size_t size() const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Dense.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^                              inline size_t   capacity() const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^                              inline size_t   size() const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   friend bool isIntact( const Row<MT2,SO2,DF2,SF2>& row ) noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   friend bool isSame( const Row<MT2,SO2,DF2,SF2>& a, const Row<MT2,SO2,DF2,SF2>& b ) noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   inline size_t extendCapacity() const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::Row
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     capacity( size_t i ) const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     capacity() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     column() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     columns() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     row() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     rows() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^                              inline size_t     spacing() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   inline ConstPointer   data  ( size_t i ) const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   inline Pointer        data  ( size_t i ) noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     capacity( size_t i ) const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     capacity() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     column() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     columns() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     row() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^                              inline size_t     rows() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   friend bool isIntact( const Submatrix<MT2,AF2,SO2,DF2>& sm ) noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   friend bool isSame( const Matrix<MT2,SO2>& a, const Submatrix<MT2,AF2,SO2,DF2>& b ) noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   friend bool isSame( const Submatrix<MT2,AF2,SO2,DF2>& a, const Matrix<MT2,SO2>& b ) noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   friend bool isSame( const Submatrix<MT2,AF2,SO2,DF2>& a, const Submatrix<MT2,AF2,SO2,DF2>& b ) noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   inline bool hasOverlap() const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::Submatrix
noexcept	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^                              inline size_t     capacity() const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^                              inline size_t     size() const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   inline ConstPointer   data  () const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^   inline Pointer        data  () noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^                              inline size_t     capacity() const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^                              inline size_t     size() const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   friend bool isIntact( const Subvector<VT2,AF2,TF2,DF2>& sv ) noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   friend bool isSame( const Subvector<VT2,AF2,TF2,DF2>& a, const Subvector<VT2,AF2,TF2,DF2>& b ) noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   friend bool isSame( const Subvector<VT2,AF2,TF2,DF2>& a, const Vector<VT2,TF2>& b ) noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   friend bool isSame( const Vector<VT2,TF2>& a, const Subvector<VT2,AF2,TF2,DF2>& b ) noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   inline bool canSMPAssign() const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   template< typename Other > inline bool canAlias ( const Other* alias ) const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   template< typename Other > inline bool isAliased( const Other* alias ) const noexcept;$/;"	m	class:blaze::Subvector
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   inline ConstPointer     address( ConstReference x ) const noexcept;$/;"	m	class:blaze::AlignedAllocator
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   inline Pointer          address( Reference x ) const noexcept;$/;"	m	class:blaze::AlignedAllocator
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   inline constexpr size_t max_size() const noexcept;$/;"	m	class:blaze::AlignedAllocator
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   inline void destroy  ( Pointer ptr ) noexcept;$/;"	m	class:blaze::AlignedAllocator
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline bool operator!=( const AlignedAllocator<T1>& lhs, const AlignedAllocator<T2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/util/AlignedAllocator.h	/^inline bool operator==( const AlignedAllocator<T1>& lhs, const AlignedAllocator<T2>& rhs ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline           Iterator       begin () noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline           Iterator       end   () noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline           Pointer        data() noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline           Reference      operator[]( size_t index ) noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline           operator Pointer     () noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstIterator  begin () const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstIterator  cbegin() const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstIterator  cend  () const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstIterator  end   () const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstPointer   data() const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr ConstReference operator[]( size_t index ) const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr operator ConstPointer() const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/AlignedArray.h	/^   inline constexpr size_t size() const noexcept;$/;"	m	class:blaze::AlignedArray
noexcept	amun/3rd_party/blaze/util/PtrVector.h	/^   inline void swap( PtrVector& pv ) noexcept;$/;"	m	class:blaze::PtrVector
noexcept	amun/3rd_party/blaze/util/PtrVector.h	/^inline void swap( PtrVector<T,D,G>& a, PtrVector<T,D,G>& b ) noexcept;$/;"	m	namespace:blaze
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void operator delete  ( void* ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void operator delete  ( void*, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void operator delete[]( void* ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void operator delete[]( void*, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void* operator new  ( std::size_t, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void* operator new[]( std::size_t, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::FunctionTrace
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void operator delete  ( void* ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void operator delete  ( void*, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void operator delete[]( void* ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void operator delete[]( void*, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void* operator new  ( std::size_t, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void* operator new[]( std::size_t, const std::nothrow_t& ) noexcept = delete;$/;"	m	class:blaze::logging::LogSection
noexcept	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^   inline void swap( TaskQueue& tq ) noexcept;$/;"	m	class:blaze::threadpool::TaskQueue
noexcept	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline void swap( TaskQueue& a, TaskQueue& b ) noexcept;$/;"	m	namespace:blaze::threadpool
nonZeros	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline size_t DiagonalMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline size_t DiagonalMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::DiagonalMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline size_t DiagonalMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::DiagonalMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline size_t DiagonalMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::DiagonalMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline size_t HermitianMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline size_t HermitianMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::HermitianMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline size_t HermitianMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::HermitianMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline size_t HermitianMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::HermitianMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline size_t LowerMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::LowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline size_t LowerMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::LowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline size_t LowerMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::LowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline size_t LowerMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::LowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline size_t StrictlyLowerMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline size_t StrictlyLowerMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::StrictlyLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline size_t StrictlyLowerMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::StrictlyLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline size_t StrictlyLowerMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::StrictlyLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline size_t StrictlyUpperMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline size_t StrictlyUpperMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::StrictlyUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline size_t StrictlyUpperMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::StrictlyUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline size_t StrictlyUpperMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::StrictlyUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,true,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,true,false>::nonZeros() const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,true,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,true,true>::nonZeros() const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,false,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,false,false>::nonZeros() const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,false,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline size_t SymmetricMatrix<MT,SO,false,true>::nonZeros() const$/;"	f	class:blaze::SymmetricMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline size_t UniLowerMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline size_t UniLowerMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::UniLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline size_t UniLowerMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::UniLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline size_t UniLowerMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::UniLowerMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline size_t UniUpperMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline size_t UniUpperMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::UniUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline size_t UniUpperMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::UniUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline size_t UniUpperMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::UniUpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline size_t UpperMatrix<MT,SO,true>::nonZeros( size_t i ) const$/;"	f	class:blaze::UpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline size_t UpperMatrix<MT,SO,true>::nonZeros() const$/;"	f	class:blaze::UpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline size_t UpperMatrix<MT,SO,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::UpperMatrix
nonZeros	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline size_t UpperMatrix<MT,SO,false>::nonZeros() const$/;"	f	class:blaze::UpperMatrix
nonZeros	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::DMatTransExpr
nonZeros	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::DMatTransExpr
nonZeros	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::DVecSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f
nonZeros	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f
nonZeros	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const Matrix<MT,SO>& matrix )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const Matrix<MT,SO>& matrix, size_t i )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatEvalExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatEvalExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatForEachExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatForEachExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatScalarDivExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatScalarDivExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatScalarMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatScalarMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatSerialExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatSerialExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatTSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatTSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatTSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatTSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatTransExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatTransExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SMatTransposer
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline size_t nonZeros( size_t j ) const {$/;"	f	class:blaze::SMatTransposer
nonZeros	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SMatTransposer
nonZeros	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecDVecDivExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecDVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecEvalExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecForEachExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecSVecAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecSVecSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecScalarDivExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecScalarMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecSerialExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f
nonZeros	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f
nonZeros	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::SVecTSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecTSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::SVecTransExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::TSMatSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSMatSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSMatSVecMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::TSMatTSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSMatTSMatAddExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   inline size_t nonZeros( size_t i ) const {$/;"	f	class:blaze::TSMatTSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSMatTSMatSubExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSVecSMatMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   inline size_t nonZeros() const {$/;"	f	class:blaze::TSVecTSMatMultExpr
nonZeros	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const Vector<VT,TF>& vector )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::nonZeros( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
nonZeros	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::nonZeros() const$/;"	f	class:blaze::DenseMatrixProxy
nonZeros	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline size_t DenseVectorProxy<PT,VT>::nonZeros() const$/;"	f	class:blaze::DenseVectorProxy
nonZeros	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::nonZeros( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
nonZeros	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::nonZeros() const$/;"	f	class:blaze::SparseMatrixProxy
nonZeros	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t nonZeros( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
nonZeros	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline size_t SparseVectorProxy<PT,VT>::nonZeros() const$/;"	f	class:blaze::SparseVectorProxy
nonZeros	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline size_t CompressedMatrix<Type,SO>::nonZeros( size_t i ) const$/;"	f	class:blaze::CompressedMatrix
nonZeros	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline size_t CompressedMatrix<Type,SO>::nonZeros() const$/;"	f	class:blaze::CompressedMatrix
nonZeros	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline size_t CompressedMatrix<Type,true>::nonZeros( size_t j ) const$/;"	f	class:blaze::CompressedMatrix
nonZeros	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline size_t CompressedMatrix<Type,true>::nonZeros() const$/;"	f	class:blaze::CompressedMatrix
nonZeros	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline size_t CompressedVector<Type,TF>::nonZeros() const$/;"	f	class:blaze::CompressedVector
nonZeros	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline size_t Column<MT,false,false,false>::nonZeros() const$/;"	f	class:blaze::Column
nonZeros	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline size_t Column<MT,false,false,true>::nonZeros() const$/;"	f	class:blaze::Column
nonZeros	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline size_t Column<MT,true,false,SF>::nonZeros() const$/;"	f	class:blaze::Column
nonZeros	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline size_t Row<MT,false,false,false>::nonZeros() const$/;"	f	class:blaze::Row
nonZeros	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline size_t Row<MT,false,false,true>::nonZeros() const$/;"	f	class:blaze::Row
nonZeros	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline size_t Row<MT,true,false,SF>::nonZeros() const$/;"	f	class:blaze::Row
nonZeros	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline size_t Submatrix<MT,AF,false,false>::nonZeros( size_t i ) const$/;"	f	class:blaze::Submatrix
nonZeros	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline size_t Submatrix<MT,AF,false,false>::nonZeros() const$/;"	f	class:blaze::Submatrix
nonZeros	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline size_t Submatrix<MT,AF,true,false>::nonZeros( size_t j ) const$/;"	f	class:blaze::Submatrix
nonZeros	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline size_t Submatrix<MT,AF,true,false>::nonZeros() const$/;"	f	class:blaze::Submatrix
nonZeros	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline size_t Subvector<VT,AF,TF,false>::nonZeros() const$/;"	f	class:blaze::Subvector
noncopyable	amun/3rd_party/yaml-cpp/noncopyable.h	/^  noncopyable() {}$/;"	f	class:YAML::noncopyable
noncopyable	amun/3rd_party/yaml-cpp/noncopyable.h	/^class YAML_CPP_API noncopyable {$/;"	c	namespace:YAML
normalize	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   normalize( const DenseVector<VT,TF>& vec )$/;"	f	namespace:blaze
normalize	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   normalize( const SparseVector<VT,TF>& vec )$/;"	f	namespace:blaze
normalizeScore_	amun/common/search.h	/^    bool normalizeScore_;$/;"	m	class:amunmt::Search
normalize_	amun/common/history.h	/^    bool normalize_;$/;"	m	class:amunmt::History
not_enough_room	amun/3rd_party/utf8/checked.h	/^    class not_enough_room : public exception {$/;"	c	namespace:utf8
now	amun/3rd_party/blaze/util/SystemClock.h	/^inline time_t SystemClock::now() const$/;"	f	class:blaze::SystemClock
now	amun/3rd_party/spdlog/details/os.h	/^inline spdlog::log_clock::time_point now()$/;"	f	namespace:spdlog::details::os
npy_	amun/cpu/npz_converter.h	/^        const cnpy::NpyArray& npy_;$/;"	m	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
npy_	amun/fpga/npz_converter.h	/^    const cnpy::NpyArray& npy_;$/;"	m	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
npy_	amun/gpu/npz_converter.h	/^        const cnpy::NpyArray& npy_;$/;"	m	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
npy_load	amun/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray cnpy::npy_load(std::string fname) {$/;"	f	class:cnpy
npy_save	amun/3rd_party/cnpy/cnpy.h	/^    template<typename T> void npy_save(std::string fname, const T* data, const unsigned int* shape, const unsigned int ndims, std::string mode = "w") {$/;"	f	namespace:cnpy
npz_load	amun/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray cnpy::npz_load(std::string fname, std::string varname) {$/;"	f	class:cnpy
npz_load	amun/3rd_party/cnpy/cnpy.cpp	/^cnpy::npz_t cnpy::npz_load(std::string fname) {$/;"	f	class:cnpy
npz_save	amun/3rd_party/cnpy/cnpy.h	/^    template<typename T> void npz_save(std::string zipname, std::string fname, const T* data, const unsigned int* shape, const unsigned int ndims, std::string mode = "w")$/;"	f	namespace:cnpy
npz_t	amun/3rd_party/cnpy/cnpy.h	/^    struct npz_t : public std::map<std::string, NpyArray>$/;"	s	namespace:cnpy
nthElement_	amun/fpga/best_hyps.h	/^  NthElement nthElement_;$/;"	m	class:amunmt::FPGA::BestHyps
nthElement_	amun/gpu/decoder/best_hyps.h	/^    std::unique_ptr<NthElement> nthElement_;$/;"	m	class:amunmt::GPU::BestHyps
null_atomic_int	amun/3rd_party/spdlog/details/null_mutex.h	/^    null_atomic_int(int val):value(val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	amun/3rd_party/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_mark	amun/3rd_party/yaml-cpp/mark.h	/^  static const Mark null_mark() { return Mark(-1, -1, -1); }$/;"	f	struct:YAML::Mark
null_mutex	amun/3rd_party/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_sink	amun/3rd_party/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
null_sink_mt	amun/3rd_party/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_mt;$/;"	t	namespace:spdlog::sinks
null_sink_st	amun/3rd_party/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_st;$/;"	t	namespace:spdlog::sinks
numDevices	amun/fpga/types-fpga.h	/^  cl_uint numDevices;$/;"	m	struct:OpenCLInfo
numFirstWords_	amun/common/filter.h	/^    unsigned numFirstWords_;$/;"	m	class:amunmt::Filter
num_in_ref	amun/3rd_party/fast_align/src/atools.cc	/^  int num_in_ref;$/;"	m	struct:FMeasureCommand	file:
num_predicted	amun/3rd_party/fast_align/src/atools.cc	/^  int num_predicted;$/;"	m	struct:FMeasureCommand	file:
number_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint64_t number_;       \/\/!< The total number of elements contained in the matrix.$/;"	m	class:blaze::MatrixSerializer
number_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint64_t number_;       \/\/!< The total number of elements contained in the vector.$/;"	m	class:blaze::VectorSerializer
numeric_limits	amun/3rd_party/spdlog/details/format.h	/^class numeric_limits<fmt::internal::DummyInt>:$/;"	c	namespace:std
numeric_limits	amun/3rd_party/spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::DummyInt>:$/;"	c	namespace:std
off	amun/3rd_party/spdlog/common.h	/^    off = 6$/;"	e	enum:spdlog::level::__anon34
offset	amun/3rd_party/fast_align/src/array2d.h	/^  inline unsigned offset(unsigned i, unsigned j) const {$/;"	f	class:Array2D
offset_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      size_t       offset_;  \/\/!< The offset of the according row\/column of the sparse matrix.$/;"	m	class:blaze::Submatrix::SubmatrixIterator
offset_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      size_t offset_;     \/\/!< Offset within the according row\/column of the sparse matrix.$/;"	m	class:blaze::Submatrix::SubmatrixElement
offset_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      size_t       offset_;  \/\/!< The offset of the subvector within the sparse vector.$/;"	m	class:blaze::Subvector::SubvectorIterator
offset_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      size_t offset_;     \/\/!< Offset within the according sparse vector.$/;"	m	class:blaze::Subvector::SubvectorElement
offset_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   const size_t offset_;  \/\/!< The offset of the subvector within the sparse vector.$/;"	m	class:blaze::Subvector
onDocIndicator	amun/3rd_party/yaml-cpp/scanscalar.h	/^  ACTION onDocIndicator;      \/\/ what do we do if we see a document indicator?$/;"	m	struct:YAML::ScanScalarParams
onTabInIndentation	amun/3rd_party/yaml-cpp/scanscalar.h	/^  ACTION onTabInIndentation;  \/\/ what do we do if we see a tab where we should$/;"	m	struct:YAML::ScanScalarParams
on_blue	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue    = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_cyan	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan    = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_green	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green   = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_grey	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_grey    = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_magenta	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_red	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red     = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_white	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white   = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_yellow	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow  = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink
op_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      , op_( op )  \/\/ The custom unary operation$/;"	f	class:blaze::DMatForEachExpr
op_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      OP           op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::DMatForEachExpr::ConstIterator
op_	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   Operation op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::DMatForEachExpr
op_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      , op_( op )  \/\/ The custom unary operation$/;"	f	class:blaze::DVecForEachExpr
op_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      OP           op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::DVecForEachExpr::ConstIterator
op_	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   Operation op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::DVecForEachExpr
op_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      , op_( op )  \/\/ The custom unary operation$/;"	f	class:blaze::SMatForEachExpr
op_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      OP           op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::SMatForEachExpr::ConstIterator
op_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   Operation op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::SMatForEachExpr
op_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      , op_( op )  \/\/ The custom unary operation$/;"	f	class:blaze::SVecForEachExpr
op_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      OP           op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::SVecForEachExpr::ConstIterator
op_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   Operation op_;  \/\/!< The custom unary operation.$/;"	m	class:blaze::SVecForEachExpr
open	amun/3rd_party/spdlog/details/file_helper.h	/^    void open(const filename_t& fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper
openCLInfo_	amun/fpga/array.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::Array
openCLInfo_	amun/fpga/encoder.h	/^      const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::Encoder::RNN
openCLInfo_	amun/fpga/encoder.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::Encoder
openCLInfo_	amun/fpga/encoder_decoder.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
openCLInfo_	amun/fpga/encoder_decoder_loader.h	/^  OpenCLInfo openCLInfo_;$/;"	m	class:amunmt::FPGA::EncoderDecoderLoader
openCLInfo_	amun/fpga/gru.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::FastGRU
openCLInfo_	amun/fpga/gru.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::SlowGRU
openCLInfo_	amun/fpga/model.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	struct:amunmt::FPGA::Weights
openCLInfo_	amun/fpga/nth_element.h	/^  const OpenCLInfo &openCLInfo_;$/;"	m	class:amunmt::FPGA::NthElement
open_interval	amun/3rd_party/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_tries	amun/3rd_party/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
operation	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^   inline Operation operation() const {$/;"	f	class:blaze::DMatForEachExpr
operation	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   inline Operation operation() const {$/;"	f	class:blaze::DVecForEachExpr
operation	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline Operation operation() const {$/;"	f	class:blaze::SMatForEachExpr
operation	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline Operation operation() const {$/;"	f	class:blaze::SVecForEachExpr
operator !	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline bool Archive<Stream>::operator!() const$/;"	f	class:blaze::Archive
operator !	amun/3rd_party/yaml-cpp/node/node.h	/^  bool operator!() const { return !IsDefined(); }$/;"	f	class:YAML::Node
operator !	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator!(const RegEx& ex) {$/;"	f	namespace:YAML
operator !	amun/3rd_party/yaml-cpp/stream.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::Stream
operator !	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::StreamCharSource
operator !	amun/3rd_party/yaml-cpp/stringsource.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::StringCharSource
operator !=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator!=( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator!=( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator!=( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator!=( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator!=( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator!=( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator!=( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator!=( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const Infinity& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const Infinity& lhs, const NegativeInfinity<I>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const Infinity& lhs, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const NegativeInfinity<I1>& lhs, const NegativeInfinity<I2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const NegativeInfinity<I>& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const NegativeInfinity<I>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const T& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator!=( const T& lhs, const NegativeInfinity<I>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline bool operator!=( const Iterator& rhs ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline bool operator!=( const SharedValue<T1>& lhs, const SharedValue<T2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline bool operator!=( const SharedIterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator !=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline bool operator!=( const Iterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline bool operator!=( const Iterator& rhs ) const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline bool operator!=( const Iterator& rhs ) const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator!=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator!=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator !=	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline EnableIf_<IsNumeric<T1>, bool > operator!=( T1 scalar, const DenseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline EnableIf_<IsNumeric<T2>, bool > operator!=( const DenseMatrix<T1,SO>& mat, T2 scalar )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator!=( const DenseMatrix<T1,SO1>& lhs, const DenseMatrix<T2,SO2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator!=( const DenseMatrix<T1,SO1>& lhs, const SparseMatrix<T2,SO2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator!=( const SparseMatrix<T1,SO1>& lhs, const DenseMatrix<T2,SO2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline EnableIf_<IsNumeric<T1>, bool > operator!=( T1 scalar, const DenseVector<T2,TF>& vec )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline EnableIf_<IsNumeric<T2>, bool > operator!=( const DenseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator!=( const DenseVector<T1,TF1>& lhs, const DenseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator!=( const DenseVector<T1,TF1>& lhs, const SparseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator!=( const SparseVector<T1,TF1>& lhs, const DenseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator !=	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline bool operator!=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator !=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator!=( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator!=( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator!=( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^inline bool operator!=( const SparseMatrix<T1,SO1>& lhs, const SparseMatrix<T2,SO2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^inline bool operator!=( const SparseVector<T1,TF1>& lhs, const SparseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline bool operator!=( const ColumnIterator<MatrixType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Column::ColumnIterator
operator !=	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator!=( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator !=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline bool operator!=( const SubmatrixIterator<MatrixType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator !=	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator!=( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator !=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline bool operator!=( const SubvectorIterator<VectorType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator !=	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator!=( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator!=( const CastIterator<L>& lhs, const CastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator !=	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator!=( const CastIterator<L>& lhs, const ConstCastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator !=	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator!=( const ConstCastIterator<L>& lhs, const CastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator !=	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator!=( const ConstCastIterator<L>& lhs, const ConstCastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator !=	amun/3rd_party/blaze/util/PtrVector.h	/^inline bool operator!=( const PtrVector<T,D,G>& lhs, const PtrVector<T,D,G>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator!=( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator !=	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator !=	amun/3rd_party/spdlog/details/os.h	/^inline bool operator!=(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator !=	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator !=	amun/3rd_party/utf8/checked.h	/^      bool operator != (const iterator& rhs) const$/;"	f	class:utf8::iterator
operator !=	amun/3rd_party/utf8/unchecked.h	/^            bool operator != (const iterator& rhs) const$/;"	f	class:utf8::unchecked::iterator
operator !=	amun/3rd_party/yaml-cpp/binary.h	/^  bool operator!=(const Binary &rhs) const { return !(*this == rhs); }$/;"	f	class:YAML::Binary
operator !=	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  bool operator!=(const iterator_base<W>& rhs) {$/;"	f	class:YAML::detail::iterator_base
operator !=	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool operator!=(const node_iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::node_iterator_base
operator !=	amun/3rd_party/yaml-cpp/null.h	/^inline bool operator!=(const _Null&, const _Null&) { return false; }$/;"	f	namespace:YAML
operator %	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   operator%( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator %	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   operator%( const DenseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator %	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   operator%( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator %	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   operator%( const SparseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator &&	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator&&(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
operator ()	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
operator ()	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
operator ()	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatDMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatDMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatEvalExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatScalarDivExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatScalarMultExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatSerialExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTDMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTDMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	namespace:blaze
operator ()	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTransExpr
operator ()	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline ConstReference operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::DMatTransposer
operator ()	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline Reference operator()( size_t i, size_t j ) {$/;"	f	class:blaze::DMatTransposer
operator ()	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatDMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatEvalExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatForEachExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	namespace:blaze
operator ()	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarDivExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarMultExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatSerialExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	namespace:blaze
operator ()	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTDMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatMultExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransExpr
operator ()	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline ConstReference operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransposer
operator ()	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::SVecTSVecMultExpr
operator ()	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TDMatSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TDMatSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatDMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	namespace:blaze
operator ()	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatSMatSubExpr
operator ()	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f
operator ()	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatTSMatAddExpr
operator ()	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	namespace:blaze
operator ()	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   inline ReturnType operator()( size_t i, size_t j ) const {$/;"	f	class:blaze::TSMatTSMatSubExpr
operator ()	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   DenseMatrixProxy<PT,MT>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::DenseMatrixProxy
operator ()	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
operator ()	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      inline void operator()() {$/;"	f	struct:blaze::ThreadBackend::AddAssigner
operator ()	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      inline void operator()() {$/;"	f	struct:blaze::ThreadBackend::Assigner
operator ()	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      inline void operator()() {$/;"	f	struct:blaze::ThreadBackend::DivAssigner
operator ()	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      inline void operator()() {$/;"	f	struct:blaze::ThreadBackend::MultAssigner
operator ()	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      inline void operator()() {$/;"	f	struct:blaze::ThreadBackend::SubAssigner
operator ()	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
operator ()	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
operator ()	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator()( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
operator ()	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator()( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
operator ()	amun/3rd_party/blaze/util/policies/ArrayDelete.h	/^inline void ArrayDelete::operator()( Type ptr ) const$/;"	f	class:blaze::ArrayDelete
operator ()	amun/3rd_party/blaze/util/policies/ConstantGrowth.h	/^inline size_t ConstantGrowth<Growth>::operator()( size_t old, size_t minimum ) const$/;"	f	class:blaze::ConstantGrowth
operator ()	amun/3rd_party/blaze/util/policies/Deallocate.h	/^inline void Deallocate::operator()( Type ptr ) const$/;"	f	class:blaze::Deallocate
operator ()	amun/3rd_party/blaze/util/policies/DefaultDelete.h	/^inline void DefaultDelete<Type>::operator()( Type* ptr ) const$/;"	f	class:blaze::DefaultDelete
operator ()	amun/3rd_party/blaze/util/policies/DefaultDelete.h	/^inline void DefaultDelete<Type[]>::operator()( Type* ptr ) const$/;"	f	class:blaze::DefaultDelete
operator ()	amun/3rd_party/blaze/util/policies/LinearGrowth.h	/^inline size_t LinearGrowth<Growth>::operator()( size_t old, size_t minimum ) const$/;"	f	class:blaze::LinearGrowth
operator ()	amun/3rd_party/blaze/util/policies/NoDelete.h	/^inline void NoDelete::operator()( const Type& \/*ptr*\/ ) const$/;"	f	class:blaze::NoDelete
operator ()	amun/3rd_party/blaze/util/policies/OptimalGrowth.h	/^inline size_t OptimalGrowth::operator()( size_t old, size_t minimum ) const$/;"	f	class:blaze::OptimalGrowth
operator ()	amun/3rd_party/blaze/util/policies/PtrDelete.h	/^inline void PtrDelete::operator()( Type ptr ) const$/;"	f	class:blaze::PtrDelete
operator ()	amun/3rd_party/fast_align/src/array2d.h	/^  const_reference operator()(unsigned i, unsigned j) const {$/;"	f	class:Array2D
operator ()	amun/3rd_party/fast_align/src/array2d.h	/^  reference operator()(unsigned i, unsigned j) {$/;"	f	class:Array2D
operator ()	amun/3rd_party/fast_align/src/fast_align.cc	/^  size_t operator()(const pair<short, short>& x) const {$/;"	f	struct:PairHash
operator ()	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void operator()(Char *&buffer)$/;"	f	class:fmt::internal::ThousandsSep
operator ()	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void operator()(Char *)$/;"	f	struct:fmt::internal::NoThousandsSep
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  T operator()(const S& fallback) const {$/;"	f	struct:YAML::as_if
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  const T operator()() const {$/;"	f	struct:YAML::as_if
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  const T& operator()() const { return t; }$/;"	f	struct:YAML::detail::to_value_t
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  const std::string operator()() const { return t; }$/;"	f	struct:YAML::detail::to_value_t
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  const std::string operator()() const {$/;"	f	struct:YAML::as_if
operator ()	amun/3rd_party/yaml-cpp/node/impl.h	/^  const std::string operator()(const S& fallback) const {$/;"	f	struct:YAML::as_if
operator ()	amun/common/factor_vocab.cpp	/^  FactWords FactorVocab::operator()(const std::vector<std::vector<std::string>>& lineFactors, bool addEOS) const {$/;"	f	class:amunmt::FactorVocab
operator ()	amun/common/histories.cpp	/^    bool operator()(const std::shared_ptr<History>& a, const std::shared_ptr<History>& b) const$/;"	f	class:amunmt::LineNumOrderer
operator ()	amun/common/processor/bpe.h	/^      inline size_t operator()(const pair<S, T> & v) const$/;"	f	struct:std::hash
operator ()	amun/common/sentences.cpp	/^  bool operator()(const SentencePtr& a, const SentencePtr& b) const {$/;"	f	class:amunmt::LengthOrderer
operator ()	amun/common/vocab.cpp	/^Words Vocab::operator()(const std::string& line, bool addEOS) const {$/;"	f	class:amunmt::Vocab
operator ()	amun/common/vocab.cpp	/^Words Vocab::operator()(const std::vector<std::string>& lineTokens, bool addEOS) const {$/;"	f	class:amunmt::Vocab
operator ()	amun/common/vocab.cpp	/^std::vector<std::string> Vocab::operator()(const Words& sentence, bool ignoreEOS) const {$/;"	f	class:amunmt::Vocab
operator ()	amun/cpu/decoder/best_hyps.cpp	/^  bool operator()(const unsigned a, const unsigned b) {$/;"	f	struct:amunmt::CPU::ProbCompare
operator ()	amun/cpu/mblas/phoenix_functions.h	/^    inline T operator()(T val) const {$/;"	f	struct:amunmt::CPU::mblas::Exp
operator ()	amun/cpu/mblas/phoenix_functions.h	/^    inline T operator()(T val) const {$/;"	f	struct:amunmt::CPU::mblas::Log
operator ()	amun/cpu/mblas/phoenix_functions.h	/^    inline T operator()(T val) const {$/;"	f	struct:amunmt::CPU::mblas::Logit
operator ()	amun/cpu/mblas/phoenix_functions.h	/^    inline T operator()(T val) const {$/;"	f	struct:amunmt::CPU::mblas::Tanh
operator ()	amun/cpu/npz_converter.h	/^        float operator()(size_t i, size_t j) const {$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
operator ()	amun/cpu/npz_converter.h	/^    mblas::Tensor operator()(const std::string& key,$/;"	f	class:amunmt::CPU::NpzConverter
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline T &operator()(unsigned a)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline T &operator()(unsigned a, unsigned b)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline T &operator()(unsigned a, unsigned b, unsigned c)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline T &operator()(unsigned a, unsigned b, unsigned c, unsigned d)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline const T &operator()(unsigned a) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline const T &operator()(unsigned a, unsigned b) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline const T &operator()(unsigned a, unsigned b, unsigned c) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/tensor_wrapper.h	/^  inline const T &operator()(unsigned a, unsigned b, unsigned c, unsigned d) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator ()	amun/gpu/mblas/thrust_functions.h	/^        T operator()(const T &x) const { return 1.0 \/ (1.0 + expf(-x)); }$/;"	f	struct:thrust::detail::functional::unary_logit
operator ()	amun/gpu/mblas/thrust_functions.h	/^        T operator()(const T &x) const { return expf(x); }$/;"	f	struct:thrust::detail::functional::unary_exp
operator ()	amun/gpu/mblas/thrust_functions.h	/^        T operator()(const T &x) const { return logf(x); }$/;"	f	struct:thrust::detail::functional::unary_log
operator ()	amun/gpu/mblas/thrust_functions.h	/^        T operator()(const T &x) const { return tanhf(x); }$/;"	f	struct:thrust::detail::functional::unary_tanh
operator ()	amun/gpu/npz_converter.h	/^        float operator()(unsigned i, unsigned j) const {$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
operator *	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::LowerMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::SymmetricMatrix::MatrixIterator
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline typename SharedValue<Type>::ConstReference SharedValue<Type>::operator*() const$/;"	f	class:blaze::SharedValue
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline typename SharedValue<Type>::Reference SharedValue<Type>::operator*()$/;"	f	class:blaze::SharedValue
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator *	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator *	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::UpperMatrix::Iterator
operator *	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   operator*( const DenseMatrix<T1,SO>& mat, const SparseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   operator*( const DenseMatrix<T1,false>& mat, const SparseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   operator*( ST1 scalar, const DMatScalarDivExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   operator*( const DMatScalarDivExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( ST1 scalar, const DMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( T1 scalar, const DenseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT,ST,SO>& mat, const DenseVector<VT,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT,ST,SO>& mat, const SparseVector<VT,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT,ST1,SO>& mat, const DVecScalarMultExpr<VT,ST2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT,ST1,SO>& mat, const SVecScalarMultExpr<VT,ST2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT1,ST,SO1>& lhs, const DenseMatrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT1,ST,SO1>& lhs, const SparseMatrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT1,ST1,SO1>& lhs, const DMatScalarMultExpr<MT2,ST2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DMatScalarMultExpr<MT1,ST1,SO1>& mat, const SMatScalarMultExpr<MT2,ST2,SO2>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT,ST1,true>& vec, const DMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DenseMatrix<MT1,SO1>& lhs, const DMatScalarMultExpr<MT2,ST,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DenseMatrix<T1,SO>& mat, T2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const DenseVector<VT,true>& vec, const DMatScalarMultExpr<MT,ST,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT1,ST1,SO1>& mat, const DMatScalarMultExpr<MT2,ST2,SO2>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT,ST1,true>& vec, const DMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const SparseMatrix<MT1,SO1>& lhs, const DMatScalarMultExpr<MT2,ST,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator*( const SparseVector<VT,true>& vec, const DMatScalarMultExpr<MT,ST,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   operator*( const DenseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   operator*( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   operator*( const DenseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   operator*( ST1 scalar, const DVecScalarDivExpr<VT,ST2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   operator*( const DVecScalarDivExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( ST1 scalar, const DVecScalarMultExpr<VT,ST2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( T1 scalar, const DenseVector<T2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT,ST,true>& vec, const DenseMatrix<MT,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT,ST,true>& vec, const SparseMatrix<MT,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST,TF>& lhs, const DenseVector<VT2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST,TF>& lhs, const SparseVector<VT2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST,false>& lhs, const DenseVector<VT2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST,false>& lhs, const SparseVector<VT2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST1,TF>& lhs, const DVecScalarMultExpr<VT2,ST2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST1,TF>& lhs, const SVecScalarMultExpr<VT2,ST2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST1,false>& lhs, const DVecScalarMultExpr<VT2,ST2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT1,ST1,false>& lhs, const SVecScalarMultExpr<VT2,ST2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DenseMatrix<MT,SO>& mat, const DVecScalarMultExpr<VT,ST,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DenseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DenseVector<VT1,TF>& lhs, const DVecScalarMultExpr<VT2,ST,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const DenseVector<VT1,false>& lhs, const DVecScalarMultExpr<VT2,ST,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST1,TF>& lhs, const DVecScalarMultExpr<VT2,ST2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST1,false>& lhs, const DVecScalarMultExpr<VT2,ST2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const SparseMatrix<MT,SO>& mat, const DVecScalarMultExpr<VT,ST,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const SparseVector<VT1,TF>& lhs, const DVecScalarMultExpr<VT2,ST,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator*( const SparseVector<VT1,false>& lhs, const DVecScalarMultExpr<VT2,ST,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline ReturnType operator*() const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   operator*( const SparseMatrix<T1,SO>& mat, const DenseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   operator*( const SparseMatrix<T1,false>& mat, const DenseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   operator*( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   operator*( const SparseMatrix<T1,SO>& mat, const SparseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   operator*( const SparseMatrix<T1,false>& mat, const SparseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   operator*( ST1 scalar, const SMatScalarDivExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   operator*( const SMatScalarDivExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( ST1 scalar, const SMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( T1 scalar, const SparseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const DVecScalarMultExpr<VT,ST1,true>& vec, const SMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const DenseMatrix<MT1,SO1>& lhs, const SMatScalarMultExpr<MT2,ST,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const DenseVector<VT,true>& vec, const SMatScalarMultExpr<MT,ST,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT,ST,SO>& mat, const DenseVector<VT,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT,ST,SO>& mat, const SparseVector<VT,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT,ST1,SO>& mat, const DVecScalarMultExpr<VT,ST2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT,ST1,SO>& mat, const SVecScalarMultExpr<VT,ST2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT1,ST,SO1>& lhs, const DenseMatrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT1,ST,SO1>& lhs, const SparseMatrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SMatScalarMultExpr<MT1,ST1,SO1>& lhs, const SMatScalarMultExpr<MT2,ST2,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT,ST1,true>& vec, const SMatScalarMultExpr<MT,ST2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SparseMatrix<MT1,SO1>& lhs, const SMatScalarMultExpr<MT2,ST,SO2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SparseMatrix<T1,SO>& mat, T2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator*( const SparseVector<VT,true>& vec, const SMatScalarMultExpr<MT,ST,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   operator*( const SparseMatrix<T1,false>& lhs, const DenseMatrix<T2,true>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   operator*( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline const ValueType operator*() const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   operator*( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   operator*( const SparseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   operator*( ST1 scalar, const SVecScalarDivExpr<VT,ST2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   operator*( const SVecScalarDivExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( ST1 scalar, const SVecScalarMultExpr<VT,ST2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( T1 scalar, const SparseVector<T2,TF>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const DenseMatrix<MT,SO>& mat, const SVecScalarMultExpr<VT,ST,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const DenseVector<VT1,TF>& lhs, const SVecScalarMultExpr<VT2,ST,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const DenseVector<VT1,false>& lhs, const SVecScalarMultExpr<VT2,ST,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT,ST,true>& vec, const DenseMatrix<MT,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT,ST,true>& vec, const SparseMatrix<MT,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST,TF>& lhs, const DenseVector<VT2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST,TF>& lhs, const SparseVector<VT2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST,false>& lhs, const DenseVector<VT2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST,false>& lhs, const SparseVector<VT2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST1,TF>& lhs, const SVecScalarMultExpr<VT2,ST2,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SVecScalarMultExpr<VT1,ST1,false>& lhs, const SVecScalarMultExpr<VT2,ST2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SparseMatrix<MT,SO>& mat, const SVecScalarMultExpr<VT,ST,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SparseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SparseVector<VT1,TF>& lhs, const SVecScalarMultExpr<VT2,ST,TF>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator*( const SparseVector<VT1,false>& lhs, const SVecScalarMultExpr<VT2,ST,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline const Element operator*() const {$/;"	f	class:ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   operator*( const SparseVector<T1,false>& lhs, const SparseVector<T2,true>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline const ValueType operator*() const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator *	amun/3rd_party/blaze/math/expressions/TDVecDVecMultExpr.h	/^   operator*( const DenseVector<T1,true>& lhs, const DenseVector<T2,false>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   operator*( const DenseVector<T1,true>& vec, const SparseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   operator*( const DenseVector<T1,true>& vec, const SparseMatrix<T2,false>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TDVecSVecMultExpr.h	/^   operator*( const DenseVector<T1,true>& lhs, const SparseVector<T2,false>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   operator*( const DenseVector<T1,true>& vec, const SparseMatrix<T2,true>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   operator*( const SparseMatrix<T1,true>& mat, const DenseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   operator*( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   operator*( const SparseMatrix<T1,true>& mat, const SparseVector<T2,false>& vec )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   operator*( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f
operator *	amun/3rd_party/blaze/math/expressions/TSVecDVecMultExpr.h	/^   operator*( const SparseVector<T1,true>& lhs, const DenseVector<T2,false>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   operator*( const SparseVector<T1,true>& vec, const SparseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   operator*( const SparseVector<T1,true>& vec, const SparseMatrix<T2,false>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSVecSVecMultExpr.h	/^   operator*( const SparseVector<T1,true>& lhs, const SparseVector<T2,false>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   operator*( const SparseVector<T1,true>& vec, const DenseMatrix<T2,true>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   operator*( const SparseVector<T1,true>& vec, const SparseMatrix<T2,true>& mat )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator*( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator*( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator*( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator *	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Column::ColumnIterator
operator *	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Row::RowIterator
operator *	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator *	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator *	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator *	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline ReferenceType operator*() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator *	amun/3rd_party/blaze/util/PtrIterator.h	/^inline typename PtrIterator<Type>::PointerType PtrIterator<Type>::operator*() const$/;"	f	class:blaze::PtrIterator
operator *	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::operator*() const$/;"	f	class:blaze::PtrVector::CastIterator
operator *	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::operator*() const$/;"	f	class:blaze::PtrVector::ConstCastIterator
operator *	amun/3rd_party/fast_align/src/array2d.h	/^Array2D<T> operator*(const Array2D<T>& l, const T& scalar) {$/;"	f
operator *	amun/3rd_party/fast_align/src/array2d.h	/^Array2D<T> operator*(const T& scalar, const Array2D<T>& l) {$/;"	f
operator *	amun/3rd_party/utf8/checked.h	/^      uint32_t operator * () const$/;"	f	class:utf8::iterator
operator *	amun/3rd_party/utf8/unchecked.h	/^            uint32_t operator * () const$/;"	f	class:utf8::unchecked::iterator
operator *	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  value_type operator*() const {$/;"	f	class:YAML::detail::iterator_base
operator *	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V& operator*() const { return *pNode; }$/;"	f	struct:YAML::detail::node_iterator_value
operator *	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  value_type operator*() const {$/;"	f	class:YAML::detail::node_iterator_base
operator *=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::DiagonalMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator*=( const T& value )$/;"	f	class:blaze::DiagonalProxy
operator *=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::DiagonalMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::HermitianMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>& HermitianElement<MT>::operator*=( const T& v )$/;"	f	class:blaze::HermitianElement
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator*=( const T& value )$/;"	f	class:blaze::HermitianProxy
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator*=( const T& value )$/;"	f	class:blaze::HermitianValue
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::HermitianMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::LowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::LowerProxy
operator *=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::LowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline const StrictlyLowerProxy<MT>& StrictlyLowerProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator *=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator*=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator*=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator*=( const T& value )$/;"	f	class:blaze::NonNumericProxy
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator*=( const T& value )$/;"	f	class:blaze::NumericProxy
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      template< typename T > inline SharedElement& operator*=( const T& v ) {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator*=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator*=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>& SymmetricElement<MT>::operator*=( const T& v )$/;"	f	class:blaze::SymmetricElement
operator *=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator*=( const T& value )$/;"	f	class:blaze::SymmetricValue
operator *=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>& UniLowerElement<MT>::operator*=( const T& v )$/;"	f	class:blaze::UniLowerElement
operator *=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::UniLowerProxy
operator *=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator*=( const T& value )$/;"	f	class:blaze::UniLowerValue
operator *=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>& UniUpperElement<MT>::operator*=( const T& v )$/;"	f	class:blaze::UniUpperElement
operator *=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::UniUpperProxy
operator *=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator*=( const T& value )$/;"	f	class:blaze::UniUpperValue
operator *=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator*=( Other rhs )$/;"	f	class:blaze::UpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator*=( Other rhs )$/;"	f	class:blaze::UpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator*=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator *=	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::UpperProxy
operator *=	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, DMatTransposer >& operator*=( Other rhs )$/;"	f	class:blaze::DMatTransposer
operator *=	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, DVecTransposer >& operator*=( Other rhs )$/;"	f	class:blaze::DVecTransposer
operator *=	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, SMatTransposer >& operator*=( Other rhs )$/;"	f	class:blaze::SMatTransposer
operator *=	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, SVecTransposer >& operator*=( Other rhs )$/;"	f	class:blaze::SVecTransposer
operator *=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator*=( Other rhs )$/;"	f	class:blaze::CompressedMatrix
operator *=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator*=( const Matrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator *=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator*=( Other rhs )$/;"	f	class:blaze::CompressedMatrix
operator *=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator*=( const Matrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator *=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator*=( Other rhs )$/;"	f	class:blaze::CompressedVector
operator *=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator*=( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator *=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator*=( const SparseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator *=	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator*=( const T& value ) const$/;"	f	class:blaze::MatrixAccessProxy
operator *=	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>& ValueIndexPair<Type>::operator*=( const Other& v )$/;"	f	class:blaze::ValueIndexPair
operator *=	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator*=( const T& value ) const$/;"	f	class:blaze::VectorAccessProxy
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      template< typename T > inline ColumnElement& operator*=( const T& v ) {$/;"	f	class:blaze::Column::ColumnElement
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator*=( Other rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator*=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator*=( Other rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator*=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::operator*=( Other rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator*=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      template< typename T > inline RowElement& operator*=( const T& v ) {$/;"	f	class:blaze::Row::RowElement
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::operator*=( Other rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator*=( Other rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator*=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::operator*=( Other rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::operator*=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator*=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator *=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      template< typename T > inline SubmatrixElement& operator*=( const T& v ) {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator *=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator*=( Other rhs )$/;"	f	class:blaze::Submatrix
operator *=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator*=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator *=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator*=( Other rhs )$/;"	f	class:blaze::Submatrix
operator *=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator*=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator *=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      template< typename T > inline SubvectorElement& operator*=( const T& v ) {$/;"	f	class:blaze::Subvector::SubvectorElement
operator *=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator*=( Other rhs )$/;"	f	class:blaze::Subvector
operator *=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator*=( const Vector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
operator *=	amun/3rd_party/fast_align/src/array2d.h	/^  const Array2D<T>& operator*=(const T& x) {$/;"	f	class:Array2D
operator +	amun/3rd_party/blaze/math/Accuracy.h	/^inline const Accuracy& Accuracy::operator+() const$/;"	f	class:blaze::Accuracy
operator +	amun/3rd_party/blaze/math/Accuracy.h	/^inline const NegativeAccuracy<A>& NegativeAccuracy<A>::operator+() const$/;"	f	class:blaze::NegativeAccuracy
operator +	amun/3rd_party/blaze/math/Epsilon.h	/^inline const Epsilon& Epsilon::operator+() const$/;"	f	class:blaze::Epsilon
operator +	amun/3rd_party/blaze/math/Epsilon.h	/^inline const NegativeEpsilon<E>& NegativeEpsilon<E>::operator+() const$/;"	f	class:blaze::NegativeEpsilon
operator +	amun/3rd_party/blaze/math/Infinity.h	/^inline const Infinity& Infinity::operator+() const$/;"	f	class:blaze::Infinity
operator +	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   operator+( const DenseMatrix<T1,SO>& lhs, const DenseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   operator+( const DMatSMatAddExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   operator+( const DenseMatrix<T1,SO>& lhs, const SparseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   operator+( const SparseMatrix<T1,SO>& lhs, const DenseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   operator+( const DMatSMatSubExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   operator+( const DenseMatrix<T1,false>& lhs, const DenseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   operator+( const DenseMatrix<T1,true>& lhs, const DenseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   operator+( const DMatTSMatAddExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   operator+( const DenseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   operator+( const SparseMatrix<T2,true>& lhs, const DenseMatrix<T1,false>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   operator+( const DMatTSMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   operator+( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   operator+( const DVecSVecAddExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   operator+( const DenseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   operator+( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   operator+( const DVecSVecSubExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      friend inline const ConstIterator operator+( const ConstIterator& it, size_t inc ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      friend inline const ConstIterator operator+( size_t inc, const ConstIterator& it ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator +	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   operator+( const SMatDMatSubExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   operator+( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   operator+( const SMatTDMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   operator+( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   operator+( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   operator+( const SVecDVecSubExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   operator+( const SparseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   operator+( const DenseMatrix<T1,true>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   operator+( const SparseMatrix<T2,false>& lhs, const DenseMatrix<T1,true>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   operator+( const TDMatSMatAddExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   operator+( const TDMatSMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   operator+( const TSMatDMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   operator+( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator+( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator+( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator+( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32<T1>& a, const SIMDf32FmaddExpr<T2,T3,T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32<T1>& a, const SIMDf32MultExpr<T2,T3>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32<T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32MultExpr<T4,T5>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32<T3>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32FmaddExpr<T3,T4,T5>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32MultExpr<T3,T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64<T1>& a, const SIMDf64FmaddExpr<T2,T3,T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64<T1>& a, const SIMDf64MultExpr<T2,T3>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64<T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64MultExpr<T4,T5>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64<T3>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64FmaddExpr<T3,T4,T5>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator+( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64MultExpr<T3,T4>& b )$/;"	f	namespace:blaze
operator +	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      friend inline const SubmatrixIterator operator+( const SubmatrixIterator& it, size_t inc ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator +	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      friend inline const SubmatrixIterator operator+( size_t inc, const SubmatrixIterator& it ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator +	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      friend inline const SubvectorIterator operator+( const SubvectorIterator& it, size_t inc ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator +	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      friend inline const SubvectorIterator operator+( size_t inc, const SubvectorIterator& it ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator +	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type> PtrIterator<Type>::operator+( DifferenceType n ) const$/;"	f	class:blaze::PtrIterator
operator +	amun/3rd_party/fast_align/src/array2d.h	/^Array2D<T> operator+(const Array2D<T>& l, const Array2D<T>& r) {$/;"	f
operator +	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator+(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
operator +	amun/3rd_party/yaml-cpp/streamcharsource.h	/^inline const StreamCharSource StreamCharSource::operator+(int i) const {$/;"	f	class:YAML::StreamCharSource
operator +	amun/3rd_party/yaml-cpp/stringsource.h	/^  const StringCharSource operator+(int i) const {$/;"	f	class:YAML::StringCharSource
operator ++	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline Iterator& operator++() {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline const Iterator operator++( int ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline SharedIterator& operator++() {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator ++	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline const SharedIterator operator++( int ) {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator ++	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline Iterator& operator++() {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline const Iterator operator++( int ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline Iterator& operator++() {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline const Iterator operator++( int ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline Iterator& operator++() {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline const Iterator operator++( int ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline const ConstIterator operator++( int ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:ConstIterator
operator ++	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline ConstIterator& operator++() {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator ++	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline ColumnIterator& operator++() {$/;"	f	class:blaze::Column::ColumnIterator
operator ++	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline const ColumnIterator operator++( int ) {$/;"	f	class:blaze::Column::ColumnIterator
operator ++	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline RowIterator& operator++() {$/;"	f	class:blaze::Row::RowIterator
operator ++	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline const RowIterator operator++( int ) {$/;"	f	class:blaze::Row::RowIterator
operator ++	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator& operator++() {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ++	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline const SubmatrixIterator operator++( int ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ++	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline SubmatrixIterator& operator++() {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ++	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline const SubmatrixIterator operator++( int ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ++	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator& operator++() {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ++	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline const SubvectorIterator operator++( int ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ++	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline SubvectorIterator& operator++() {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ++	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline const SubvectorIterator operator++( int ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ++	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type> PtrIterator<Type>::operator++( int )$/;"	f	class:blaze::PtrIterator
operator ++	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>& PtrIterator<Type>::operator++()$/;"	f	class:blaze::PtrIterator
operator ++	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::operator++( int )$/;"	f	class:blaze::PtrVector::CastIterator
operator ++	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::operator++()$/;"	f	class:blaze::PtrVector::CastIterator
operator ++	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::operator++( int )$/;"	f	class:blaze::PtrVector::ConstCastIterator
operator ++	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::operator++()$/;"	f	class:blaze::PtrVector::ConstCastIterator
operator ++	amun/3rd_party/utf8/checked.h	/^      iterator operator ++ (int)$/;"	f	class:utf8::iterator
operator ++	amun/3rd_party/utf8/checked.h	/^      iterator& operator ++ ()$/;"	f	class:utf8::iterator
operator ++	amun/3rd_party/utf8/unchecked.h	/^            iterator operator ++ (int)$/;"	f	class:utf8::unchecked::iterator
operator ++	amun/3rd_party/utf8/unchecked.h	/^            iterator& operator ++ () $/;"	f	class:utf8::unchecked::iterator
operator ++	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base<V> operator++(int) {$/;"	f	class:YAML::detail::iterator_base
operator ++	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base<V>& operator++() {$/;"	f	class:YAML::detail::iterator_base
operator ++	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base<V> operator++(int) {$/;"	f	class:YAML::detail::node_iterator_base
operator ++	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base<V>& operator++() {$/;"	f	class:YAML::detail::node_iterator_base
operator ++	amun/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource& operator++() {$/;"	f	class:YAML::StringCharSource
operator +=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator+=( const T& value )$/;"	f	class:blaze::DiagonalProxy
operator +=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>& HermitianElement<MT>::operator+=( const T& v )$/;"	f	class:blaze::HermitianElement
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator+=( const T& value )$/;"	f	class:blaze::HermitianProxy
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator+=( const T& value )$/;"	f	class:blaze::HermitianValue
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::LowerProxy
operator +=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline const StrictlyLowerProxy<MT>& StrictlyLowerProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator +=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator+=( const T& value )$/;"	f	class:blaze::NonNumericProxy
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator+=( const T& value )$/;"	f	class:blaze::NumericProxy
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      template< typename T > inline SharedElement& operator+=( const T& v ) {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator+=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>& SymmetricElement<MT>::operator+=( const T& v )$/;"	f	class:blaze::SymmetricElement
operator +=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator+=( const T& value )$/;"	f	class:blaze::SymmetricValue
operator +=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>& UniLowerElement<MT>::operator+=( const T& v )$/;"	f	class:blaze::UniLowerElement
operator +=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::UniLowerProxy
operator +=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator+=( const T& value )$/;"	f	class:blaze::UniLowerValue
operator +=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>& UniUpperElement<MT>::operator+=( const T& v )$/;"	f	class:blaze::UniUpperElement
operator +=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::UniUpperProxy
operator +=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator+=( const T& value )$/;"	f	class:blaze::UniUpperValue
operator +=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator+=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator +=	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::UpperProxy
operator +=	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:ConstIterator
operator +=	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline ConstIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator +=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator+=( const Matrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator +=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::operator+=( const Matrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator +=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>& CompressedVector<Type,TF>::operator+=( const Vector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator +=	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator+=( const T& value ) const$/;"	f	class:blaze::MatrixAccessProxy
operator +=	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>& ValueIndexPair<Type>::operator+=( const Other& v )$/;"	f	class:blaze::ValueIndexPair
operator +=	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator+=( const T& value ) const$/;"	f	class:blaze::VectorAccessProxy
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      template< typename T > inline ColumnElement& operator+=( const T& v ) {$/;"	f	class:blaze::Column::ColumnElement
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator+=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator+=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator+=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator+=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator +=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator+=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      template< typename T > inline RowElement& operator+=( const T& v ) {$/;"	f	class:blaze::Row::RowElement
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator+=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator+=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::operator+=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator+=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator +=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator+=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator +=	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator +=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      template< typename T > inline SubmatrixElement& operator+=( const T& v ) {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator +=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator +=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator+=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator +=	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator& operator+=( size_t inc ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator +=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      template< typename T > inline SubvectorElement& operator+=( const T& v ) {$/;"	f	class:blaze::Subvector::SubvectorElement
operator +=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator+=( const Vector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
operator +=	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>& PtrIterator<Type>::operator+=( DifferenceType n )$/;"	f	class:blaze::PtrIterator
operator +=	amun/3rd_party/cnpy/cnpy.cpp	/^template<> std::vector<char>& cnpy::operator+=(std::vector<char>& lhs, const char* rhs) {$/;"	f	class:cnpy
operator +=	amun/3rd_party/cnpy/cnpy.cpp	/^template<> std::vector<char>& cnpy::operator+=(std::vector<char>& lhs, const std::string rhs) {$/;"	f	class:cnpy
operator +=	amun/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::vector<char>& operator+=(std::vector<char>& lhs, const T rhs) {$/;"	f	namespace:cnpy
operator +=	amun/3rd_party/fast_align/src/array2d.h	/^  const Array2D<T>& operator+=(const Array2D<T>& m) {$/;"	f	class:Array2D
operator +=	amun/3rd_party/fast_align/src/ttables.h	/^  TTable& operator+=(const TTable& rhs) {$/;"	f	class:TTable
operator +=	amun/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource& operator+=(std::size_t offset) {$/;"	f	class:YAML::StringCharSource
operator +=	amun/gpu/mblas/nth_element_kernels.h	/^  NthOut& operator+=(const NthOut& rhs)$/;"	f	struct:amunmt::GPU::NthOut
operator +=	amun/gpu/mblas/nth_element_kernels.h	/^  NthOutBatch& operator+=(const NthOutBatch& rhs)$/;"	f	struct:amunmt::GPU::NthOutBatch
operator ,	amun/3rd_party/blaze/math/Vector.h	/^   operator,( const Vector<T1,false>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
operator ,	amun/3rd_party/blaze/math/Vector.h	/^   operator,( const Vector<T1,false>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
operator ,	amun/3rd_party/blaze/math/Vector.h	/^   operator,( const Vector<T1,true>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
operator ,	amun/3rd_party/blaze/math/Vector.h	/^   operator,( const Vector<T1,true>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/Accuracy.h	/^inline const Accuracy::NegativeType Accuracy::operator-() const$/;"	f	class:blaze::Accuracy
operator -	amun/3rd_party/blaze/math/Accuracy.h	/^inline const typename NegativeAccuracy<A>::PositiveType NegativeAccuracy<A>::operator-() const$/;"	f	class:blaze::NegativeAccuracy
operator -	amun/3rd_party/blaze/math/Epsilon.h	/^inline const Epsilon::NegativeType Epsilon::operator-() const$/;"	f	class:blaze::Epsilon
operator -	amun/3rd_party/blaze/math/Epsilon.h	/^inline const typename NegativeEpsilon<E>::PositiveType NegativeEpsilon<E>::operator-() const$/;"	f	class:blaze::NegativeEpsilon
operator -	amun/3rd_party/blaze/math/Infinity.h	/^inline const Infinity::NegativeType Infinity::operator-() const$/;"	f	class:blaze::Infinity
operator -	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline DifferenceType operator-( const Iterator& rhs ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator -	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline DifferenceType operator-( const SharedIterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator -	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline DifferenceType operator-( const Iterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator -	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline DifferenceType operator-( const Iterator& rhs ) const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator -	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline DifferenceType operator-( const Iterator& rhs ) const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator -	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   operator-( const DenseMatrix<T1,SO>& lhs, const DenseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   operator-( const DMatSMatAddExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   operator-( const DMatSMatSubExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   operator-( const DenseMatrix<T1,SO>& lhs, const SparseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator-( const DMatScalarMultExpr<VT,ST,TF>& dm )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator-( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   operator-( const DenseMatrix<T1,false>& lhs, const DenseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   operator-( const DenseMatrix<T1,true>& lhs, const DenseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   operator-( const DMatTSMatAddExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   operator-( const DMatTSMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   operator-( const DenseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   operator-( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   operator-( const DVecSVecAddExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   operator-( const DVecSVecSubExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   operator-( const DenseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator-( const DVecScalarMultExpr<VT,ST,TF>& dv )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator-( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      friend inline const ConstIterator operator-( const ConstIterator& it, size_t dec ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   operator-( const SMatDMatSubExpr<T1,T2,SO1>& lhs, const DenseMatrix<T3,SO2>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   operator-( const SparseMatrix<T1,SO>& lhs, const DenseMatrix<T2,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   operator-( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator-( const SMatScalarMultExpr<VT,ST,TF>& sm )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator-( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   operator-( const SMatTDMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   operator-( const SparseMatrix<T1,false>& lhs, const DenseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   operator-( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   operator-( const SVecDVecSubExpr<T1,T2,TF>& lhs, const DenseVector<T3,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   operator-( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   operator-( const SparseVector<T1,TF>& lhs, const SparseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator-( const SVecScalarMultExpr<VT,ST,TF>& sv )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator-( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline DifferenceType operator-( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator -	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   operator-( const TDMatSMatAddExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   operator-( const DenseMatrix<T1,true>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   operator-( const TDMatSMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   operator-( const SparseMatrix<T1,true>& lhs, const DenseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   operator-( const TSMatDMatSubExpr<T1,T2>& lhs, const DenseMatrix<T3,SO>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   operator-( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   operator-( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator-( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator-( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator-( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmaddExpr<T1,T2,T3>& a, const SIMDf32FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32<T4>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32FmsubExpr<T1,T2,T3>& a, const SIMDf32MultExpr<T4,T5>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32<T3>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32FmsubExpr<T3,T4,T5>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf32MultExpr<T1,T2>& a, const SIMDf32MultExpr<T3,T4>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmaddExpr<T1,T2,T3>& a, const SIMDf64FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64<T4>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64FmaddExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64FmsubExpr<T4,T5,T6>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64FmsubExpr<T1,T2,T3>& a, const SIMDf64MultExpr<T4,T5>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64<T3>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64FmsubExpr<T3,T4,T5>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/simd/FMA.h	/^   operator-( const SIMDf64MultExpr<T1,T2>& a, const SIMDf64MultExpr<T3,T4>& b )$/;"	f	namespace:blaze
operator -	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline DifferenceType operator-( const ColumnIterator& rhs ) const {$/;"	f	class:blaze::Column::ColumnIterator
operator -	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline DifferenceType operator-( const RowIterator& rhs ) const {$/;"	f	class:blaze::Row::RowIterator
operator -	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      friend inline const SubmatrixIterator operator-( const SubmatrixIterator& it, size_t dec ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator -	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline DifferenceType operator-( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator -	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline DifferenceType operator-( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator -	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      friend inline const SubvectorIterator operator-( const SubvectorIterator& it, size_t dec ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator -	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline DifferenceType operator-( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator -	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline DifferenceType operator-( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator -	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type> PtrIterator<Type>::operator-( DifferenceType n ) const$/;"	f	class:blaze::PtrIterator
operator -	amun/3rd_party/blaze/util/PtrIterator.h	/^inline typename PtrIterator<Type>::DifferenceType PtrIterator<Type>::operator-( const PtrIterator& it ) const$/;"	f	class:blaze::PtrIterator
operator -	amun/3rd_party/fast_align/src/array2d.h	/^Array2D<T> operator-(const Array2D<T>& l, const Array2D<T>& r) {$/;"	f
operator --	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline const Iterator operator--( int ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator --	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline ConstIterator& operator--() {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline const ConstIterator operator--( int ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator --	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator& operator--() {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator --	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline const SubmatrixIterator operator--( int ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator --	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator& operator--() {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator --	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline const SubvectorIterator operator--( int ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator --	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type> PtrIterator<Type>::operator--( int )$/;"	f	class:blaze::PtrIterator
operator --	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>& PtrIterator<Type>::operator--()$/;"	f	class:blaze::PtrIterator
operator --	amun/3rd_party/utf8/checked.h	/^      iterator operator -- (int)$/;"	f	class:utf8::iterator
operator --	amun/3rd_party/utf8/checked.h	/^      iterator& operator -- ()$/;"	f	class:utf8::iterator
operator --	amun/3rd_party/utf8/unchecked.h	/^            iterator operator -- (int)$/;"	f	class:utf8::unchecked::iterator
operator --	amun/3rd_party/utf8/unchecked.h	/^            iterator& operator -- ()$/;"	f	class:utf8::unchecked::iterator
operator -=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator-=( const T& value )$/;"	f	class:blaze::DiagonalProxy
operator -=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>& HermitianElement<MT>::operator-=( const T& v )$/;"	f	class:blaze::HermitianElement
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator-=( const T& value )$/;"	f	class:blaze::HermitianProxy
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator-=( const T& value )$/;"	f	class:blaze::HermitianValue
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::LowerProxy
operator -=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline const StrictlyLowerProxy<MT>& StrictlyLowerProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator -=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator-=( const T& value )$/;"	f	class:blaze::NonNumericProxy
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator-=( const T& value )$/;"	f	class:blaze::NumericProxy
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      template< typename T > inline SharedElement& operator-=( const T& v ) {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator-=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>& SymmetricElement<MT>::operator-=( const T& v )$/;"	f	class:blaze::SymmetricElement
operator -=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator-=( const T& value )$/;"	f	class:blaze::SymmetricValue
operator -=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>& UniLowerElement<MT>::operator-=( const T& v )$/;"	f	class:blaze::UniLowerElement
operator -=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::UniLowerProxy
operator -=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator-=( const T& value )$/;"	f	class:blaze::UniLowerValue
operator -=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>& UniUpperElement<MT>::operator-=( const T& v )$/;"	f	class:blaze::UniUpperElement
operator -=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::UniUpperProxy
operator -=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator-=( const T& value )$/;"	f	class:blaze::UniUpperValue
operator -=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator-=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator -=	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::UpperProxy
operator -=	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:ConstIterator
operator -=	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline ConstIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator -=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>& CompressedMatrix<Type,SO>::operator-=( const Matrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator -=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::operator-=( const Matrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator -=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>& CompressedVector<Type,TF>::operator-=( const Vector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator -=	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator-=( const T& value ) const$/;"	f	class:blaze::MatrixAccessProxy
operator -=	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>& ValueIndexPair<Type>::operator-=( const Other& v )$/;"	f	class:blaze::ValueIndexPair
operator -=	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator-=( const T& value ) const$/;"	f	class:blaze::VectorAccessProxy
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      template< typename T > inline ColumnElement& operator-=( const T& v ) {$/;"	f	class:blaze::Column::ColumnElement
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator-=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator-=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator-=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator-=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator -=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator-=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      template< typename T > inline RowElement& operator-=( const T& v ) {$/;"	f	class:blaze::Row::RowElement
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator-=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator-=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::operator-=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator-=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator -=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator-=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator -=	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline SubmatrixIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator -=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      template< typename T > inline SubmatrixElement& operator-=( const T& v ) {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator -=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator -=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator-=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator -=	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline SubvectorIterator& operator-=( size_t dec ) {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator -=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      template< typename T > inline SubvectorElement& operator-=( const T& v ) {$/;"	f	class:blaze::Subvector::SubvectorElement
operator -=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator-=( const Vector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
operator -=	amun/3rd_party/blaze/util/PtrIterator.h	/^inline PtrIterator<Type>& PtrIterator<Type>::operator-=( DifferenceType n )$/;"	f	class:blaze::PtrIterator
operator -=	amun/3rd_party/fast_align/src/array2d.h	/^  const Array2D<T>& operator-=(const Array2D<T>& m) {$/;"	f	class:Array2D
operator ->	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::LowerMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::SymmetricMatrix::MatrixIterator
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline typename NumericProxy<MT>::ConstPointer NumericProxy<MT>::operator->() const$/;"	f	class:blaze::NumericProxy
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline typename NumericProxy<MT>::Pointer NumericProxy<MT>::operator->()$/;"	f	class:blaze::NumericProxy
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline ConstPointer operator->() const {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline Pointer operator->() {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator ->	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::UpperMatrix::Iterator
operator ->	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline const IteratorType operator->() const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:ConstIterator
operator ->	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline const ConstIterator* operator->() const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator ->	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::Column::ColumnIterator
operator ->	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline const ColumnElement* operator->() const {$/;"	f	class:blaze::Column::ColumnElement
operator ->	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::Row::RowIterator
operator ->	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline const RowElement* operator->() const {$/;"	f	class:blaze::Row::RowElement
operator ->	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ->	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline const SubmatrixElement* operator->() const {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator ->	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline PointerType operator->() const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ->	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline const SubvectorElement* operator->() const {$/;"	f	class:blaze::Subvector::SubvectorElement
operator ->	amun/3rd_party/blaze/util/PtrIterator.h	/^inline typename PtrIterator<Type>::PointerType PtrIterator<Type>::operator->() const$/;"	f	class:blaze::PtrIterator
operator ->	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::operator->() const$/;"	f	class:blaze::PtrVector::CastIterator
operator ->	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::operator->() const$/;"	f	class:blaze::PtrVector::ConstCastIterator
operator ->	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^    V* operator->() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::iterator_base::proxy
operator ->	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  proxy operator->() const { return proxy(**this); }$/;"	f	class:YAML::detail::iterator_base
operator ->	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    node_iterator_value<V>* operator->() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::node_iterator_base::proxy
operator ->	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V& operator->() const { return *pNode; }$/;"	f	struct:YAML::detail::node_iterator_value
operator ->	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  proxy operator->() const { return proxy(**this); }$/;"	f	class:YAML::detail::node_iterator_base
operator /	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   operator\/( const DMatScalarDivExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   operator\/( const DenseMatrix<T1,SO>& mat, T2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   operator\/( const DMatScalarMultExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   operator\/( const DenseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   operator\/( const DVecScalarDivExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   operator\/( const DenseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   operator\/( const DVecScalarMultExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   operator\/( const SMatScalarDivExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   operator\/( const SparseMatrix<T1,SO>& mat, T2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   operator\/( const SMatScalarMultExpr<MT,ST1,SO>& mat, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   operator\/( const SparseVector<T1,TF>& lhs, const DenseVector<T2,TF>& rhs )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   operator\/( const SVecScalarDivExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   operator\/( const SparseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   operator\/( const SVecScalarMultExpr<VT,ST1,TF>& vec, ST2 scalar )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator\/( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator\/( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator /	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator\/( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator /	amun/3rd_party/fast_align/src/array2d.h	/^Array2D<T> operator\/(const Array2D<T>& l, const T& scalar) {$/;"	f
operator /=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::DiagonalMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator\/=( const T& value )$/;"	f	class:blaze::DiagonalProxy
operator /=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::DiagonalMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::HermitianMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>& HermitianElement<MT>::operator\/=( const T& v )$/;"	f	class:blaze::HermitianElement
operator /=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator\/=( const T& value )$/;"	f	class:blaze::HermitianProxy
operator /=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator\/=( const T& value )$/;"	f	class:blaze::HermitianValue
operator /=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::HermitianMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::LowerMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::LowerProxy
operator /=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::LowerMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline const StrictlyLowerProxy<MT>& StrictlyLowerProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator /=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator\/=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator\/=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator\/=( const T& value )$/;"	f	class:blaze::NonNumericProxy
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator\/=( const T& value )$/;"	f	class:blaze::NumericProxy
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      template< typename T > inline SharedElement& operator\/=( const T& v ) {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator\/=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator\/=( Other rhs )$/;"	f	class:blaze::SymmetricMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>& SymmetricElement<MT>::operator\/=( const T& v )$/;"	f	class:blaze::SymmetricElement
operator /=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator\/=( const T& value )$/;"	f	class:blaze::SymmetricValue
operator /=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>& UniLowerElement<MT>::operator\/=( const T& v )$/;"	f	class:blaze::UniLowerElement
operator /=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::UniLowerProxy
operator /=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator\/=( const T& value )$/;"	f	class:blaze::UniLowerValue
operator /=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>& UniUpperElement<MT>::operator\/=( const T& v )$/;"	f	class:blaze::UniUpperElement
operator /=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::UniUpperProxy
operator /=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator\/=( const T& value )$/;"	f	class:blaze::UniUpperValue
operator /=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator\/=( Other rhs )$/;"	f	class:blaze::UpperMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator\/=( Other rhs )$/;"	f	class:blaze::UpperMatrix
operator /=	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::UpperProxy
operator /=	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, DMatTransposer >& operator\/=( Other rhs )$/;"	f	class:blaze::DMatTransposer
operator /=	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, DVecTransposer >& operator\/=( Other rhs )$/;"	f	class:blaze::DVecTransposer
operator /=	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, SMatTransposer >& operator\/=( Other rhs )$/;"	f	class:blaze::SMatTransposer
operator /=	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline EnableIf_< IsNumeric<Other>, SVecTransposer >& operator\/=( Other rhs )$/;"	f	class:blaze::SVecTransposer
operator /=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator\/=( Other rhs )$/;"	f	class:blaze::CompressedMatrix
operator /=	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator\/=( Other rhs )$/;"	f	class:blaze::CompressedMatrix
operator /=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator\/=( Other rhs )$/;"	f	class:blaze::CompressedVector
operator /=	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>& CompressedVector<Type,TF>::operator\/=( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator /=	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator\/=( const T& value ) const$/;"	f	class:blaze::MatrixAccessProxy
operator /=	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline ValueIndexPair<Type>& ValueIndexPair<Type>::operator\/=( const Other& v )$/;"	f	class:blaze::ValueIndexPair
operator /=	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator\/=( const T& value ) const$/;"	f	class:blaze::VectorAccessProxy
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      template< typename T > inline ColumnElement& operator\/=( const T& v ) {$/;"	f	class:blaze::Column::ColumnElement
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator\/=( Other rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator\/=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator\/=( Other rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator\/=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::operator\/=( Other rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator\/=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      template< typename T > inline RowElement& operator\/=( const T& v ) {$/;"	f	class:blaze::Row::RowElement
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::operator\/=( Other rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::operator\/=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator\/=( Other rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator\/=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::operator\/=( Other rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator\/=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator /=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      template< typename T > inline SubmatrixElement& operator\/=( const T& v ) {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator /=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator\/=( Other rhs )$/;"	f	class:blaze::Submatrix
operator /=	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator\/=( Other rhs )$/;"	f	class:blaze::Submatrix
operator /=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      template< typename T > inline SubvectorElement& operator\/=( const T& v ) {$/;"	f	class:blaze::Subvector::SubvectorElement
operator /=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator\/=( Other rhs )$/;"	f	class:blaze::Subvector
operator /=	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator\/=( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
operator /=	amun/3rd_party/fast_align/src/array2d.h	/^  const Array2D<T>& operator\/=(const T& x) {$/;"	f	class:Array2D
operator <	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator<( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator<( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator <	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator <	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator<( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator <	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator<( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator<( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator<( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator<( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator <	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator<( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator <	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator<( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator<( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator <	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <	amun/common/history.h	/^      bool operator<(const HypothesisCoord& hc) const {$/;"	f	struct:amunmt::History::HypothesisCoord
operator <<	amun/3rd_party/blaze/math/Matrix.h	/^inline std::ostream& operator<<( std::ostream& os, const Matrix<MT,SO>& m )$/;"	f	namespace:blaze
operator <<	amun/3rd_party/blaze/math/Vector.h	/^inline std::ostream& operator<<( std::ostream& os, const Vector<VT,TF>& v )$/;"	f	namespace:blaze
operator <<	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline std::ostream& operator<<( std::ostream& os, const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
operator <<	amun/3rd_party/blaze/util/InputString.h	/^inline std::ostream& operator<<( std::ostream& os, const InputString& str )$/;"	f	namespace:blaze
operator <<	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline std::ostream& operator<<( std::ostream& os, const UnsignedValue<T>& uv )$/;"	f	namespace:blaze
operator <<	amun/3rd_party/blaze/util/logging/LogSection.h	/^inline LogSection& operator<<( LogSection& logsection, const Type& message )$/;"	f	namespace:blaze::logging
operator <<	amun/3rd_party/blaze/util/serialization/Archive.h	/^DisableIf_< IsNumeric<T>, Archive<Stream>& > Archive<Stream>::operator<<( const T& value )$/;"	f	class:blaze::Archive
operator <<	amun/3rd_party/blaze/util/serialization/Archive.h	/^EnableIf_< IsNumeric<T>, Archive<Stream>& > Archive<Stream>::operator<<( const T& value )$/;"	f	class:blaze::Archive
operator <<	amun/3rd_party/extract_lex/exception.h	/^template <class Except, class Data> typename Except::template ExceptionTag<Except&>::Identity operator<<(Except &e, const Data &data) {$/;"	f	namespace:util
operator <<	amun/3rd_party/extract_lex/extract-lex-main.cpp	/^std::ostream& operator<<(std::ostream &out, const extract::WordCount &obj)$/;"	f
operator <<	amun/3rd_party/fast_align/src/alignment_io.h	/^inline std::ostream& operator<<(std::ostream& os, const Array2D<AlignmentIO::AlignmentType>& m) {$/;"	f
operator <<	amun/3rd_party/fast_align/src/array2d.h	/^inline std::ostream& operator<<(std::ostream& os, const Array2D<T>& m) {$/;"	f
operator <<	amun/3rd_party/fast_align/src/array2d.h	/^inline std::ostream& operator<<(std::ostream& os, const Array2D<bool>& m) {$/;"	f
operator <<	amun/3rd_party/fast_align/src/array2d.h	/^inline std::ostream& operator<<(std::ostream& os, const Array2D<std::vector<bool> >& m) {$/;"	f
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(char what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const T& what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const char* what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const std::string& what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(double what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(float what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(int what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long double what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long long what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned int what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned long long what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned long what)$/;"	f	class:spdlog::details::line_logger
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <<	amun/3rd_party/yaml-cpp/emit.cpp	/^Emitter& operator<<(Emitter& out, const Node& node) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emit.cpp	/^std::ostream& operator<<(std::ostream& out, const Node& node) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, EMITTER_MANIP value) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, _Indent indent) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, _Precision precision) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, bool v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, char v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const Binary& b) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Alias& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Anchor& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Comment& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Null& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Tag& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const char* v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::string& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, double v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, float v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, int v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, long long v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, long v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, short v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned char v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned int v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned long long v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned long v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned short v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/indentation.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& out,$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& stream, char ch) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& stream,$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::list<T>& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::map<K, V>& m) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::set<T>& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::vector<T>& v) {$/;"	f	namespace:YAML
operator <<	amun/3rd_party/yaml-cpp/token.h	/^  friend std::ostream& operator<<(std::ostream& out, const Token& token) {$/;"	f	struct:YAML::Token
operator <<	amun/common/config.h	/^    friend OStream& operator<<(OStream& out, const Config& config) {$/;"	f	class:amunmt::Config
operator <<	amun/common/exception.h	/^template <class Except, class Data> typename Except::template ExceptionTag<Except&>::Identity operator<<(Except &e, const Data &data) {$/;"	f	namespace:amunmt::util
operator <<	amun/common/types.cpp	/^std::ostream& operator<<(std::ostream& out, const DeviceInfo& obj)$/;"	f	namespace:amunmt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecAttention &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecGRU2 &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecInit &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecSoftmax &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::Embeddings &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/dl4mt/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::GRU &obj)$/;"	f	namespace:amunmt::CPU::dl4mt
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecAttention &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecGRU2 &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecInit &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::DecSoftmax &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::Embeddings &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/cpu/nematus/model.h	/^inline std::ostream& operator<<(std::ostream &out, const Weights::GRU &obj)$/;"	f	namespace:amunmt::CPU::Nematus
operator <<	amun/gpu/mblas/nth_element_kernels.h	/^inline std::ostream& operator<<(std::ostream &out, const NthOut &obj)$/;"	f	namespace:amunmt::GPU
operator <<	amun/gpu/mblas/nth_element_kernels.h	/^inline std::ostream& operator<<(std::ostream &out, const NthOutBatch &obj)$/;"	f	namespace:amunmt::GPU
operator <=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<=( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<=( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<=( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator<=( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<=( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<=( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<=( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator<=( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator<=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator<=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator <=	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator<=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator <=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator<=( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator<=( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator<=( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator<=( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator <=	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator<=( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator <=	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator<=( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator<=( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator <=	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <=	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator=( const DiagonalMatrix& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^   DiagonalMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator=( const DiagonalProxy& dp )$/;"	f	class:blaze::DiagonalProxy
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator=( const T& value )$/;"	f	class:blaze::DiagonalProxy
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator=( initializer_list< initializer_list<T> > list )$/;"	f	class:blaze::DiagonalProxy
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline DiagonalProxy<MT>& DiagonalProxy<MT>::operator=( initializer_list<T> list )$/;"	f	class:blaze::DiagonalProxy
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator=( const DiagonalMatrix& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::DiagonalMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator=( const HermitianMatrix& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline HermitianElement<MT>& HermitianElement<MT>::operator=( const T& v )$/;"	f	class:blaze::HermitianElement
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator=( const HermitianProxy& hp )$/;"	f	class:blaze::HermitianProxy
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline HermitianProxy<MT>& HermitianProxy<MT>::operator=( const T& value )$/;"	f	class:blaze::HermitianProxy
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator=( const HermitianValue& hv )$/;"	f	class:blaze::HermitianValue
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline HermitianValue<MT>& HermitianValue<MT>::operator=( const T& value )$/;"	f	class:blaze::HermitianValue
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator=( const HermitianMatrix& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::HermitianMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator=( const LowerMatrix& rhs )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^   LowerMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator=( const LowerProxy& lp ) const$/;"	f	class:blaze::LowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::LowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::LowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline const LowerProxy<MT>& LowerProxy<MT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::LowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator=( const LowerMatrix& rhs )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::LowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator=( const StrictlyLowerMatrix& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::operator=( const StrictlyLowerMatrix& rhs )$/;"	f	class:blaze::StrictlyLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   StrictlyLowerProxy<MT>::operator=( const StrictlyLowerProxy& slp ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   StrictlyLowerProxy<MT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   StrictlyLowerProxy<MT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline const StrictlyLowerProxy<MT>& StrictlyLowerProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::StrictlyLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator=( const StrictlyUpperMatrix& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::operator=( const StrictlyUpperMatrix& rhs )$/;"	f	class:blaze::StrictlyUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   StrictlyUpperProxy<MT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   StrictlyUpperProxy<MT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator=( const StrictlyUpperProxy& uup ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline const StrictlyUpperProxy<MT>& StrictlyUpperProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::StrictlyUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::operator=( const SymmetricMatrix& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator=( const SymmetricMatrix& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator=( const NonNumericProxy& nnp )$/;"	f	class:blaze::NonNumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator=( const T& value )$/;"	f	class:blaze::NonNumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator=( initializer_list< initializer_list<T> > list )$/;"	f	class:blaze::NonNumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>& NonNumericProxy<MT>::operator=( initializer_list<T> list )$/;"	f	class:blaze::NonNumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator=( const NumericProxy& np )$/;"	f	class:blaze::NumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline NumericProxy<MT>& NumericProxy<MT>::operator=( const T& value )$/;"	f	class:blaze::NumericProxy
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      template< typename T > inline SharedElement& operator=( const T& v ) {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::operator=( const SymmetricMatrix& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator=( const Matrix<MT2,!SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::operator=( const SymmetricMatrix& rhs )$/;"	f	class:blaze::SymmetricMatrix
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline SymmetricElement<MT>& SymmetricElement<MT>::operator=( const T& v )$/;"	f	class:blaze::SymmetricElement
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator=( const SymmetricValue& sv )$/;"	f	class:blaze::SymmetricValue
operator =	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline SymmetricValue<MT>& SymmetricValue<MT>::operator=( const T& value )$/;"	f	class:blaze::SymmetricValue
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator=( const UniLowerMatrix& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^   UniLowerMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::operator=( const UniLowerMatrix& rhs )$/;"	f	class:blaze::UniLowerMatrix
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline UniLowerElement<MT>& UniLowerElement<MT>::operator=( const T& v )$/;"	f	class:blaze::UniLowerElement
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::UniLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline const UniLowerProxy<MT>& UniLowerProxy<MT>::operator=( const UniLowerProxy& ulp ) const$/;"	f	class:blaze::UniLowerProxy
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator=( const T& value )$/;"	f	class:blaze::UniLowerValue
operator =	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline UniLowerValue<MT>& UniLowerValue<MT>::operator=( const UniLowerValue& ulv )$/;"	f	class:blaze::UniLowerValue
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator=( const UniUpperMatrix& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^   UniUpperMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::operator=( const UniUpperMatrix& rhs )$/;"	f	class:blaze::UniUpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline UniUpperElement<MT>& UniUpperElement<MT>::operator=( const T& v )$/;"	f	class:blaze::UniUpperElement
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::UniUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline const UniUpperProxy<MT>& UniUpperProxy<MT>::operator=( const UniUpperProxy& uup ) const$/;"	f	class:blaze::UniUpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator=( const T& value )$/;"	f	class:blaze::UniUpperValue
operator =	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline UniUpperValue<MT>& UniUpperValue<MT>::operator=( const UniUpperValue& uuv )$/;"	f	class:blaze::UniUpperValue
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator=( const ElementType& rhs )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator=( const UpperMatrix& rhs )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^   UpperMatrix<MT,SO,true>::operator=( initializer_list< initializer_list<ElementType> > list )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator=( const Matrix<MT2,SO2>& rhs )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::operator=( const UpperMatrix& rhs )$/;"	f	class:blaze::UpperMatrix
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::UpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator=( const UpperProxy& up ) const$/;"	f	class:blaze::UpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::UpperProxy
operator =	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline const UpperProxy<MT>& UpperProxy<MT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::UpperProxy
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^      inline Element& operator=( const Other& rhs )$/;"	f	struct:blaze::CompressedMatrix::Element
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator=( const CompressedMatrix& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator=( const DenseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::operator=( const SparseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator=( const CompressedMatrix& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator=( const DenseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::operator=( const SparseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
operator =	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^      inline Element& operator=( const Other& rhs )$/;"	f	struct:blaze::CompressedVector::Element
operator =	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator=( const CompressedVector& rhs )$/;"	f	class:blaze::CompressedVector
operator =	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator=( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator =	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::operator=( const SparseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
operator =	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   MatrixAccessProxy<VT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::MatrixAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   MatrixAccessProxy<VT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::MatrixAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator=( const MatrixAccessProxy& map ) const$/;"	f	class:blaze::MatrixAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline const MatrixAccessProxy<MT>& MatrixAccessProxy<MT>::operator=( const T& value ) const$/;"	f	class:blaze::MatrixAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   ValueIndexPair<Type>::operator=( const Other& rhs )$/;"	f	class:blaze::ValueIndexPair
operator =	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   ValueIndexPair<Type>::operator=( const Other& v )$/;"	f	class:blaze::ValueIndexPair
operator =	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   VectorAccessProxy<VT>::operator=( initializer_list< initializer_list<T> > list ) const$/;"	f	class:blaze::VectorAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   VectorAccessProxy<VT>::operator=( initializer_list<T> list ) const$/;"	f	class:blaze::VectorAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator=( const T& value ) const$/;"	f	class:blaze::VectorAccessProxy
operator =	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline const VectorAccessProxy<VT>& VectorAccessProxy<VT>::operator=( const VectorAccessProxy& vap ) const$/;"	f	class:blaze::VectorAccessProxy
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      template< typename T > inline ColumnElement& operator=( const T& v ) {$/;"	f	class:blaze::Column::ColumnElement
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator=( const Column& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator=( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,false,false,true>& Column<MT,false,false,true>::operator=( const Column& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator=( const Column& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator=( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::operator=( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      template< typename T > inline RowElement& operator=( const T& v ) {$/;"	f	class:blaze::Row::RowElement
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::operator=( const Row& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::operator=( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,true>& Row<MT,false,false,true>::operator=( const Row& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator=( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator=( const Row& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::operator=( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
operator =	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      template< typename T > inline SubmatrixElement& operator=( const T& v ) {$/;"	f	class:blaze::Submatrix::SubmatrixElement
operator =	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator =	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::operator=( const Submatrix& rhs )$/;"	f	class:blaze::Submatrix
operator =	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator=( const Matrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
operator =	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::operator=( const Submatrix& rhs )$/;"	f	class:blaze::Submatrix
operator =	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      template< typename T > inline SubvectorElement& operator=( const T& v ) {$/;"	f	class:blaze::Subvector::SubvectorElement
operator =	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator=( const Subvector& rhs )$/;"	f	class:blaze::Subvector
operator =	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator=( const Vector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
operator =	amun/3rd_party/blaze/util/InputString.h	/^inline InputString& InputString::operator=( const char* string )$/;"	f	class:blaze::InputString
operator =	amun/3rd_party/blaze/util/InputString.h	/^inline InputString& InputString::operator=( const std::string& string )$/;"	f	class:blaze::InputString
operator =	amun/3rd_party/blaze/util/PtrVector.h	/^PtrVector<T,D,G>& PtrVector<T,D,G>::operator=( const PtrVector& pv )$/;"	f	class:blaze::PtrVector
operator =	amun/3rd_party/blaze/util/PtrVector.h	/^PtrVector<T,D,G>& PtrVector<T,D,G>::operator=( const PtrVector<T2,D2,G2>& pv )$/;"	f	class:blaze::PtrVector
operator =	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline UnsignedValue<T>& UnsignedValue<T>::operator=( T value )$/;"	f	class:blaze::UnsignedValue
operator =	amun/3rd_party/fast_align/src/array2d.h	/^  const Array2D& operator=(const Array2D& rhs) {$/;"	f	class:Array2D
operator =	amun/3rd_party/spdlog/details/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	amun/3rd_party/spdlog/details/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
operator =	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
operator =	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node& Node::operator=(const Node& rhs) {$/;"	f	class:YAML::Node
operator =	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node& Node::operator=(const T& rhs) {$/;"	f	class:YAML::Node
operator =	amun/3rd_party/yaml-cpp/setting.h	/^  SettingChanges& operator=(SettingChanges&& rhs) {$/;"	f	class:YAML::SettingChanges
operator =	amun/cpu/mblas/tensor.h	/^    BlazeMatrix<T, SO>& operator=(const MT& rhs) {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
operator =	amun/cpu/mblas/tensor.h	/^    BlazeMatrix<T, SO>& operator=(const value_type& val) {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
operator =	amun/cpu/mblas/tensor.h	/^  Parent& operator=(const T &other) {$/;"	f	class:amunmt::CPU::mblas::Tensor
operator =	amun/gpu/mblas/nth_element_kernels.h	/^  NthOutBatch& operator=(const NthOutBatch& rhs)$/;"	f	struct:amunmt::GPU::NthOutBatch
operator ==	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator==( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator==( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator==( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator==( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator==( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator==( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator==( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator==( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const Infinity& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const Infinity& lhs, const NegativeInfinity<I>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const Infinity& lhs, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const NegativeInfinity<I1>& lhs, const NegativeInfinity<I2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const NegativeInfinity<I>& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const NegativeInfinity<I>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const T& lhs, const Infinity& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/Infinity.h	/^inline bool operator==( const T& lhs, const NegativeInfinity<I>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline bool operator==( const Iterator& rhs ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^inline bool operator==( const SharedValue<T1>& lhs, const SharedValue<T2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline bool operator==( const SharedIterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::SharedIterator
operator ==	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline bool operator==( const Iterator& rhs ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline bool operator==( const Iterator& rhs ) const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline bool operator==( const Iterator& rhs ) const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator==( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator==( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline EnableIf_<IsNumeric<T1>, bool > operator==( T1 scalar, const DenseMatrix<T2,SO>& mat )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline EnableIf_<IsNumeric<T2>, bool > operator==( const DenseMatrix<T1,false>& mat, T2 scalar )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline EnableIf_<IsNumeric<T2>, bool > operator==( const DenseMatrix<T1,true>& mat, T2 scalar )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const DenseMatrix<T1,SO>& lhs, const DenseMatrix<T2,!SO>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const DenseMatrix<T1,SO>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const DenseMatrix<T1,SO>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const DenseMatrix<T1,false>& lhs, const DenseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const DenseMatrix<T1,true>& lhs, const DenseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseMatrix.h	/^inline bool operator==( const SparseMatrix<T1,SO1>& lhs, const DenseMatrix<T2,SO2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline EnableIf_<IsNumeric<T1>, bool > operator==( T1 scalar, const DenseVector<T2,TF>& vec )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline EnableIf_<IsNumeric<T2>, bool > operator==( const DenseVector<T1,TF>& vec, T2 scalar )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator==( const DenseVector<T1,TF1>& lhs, const DenseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator==( const DenseVector<T1,TF1>& lhs, const SparseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline bool operator==( const SparseVector<T1,TF1>& lhs, const DenseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator ==	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline bool operator==( const ConstIterator& rhs ) const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
operator ==	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator==( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator==( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator==( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^inline bool operator==( const SparseMatrix<T1,SO>& lhs, const SparseMatrix<T2,!SO>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^inline bool operator==( const SparseMatrix<T1,false>& lhs, const SparseMatrix<T2,false>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/sparse/SparseMatrix.h	/^inline bool operator==( const SparseMatrix<T1,true>& lhs, const SparseMatrix<T2,true>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^inline bool operator==( const SparseVector<T1,TF1>& lhs, const SparseVector<T2,TF2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline bool operator==( const ColumnIterator<MatrixType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Column::ColumnIterator
operator ==	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator==( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ==	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline bool operator==( const SubmatrixIterator<MatrixType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator ==	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator==( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ==	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline bool operator==( const SubvectorIterator<VectorType2,IteratorType2>& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator ==	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator==( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator==( const CastIterator<L>& lhs, const CastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator ==	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator==( const CastIterator<L>& lhs, const ConstCastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator ==	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator==( const ConstCastIterator<L>& lhs, const CastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator ==	amun/3rd_party/blaze/util/PtrVector.h	/^   friend inline bool operator==( const ConstCastIterator<L>& lhs, const ConstCastIterator<R>& rhs )$/;"	f	class:blaze::PtrVector
operator ==	amun/3rd_party/blaze/util/PtrVector.h	/^inline bool operator==( const PtrVector<T,D,G>& lhs, const PtrVector<T,D,G>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator==( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator ==	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator ==	amun/3rd_party/spdlog/details/os.h	/^inline bool operator==(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator ==	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator ==	amun/3rd_party/utf8/checked.h	/^      bool operator == (const iterator& rhs) const$/;"	f	class:utf8::iterator
operator ==	amun/3rd_party/utf8/unchecked.h	/^            bool operator == (const iterator& rhs) const $/;"	f	class:utf8::unchecked::iterator
operator ==	amun/3rd_party/yaml-cpp/binary.h	/^  bool operator==(const Binary &rhs) const {$/;"	f	class:YAML::Binary
operator ==	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  bool operator==(const iterator_base<W>& rhs) {$/;"	f	class:YAML::detail::iterator_base
operator ==	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool operator==(const node_iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::node_iterator_base
operator ==	amun/3rd_party/yaml-cpp/node/impl.h	/^inline bool operator==(const Node& lhs, const Node& rhs) { return lhs.is(rhs); }$/;"	f	namespace:YAML
operator ==	amun/3rd_party/yaml-cpp/null.h	/^inline bool operator==(const _Null&, const _Null&) { return true; }$/;"	f	namespace:YAML
operator >	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator>( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator>( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator >	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator >	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator>( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator >	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator>( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator>( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator>( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator>( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator >	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator>( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator >	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator>( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator>( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator >	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>=( const Accuracy& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>=( const NegativeAccuracy<A>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>=( const T& lhs, const Accuracy& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Accuracy.h	/^inline bool operator>=( const T& lhs, const NegativeAccuracy<A>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>=( const Epsilon& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>=( const NegativeEpsilon<E>& \/*lhs*\/, const T& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>=( const T& lhs, const Epsilon& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/Epsilon.h	/^inline bool operator>=( const T& lhs, const NegativeEpsilon<E>& \/*rhs*\/ )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::LowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator>=( const ConstIterator& lhs, const Iterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      friend inline bool operator>=( const Iterator& lhs, const ConstIterator& rhs ) {$/;"	f	class:blaze::UpperMatrix::Iterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatAddExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatDMatSubExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatForEachExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarDivExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatScalarMultExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DMatTransExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecAddExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecDivExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecMultExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecDVecSubExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecForEachExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarDivExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecScalarMultExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:ConstIterator
operator >=	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      inline bool operator>=( const ConstIterator& rhs ) const {$/;"	f	class:blaze::DVecTransExpr::ConstIterator
operator >=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator>=( const Proxy<PT,RT>& lhs, const T& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   operator>=( const T& lhs, const Proxy<PT,RT>& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline bool operator>=( const Proxy<PT1,RT1>& lhs, const Proxy<PT2,RT2>& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline bool operator>=( const SubmatrixIterator& rhs ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
operator >=	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline bool operator>=( const SubvectorIterator& rhs ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
operator >=	amun/3rd_party/blaze/util/PtrIterator.h	/^inline bool operator>=( const PtrIterator<TypeL>& lhs, const PtrIterator<TypeR>& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline bool operator>=( const UnsignedValue<T1>& lhs, const UnsignedValue<T2>& rhs )$/;"	f	namespace:blaze
operator >=	amun/3rd_party/spdlog/details/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >=	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >>	amun/3rd_party/blaze/util/InputString.h	/^inline std::istream& operator>>( std::istream& is, InputString& str )$/;"	f	namespace:blaze
operator >>	amun/3rd_party/blaze/util/UnsignedValue.h	/^std::istream& operator>>( std::istream& is, UnsignedValue<T>& uv )$/;"	f	namespace:blaze
operator >>	amun/3rd_party/blaze/util/serialization/Archive.h	/^DisableIf_< IsNumeric<T>, Archive<Stream>& > Archive<Stream>::operator>>( T& value )$/;"	f	class:blaze::Archive
operator >>	amun/3rd_party/blaze/util/serialization/Archive.h	/^EnableIf_< IsNumeric<T>, Archive<Stream>& > Archive<Stream>::operator>>( T& value )$/;"	f	class:blaze::Archive
operator >>	amun/3rd_party/extract_lex/file_stream.h	/^    friend InputFileStream& operator>>(InputFileStream& stream, T& t) {$/;"	f	class:InputFileStream
operator >>	amun/common/file_stream.h	/^    friend InputFileStream& operator>>(InputFileStream& stream, T& t) {$/;"	f	class:amunmt::InputFileStream
operator BlazeBase&	amun/cpu/mblas/tensor.h	/^    operator BlazeBase&() {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::DiagonalMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::LowerMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::StrictlyLowerMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::StrictlyUpperMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::UniLowerMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::UniUpperMatrix::Iterator
operator ConstIterator	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      inline operator ConstIterator() const {$/;"	f	class:blaze::UpperMatrix::Iterator
operator StringRef	amun/3rd_party/spdlog/details/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator StringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator T	amun/3rd_party/blaze/util/UnsignedValue.h	/^inline UnsignedValue<T>::operator T() const$/;"	f	class:blaze::UnsignedValue
operator V*	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^    operator V*() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::iterator_base::proxy
operator WStringRef	amun/3rd_party/spdlog/details/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator WStringRef	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator []	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f
operator []	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DMatSVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecDVecAddExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecDVecCrossExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecDVecDivExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecDVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecDVecSubExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecEvalExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecForEachExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecSVecAddExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecSVecCrossExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecSVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecSVecSubExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecScalarDivExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecScalarMultExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecSerialExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::DVecTransExpr
operator []	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline ConstReference operator[]( size_t index ) const {$/;"	f	class:blaze::DVecTransposer
operator []	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline Reference operator[]( size_t index ) {$/;"	f	class:blaze::DVecTransposer
operator []	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SMatDVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SMatSVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecDVecCrossExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecDVecDivExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecDVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecDVecSubExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecEvalExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecForEachExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecSVecAddExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecSVecCrossExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecSVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecSVecSubExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecScalarDivExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecScalarMultExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecSerialExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::SVecTransExpr
operator []	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline ConstReference operator[]( size_t index ) const {$/;"	f	class:blaze::SVecTransposer
operator []	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f
operator []	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f
operator []	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TDVecSMatMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f
operator []	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TDVecTSMatMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TSMatDVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TSMatSVecMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TSVecSMatMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TSVecTDMatMultExpr
operator []	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   inline ReturnType operator[]( size_t index ) const {$/;"	f	class:blaze::TSVecTSMatMultExpr
operator []	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   DenseVectorProxy<PT,VT>::operator[]( size_t index ) const$/;"	f	class:blaze::DenseVectorProxy
operator []	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::operator[]( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator[]( size_t index ) const$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::operator[]( size_t index )$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator[]( size_t index ) const$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::operator[]( size_t index )$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::operator[]( size_t index ) const$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::operator[]( size_t index )$/;"	f	class:blaze::Column
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::operator[]( size_t index ) const$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::operator[]( size_t index )$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator[]( size_t index ) const$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::operator[]( size_t index )$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::operator[]( size_t index ) const$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Reference Row<MT,true,false,SF>::operator[]( size_t index )$/;"	f	class:blaze::Row
operator []	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator[]( size_t index ) const$/;"	f	class:blaze::Subvector
operator []	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::operator[]( size_t index )$/;"	f	class:blaze::Subvector
operator []	amun/3rd_party/blaze/util/InputString.h	/^inline char& InputString::operator[]( SizeType index )$/;"	f	class:blaze::InputString
operator []	amun/3rd_party/blaze/util/InputString.h	/^inline const char& InputString::operator[]( SizeType index ) const$/;"	f	class:blaze::InputString
operator []	amun/3rd_party/blaze/util/PtrIterator.h	/^inline typename PtrIterator<Type>::PointerType PtrIterator<Type>::operator[]( DifferenceType index ) const$/;"	f	class:blaze::PtrIterator
operator []	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ConstReferenceType PtrVector<T,D,G>::operator[]( SizeType index ) const$/;"	f	class:blaze::PtrVector
operator []	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::ReferenceType PtrVector<T,D,G>::operator[]( SizeType index )$/;"	f	class:blaze::PtrVector
operator []	amun/3rd_party/spdlog/details/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer
operator []	amun/3rd_party/spdlog/details/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer
operator []	amun/3rd_party/spdlog/details/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList
operator []	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer
operator []	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer
operator []	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList
operator []	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node Node::operator[](const Key& key) {$/;"	f	class:YAML::Node
operator []	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node Node::operator[](const Node& key) {$/;"	f	class:YAML::Node
operator []	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const Node Node::operator[](const Key& key) const {$/;"	f	class:YAML::Node
operator []	amun/3rd_party/yaml-cpp/node/impl.h	/^inline const Node Node::operator[](const Node& key) const {$/;"	f	class:YAML::Node
operator []	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  T& operator[](std::size_t i) { return *m_data[i]; }$/;"	f	class:YAML::ptr_vector
operator []	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  const T& operator[](std::size_t i) const { return *m_data[i]; }$/;"	f	class:YAML::ptr_vector
operator []	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  char operator[](std::size_t i) const { return m_stream.CharAt(m_offset + i); }$/;"	f	class:YAML::StreamCharSource
operator []	amun/3rd_party/yaml-cpp/stringsource.h	/^  char operator[](std::size_t i) const { return m_str[m_offset + i]; }$/;"	f	class:YAML::StringCharSource
operator []	amun/common/factor_vocab.cpp	/^  FactWord FactorVocab::operator[](const std::vector<std::string>& factors) const {$/;"	f	class:amunmt::FactorVocab
operator []	amun/common/vocab.cpp	/^const std::string& Vocab::operator[](unsigned id) const {$/;"	f	class:amunmt::Vocab
operator []	amun/common/vocab.cpp	/^unsigned Vocab::operator[](const std::string& word) const {$/;"	f	class:amunmt::Vocab
operator []	amun/cpu/npz_converter.h	/^    mblas::Tensor operator[](const std::string& key) const {$/;"	f	class:amunmt::CPU::NpzConverter
operator []	amun/gpu/mblas/tensor_wrapper.h	/^  T &operator[](unsigned i)$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator []	amun/gpu/mblas/tensor_wrapper.h	/^  const T &operator[](unsigned i) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
operator []	amun/gpu/mblas/vector_wrapper.h	/^  T &operator[](unsigned i)$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
operator []	amun/gpu/mblas/vector_wrapper.h	/^  const T &operator[](unsigned i) const$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
operator []	amun/plugin/nbest.h	/^    std::vector<std::string> operator[](size_t index) const {$/;"	f	class:NBest
operator bool	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^inline ParallelSection<T>::operator bool() const$/;"	f	class:blaze::ParallelSection
operator bool	amun/3rd_party/blaze/math/smp/SerialSection.h	/^inline SerialSection<T>::operator bool() const$/;"	f	class:blaze::SerialSection
operator bool	amun/3rd_party/blaze/util/logging/LogSection.h	/^inline LogSection::operator bool() const$/;"	f	class:blaze::logging::LogSection
operator bool	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline Archive<Stream>::operator bool() const$/;"	f	class:blaze::Archive
operator bool	amun/3rd_party/extract_lex/file_stream.h	/^    operator bool () {$/;"	f	class:InputFileStream
operator bool	amun/3rd_party/yaml-cpp/parser.cpp	/^Parser::operator bool() const {$/;"	f	class:YAML::Parser
operator bool	amun/3rd_party/yaml-cpp/stream.cpp	/^Stream::operator bool() const {$/;"	f	class:YAML::Stream
operator bool	amun/3rd_party/yaml-cpp/streamcharsource.h	/^inline StreamCharSource::operator bool() const {$/;"	f	class:YAML::StreamCharSource
operator bool	amun/3rd_party/yaml-cpp/stringsource.h	/^  operator bool() const { return m_offset < m_size; }$/;"	f	class:YAML::StringCharSource
operator bool	amun/common/file_stream.h	/^    operator bool () {$/;"	f	class:amunmt::InputFileStream
operator char	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator char() const$/;"	f	class:blaze::Infinity
operator char	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator char() const$/;"	f	class:blaze::NegativeInfinity
operator const T	amun/3rd_party/blaze/math/Accuracy.h	/^inline Accuracy::operator const T() const$/;"	f	class:blaze::Accuracy
operator const T	amun/3rd_party/blaze/math/Accuracy.h	/^inline NegativeAccuracy<A>::operator const T() const$/;"	f	class:blaze::NegativeAccuracy
operator const T	amun/3rd_party/blaze/math/Epsilon.h	/^inline Epsilon::operator const T() const$/;"	f	class:blaze::Epsilon
operator const T	amun/3rd_party/blaze/math/Epsilon.h	/^inline NegativeEpsilon<E>::operator const T() const$/;"	f	class:blaze::NegativeEpsilon
operator double	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator double() const$/;"	f	class:blaze::Infinity
operator double	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator double() const$/;"	f	class:blaze::NegativeInfinity
operator float	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator float() const$/;"	f	class:blaze::Infinity
operator float	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator float() const$/;"	f	class:blaze::NegativeInfinity
operator int	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator int() const$/;"	f	class:blaze::Infinity
operator int	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator int() const$/;"	f	class:blaze::NegativeInfinity
operator int	amun/3rd_party/spdlog/details/format.h	/^    operator int() const$/;"	f	struct:fmt::internal::DummyInt
operator int	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    operator int() const$/;"	f	struct:fmt::internal::DummyInt
operator long	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator long() const$/;"	f	class:blaze::Infinity
operator long	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator long() const$/;"	f	class:blaze::NegativeInfinity
operator long double	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator long double() const$/;"	f	class:blaze::Infinity
operator long double	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator long double() const$/;"	f	class:blaze::NegativeInfinity
operator node_iterator_value<V>*	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    operator node_iterator_value<V>*() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::node_iterator_base::proxy
operator ptrdiff_t	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator ptrdiff_t() const$/;"	f	class:blaze::Infinity
operator ptrdiff_t	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator ptrdiff_t() const$/;"	f	class:blaze::NegativeInfinity
operator short	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator short() const$/;"	f	class:blaze::Infinity
operator short	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator short() const$/;"	f	class:blaze::NegativeInfinity
operator signed char	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator signed char() const$/;"	f	class:blaze::Infinity
operator signed char	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator signed char() const$/;"	f	class:blaze::NegativeInfinity
operator size_t	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator size_t() const$/;"	f	class:blaze::Infinity
operator std::istream&	amun/3rd_party/extract_lex/file_stream.h	/^    operator std::istream& () {$/;"	f	class:InputFileStream
operator std::istream&	amun/common/file_stream.h	/^    operator std::istream& () {$/;"	f	class:amunmt::InputFileStream
operator unsigned char	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator unsigned char() const$/;"	f	class:blaze::Infinity
operator unsigned int	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator unsigned int() const$/;"	f	class:blaze::Infinity
operator unsigned long	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator unsigned long() const$/;"	f	class:blaze::Infinity
operator unsigned short	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator unsigned short() const$/;"	f	class:blaze::Infinity
operator wchar_t	amun/3rd_party/blaze/math/Infinity.h	/^inline Infinity::operator wchar_t() const$/;"	f	class:blaze::Infinity
operator wchar_t	amun/3rd_party/blaze/math/Infinity.h	/^inline NegativeInfinity<I>::operator wchar_t() const$/;"	f	class:blaze::NegativeInfinity
operator ||	amun/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator||(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
operator ~	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^BLAZE_ALWAYS_INLINE PT& ComplexProxy<PT,CT>::operator~()$/;"	f	class:blaze::ComplexProxy
operator ~	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^BLAZE_ALWAYS_INLINE const PT& ComplexProxy<PT,CT>::operator~() const$/;"	f	class:blaze::ComplexProxy
operator ~	amun/3rd_party/blaze/math/proxy/DefaultProxy.h	/^BLAZE_ALWAYS_INLINE PT& DefaultProxy<PT,CT>::operator~()$/;"	f	class:blaze::DefaultProxy
operator ~	amun/3rd_party/blaze/math/proxy/DefaultProxy.h	/^BLAZE_ALWAYS_INLINE const PT& DefaultProxy<PT,CT>::operator~() const$/;"	f	class:blaze::DefaultProxy
optimize_tension	amun/3rd_party/fast_align/src/fast_align.cc	/^int optimize_tension = 0;$/;"	v
options	amun/3rd_party/fast_align/src/atools.cc	/^struct option options[] = {$/;"	v	typeref:struct:option
options	amun/3rd_party/fast_align/src/fast_align.cc	/^struct option options[] = {$/;"	v	typeref:struct:option
orglq	amun/3rd_party/blaze/math/lapack/clapack/orglq.h	/^inline void orglq( int m, int n, int k, double* A, int lda, const double* tau, double* work, int lwork, int* info )$/;"	f	namespace:blaze
orglq	amun/3rd_party/blaze/math/lapack/clapack/orglq.h	/^inline void orglq( int m, int n, int k, float* A, int lda, const float* tau, float* work, int lwork, int* info )$/;"	f	namespace:blaze
orglq	amun/3rd_party/blaze/math/lapack/orglq.h	/^inline void orglq( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
orgql	amun/3rd_party/blaze/math/lapack/clapack/orgql.h	/^inline void orgql( int m, int n, int k, double* A, int lda, const double* tau, double* work, int lwork, int* info )$/;"	f	namespace:blaze
orgql	amun/3rd_party/blaze/math/lapack/clapack/orgql.h	/^inline void orgql( int m, int n, int k, float* A, int lda, const float* tau, float* work, int lwork, int* info )$/;"	f	namespace:blaze
orgql	amun/3rd_party/blaze/math/lapack/orgql.h	/^inline void orgql( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
orgqr	amun/3rd_party/blaze/math/lapack/clapack/orgqr.h	/^inline void orgqr( int m, int n, int k, double* A, int lda, const double* tau, double* work, int lwork, int* info )$/;"	f	namespace:blaze
orgqr	amun/3rd_party/blaze/math/lapack/clapack/orgqr.h	/^inline void orgqr( int m, int n, int k, float* A, int lda, const float* tau, float* work, int lwork, int* info )$/;"	f	namespace:blaze
orgqr	amun/3rd_party/blaze/math/lapack/orgqr.h	/^inline void orgqr( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
orgrq	amun/3rd_party/blaze/math/lapack/clapack/orgrq.h	/^inline void orgrq( int m, int n, int k, double* A, int lda, const double* tau, double* work, int lwork, int* info )$/;"	f	namespace:blaze
orgrq	amun/3rd_party/blaze/math/lapack/clapack/orgrq.h	/^inline void orgrq( int m, int n, int k, float* A, int lda, const float* tau, float* work, int lwork, int* info )$/;"	f	namespace:blaze
orgrq	amun/3rd_party/blaze/math/lapack/orgrq.h	/^inline void orgrq( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
ormlq	amun/3rd_party/blaze/math/lapack/clapack/ormlq.h	/^inline void ormlq( char side, char trans, int m, int n, int k, const double* A, int lda,$/;"	f	namespace:blaze
ormlq	amun/3rd_party/blaze/math/lapack/clapack/ormlq.h	/^inline void ormlq( char side, char trans, int m, int n, int k, const float* A, int lda,$/;"	f	namespace:blaze
ormlq	amun/3rd_party/blaze/math/lapack/ormlq.h	/^inline void ormlq( DenseMatrix<MT1,SO1>& C, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
ormql	amun/3rd_party/blaze/math/lapack/clapack/ormql.h	/^inline void ormql( char side, char trans, int m, int n, int k, const double* A, int lda,$/;"	f	namespace:blaze
ormql	amun/3rd_party/blaze/math/lapack/clapack/ormql.h	/^inline void ormql( char side, char trans, int m, int n, int k, const float* A, int lda,$/;"	f	namespace:blaze
ormql	amun/3rd_party/blaze/math/lapack/ormql.h	/^inline void ormql( DenseMatrix<MT1,SO1>& C, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
ormqr	amun/3rd_party/blaze/math/lapack/clapack/ormqr.h	/^inline void ormqr( char side, char trans, int m, int n, int k, const double* A, int lda,$/;"	f	namespace:blaze
ormqr	amun/3rd_party/blaze/math/lapack/clapack/ormqr.h	/^inline void ormqr( char side, char trans, int m, int n, int k, const float* A, int lda,$/;"	f	namespace:blaze
ormqr	amun/3rd_party/blaze/math/lapack/ormqr.h	/^inline void ormqr( DenseMatrix<MT1,SO1>& C, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
ormrq	amun/3rd_party/blaze/math/lapack/clapack/ormrq.h	/^inline void ormrq( char side, char trans, int m, int n, int k, const double* A, int lda,$/;"	f	namespace:blaze
ormrq	amun/3rd_party/blaze/math/lapack/clapack/ormrq.h	/^inline void ormrq( char side, char trans, int m, int n, int k, const float* A, int lda,$/;"	f	namespace:blaze
ormrq	amun/3rd_party/blaze/math/lapack/ormrq.h	/^inline void ormrq( DenseMatrix<MT1,SO1>& C, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
os	amun/3rd_party/spdlog/common.h	/^namespace os$/;"	n	namespace:spdlog::details
os	amun/3rd_party/spdlog/details/os.h	/^namespace os$/;"	n	namespace:spdlog::details
ostream_sink	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream& os, bool force_flush=false) :_ostream(os), _force_flush(force_flush) {}$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^class ostream_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<std::mutex> ostream_sink_mt;$/;"	t	namespace:spdlog::sinks
ostream_sink_st	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<details::null_mutex> ostream_sink_st;$/;"	t	namespace:spdlog::sinks
ostream_wrapper	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::ostream_wrapper()$/;"	f	class:YAML::ostream_wrapper
ostream_wrapper	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::ostream_wrapper(std::ostream& stream)$/;"	f	class:YAML::ostream_wrapper
ostream_wrapper	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^class YAML_CPP_API ostream_wrapper {$/;"	c	namespace:YAML
other	amun/3rd_party/blaze/util/AlignedAllocator.h	/^      typedef AlignedAllocator<Type2>  other;  \/\/!< Type of the other allocator.$/;"	t	struct:blaze::AlignedAllocator::rebind
other	amun/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg& operator=(const async_msg& other) = delete;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
other	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^    line_logger(const line_logger& other) = delete;$/;"	m	class:spdlog::details::line_logger
other	amun/3rd_party/spdlog/details/log_msg.h	/^    log_msg& operator=(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	amun/3rd_party/spdlog/details/log_msg.h	/^    log_msg(const log_msg& other)  = delete;$/;"	m	struct:spdlog::details::log_msg
other	amun/3rd_party/spdlog/details/log_msg.h	/^    log_msg(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink& operator=(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink& operator=(const wincolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(const wincolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
outStrm_	amun/common/output_collector.h	/^  std::ostream* outStrm_;$/;"	m	class:amunmt::OutputCollector
out_handle_	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    HANDLE out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink
outer	amun/3rd_party/blaze/math/Vector.h	/^   outer( const Vector<T1,false>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
outer	amun/3rd_party/blaze/math/Vector.h	/^   outer( const Vector<T1,false>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
outer	amun/3rd_party/blaze/math/Vector.h	/^   outer( const Vector<T1,true>& lhs, const Vector<T2,false>& rhs )$/;"	f	namespace:blaze
outer	amun/3rd_party/blaze/math/Vector.h	/^   outer( const Vector<T1,true>& lhs, const Vector<T2,true>& rhs )$/;"	f	namespace:blaze
output	amun/gpu/dl4mt/cell.h	/^  size_t output;$/;"	m	struct:amunmt::GPU::CellLength
output	amun/gpu/dl4mt/cellstate.h	/^  std::unique_ptr<mblas::Tensor> output;$/;"	m	struct:amunmt::GPU::CellState
output	amun/python/test.py	/^output = nmt.translate(sentences)$/;"	v
outputCollector_	amun/common/god.h	/^    mutable OutputCollector outputCollector_;$/;"	m	class:amunmt::God
outputs_	amun/common/output_collector.h	/^  Outputs outputs_;$/;"	m	class:amunmt::OutputCollector
overflow	amun/3rd_party/spdlog/details/format.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fmt::FormatBuf
overflow	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fmt::internal::FormatBuf
override	amun/3rd_party/spdlog/async_logger.h	/^    void _set_formatter(spdlog::formatter_ptr msg_formatter) override;$/;"	m	class:spdlog::async_logger
override	amun/3rd_party/spdlog/async_logger.h	/^    void _set_pattern(const std::string& pattern) override;$/;"	m	class:spdlog::async_logger
override	amun/3rd_party/spdlog/async_logger.h	/^    void _sink_it(details::log_msg& msg) override;$/;"	m	class:spdlog::async_logger
override	amun/3rd_party/spdlog/async_logger.h	/^    void flush() override;$/;"	m	class:spdlog::async_logger
override	amun/3rd_party/spdlog/formatter.h	/^    void format(details::log_msg& msg) override;$/;"	m	class:spdlog::pattern_formatter
override	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    virtual void flush() override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    virtual void log(const details::log_msg& msg) override;$/;"	m	class:spdlog::sinks::ansicolor_sink
owned	amun/3rd_party/yaml-cpp/binary.h	/^  bool owned() const { return !m_unownedData; }$/;"	f	class:YAML::Binary
p	amun/gpu/dl4mt/model.h	/^    std::string p(std::string prefix, std::string sufix){$/;"	f	struct:amunmt::GPU::Weights::MultWeights
pContainer	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    void* pContainer;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
pIndent	amun/3rd_party/yaml-cpp/scanner.h	/^    IndentMarker *pIndent;$/;"	m	struct:YAML::Scanner::SimpleKey
pKey	amun/3rd_party/yaml-cpp/scanner.h	/^    Token *pMapStart, *pKey;$/;"	m	struct:YAML::Scanner::SimpleKey
pMapStart	amun/3rd_party/yaml-cpp/scanner.h	/^    Token *pMapStart, *pKey;$/;"	m	struct:YAML::Scanner::SimpleKey
pNode	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V* pNode;$/;"	m	struct:YAML::detail::node_iterator_value
pPrevKeyNode	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    void* pPrevKeyNode;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
pStartToken	amun/3rd_party/yaml-cpp/scanner.h	/^    Token *pStartToken;$/;"	m	struct:YAML::Scanner::IndentMarker
p_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class p_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
pad	amun/3rd_party/spdlog/details/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fmt
pad	amun/3rd_party/spdlog/details/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fmt
pad	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fmt
pad	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fmt
pad0_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad0_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad1_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad1_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad2_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad2_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad3_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad3_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad_n_join	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, char sep)$/;"	f	namespace:spdlog::details
pad_n_join	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, int v3, char sep)$/;"	f	namespace:spdlog::details
padded	amun/3rd_party/blaze/math/PaddingFlag.h	/^const bool padded = true;$/;"	m	namespace:blaze
params	amun/3rd_party/yaml-cpp/token.h	/^  std::vector<std::string> params;$/;"	m	struct:YAML::Token
parse_flags	amun/3rd_party/spdlog/details/format.cc	/^void fmt::internal::PrintfFormatter<Char>::parse_flags($/;"	f	class:fmt::internal::PrintfFormatter
parse_flags	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::parse_flags(FormatSpec &spec, const Char *&s)$/;"	f	class:fmt::PrintfFormatter
parse_header	amun/3rd_party/spdlog/details/format.cc	/^unsigned fmt::internal::PrintfFormatter<Char>::parse_header($/;"	f	class:fmt::internal::PrintfFormatter
parse_header	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^unsigned PrintfFormatter<Char, AF>::parse_header($/;"	f	class:fmt::PrintfFormatter
parse_npy_header	amun/3rd_party/cnpy/cnpy.cpp	/^void cnpy::parse_npy_header(FILE* fp, unsigned int& word_size, unsigned int*& shape, unsigned int& ndims, bool& fortran_order) {  $/;"	f	class:cnpy
parse_zip_footer	amun/3rd_party/cnpy/cnpy.cpp	/^void cnpy::parse_zip_footer(FILE* fp, unsigned short& nrecs, unsigned int& global_header_size, unsigned int& global_header_offset)$/;"	f	class:cnpy
pattern_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline spdlog::pattern_formatter::pattern_formatter(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
pattern_formatter	amun/3rd_party/spdlog/formatter.h	/^class pattern_formatter : public formatter$/;"	c	namespace:spdlog
peek	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline typename Stream::int_type Archive<Stream>::peek() const$/;"	f	class:blaze::Archive
peek	amun/3rd_party/yaml-cpp/scanner.cpp	/^Token& Scanner::peek() {$/;"	f	class:YAML::Scanner
peek	amun/3rd_party/yaml-cpp/stream.cpp	/^char Stream::peek() const {$/;"	f	class:YAML::Stream
peek_next	amun/3rd_party/utf8/checked.h	/^    uint32_t peek_next(octet_iterator it, octet_iterator end)$/;"	f	namespace:utf8
peek_next	amun/3rd_party/utf8/unchecked.h	/^        uint32_t peek_next(octet_iterator it)$/;"	f	namespace:utf8::unchecked
penalties_	amun/gpu/decoder/ape_penalty.h	/^    Penalties penalties_;$/;"	m	class:GPU::ApePenaltyLoader
penalties_	amun/gpu/decoder/ape_penalty.h	/^    const Penalties& penalties_;$/;"	m	class:GPU::ApePenalty
pfn_notify	amun/fpga/types-fpga.h	/^inline void pfn_notify(const char *errinfo, const void *private_info, size_t cb, void *user_data)$/;"	f
phrase	amun/plugin/hypo_info.h	/^  Words phrase;$/;"	m	struct:amunmt::AmunInput
pid	amun/3rd_party/spdlog/details/os.h	/^inline int pid()$/;"	f	namespace:spdlog::details::os
pid_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class pid_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
placeholder	amun/3rd_party/thrust_bind/bind.hpp	/^struct placeholder$/;"	s	namespace:thrust::experimental::detail::bind_detail
pointer	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DiagonalMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::LowerMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
pointer	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
pointer	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::UpperMatrix::Iterator
pointer	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DenseIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:ConstIterator
pointer	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
pointer	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Column::ColumnIterator
pointer	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Row::RowIterator
pointer	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
pointer	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
pointer	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
pointer	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef PointerType       pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
pointer	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef Pointer         pointer;          \/\/!< Type of a pointer to the allocated values.$/;"	t	class:blaze::AlignedAllocator
pointer	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef PointerType                      pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::PtrIterator
pointer	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef PointerType                pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::PtrVector::CastIterator
pointer	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef PointerType                pointer;            \/\/!< Pointer return type.$/;"	t	class:blaze::PtrVector::ConstCastIterator
pointer	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef PointerType           pointer;             \/\/!< Pointer to a non-const object.$/;"	t	class:blaze::PtrVector
pointer	amun/3rd_party/spdlog/details/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon17
pointer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon51
polymorphicCount	amun/3rd_party/blaze/util/Algorithm.h	/^inline size_t polymorphicCount( S *const * first, S *const * last )$/;"	f	namespace:blaze
polymorphicFind	amun/3rd_party/blaze/util/Algorithm.h	/^inline S *const * polymorphicFind( S *const * first, S *const * last )$/;"	f	namespace:blaze
pool_	amun/3rd_party/blaze/util/Thread.h	/^   ThreadPoolType* pool_;        \/\/!< Handle to the managing thread pool.$/;"	m	class:blaze::Thread
pool_	amun/common/god.h	/^    std::unique_ptr<ThreadPool> pool_;$/;"	m	class:amunmt::God
pop	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline Task TaskQueue::pop()$/;"	f	class:blaze::threadpool::TaskQueue
pop	amun/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::pop() {$/;"	f	class:YAML::Scanner
pop	amun/3rd_party/yaml-cpp/setting.h	/^  virtual void pop() { m_pCurSetting->restore(m_oldSetting); }$/;"	f	class:YAML::SettingChange
popBack	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::popBack()$/;"	f	class:blaze::PtrVector
pos	amun/3rd_party/yaml-cpp/mark.h	/^  int pos;$/;"	m	struct:YAML::Mark
pos	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t pos() const { return m_pos; }$/;"	f	class:YAML::ostream_wrapper
pos	amun/3rd_party/yaml-cpp/stream.h	/^  int pos() const { return m_mark.pos; }$/;"	f	class:YAML::Stream
pos_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^   IteratorType pos_;     \/\/!< Iterator to the current sparse Hermitian matrix element.$/;"	m	class:blaze::HermitianElement
pos_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   IteratorType pos_;     \/\/!< Iterator to the current sparse Hermitian matrix element.$/;"	m	class:blaze::HermitianValue
pos_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse Hermitian matrix element.$/;"	m	class:blaze::HermitianMatrix::Iterator
pos_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      IteratorType pos_;  \/\/!< Iterator to the current sparse symmetric matrix element.$/;"	m	class:blaze::SymmetricMatrix::SharedElement
pos_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      IteratorType pos_;  \/\/!< Iterator to the current sparse symmetric matrix element.$/;"	m	class:blaze::SymmetricMatrix::SharedIterator
pos_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse symmetric matrix element.$/;"	m	class:blaze::SymmetricMatrix::Iterator
pos_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^   IteratorType pos_;     \/\/!< Iterator to the current sparse Hermitian matrix element.$/;"	m	class:blaze::SymmetricElement
pos_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   IteratorType pos_;     \/\/!< Iterator to the current sparse symmetric matrix element.$/;"	m	class:blaze::SymmetricValue
pos_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      IteratorType pos_;    \/\/!< Iterator to the current lower unitriangular matrix element.$/;"	m	class:blaze::UniLowerMatrix::Iterator
pos_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^   IteratorType pos_;  \/\/!< Iterator to the current lower unitriangular matrix element.$/;"	m	class:blaze::UniLowerElement
pos_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      IteratorType pos_;    \/\/!< Iterator to the current upper unitriangular matrix element.$/;"	m	class:blaze::UniUpperMatrix::Iterator
pos_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^   IteratorType pos_;  \/\/!< Iterator to the current upper unitriangular matrix element.$/;"	m	class:blaze::UniUpperElement
pos_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse element.$/;"	m	class:blaze::Column::ColumnIterator
pos_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      IteratorType pos_;  \/\/!< Iterator to the current position within the sparse column.$/;"	m	class:blaze::Column::ColumnElement
pos_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse element.$/;"	m	class:blaze::Row::RowIterator
pos_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      IteratorType pos_;  \/\/!< Iterator to the current position within the sparse row.$/;"	m	class:blaze::Row::RowElement
pos_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse element.$/;"	m	class:blaze::Submatrix::SubmatrixIterator
pos_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      IteratorType pos_;  \/\/!< Iterator to the current position within the sparse submatrix.$/;"	m	class:blaze::Submatrix::SubmatrixElement
pos_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      IteratorType pos_;     \/\/!< Iterator to the current sparse element.$/;"	m	class:blaze::Subvector::SubvectorIterator
pos_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      IteratorType pos_;  \/\/!< Iterator to the current position within the sparse subvector.$/;"	m	class:blaze::Subvector::SubvectorElement
postprocessors_	amun/common/god.h	/^    std::vector<PostprocessorPtr> postprocessors_;$/;"	m	class:amunmt::God
posv	amun/3rd_party/blaze/math/lapack/clapack/posv.h	/^inline void posv( char uplo, int n, int nrhs, complex<double>* A, int lda, complex<double>* B, int ldb, int* info )$/;"	f	namespace:blaze
posv	amun/3rd_party/blaze/math/lapack/clapack/posv.h	/^inline void posv( char uplo, int n, int nrhs, complex<float>* A, int lda, complex<float>* B, int ldb, int* info )$/;"	f	namespace:blaze
posv	amun/3rd_party/blaze/math/lapack/clapack/posv.h	/^inline void posv( char uplo, int n, int nrhs, double* A, int lda, double* B, int ldb, int* info )$/;"	f	namespace:blaze
posv	amun/3rd_party/blaze/math/lapack/clapack/posv.h	/^inline void posv( char uplo, int n, int nrhs, float* A, int lda, float* B, int ldb, int* info )$/;"	f	namespace:blaze
posv	amun/3rd_party/blaze/math/lapack/posv.h	/^inline void posv( DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo )$/;"	f	namespace:blaze
posv	amun/3rd_party/blaze/math/lapack/posv.h	/^inline void posv( DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, char uplo )$/;"	f	namespace:blaze
potrf	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	/^inline void potrf( char uplo, int n, complex<double>* A, int lda, int* info )$/;"	f	namespace:blaze
potrf	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	/^inline void potrf( char uplo, int n, complex<float>* A, int lda, int* info )$/;"	f	namespace:blaze
potrf	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	/^inline void potrf( char uplo, int n, double* A, int lda, int* info )$/;"	f	namespace:blaze
potrf	amun/3rd_party/blaze/math/lapack/clapack/potrf.h	/^inline void potrf( char uplo, int n, float* A, int lda, int* info )$/;"	f	namespace:blaze
potrf	amun/3rd_party/blaze/math/lapack/potrf.h	/^inline void potrf( DenseMatrix<MT,SO>& A, char uplo )$/;"	f	namespace:blaze
potri	amun/3rd_party/blaze/math/lapack/clapack/potri.h	/^inline void potri( char uplo, int n, complex<double>* A, int lda, int* info )$/;"	f	namespace:blaze
potri	amun/3rd_party/blaze/math/lapack/clapack/potri.h	/^inline void potri( char uplo, int n, complex<float>* A, int lda, int* info )$/;"	f	namespace:blaze
potri	amun/3rd_party/blaze/math/lapack/clapack/potri.h	/^inline void potri( char uplo, int n, double* A, int lda, int* info )$/;"	f	namespace:blaze
potri	amun/3rd_party/blaze/math/lapack/clapack/potri.h	/^inline void potri( char uplo, int n, float* A, int lda, int* info )$/;"	f	namespace:blaze
potri	amun/3rd_party/blaze/math/lapack/potri.h	/^inline void potri( DenseMatrix<MT,SO>& A, char uplo )$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	/^inline void potrs( char uplo, int n, int nrhs, const complex<double>* A,$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	/^inline void potrs( char uplo, int n, int nrhs, const complex<float>* A,$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	/^inline void potrs( char uplo, int n, int nrhs, const double* A, int lda, double* B, int ldb, int* info )$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/clapack/potrs.h	/^inline void potrs( char uplo, int n, int nrhs, const float* A, int lda, float* B, int ldb, int* info )$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/potrs.h	/^inline void potrs( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo )$/;"	f	namespace:blaze
potrs	amun/3rd_party/blaze/math/lapack/potrs.h	/^inline void potrs( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, char uplo )$/;"	f	namespace:blaze
pow	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Pow<ET>,SO> pow( const DenseMatrix<MT,SO>& dm, ET exp )$/;"	f	namespace:blaze
pow	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Pow<ET>,TF> pow( const DenseVector<VT,TF>& dv, ET exp )$/;"	f	namespace:blaze
pow	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Pow<ET>,SO> pow( const SparseMatrix<MT,SO>& sm, ET exp )$/;"	f	namespace:blaze
pow	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Pow<ET>,TF> pow( const SparseVector<VT,TF>& sv, ET exp )$/;"	f	namespace:blaze
pow	amun/3rd_party/blaze/math/functors/Pow.h	/^      -> decltype( pow( a, std::declval<ET>() ) )$/;"	f	struct:blaze::Pow
pow	amun/3rd_party/blaze/math/functors/Pow.h	/^      -> decltype( pow( a, std::declval<SIMDET>() ) )$/;"	f	struct:blaze::Pow
precision	amun/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec
precision	amun/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec
precision	amun/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec
precision	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec
precision	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec
precision	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec
precision_	amun/3rd_party/spdlog/details/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec
precision_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec
prefix	amun/3rd_party/yaml-cpp/emittermanip.h	/^  std::string prefix;$/;"	m	struct:YAML::_Tag
prepareMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^DisableIf_< IsResizable<MT> > MatrixSerializer::prepareMatrix( DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
prepareMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^DisableIf_< IsResizable<MT> > MatrixSerializer::prepareMatrix( SparseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
prepareMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^EnableIf_< IsResizable<MT> > MatrixSerializer::prepareMatrix( MT& mat )$/;"	f	class:blaze::MatrixSerializer
prepareVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^DisableIf_< IsResizable<VT> > VectorSerializer::prepareVector( DenseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
prepareVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^DisableIf_< IsResizable<VT> > VectorSerializer::prepareVector( SparseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
prepareVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^EnableIf_< IsResizable<VT> > VectorSerializer::prepareVector( VT& vec )$/;"	f	class:blaze::VectorSerializer
prepare_int_buffer	amun/3rd_party/spdlog/details/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	amun/3rd_party/spdlog/details/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
prepare_int_buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
preprocessors_	amun/common/god.h	/^    std::vector<std::vector<PreprocessorPtr>> preprocessors_;$/;"	m	class:amunmt::God
prevHyp_	amun/common/hypothesis.h	/^    const HypothesisPtr prevHyp_;$/;"	m	class:amunmt::Hypothesis
prevHyps	amun/plugin/hypo_info.h	/^  Beam prevHyps;$/;"	m	struct:amunmt::HypoState
prevIndex_	amun/common/hypothesis.h	/^    const unsigned prevIndex_;$/;"	m	class:amunmt::Hypothesis
prevent_child_fd	amun/3rd_party/spdlog/details/os.h	/^inline void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os
previous	amun/3rd_party/utf8/checked.h	/^    uint32_t previous(octet_iterator& it, octet_iterator pass_start)$/;"	f	namespace:utf8
previous	amun/3rd_party/utf8/unchecked.h	/^        inline uint32_t previous(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
print	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(CStringRef format_str, ArgList args)$/;"	f	class:fmt
print	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(std::FILE *f, CStringRef format_str, ArgList args)$/;"	f	class:fmt
print	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(std::ostream &os, CStringRef format_str,$/;"	f	class:fmt
print	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void print(CStringRef format_str, ArgList args)$/;"	f	namespace:fmt
print	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void print(std::FILE *f, CStringRef format_str, ArgList args)$/;"	f	namespace:fmt
print	amun/3rd_party/spdlog/fmt/bundled/ostream.cc	/^	FMT_FUNC void print(std::ostream &os, CStringRef format_str, ArgList args)$/;"	f	namespace:fmt
print_colored	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print_colored(Color c, CStringRef format, ArgList args)$/;"	f	class:fmt
print_colored	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void print_colored(Color c, CStringRef format, ArgList args)$/;"	f	namespace:fmt
print_scores	amun/3rd_party/fast_align/src/fast_align.cc	/^int print_scores = 0;$/;"	v
printf	amun/3rd_party/spdlog/details/format.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f
printf	amun/3rd_party/spdlog/details/format.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f
printf	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f	namespace:fmt
printf	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f	namespace:fmt
prior	amun/3rd_party/utf8/checked.h	/^    uint32_t prior(octet_iterator& it, octet_iterator start)$/;"	f	namespace:utf8
prior	amun/3rd_party/utf8/unchecked.h	/^        uint32_t prior(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
prob	amun/3rd_party/fast_align/src/ttables.h	/^  inline double prob(const unsigned e, const unsigned f) const {$/;"	f	class:TTable
prob_align_null	amun/3rd_party/fast_align/src/fast_align.cc	/^double prob_align_null = 0.08;$/;"	v
probs_initialized_	amun/3rd_party/fast_align/src/ttables.h	/^  bool probs_initialized_; \/\/ If we can use the values in probs$/;"	m	class:TTable
process_next_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline bool spdlog::details::async_log_helper::process_next_msg(log_clock::time_point& last_pop, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
progress	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   progress = 4,  \/\/!< Log level for progress information.$/;"	e	enum:blaze::logging::LogLevel
progress_	amun/common/god.h	/^    std::shared_ptr<spdlog::logger> progress_;$/;"	m	class:amunmt::God
proxy	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^    explicit proxy(const V& x) : m_ref(x) {}$/;"	f	struct:YAML::detail::iterator_base::proxy
proxy	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  struct proxy {$/;"	s	class:YAML::detail::iterator_base
proxy	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    explicit proxy(const node_iterator_value<V>& x) : m_ref(x) {}$/;"	f	struct:YAML::detail::node_iterator_base::proxy
proxy	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  struct proxy {$/;"	s	class:YAML::detail::node_iterator_base
ptr_	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   : ptr_( it.base() )  \/\/ Pointer to the current element$/;"	f	namespace:blaze
ptr_	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   : ptr_( nullptr )  \/\/ Pointer to the current element$/;"	f	namespace:blaze
ptr_	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   : ptr_( ptr )  \/\/ Pointer to the current element$/;"	f	namespace:blaze
ptr_	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   PointerType ptr_;  \/\/!< Pointer to the current element.$/;"	m	class:blaze::DenseIterator
ptr_	amun/3rd_party/blaze/util/serialization/Archive.h	/^   std::unique_ptr<Stream> ptr_;  \/\/!< The dynamically allocated stream resource.$/;"	m	class:blaze::Archive
ptr_	amun/3rd_party/spdlog/details/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer
ptr_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer
ptr_vector	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  ptr_vector() {}$/;"	f	class:YAML::ptr_vector
ptr_vector	amun/3rd_party/yaml-cpp/ptr_vector.h	/^class ptr_vector : private YAML::noncopyable {$/;"	c	namespace:YAML
push	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline void TaskQueue::push( Task task )$/;"	f	class:blaze::threadpool::TaskQueue
push	amun/3rd_party/yaml-cpp/setting.h	/^  void push(std::unique_ptr<SettingChangeBase> pSettingChange) {$/;"	f	class:YAML::SettingChanges
pushBack	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::pushBack( PointerType p )$/;"	f	class:blaze::PtrVector
push_back	amun/3rd_party/spdlog/details/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer
push_back	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer
push_back	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void push_back(node& node, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
push_back	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void push_back(node& node, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
push_back	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::push_back(const Node& rhs) {$/;"	f	class:YAML::Node
push_back	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::push_back(const T& rhs) {$/;"	f	class:YAML::Node
push_back	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::push_back(node& node, shared_memory_holder \/* pMemory *\/) {$/;"	f	class:YAML::detail::node_data
push_back	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  void push_back(std::unique_ptr<T>&& t) {$/;"	f	class:YAML::ptr_vector
push_back	amun/common/sentences.cpp	/^void Sentences::push_back(SentencePtr sentence) {$/;"	f	class:amunmt::Sentences
push_msg	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::push_msg(details::async_log_helper::async_msg&& new_msg)$/;"	f	class:spdlog::details::async_log_helper
ql	amun/3rd_party/blaze/math/dense/QL.h	/^void ql( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& Q, DenseMatrix<MT3,SO3>& L )$/;"	f	namespace:blaze
ql_backend	amun/3rd_party/blaze/math/dense/QL.h	/^   ql_backend( MT1& A, const ElementType_<MT1>* tau )$/;"	f	namespace:blaze
qr	amun/3rd_party/blaze/math/dense/QR.h	/^void qr( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& Q, DenseMatrix<MT3,SO3>& R )$/;"	f	namespace:blaze
qr_backend	amun/3rd_party/blaze/math/dense/QR.h	/^   qr_backend( MT1& A, const ElementType_<MT1>* tau )$/;"	f	namespace:blaze
queue_mutex	amun/common/threadpool.h	/^    std::mutex queue_mutex;$/;"	m	class:amunmt::ThreadPool
r_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class r_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
rand	amun/3rd_party/blaze/util/Random.h	/^inline T rand( Args&&... args )$/;"	f	namespace:blaze
rand	amun/3rd_party/blaze/util/Random.h	/^inline T rand()$/;"	f	namespace:blaze
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,false,SF> >::randomize( Column<MT,SO,false,SF>& column ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,false,SF> >::randomize( Column<MT,SO,false,SF>& column, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,false,SF> >::randomize( Column<MT,SO,false,SF>& column, size_t nonzeros,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,false,SF> >::randomize( Column<MT,SO,false,SF>& column,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,true,SF> >::randomize( Column<MT,SO,true,SF>& column ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Column.h	/^inline void Rand< Column<MT,SO,true,SF> >::randomize( Column<MT,SO,true,SF>& column,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,SO>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,SO>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,false>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,false>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,true>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedMatrix.h	/^inline void Rand< CompressedMatrix<Type,SO> >::randomize( CompressedMatrix<Type,true>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedVector.h	/^inline void Rand< CompressedVector<Type,TF> >::randomize( CompressedVector<Type,TF>& vector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedVector.h	/^inline void Rand< CompressedVector<Type,TF> >::randomize( CompressedVector<Type,TF>& vector, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CompressedVector.h	/^inline void Rand< CompressedVector<Type,TF> >::randomize( CompressedVector<Type,TF>& vector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CustomMatrix.h	/^inline void Rand< CustomMatrix<Type,AF,PF,SO> >::randomize( CustomMatrix<Type,AF,PF,SO>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CustomMatrix.h	/^inline void Rand< CustomMatrix<Type,AF,PF,SO> >::randomize( CustomMatrix<Type,AF,PF,SO>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CustomVector.h	/^inline void Rand< CustomVector<Type,AF,PF,TF> >::randomize( CustomVector<Type,AF,PF,TF>& vector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/CustomVector.h	/^inline void Rand< CustomVector<Type,AF,PF,TF> >::randomize( CustomVector<Type,AF,PF,TF>& vector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline void Rand< DiagonalMatrix<MT,SO,DF> >::randomize( DiagonalMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline void Rand< DiagonalMatrix<MT,SO,DF> >::randomize( DiagonalMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline void Rand< DiagonalMatrix<MT,SO,DF> >::randomize( DiagonalMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline void Rand< DiagonalMatrix<MT,SO,DF> >::randomize( DiagonalMatrix<MT,SO,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DiagonalMatrix.h	/^inline void Rand< DiagonalMatrix<MT,SO,DF> >::randomize( DiagonalMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DynamicMatrix.h	/^inline void Rand< DynamicMatrix<Type,SO> >::randomize( DynamicMatrix<Type,SO>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DynamicMatrix.h	/^inline void Rand< DynamicMatrix<Type,SO> >::randomize( DynamicMatrix<Type,SO>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DynamicVector.h	/^inline void Rand< DynamicVector<Type,TF> >::randomize( DynamicVector<Type,TF>& vector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/DynamicVector.h	/^inline void Rand< DynamicVector<Type,TF> >::randomize( DynamicVector<Type,TF>& vector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline void Rand< HermitianMatrix<MT,SO,DF> >::randomize( HermitianMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline void Rand< HermitianMatrix<MT,SO,DF> >::randomize( HermitianMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline void Rand< HermitianMatrix<MT,SO,DF> >::randomize( HermitianMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline void Rand< HermitianMatrix<MT,SO,DF> >::randomize( HermitianMatrix<MT,SO,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HermitianMatrix.h	/^inline void Rand< HermitianMatrix<MT,SO,DF> >::randomize( HermitianMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HybridMatrix.h	/^inline void Rand< HybridMatrix<Type,M,N,SO> >::randomize( HybridMatrix<Type,M,N,SO>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HybridMatrix.h	/^inline void Rand< HybridMatrix<Type,M,N,SO> >::randomize( HybridMatrix<Type,M,N,SO>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HybridVector.h	/^inline void Rand< HybridVector<Type,N,TF> >::randomize( HybridVector<Type,N,TF>& vector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/HybridVector.h	/^inline void Rand< HybridVector<Type,N,TF> >::randomize( HybridVector<Type,N,TF>& vector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/LowerMatrix.h	/^inline void Rand< LowerMatrix<MT,SO,DF> >::randomize( LowerMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,false,SF> >::randomize( Row<MT,SO,false,SF>& row ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,false,SF> >::randomize( Row<MT,SO,false,SF>& row, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,false,SF> >::randomize( Row<MT,SO,false,SF>& row, size_t nonzeros,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,false,SF> >::randomize( Row<MT,SO,false,SF>& row,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,true,SF> >::randomize( Row<MT,SO,true,SF>& row ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Row.h	/^inline void Rand< Row<MT,SO,true,SF> >::randomize( Row<MT,SO,true,SF>& row,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StaticMatrix.h	/^inline void Rand< StaticMatrix<Type,M,N,SO> >::randomize( StaticMatrix<Type,M,N,SO>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StaticMatrix.h	/^inline void Rand< StaticMatrix<Type,M,N,SO> >::randomize( StaticMatrix<Type,M,N,SO>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StaticVector.h	/^inline void Rand< StaticVector<Type,N,TF> >::randomize( StaticVector<Type,N,TF>& vector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StaticVector.h	/^inline void Rand< StaticVector<Type,N,TF> >::randomize( StaticVector<Type,N,TF>& vector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyLowerMatrix.h	/^inline void Rand< StrictlyLowerMatrix<MT,SO,DF> >::randomize( StrictlyLowerMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/StrictlyUpperMatrix.h	/^inline void Rand< StrictlyUpperMatrix<MT,SO,DF> >::randomize( StrictlyUpperMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Submatrix.h	/^inline void Rand< Submatrix<MT,AF,SO,false> >::randomize( Submatrix<MT,AF,SO,false>& submatrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Submatrix.h	/^inline void Rand< Submatrix<MT,AF,SO,false> >::randomize( Submatrix<MT,AF,SO,false>& submatrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Submatrix.h	/^inline void Rand< Submatrix<MT,AF,SO,false> >::randomize( Submatrix<MT,AF,SO,false>& submatrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Submatrix.h	/^inline void Rand< Submatrix<MT,AF,SO,true> >::randomize( Submatrix<MT,AF,SO,true>& submatrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Submatrix.h	/^inline void Rand< Submatrix<MT,AF,SO,true> >::randomize( Submatrix<MT,AF,SO,true>& submatrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Subvector.h	/^inline void Rand< Subvector<VT,AF,TF,false> >::randomize( Subvector<VT,AF,TF,false>& subvector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Subvector.h	/^inline void Rand< Subvector<VT,AF,TF,false> >::randomize( Subvector<VT,AF,TF,false>& subvector, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Subvector.h	/^inline void Rand< Subvector<VT,AF,TF,false> >::randomize( Subvector<VT,AF,TF,false>& subvector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Subvector.h	/^inline void Rand< Subvector<VT,AF,TF,true> >::randomize( Subvector<VT,AF,TF,true>& subvector ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/Subvector.h	/^inline void Rand< Subvector<VT,AF,TF,true> >::randomize( Subvector<VT,AF,TF,true>& subvector,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline void Rand< SymmetricMatrix<MT,SO,DF,NF> >::randomize( SymmetricMatrix<MT,SO,DF,NF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline void Rand< SymmetricMatrix<MT,SO,DF,NF> >::randomize( SymmetricMatrix<MT,SO,DF,NF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline void Rand< SymmetricMatrix<MT,SO,DF,NF> >::randomize( SymmetricMatrix<MT,SO,DF,NF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline void Rand< SymmetricMatrix<MT,SO,DF,NF> >::randomize( SymmetricMatrix<MT,SO,DF,NF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/SymmetricMatrix.h	/^inline void Rand< SymmetricMatrix<MT,SO,DF,NF> >::randomize( SymmetricMatrix<MT,SO,DF,NF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniLowerMatrix.h	/^inline void Rand< UniLowerMatrix<MT,SO,DF> >::randomize( UniLowerMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UniUpperMatrix.h	/^inline void Rand< UniUpperMatrix<MT,SO,DF> >::randomize( UniUpperMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,SO,DF>& matrix ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,SO,DF>& matrix, FalseType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,SO,DF>& matrix, TrueType ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,SO,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,false,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,false,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,true,DF>& matrix, size_t nonzeros ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/math/UpperMatrix.h	/^inline void Rand< UpperMatrix<MT,SO,DF> >::randomize( UpperMatrix<MT,true,DF>& matrix,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand< complex<T> >::randomize( complex<T>& value ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand< complex<T> >::randomize( complex<T>& value, const T& min, const T& max ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand< complex<T> >::randomize( complex<T>& value, const T& realmin, const T& realmax,$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<T>::randomize( T& value ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<T>::randomize( T& value, T min, T max ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<double>::randomize( double& value ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<double>::randomize( double& value, double min, double max ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<float>::randomize( float& value ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<float>::randomize( float& value, float min, float max ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<long double>::randomize( long double& value ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void Rand<long double>::randomize( long double& value, long double min, long double max ) const$/;"	f	class:blaze::Rand
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void randomize( T& value )$/;"	f	namespace:blaze
randomize	amun/3rd_party/blaze/util/Random.h	/^inline void randomize( T& value, Args&&... args )$/;"	f	namespace:blaze
range_end	amun/3rd_party/utf8/checked.h	/^      octet_iterator range_end;$/;"	m	class:utf8::iterator
range_start	amun/3rd_party/utf8/checked.h	/^      octet_iterator range_start;$/;"	m	class:utf8::iterator
raw	amun/3rd_party/spdlog/details/log_msg.h	/^    fmt::MemoryWriter raw;$/;"	m	struct:spdlog::details::log_msg
rawMemory_	amun/3rd_party/blaze/util/MemoryPool.h	/^      FreeObject* rawMemory_;  \/\/!< Allocated memory pool of the block.$/;"	m	struct:blaze::MemoryPool::Block
rdstate	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline std::ios_base::iostate Archive<Stream>::rdstate() const$/;"	f	class:blaze::Archive
read	amun/3rd_party/blaze/util/serialization/Archive.h	/^   Archive<Stream>::read( Type* array, size_t count )$/;"	f	class:blaze::Archive
ready	amun/3rd_party/blaze/util/ThreadPool.h	/^inline size_t ThreadPool<TT,MT,LT,CT>::ready() const$/;"	f	class:blaze::ThreadPool
real	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline typename HermitianProxy<MT>::ValueType HermitianProxy<MT>::real() const$/;"	f	class:blaze::HermitianProxy
real	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void HermitianProxy<MT>::real( ValueType value ) const$/;"	f	class:blaze::HermitianProxy
real	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline typename HermitianValue<MT>::ValueType HermitianValue<MT>::real() const$/;"	f	class:blaze::HermitianValue
real	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::real( ValueType value ) const$/;"	f	class:blaze::HermitianValue
real	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline typename NumericProxy<MT>::ValueType NumericProxy<MT>::real() const$/;"	f	class:blaze::NumericProxy
real	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void NumericProxy<MT>::real( ValueType value ) const$/;"	f	class:blaze::NumericProxy
real	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline typename SymmetricValue<MT>::ValueType SymmetricValue<MT>::real() const$/;"	f	class:blaze::SymmetricValue
real	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::real( ValueType value ) const$/;"	f	class:blaze::SymmetricValue
real	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline typename UniLowerProxy<MT>::ValueType UniLowerProxy<MT>::real() const$/;"	f	class:blaze::UniLowerProxy
real	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void UniLowerProxy<MT>::real( ValueType value ) const$/;"	f	class:blaze::UniLowerProxy
real	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline typename UniLowerValue<MT>::ValueType UniLowerValue<MT>::real() const$/;"	f	class:blaze::UniLowerValue
real	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void UniLowerValue<MT>::real( ValueType value ) const$/;"	f	class:blaze::UniLowerValue
real	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline typename UniUpperProxy<MT>::ValueType UniUpperProxy<MT>::real() const$/;"	f	class:blaze::UniUpperProxy
real	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void UniUpperProxy<MT>::real( ValueType value ) const$/;"	f	class:blaze::UniUpperProxy
real	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline typename UniUpperValue<MT>::ValueType UniUpperValue<MT>::real() const$/;"	f	class:blaze::UniUpperValue
real	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void UniUpperValue<MT>::real( ValueType value ) const$/;"	f	class:blaze::UniUpperValue
real	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Real,SO> real( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Real,SO>& real( const DMatForEachExpr<MT,Real,SO>& dm )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Real,TF> real( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Real,TF>& real( const DVecForEachExpr<VT,Real,TF>& dv )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Real,SO> real( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Real,SO>& real( const SMatForEachExpr<MT,Real,SO>& sm )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Real,TF> real( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Real,TF>& real( const SVecForEachExpr<VT,Real,TF>& sv )$/;"	f	namespace:blaze
real	amun/3rd_party/blaze/math/functors/Real.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( real( a ) )$/;"	f	struct:blaze::Real
real	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^inline typename ComplexProxy<PT,CT>::ValueType ComplexProxy<PT,CT>::real() const$/;"	f	class:blaze::ComplexProxy
real	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^inline void ComplexProxy<PT,CT>::real( ValueType value ) const$/;"	f	class:blaze::ComplexProxy
real	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( real( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
real_t	amun/3rd_party/blaze/config/Precision.h	/^typedef float  real_t;$/;"	t	namespace:blaze
rebind	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   struct rebind$/;"	s	class:blaze::AlignedAllocator
red	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string red        = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink
ref	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const node_ref* ref() const { return m_pRef.get(); }$/;"	f	class:YAML::detail::node
reference	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DiagonalMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::HermitianMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::LowerMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
reference	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SymmetricMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::UniLowerMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::UniUpperMatrix::Iterator
reference	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::UpperMatrix::Iterator
reference	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DenseIterator
reference	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:ConstIterator
reference	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:ConstIterator
reference	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
reference	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Column::ColumnIterator
reference	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Row::RowIterator
reference	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
reference	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
reference	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
reference	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ReferenceType     reference;          \/\/!< Reference return type.$/;"	t	class:blaze::Subvector::SubvectorIterator
reference	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef Reference       reference;        \/\/!< Type of a reference to the allocated values.$/;"	t	class:blaze::AlignedAllocator
reference	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef ReferenceType                    reference;          \/\/!< Reference return type.$/;"	t	class:blaze::PtrIterator
reference	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ReferenceType              reference;          \/\/!< Reference return type.$/;"	t	class:blaze::PtrVector::CastIterator
reference	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ReferenceType              reference;          \/\/!< Reference return type.$/;"	t	class:blaze::PtrVector::ConstCastIterator
reference	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ReferenceType         reference;           \/\/!< Reference to a non-const object.$/;"	t	class:blaze::PtrVector
reference	amun/3rd_party/fast_align/src/array2d.h	/^  typedef typename std::vector<T>::reference reference;$/;"	t	class:Array2D
register_logger	amun/3rd_party/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog::details::registry_t
register_logger	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog
registry	amun/3rd_party/spdlog/details/registry.h	/^typedef registry_t<spdlog::details::null_mutex> registry;$/;"	t	namespace:spdlog::details
registry	amun/3rd_party/spdlog/details/registry.h	/^typedef registry_t<std::mutex> registry;$/;"	t	namespace:spdlog::details
registry_t	amun/3rd_party/spdlog/details/registry.h	/^    registry_t<Mutex>() {}$/;"	f	class:spdlog::details::registry_t
registry_t	amun/3rd_party/spdlog/details/registry.h	/^template <class Mutex> class registry_t$/;"	c	namespace:spdlog::details
reinterpret_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline S<To> reinterpret_pointer_cast( S<From> ptr )$/;"	f	namespace:blaze
reinterpret_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline To* reinterpret_pointer_cast( From* ptr )$/;"	f	namespace:blaze
release	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::release( CastIterator<C> pos )$/;"	f	class:blaze::PtrVector
release	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::Iterator PtrVector<T,D,G>::release( Iterator pos )$/;"	f	class:blaze::PtrVector
releaseBack	amun/3rd_party/blaze/util/PtrVector.h	/^inline void PtrVector<T,D,G>::releaseBack()$/;"	f	class:blaze::PtrVector
remove	amun/3rd_party/spdlog/details/os.h	/^inline int remove(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
remove	amun/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node_data::remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
remove	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  bool remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
remove	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  bool remove(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
remove	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
remove	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool remove(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
remove	amun/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::remove(const Key& key) {$/;"	f	class:YAML::Node
remove	amun/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::remove(const Node& key) {$/;"	f	class:YAML::Node
remove	amun/3rd_party/yaml-cpp/node_data.cpp	/^bool node_data::remove(node& key, shared_memory_holder \/* pMemory *\/) {$/;"	f	class:YAML::detail::node_data
remove_sink	amun/3rd_party/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
rename	amun/3rd_party/spdlog/details/os.h	/^inline int rename(const filename_t& filename1, const filename_t& filename2)$/;"	f	namespace:spdlog::details::os
reopen	amun/3rd_party/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
replace_invalid	amun/3rd_party/utf8/checked.h	/^    inline output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out)$/;"	f	namespace:utf8
replace_invalid	amun/3rd_party/utf8/checked.h	/^    output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out, uint32_t replacement)$/;"	f	namespace:utf8
report_unhandled_arg	amun/3rd_party/spdlog/details/format.cc	/^			void report_unhandled_arg()$/;"	f	class:fmt::__anon30::PrecisionHandler
report_unhandled_arg	amun/3rd_party/spdlog/details/format.cc	/^			void report_unhandled_arg()$/;"	f	class:fmt::__anon30::WidthHandler
report_unhandled_arg	amun/3rd_party/spdlog/details/format.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::ArgVisitor
report_unhandled_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::ArgVisitor
report_unhandled_arg	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::PrecisionHandler
report_unhandled_arg	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::WidthHandler
report_unknown_type	amun/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::internal::report_unknown_type(char code, const char *type)$/;"	f	class:fmt::internal
report_unknown_type	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^	FMT_FUNC void internal::report_unknown_type(char code, const char *type)$/;"	f	class:fmt::internal
res_	amun/3rd_party/fast_align/src/atools.cc	/^  Array2D<bool> res_;  \/\/ refined alignment$/;"	m	struct:RefineCommand	file:
reserve	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline void DiagonalMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::DiagonalMatrix
reserve	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::DiagonalMatrix
reserve	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::DiagonalMatrix
reserve	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline void HermitianMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::HermitianMatrix
reserve	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::HermitianMatrix
reserve	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::HermitianMatrix
reserve	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline void LowerMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::LowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::LowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::LowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline void StrictlyLowerMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::StrictlyLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::StrictlyLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::StrictlyLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline void StrictlyUpperMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::StrictlyUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::StrictlyUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::StrictlyUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::reserve( size_t elements )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,true>::reserve( size_t elements )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::reserve( size_t nonzeros )$/;"	f	class:blaze::SymmetricMatrix
reserve	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline void UniLowerMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::UniLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::UniLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::UniLowerMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline void UniUpperMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::UniUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::UniUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::UniUpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline void UpperMatrix<MT,SO,true>::reserve( size_t elements )$/;"	f	class:blaze::UpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::UpperMatrix
reserve	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::UpperMatrix
reserve	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void reserve( size_t i, size_t nonzeros ) {$/;"	f	class:blaze::SMatTransposer
reserve	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void reserve( size_t nonzeros ) {$/;"	f	class:blaze::SMatTransposer
reserve	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline void reserve( size_t nonzeros ) {$/;"	f	class:blaze::SVecTransposer
reserve	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::reserve( size_t n ) const$/;"	f	class:blaze::DenseMatrixProxy
reserve	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::reserve( size_t n ) const$/;"	f	class:blaze::DenseVectorProxy
reserve	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::reserve( size_t i, size_t n ) const$/;"	f	class:blaze::SparseMatrixProxy
reserve	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::reserve( size_t n ) const$/;"	f	class:blaze::SparseMatrixProxy
reserve	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::reserve( size_t n ) const$/;"	f	class:blaze::SparseVectorProxy
reserve	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::reserve( size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reserve	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::reserve( size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reserve	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,SO>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reserve	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,true>::reserve( size_t j, size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reserve	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^void CompressedVector<Type,TF>::reserve( size_t n )$/;"	f	class:blaze::CompressedVector
reserve	amun/3rd_party/blaze/math/views/column/Sparse.h	/^void Column<MT,false,false,false>::reserve( size_t n )$/;"	f	class:blaze::Column
reserve	amun/3rd_party/blaze/math/views/column/Sparse.h	/^void Column<MT,false,false,true>::reserve( size_t n )$/;"	f	class:blaze::Column
reserve	amun/3rd_party/blaze/math/views/column/Sparse.h	/^void Column<MT,true,false,SF>::reserve( size_t n )$/;"	f	class:blaze::Column
reserve	amun/3rd_party/blaze/math/views/row/Sparse.h	/^void Row<MT,false,false,false>::reserve( size_t n )$/;"	f	class:blaze::Row
reserve	amun/3rd_party/blaze/math/views/row/Sparse.h	/^void Row<MT,false,false,true>::reserve( size_t n )$/;"	f	class:blaze::Row
reserve	amun/3rd_party/blaze/math/views/row/Sparse.h	/^void Row<MT,true,false,SF>::reserve( size_t n )$/;"	f	class:blaze::Row
reserve	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::Submatrix
reserve	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::reserve( size_t nonzeros )$/;"	f	class:blaze::Submatrix
reserve	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,false,false>::reserve( size_t i, size_t nonzeros )$/;"	f	class:blaze::Submatrix
reserve	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,true,false>::reserve( size_t j, size_t nonzeros )$/;"	f	class:blaze::Submatrix
reserve	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^void Subvector<VT,AF,TF,false>::reserve( size_t n )$/;"	f	class:blaze::Subvector
reserve	amun/3rd_party/blaze/util/InputString.h	/^inline void InputString::reserve( SizeType newSize )$/;"	f	class:blaze::InputString
reserve	amun/3rd_party/blaze/util/PtrVector.h	/^void PtrVector<T,D,G>::reserve( SizeType newCapacity )$/;"	f	class:blaze::PtrVector
reserve	amun/3rd_party/spdlog/details/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer
reserve	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer
reserve	amun/gpu/mblas/vector.h	/^  void reserve(unsigned newSize)$/;"	f	class:amunmt::GPU::mblas::Vector
reserveElements	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,SO>::reserveElements( size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reserveElements	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,true>::reserveElements( size_t nonzeros )$/;"	f	class:blaze::CompressedMatrix
reset	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void reset( DiagonalMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline void reset( DiagonalMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void reset( HermitianMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline void reset( HermitianMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void reset( LowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline void reset( LowerMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline void reset( StrictlyLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline void reset( StrictlyLowerMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline void reset( StrictlyUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline void reset( StrictlyUpperMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void reset( SymmetricMatrix<MT,SO,DF,NF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline void reset( SymmetricMatrix<MT,SO,DF,NF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void reset( UniLowerMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline void reset( UniLowerMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void reset( UniUpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline void reset( UniUpperMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void reset( UpperMatrix<MT,SO,DF>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline void reset( UpperMatrix<MT,SO,DF>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline void DiagonalMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::DiagonalMatrix
reset	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline void DiagonalMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::DiagonalMatrix
reset	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^inline void reset( const DiagonalProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::DiagonalMatrix
reset	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::DiagonalMatrix
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline void HermitianMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::HermitianMatrix
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline void HermitianMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::HermitianMatrix
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void HermitianProxy<MT>::reset() const$/;"	f	class:blaze::HermitianProxy
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^inline void reset( const HermitianProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::reset() const$/;"	f	class:blaze::HermitianValue
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void reset( const HermitianValue<MT>& value )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::HermitianMatrix
reset	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::HermitianMatrix
reset	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline void LowerMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::LowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline void LowerMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::LowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^inline void reset( const LowerProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::LowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::LowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline void StrictlyLowerMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^inline void StrictlyLowerMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::StrictlyLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::StrictlyLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^inline void reset( const StrictlyLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline void StrictlyUpperMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^inline void StrictlyUpperMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::StrictlyUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::StrictlyUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^inline void reset( const StrictlyUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::reset( size_t i )$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::reset()$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,true>::reset( size_t i )$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,true>::reset()$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline void reset( const NonNumericProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void NumericProxy<MT>::reset() const$/;"	f	class:blaze::NumericProxy
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^inline void reset( const NumericProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::reset( size_t i )$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::reset()$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::reset( size_t i )$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::reset()$/;"	f	class:blaze::SymmetricMatrix
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::reset() const$/;"	f	class:blaze::SymmetricValue
reset	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void reset( const SymmetricValue<MT>& value )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline void UniLowerMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::UniLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^inline void UniLowerMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::UniLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::UniLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::UniLowerMatrix
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void UniLowerProxy<MT>::reset() const$/;"	f	class:blaze::UniLowerProxy
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^inline void reset( const UniLowerProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void UniLowerValue<MT>::reset() const$/;"	f	class:blaze::UniLowerValue
reset	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^inline void reset( const UniLowerValue<MT>& value )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline void UniUpperMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::UniUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^inline void UniUpperMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::UniUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::UniUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::UniUpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void UniUpperProxy<MT>::reset() const$/;"	f	class:blaze::UniUpperProxy
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^inline void reset( const UniUpperProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void UniUpperValue<MT>::reset() const$/;"	f	class:blaze::UniUpperValue
reset	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^inline void reset( const UniUpperValue<MT>& value )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline void UpperMatrix<MT,SO,true>::reset( size_t i )$/;"	f	class:blaze::UpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline void UpperMatrix<MT,SO,true>::reset()$/;"	f	class:blaze::UpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::reset( size_t i )$/;"	f	class:blaze::UpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::reset()$/;"	f	class:blaze::UpperMatrix
reset	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^inline void reset( const UpperProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void reset() {$/;"	f	class:blaze::DMatTransposer
reset	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^inline void reset( DMatTransposer<MT,SO>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void reset() {$/;"	f	class:blaze::DVecTransposer
reset	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^inline void reset( DVecTransposer<VT,TF>& v )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   inline void reset() {$/;"	f	class:blaze::SMatTransposer
reset	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^inline void reset( SMatTransposer<MT,SO>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   inline void reset() {$/;"	f	class:blaze::SVecTransposer
reset	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^inline void reset( SVecTransposer<VT,TF>& v )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const DenseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::reset( size_t i ) const$/;"	f	class:blaze::DenseMatrixProxy
reset	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::reset() const$/;"	f	class:blaze::DenseMatrixProxy
reset	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::reset() const$/;"	f	class:blaze::DenseVectorProxy
reset	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const SparseMatrixProxy<PT,MT>& proxy, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::reset( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
reset	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::reset() const$/;"	f	class:blaze::SparseMatrixProxy
reset	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void reset( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::reset() const$/;"	f	class:blaze::SparseVectorProxy
reset	amun/3rd_party/blaze/math/shims/Reset.h	/^BLAZE_ALWAYS_INLINE void reset( Type& resettable )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::reset( size_t i )$/;"	f	class:blaze::CompressedMatrix
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::reset()$/;"	f	class:blaze::CompressedMatrix
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::reset( size_t j )$/;"	f	class:blaze::CompressedMatrix
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::reset()$/;"	f	class:blaze::CompressedMatrix
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void reset( CompressedMatrix<Type,SO>& m )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void reset( CompressedMatrix<Type,SO>& m, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::reset()$/;"	f	class:blaze::CompressedVector
reset	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void reset( CompressedVector<Type,TF>& v )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline void reset( const MatrixAccessProxy<MT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline void reset( const VectorAccessProxy<VT>& proxy )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/Column.h	/^inline void reset( Column<MT,SO,DF,SF>& column )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/Row.h	/^inline void reset( Row<MT,SO,DF,SF>& row )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline void reset( Submatrix<MT,AF,SO,DF>& sm )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline void reset( Submatrix<MT,AF,SO,DF>& sm, size_t i )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/Subvector.h	/^inline void reset( Subvector<VT,AF,TF,DF>& sv )$/;"	f	namespace:blaze
reset	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::reset()$/;"	f	class:blaze::Column
reset	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::reset()$/;"	f	class:blaze::Column
reset	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::reset()$/;"	f	class:blaze::Column
reset	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::reset()$/;"	f	class:blaze::Row
reset	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::reset()$/;"	f	class:blaze::Row
reset	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::reset()$/;"	f	class:blaze::Row
reset	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::reset( size_t i )$/;"	f	class:blaze::Submatrix
reset	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::reset()$/;"	f	class:blaze::Submatrix
reset	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::reset( size_t j )$/;"	f	class:blaze::Submatrix
reset	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::reset()$/;"	f	class:blaze::Submatrix
reset	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::reset()$/;"	f	class:blaze::Subvector
reset	amun/3rd_party/blaze/util/timing/Timer.h	/^inline void Timer<TP>::reset()$/;"	f	class:blaze::timing::Timer
reset	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset      = "\\033[00m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reset	amun/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::reset(const YAML::Node& rhs) {$/;"	f	class:YAML::Node
resetLower	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::resetLower()$/;"	f	class:blaze::StrictlyUpperMatrix
resetLower	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::resetLower()$/;"	f	class:blaze::UniUpperMatrix
resetLower	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::resetLower()$/;"	f	class:blaze::UpperMatrix
resetNonDiagonal	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::resetNonDiagonal()$/;"	f	class:blaze::DiagonalMatrix
resetUpper	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::resetUpper()$/;"	f	class:blaze::LowerMatrix
resetUpper	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::resetUpper()$/;"	f	class:blaze::StrictlyLowerMatrix
resetUpper	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::resetUpper()$/;"	f	class:blaze::UniLowerMatrix
reset_map	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::reset_map() {$/;"	f	class:YAML::detail::node_data
reset_sequence	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::reset_sequence() {$/;"	f	class:YAML::detail::node_data
resize	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^void DiagonalMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::DiagonalMatrix
resize	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^void DiagonalMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::DiagonalMatrix
resize	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^void HermitianMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::HermitianMatrix
resize	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^void HermitianMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::HermitianMatrix
resize	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^void LowerMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::LowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^void LowerMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::LowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^void StrictlyLowerMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyLowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^void StrictlyLowerMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyLowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^void StrictlyUpperMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyUpperMatrix
resize	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^void StrictlyUpperMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::StrictlyUpperMatrix
resize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^void SymmetricMatrix<MT,SO,true,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
resize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^void SymmetricMatrix<MT,SO,true,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
resize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^void SymmetricMatrix<MT,SO,false,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
resize	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^void SymmetricMatrix<MT,SO,false,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::SymmetricMatrix
resize	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^void UniLowerMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UniLowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^void UniLowerMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UniLowerMatrix
resize	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^void UniUpperMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UniUpperMatrix
resize	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^void UniUpperMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UniUpperMatrix
resize	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^void UpperMatrix<MT,SO,true>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UpperMatrix
resize	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^void UpperMatrix<MT,SO,false>::resize( size_t n, bool preserve )$/;"	f	class:blaze::UpperMatrix
resize	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void resize( Matrix<MT,SO>& matrix, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void resize( Vector<VT,TF>& vector, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void resize( const DenseMatrixProxy<PT,MT>& proxy, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::resize( size_t m, size_t n, bool preserve ) const$/;"	f	class:blaze::DenseMatrixProxy
resize	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void resize( const DenseVectorProxy<PT,VT>& proxy, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::resize( size_t n, bool preserve ) const$/;"	f	class:blaze::DenseVectorProxy
resize	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE void resize( const SparseMatrixProxy<PT,MT>& proxy, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::resize( size_t m, size_t n, bool preserve ) const$/;"	f	class:blaze::SparseMatrixProxy
resize	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE void resize( const SparseVectorProxy<PT,VT>& proxy, size_t n, bool preserve )$/;"	f	namespace:blaze
resize	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::resize( size_t n, bool preserve ) const$/;"	f	class:blaze::SparseVectorProxy
resize	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::resize( size_t n, bool block )$/;"	f	class:blaze::ThreadBackend
resize	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,SO>::resize( size_t m, size_t n, bool preserve )$/;"	f	class:blaze::CompressedMatrix
resize	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,true>::resize( size_t m, size_t n, bool preserve )$/;"	f	class:blaze::CompressedMatrix
resize	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::resize( size_t n, bool preserve )$/;"	f	class:blaze::CompressedVector
resize	amun/3rd_party/blaze/util/ThreadPool.h	/^void ThreadPool<TT,MT,LT,CT>::resize( size_t n, bool block )$/;"	f	class:blaze::ThreadPool
resize	amun/3rd_party/fast_align/src/array2d.h	/^  void resize(unsigned w, unsigned h, const T& d = T()) {$/;"	f	class:Array2D
resize	amun/3rd_party/spdlog/details/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer
resize	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer
resize	amun/fpga/array.h	/^  virtual void resize(size_t newSize)$/;"	f	class:amunmt::FPGA::Array
resize	amun/gpu/mblas/vector.h	/^  void resize(unsigned newSize)$/;"	f	class:amunmt::GPU::mblas::Vector
resize_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^   resize_backend( Matrix<MT,SO>& matrix, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
resize_backend	amun/3rd_party/blaze/math/expressions/Vector.h	/^   resize_backend( Vector<VT,TF>& vector, size_t n, bool preserve )$/;"	f	namespace:blaze
resize_backend	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^   resize_backend( const DenseMatrixProxy<PT,MT>& proxy, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
resize_backend	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^   resize_backend( const DenseVectorProxy<PT,VT>& proxy, size_t n, bool preserve )$/;"	f	namespace:blaze
resize_backend	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   resize_backend( const SparseMatrixProxy<PT,MT>& proxy, size_t m, size_t n, bool preserve )$/;"	f	namespace:blaze
restore	amun/3rd_party/yaml-cpp/setting.h	/^  void restore() {$/;"	f	class:YAML::SettingChanges
restore	amun/3rd_party/yaml-cpp/setting.h	/^  void restore(const Setting<T>& oldSetting) { m_value = oldSetting.get(); }$/;"	f	class:YAML::Setting
restricted_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   const bool restricted_;  \/\/!< Access flag for the accessed matrix element.$/;"	m	class:blaze::DiagonalProxy
restricted_	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   const bool restricted_;  \/\/!< Access flag for the accessed matrix element.$/;"	m	class:blaze::LowerProxy
restricted_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   const bool restricted_;  \/\/!< Access flag for the accessed matrix element.$/;"	m	class:blaze::StrictlyLowerProxy
restricted_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   const bool restricted_;  \/\/!< Access flag for the accessed matrix element.$/;"	m	class:blaze::StrictlyUpperProxy
restricted_	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   const bool restricted_;  \/\/!< Access flag for the accessed matrix element.$/;"	m	class:blaze::UpperProxy
result	amun/python/test2.py	/^    result=ws.recv()$/;"	v
returnAttentionWeights_	amun/common/base_best_hyps.h	/^    const bool returnAttentionWeights_;$/;"	m	class:amunmt::BaseBestHyps
returnNBestList_	amun/common/god.h	/^    bool returnNBestList_;$/;"	m	class:amunmt::God
return_type	amun/3rd_party/yaml-cpp/node/impl.h	/^  typedef const T& return_type;$/;"	t	struct:YAML::detail::to_value_t
return_type	amun/3rd_party/yaml-cpp/node/impl.h	/^  typedef std::string return_type;$/;"	t	struct:YAML::detail::to_value_t
reverse	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse    = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink
rhs_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the addition expression$/;"	f	class:blaze::DMatDMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatDMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the subtraction expression$/;"	f	class:blaze::DMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::DMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::DMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::DMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::DMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the addition expression$/;"	f	class:blaze::DMatTDMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the addition expression.$/;"	m	class:blaze::DMatTDMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the subtraction expression$/;"	f	class:blaze::DMatTDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::DMatTDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::DMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::DMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::DMatTSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::DMatTSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the addition expression$/;"	f	class:blaze::DVecDVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the addition expression.$/;"	m	class:blaze::DVecDVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the cross product expression$/;"	f	class:blaze::DVecDVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the cross product expression.$/;"	m	class:blaze::DVecDVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the division expression$/;"	f	class:blaze::DVecDVecDivExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the division expression.$/;"	m	class:blaze::DVecDVecDivExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f	class:blaze::DVecDVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::DVecDVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the subtraction expression$/;"	f	class:blaze::DVecDVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the subtraction expression.$/;"	m	class:blaze::DVecDVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the addition expression$/;"	f	class:blaze::DVecSVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the addition expression.$/;"	m	class:blaze::DVecSVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the cross product expression$/;"	f	class:blaze::DVecSVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the cross product expression.$/;"	m	class:blaze::DVecSVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::DVecSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::DVecSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the subtraction expression$/;"	f	class:blaze::DVecSVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the subtraction expression.$/;"	m	class:blaze::DVecSVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the subtraction expression$/;"	f	class:blaze::SMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::SMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::SMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::SMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::SMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	m	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the subtraction expression$/;"	f	class:blaze::SMatTDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::SMatTDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::SMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::SMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	class:blaze::SMatTSMatMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	class:blaze::SMatTSMatMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::SMatTSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::SMatTSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the cross product expression$/;"	f	class:blaze::SVecDVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the cross product expression.$/;"	m	class:blaze::SVecDVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the division expression$/;"	f	class:blaze::SVecDVecDivExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the division expression.$/;"	m	class:blaze::SVecDVecDivExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f	class:blaze::SVecDVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::SVecDVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the subtraction expression$/;"	f	class:blaze::SVecDVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the subtraction expression.$/;"	m	class:blaze::SVecDVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the addition expression$/;"	f	class:blaze::SVecSVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the addition expression.$/;"	m	class:blaze::SVecSVecAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the cross product expression$/;"	f	class:blaze::SVecSVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the cross product expression.$/;"	m	class:blaze::SVecSVecCrossExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::SVecSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the subtraction expression$/;"	f	class:blaze::SVecSVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the subtraction expression.$/;"	m	class:blaze::SVecSVecSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::SVecTSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecTSVecMultExpr
rhs_	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::TDMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::TDMatSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::TDMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TDMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the subtraction expression$/;"	f	class:blaze::TSMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the subtraction expression.$/;"	m	class:blaze::TSMatDMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::TSMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TSMatSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side dense matrix of the multiplication expression$/;"	f
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side dense matrix of the multiplication expression.$/;"	v
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the addition expression$/;"	f	class:blaze::TSMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the addition expression.$/;"	m	class:blaze::TSMatTSMatAddExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the multiplication expression$/;"	f	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the multiplication expression.$/;"	m	namespace:blaze
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^      , rhs_( rhs )  \/\/ Right-hand side sparse matrix of the subtraction expression$/;"	f	class:blaze::TSMatTSMatSubExpr
rhs_	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   RightOperand rhs_;  \/\/!< Right-hand side sparse matrix of the subtraction expression.$/;"	m	class:blaze::TSMatTSMatSubExpr
right_	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DMatDMatAddExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DMatDMatSubExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DVecDVecAddExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DVecDVecDivExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DVecDVecMultExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:blaze::DVecDVecSubExpr::ConstIterator
right_	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      RightIteratorType right_;  \/\/!< Iterator to the current right-hand side element.$/;"	m	class:ConstIterator
rng_	amun/3rd_party/blaze/util/Random.h	/^   static Type     rng_;   \/\/!< The mersenne twister variate generator.$/;"	m	class:blaze::Random
rnn1_	amun/cpu/dl4mt/decoder.h	/^    RNNHidden<Weights::DecInit, Weights::GRU> rnn1_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
rnn1_	amun/cpu/nematus/decoder.h	/^    RNNHidden<Weights::DecInit, Weights::GRU> rnn1_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
rnn1_	amun/fpga/decoder.h	/^  RNNHidden<Weights::DecInit, Weights::DecGRU1> rnn1_;$/;"	m	class:amunmt::FPGA::Decoder
rnn1_	amun/gpu/dl4mt/decoder.h	/^    RNNHidden<Weights::DecInit> rnn1_;$/;"	m	class:amunmt::GPU::Decoder
rnn2_	amun/cpu/dl4mt/decoder.h	/^    RNNFinal<Weights::DecGRU2> rnn2_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
rnn2_	amun/cpu/nematus/decoder.h	/^    RNNFinal<Weights::DecGRU2, Weights::Transition> rnn2_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
rnn2_	amun/fpga/decoder.h	/^  RNNFinal<Weights::DecGRU2> rnn2_;$/;"	m	class:amunmt::FPGA::Decoder
rnn2_	amun/gpu/dl4mt/decoder.h	/^    RNNFinal rnn2_;$/;"	m	class:amunmt::GPU::Decoder
rotating_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    rotating_file_sink(const filename_t &base_filename,$/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^class rotating_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
rotating_file_sink_mt	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<std::mutex> rotating_file_sink_mt;$/;"	t	namespace:spdlog::sinks
rotating_file_sink_st	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<details::null_mutex>rotating_file_sink_st;$/;"	t	namespace:spdlog::sinks
rotating_logger_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
rotating_logger_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
row	amun/3rd_party/blaze/math/views/Row.h	/^   row( Matrix<MT,SO>& matrix, size_t index )$/;"	f	namespace:blaze
row	amun/3rd_party/blaze/math/views/Row.h	/^   row( const Matrix<MT,SO>& matrix, size_t index )$/;"	f	namespace:blaze
row	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t row() const { return m_row; }$/;"	f	class:YAML::ostream_wrapper
rowMajor	amun/3rd_party/blaze/math/StorageOrder.h	/^const bool rowMajor = false;$/;"	m	namespace:blaze
rowVector	amun/3rd_party/blaze/math/TransposeFlag.h	/^const bool rowVector = true;$/;"	m	namespace:blaze
row_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::DiagonalMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      size_t row_;     \/\/!< The current row index of the iterator.$/;"	m	class:blaze::HermitianMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::LowerMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::StrictlyLowerMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::StrictlyUpperMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      size_t      row_;     \/\/!< The current row index of the iterator.$/;"	m	class:blaze::SymmetricMatrix::MatrixIterator
row_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      size_t row_;     \/\/!< The current row index of the iterator.$/;"	m	class:blaze::SymmetricMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NumericProxy.h	/^   size_t row_;     \/\/!< Row index of the accessed matrix element.$/;"	m	class:blaze::NumericProxy
row_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::UniLowerMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   size_t row_;           \/\/!< Row index of the accessed matrix element.$/;"	m	class:blaze::UniLowerProxy
row_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::UniUpperMatrix::Iterator
row_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   size_t row_;           \/\/!< Row index of the accessed matrix element.$/;"	m	class:blaze::UniUpperProxy
row_	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      size_t row_;     \/\/!< The current row-index of the iterator.$/;"	m	class:blaze::UpperMatrix::Iterator
row_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      size_t       row_;     \/\/!< The current row index.$/;"	m	class:blaze::Column::ColumnIterator
row_	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      size_t       row_;  \/\/!< Index of the according row.$/;"	m	class:blaze::Column::ColumnElement
row_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      size_t       row_;     \/\/!< The current row index.$/;"	m	class:blaze::Row::RowIterator
row_	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   const size_t row_;     \/\/!< The index of the row in the matrix.$/;"	m	class:blaze::Row
row_	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   const size_t row_;     \/\/!< The first row of the submatrix.$/;"	m	class:blaze::Submatrix
rows	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t rows( const DenseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
rows	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::rows() const$/;"	f	class:blaze::DenseMatrixProxy
rows	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^BLAZE_ALWAYS_INLINE size_t rows( const SparseMatrixProxy<PT,MT>& proxy )$/;"	f	namespace:blaze
rows	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline size_t SparseMatrixProxy<PT,MT>::rows() const$/;"	f	class:blaze::SparseMatrixProxy
rows_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint64_t rows_;         \/\/!< The number of rows of the matrix.$/;"	m	class:blaze::MatrixSerializer
rq	amun/3rd_party/blaze/math/dense/RQ.h	/^void rq( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& R, DenseMatrix<MT3,SO3>& Q )$/;"	f	namespace:blaze
rq_backend	amun/3rd_party/blaze/math/dense/RQ.h	/^   rq_backend( MT1& A, const ElementType_<MT1>* tau )$/;"	f	namespace:blaze
run	amun/3rd_party/blaze/util/Thread.h	/^void Thread<TT,MT,LT,CT>::run()$/;"	f	class:blaze::Thread
s_introFinalState	amun/3rd_party/yaml-cpp/stream.cpp	/^static bool s_introFinalState[] = {$/;"	m	namespace:YAML	file:
s_introTransitions	amun/3rd_party/yaml-cpp/stream.cpp	/^static UtfIntroState s_introTransitions[][uictMax] = {$/;"	m	namespace:YAML	file:
s_introUngetCount	amun/3rd_party/yaml-cpp/stream.cpp	/^static char s_introUngetCount[][uictMax] = {$/;"	m	namespace:YAML	file:
safe_prob	amun/3rd_party/fast_align/src/ttables.h	/^  inline double safe_prob(const int& e, const int& f) const {$/;"	f	class:TTable
scalar	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const std::string& scalar() const { return m_pRef->scalar(); }$/;"	f	class:YAML::detail::node
scalar	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const std::string& scalar() const { return m_scalar; }$/;"	f	class:YAML::detail::node_data
scalar	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const std::string& scalar() const { return m_pData->scalar(); }$/;"	f	class:YAML::detail::node_ref
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the division expression$/;"	f	class:blaze::DMatScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      RightOperand scalar_;    \/\/!< Scalar of the multiplication expression.$/;"	m	class:blaze::DMatScalarDivExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the division expression.$/;"	m	class:blaze::DMatScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the multiplication expression$/;"	f	class:blaze::DMatScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      RightOperand scalar_;    \/\/!< Scalar of the multiplication expression.$/;"	m	class:blaze::DMatScalarMultExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::DMatScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the division expression$/;"	f	class:blaze::DVecScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      RightOperand scalar_;    \/\/!< Scalar of the division expression.$/;"	m	class:blaze::DVecScalarDivExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the division expression.$/;"	m	class:blaze::DVecScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the multiplication expression$/;"	f	class:blaze::DVecScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      RightOperand scalar_;    \/\/!< Scalar of the multiplication expression.$/;"	m	class:blaze::DVecScalarMultExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::DVecScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the division expression$/;"	f	class:blaze::SMatScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      RightOperand scalar_;  \/\/!< Right-hand side scalar of the division expression.$/;"	m	class:blaze::SMatScalarDivExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the division expression.$/;"	m	class:blaze::SMatScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the multiplication expression$/;"	f	class:blaze::SMatScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::SMatScalarMultExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::SMatScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the division expression$/;"	f	class:blaze::SVecScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      RightOperand scalar_;  \/\/!< Right hand side scalar of the multiplication expression.$/;"	m	class:blaze::SVecScalarDivExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the division expression.$/;"	m	class:blaze::SVecScalarDivExpr
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      , scalar_( scalar )  \/\/ Right-hand side scalar of the multiplication expression$/;"	f	class:blaze::SVecScalarMultExpr
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::SVecScalarMultExpr::ConstIterator
scalar_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   RightOperand scalar_;  \/\/!< Right-hand side scalar of the multiplication expression.$/;"	m	class:blaze::SVecScalarMultExpr
scale	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^inline DiagonalMatrix<MT,SO,true>& DiagonalMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::DiagonalMatrix
scale	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::DiagonalMatrix
scale	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^   HermitianMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::HermitianMatrix
scale	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::HermitianMatrix
scale	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^inline LowerMatrix<MT,SO,true>& LowerMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::LowerMatrix
scale	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::LowerMatrix
scale	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^   StrictlyLowerMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::StrictlyLowerMatrix
scale	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::StrictlyLowerMatrix
scale	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^   StrictlyUpperMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::StrictlyUpperMatrix
scale	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::StrictlyUpperMatrix
scale	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^   SymmetricMatrix<MT,SO,true,false>::scale( const Other& scalar )$/;"	f	class:blaze::SymmetricMatrix
scale	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^   SymmetricMatrix<MT,SO,true,true>::scale( const Other& scalar )$/;"	f	class:blaze::SymmetricMatrix
scale	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::scale( const Other& scalar )$/;"	f	class:blaze::SymmetricMatrix
scale	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::scale( const Other& scalar )$/;"	f	class:blaze::SymmetricMatrix
scale	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^inline UpperMatrix<MT,SO,true>& UpperMatrix<MT,SO,true>::scale( const Other& scalar )$/;"	f	class:blaze::UpperMatrix
scale	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::scale( const Other& scalar )$/;"	f	class:blaze::UpperMatrix
scale	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::scale( const Other& scalar ) const$/;"	f	class:blaze::DenseMatrixProxy
scale	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline void DenseVectorProxy<PT,VT>::scale( const Other& scalar ) const$/;"	f	class:blaze::DenseVectorProxy
scale	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::scale( const Other& scalar ) const$/;"	f	class:blaze::SparseMatrixProxy
scale	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline void SparseVectorProxy<PT,VT>::scale( const Other& scalar ) const$/;"	f	class:blaze::SparseVectorProxy
scale	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>& CompressedMatrix<Type,SO>::scale( const Other& scalar )$/;"	f	class:blaze::CompressedMatrix
scale	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::scale( const Other& scalar )$/;"	f	class:blaze::CompressedMatrix
scale	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>& CompressedVector<Type,TF>::scale( const Other& scalar )$/;"	f	class:blaze::CompressedVector
scale	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,false,false,false>& Column<MT,false,false,false>::scale( const Other& scalar )$/;"	f	class:blaze::Column
scale	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,false,false,true>& Column<MT,false,false,true>::scale( const Other& scalar )$/;"	f	class:blaze::Column
scale	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline Column<MT,true,false,SF>& Column<MT,true,false,SF>::scale( const Other& scalar )$/;"	f	class:blaze::Column
scale	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,false>& Row<MT,false,false,false>::scale( const Other& scalar )$/;"	f	class:blaze::Row
scale	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,false,false,true>& Row<MT,false,false,true>::scale( const Other& scalar )$/;"	f	class:blaze::Row
scale	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline Row<MT,true,false,SF>& Row<MT,true,false,SF>::scale( const Other& scalar )$/;"	f	class:blaze::Row
scale	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,false,false>& Submatrix<MT,AF,false,false>::scale( const Other& scalar )$/;"	f	class:blaze::Submatrix
scale	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,true,false>& Submatrix<MT,AF,true,false>::scale( const Other& scalar )$/;"	f	class:blaze::Submatrix
scale	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline Subvector<VT,AF,TF,false>& Subvector<VT,AF,TF,false>::scale( const Other& scalar )$/;"	f	class:blaze::Subvector
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::DiagonalMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::HermitianMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::LowerMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::StrictlyLowerMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::StrictlyUpperMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::SymmetricMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::SymmetricMatrix
scaleDiagonal	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::UpperMatrix
scaleDiagonal	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>& CompressedMatrix<Type,SO>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::CompressedMatrix
scaleDiagonal	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::scaleDiagonal( Other scalar )$/;"	f	class:blaze::CompressedMatrix
schedule	amun/3rd_party/blaze/util/ThreadPool.h	/^void ThreadPool<TT,MT,LT,CT>::schedule( Callable func, Args&&... args )$/;"	f	class:blaze::ThreadPool
scheduleAddAssign	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::scheduleAddAssign( Target& target, const Source& source )$/;"	f	class:blaze::ThreadBackend
scheduleAssign	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::scheduleAssign( Target& target, const Source& source )$/;"	f	class:blaze::ThreadBackend
scheduleDivAssign	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::scheduleDivAssign( Target& target, const Source& source )$/;"	f	class:blaze::ThreadBackend
scheduleMultAssign	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::scheduleMultAssign( Target& target, const Source& source )$/;"	f	class:blaze::ThreadBackend
scheduleSubAssign	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::scheduleSubAssign( Target& target, const Source& source )$/;"	f	class:blaze::ThreadBackend
score	amun/gpu/mblas/nth_element_kernels.h	/^  float score;$/;"	m	struct:amunmt::GPU::NthOut
score	amun/gpu/mblas/nth_element_kernels.h	/^  float score;$/;"	m	struct:amunmt::GPU::NthOutBatch
score	amun/plugin/hypo_info.h	/^  float score;$/;"	m	struct:amunmt::HypoState
scorers_	amun/common/search.h	/^    std::vector<ScorerPtr> scorers_;$/;"	m	class:amunmt::Search
scores	amun/plugin/neural_phrase.h	/^   std::vector<float> scores;$/;"	m	class:amunmt::NeuralPhrase
seed_	amun/3rd_party/blaze/util/Random.h	/^   static uint32_t seed_;  \/\/!< The current seed for the variate generator.$/;"	m	class:blaze::Random
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectAddAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectAddAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      selectAddAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::SMatSVecMultExpr
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      selectAddAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TDVecSMatMultExpr
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatDVecMultExpr
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatSVecMultExpr
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   static inline void selectAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecSMatMultExpr
selectAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   static inline void selectAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecTSMatMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      selectAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::SMatSVecMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAssignKernel	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      selectAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TDVecSMatMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatDVecMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatSVecMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   static inline void selectAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecSMatMultExpr
selectAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   static inline void selectAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecTSMatMultExpr
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectBlasAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectBlasAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectBlasAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectBlasAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectBlasAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectBlasAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectBlasAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectBlasAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectBlasAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectBlasAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectBlasAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectBlasAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectBlasAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectBlasAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectBlasSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectBlasSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectBlasSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectBlasSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectBlasSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectBlasSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectBlasSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectDefaultAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectDefaultAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectDefaultAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectDefaultAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectDefaultSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectDefaultSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectDefaultSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectDefaultSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectLargeAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectLargeAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectLargeAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectLargeAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectLargeAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectLargeAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectLargeAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectLargeAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectLargeAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectLargeAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectLargeSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectLargeSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectLargeSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectLargeSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectLargeSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectLargeSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectSmallAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAddAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAddAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectSmallAddAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectSmallAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectSmallAddAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAddAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectSmallAddAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectSmallAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectSmallAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectSmallAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectSmallAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectSmallAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      selectSmallSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallSubAssignKernel( DenseMatrix<MT3,false>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallSubAssignKernel( DenseMatrix<MT3,true>& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      selectSmallSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      selectSmallSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      selectSmallSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSmallSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      selectSmallSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectSubAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      selectSubAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      selectSubAssignKernel( DenseMatrix<MT,true>& A, const VT3& x, const VT4& y )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::SMatSVecMultExpr
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      selectSubAssignKernel( DenseMatrix<MT,false>& A, const VT3& x, const VT4& y )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TDVecSMatMultExpr
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatDVecMultExpr
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const MT1& A, const VT2& x )$/;"	f	class:blaze::TSMatSVecMultExpr
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^   static inline void selectSubAssignKernel( MT3& C, const MT4& A, const MT5& B )$/;"	f	namespace:blaze
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecSMatMultExpr
selectSubAssignKernel	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   static inline void selectSubAssignKernel( VT1& y, const VT2& x, const MT1& A )$/;"	f	class:blaze::TSVecTSMatMultExpr
sentenceLengths_	amun/gpu/decoder/encoder_decoder.h	/^    mblas::Vector<unsigned> sentenceLengths_;$/;"	m	class:amunmt::GPU::EncoderDecoder
sentence_	amun/common/hypothesis.h	/^    const Sentence &sentence_;$/;"	m	class:amunmt::Hypothesis
sentences	amun/plugin/hypo_info.h	/^  std::shared_ptr<Sentences> sentences;$/;"	m	struct:amunmt::HypoState
sentences	amun/python/test.py	/^sentences = []$/;"	v
sep_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    fmt::StringRef sep_;$/;"	m	class:fmt::internal::ThousandsSep
sep_	amun/common/processor/bpe.h	/^    const std::string sep_;$/;"	m	class:amunmt::BPE
seq	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_seq::const_iterator seq;$/;"	t	struct:YAML::detail::node_iterator_type
seq	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_seq::iterator seq;$/;"	t	struct:YAML::detail::node_iterator_type
sequenceMarker	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^int GraphBuilderAdapter::ContainerFrame::sequenceMarker;$/;"	m	class:YAML::GraphBuilderAdapter::ContainerFrame	file:
sequenceMarker	amun/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    static int sequenceMarker;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
sequence_	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^        std::atomic<size_t>   sequence_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
sequence_length	amun/3rd_party/utf8/core.h	/^    sequence_length(octet_iterator lead_it)$/;"	f	namespace:utf8::internal
sequence_length	amun/3rd_party/utf8/unchecked.h	/^        uint32_t sequence_length(octet_iterator it)$/;"	f	namespace:utf8::unchecked
serial	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^inline const DMatSerialExpr<MT,SO> serial( const DMatSerialExpr<MT,SO>& dm )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^inline const DMatSerialExpr<MT,SO> serial( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^inline const DVecSerialExpr<VT,TF> serial( const DVecSerialExpr<VT,TF>& dv )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^inline const DVecSerialExpr<VT,TF> serial( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^inline const SMatSerialExpr<MT,SO> serial( const SMatSerialExpr<MT,SO>& sm )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^inline const SMatSerialExpr<MT,SO> serial( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^inline const SVecSerialExpr<VT,TF> serial( const SVecSerialExpr<VT,TF>& sv )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^inline const SVecSerialExpr<VT,TF> serial( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
serial	amun/3rd_party/blaze/math/functors/Serial.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( serial( a ) )$/;"	f	struct:blaze::Serial
serialize	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::serialize( Archive& archive, const Matrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
serialize	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void serialize( Archive& archive, const Matrix<MT,SO>& mat )$/;"	f	namespace:blaze
serialize	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::serialize( Archive& archive, const Vector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
serialize	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void serialize( Archive& archive, const Vector<VT,TF>& vec )$/;"	f	namespace:blaze
serializeHeader	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::serializeHeader( Archive& archive, const MT& mat )$/;"	f	class:blaze::MatrixSerializer
serializeHeader	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::serializeHeader( Archive& archive, const VT& vec )$/;"	f	class:blaze::VectorSerializer
serializeMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::serializeMatrix( Archive& archive, const DenseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
serializeMatrix	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^void MatrixSerializer::serializeMatrix( Archive& archive, const SparseMatrix<MT,SO>& mat )$/;"	f	class:blaze::MatrixSerializer
serializeVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::serializeVector( Archive& archive, const DenseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
serializeVector	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^void VectorSerializer::serializeVector( Archive& archive, const SparseVector<VT,TF>& vec )$/;"	f	class:blaze::VectorSerializer
set	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::DiagonalMatrix
set	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::HermitianMatrix
set	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::LowerMatrix
set	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::StrictlyLowerMatrix
set	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::StrictlyUpperMatrix
set	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::SymmetricMatrix
set	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::SymmetricMatrix
set	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UniLowerMatrix
set	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UniUpperMatrix
set	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::UpperMatrix
set	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::set( size_t i, size_t j, const ElementType& value ) const$/;"	f	class:blaze::SparseMatrixProxy
set	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::set( size_t index, const ElementType& value ) const$/;"	f	class:blaze::SparseVectorProxy
set	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::set( size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
set	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::set( size_t i, size_t j, const Type& value )$/;"	f	class:blaze::CompressedMatrix
set	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::set( size_t index, const Type& value )$/;"	f	class:blaze::CompressedVector
set	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
set	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
set	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Column
set	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
set	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
set	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,true,false,SF>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Row
set	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::Submatrix
set	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::set( size_t i, size_t j, const ElementType& value )$/;"	f	class:blaze::Submatrix
set	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::set( size_t index, const ElementType& value )$/;"	f	class:blaze::Subvector
set	amun/3rd_party/yaml-cpp/setting.h	/^inline std::unique_ptr<SettingChangeBase> Setting<T>::set(const T& value) {$/;"	f	class:YAML::Setting
setNumThreads	amun/3rd_party/blaze/math/smp/default/Functions.h	/^BLAZE_ALWAYS_INLINE void setNumThreads( size_t number )$/;"	f	namespace:blaze
setNumThreads	amun/3rd_party/blaze/math/smp/openmp/Functions.h	/^BLAZE_ALWAYS_INLINE void setNumThreads( size_t number )$/;"	f	namespace:blaze
setNumThreads	amun/3rd_party/blaze/math/smp/threads/Functions.h	/^BLAZE_ALWAYS_INLINE void setNumThreads( size_t number )$/;"	f	namespace:blaze
setSeed	amun/3rd_party/blaze/util/Random.h	/^inline void setSeed( uint32_t seed )$/;"	f	namespace:blaze
set_async_mode	amun/3rd_party/spdlog/details/registry.h	/^    void set_async_mode(size_t q_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog::details::registry_t
set_async_mode	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_async_mode(size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog
set_color	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::set_color(level::level_enum color_level, const std::string& color)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_color	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    void set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink
set_comment	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  void set_comment() { m_comment = true; }$/;"	f	class:YAML::ostream_wrapper
set_console_attribs	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    WORD set_console_attribs(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink
set_data	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_data(const node& rhs) {$/;"	f	class:YAML::detail::node
set_data	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_data(const node_ref& rhs) { m_pData = rhs.m_pData; }$/;"	f	class:YAML::detail::node_ref
set_error_handler	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger
set_error_handler	amun/3rd_party/spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry_t
set_error_handler	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_error_handler(log_err_handler handler)$/;"	f	class:spdlog
set_force_flush	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    void set_force_flush(bool force_flush)$/;"	f	class:spdlog::sinks::simple_file_sink
set_formatter	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::details::async_log_helper
set_formatter	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
set_formatter	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_formatter(spdlog::formatter_ptr f)$/;"	f	class:spdlog
set_level	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	amun/3rd_party/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t
set_level	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_level(level::level_enum log_level)$/;"	f	class:spdlog
set_level	amun/3rd_party/spdlog/sinks/sink.h	/^inline void sink::set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink
set_loglevel	amun/common/logging.cpp	/^void set_loglevel(spdlog::logger& logger, std::string const level) {$/;"	f	namespace:amunmt
set_mark	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_mark(const Mark& mark) { m_pRef->set_mark(mark); }$/;"	f	class:YAML::detail::node
set_mark	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_mark(const Mark& mark) { m_pData->set_mark(mark); }$/;"	f	class:YAML::detail::node_ref
set_mark	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_mark(const Mark& mark) { m_mark = mark; }$/;"	f	class:YAML::detail::node_data
set_null	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_null() {$/;"	f	class:YAML::detail::node
set_null	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_null() { m_pData->set_null(); }$/;"	f	class:YAML::detail::node_ref
set_null	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_null() {$/;"	f	class:YAML::detail::node_data
set_pattern	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
set_pattern	amun/3rd_party/spdlog/details/registry.h	/^    void set_pattern(const std::string& pattern)$/;"	f	class:spdlog::details::registry_t
set_pattern	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_pattern(const std::string& format_string)$/;"	f	class:spdlog
set_ref	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_ref(const node& rhs) {$/;"	f	class:YAML::detail::node
set_scalar	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_scalar(const std::string& scalar) {$/;"	f	class:YAML::detail::node
set_scalar	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_scalar(const std::string& scalar) { m_pData->set_scalar(scalar); }$/;"	f	class:YAML::detail::node_ref
set_scalar	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_scalar(const std::string& scalar) {$/;"	f	class:YAML::detail::node_data
set_string	amun/3rd_party/spdlog/details/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	amun/3rd_party/spdlog/details/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue
set_style	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_style(EmitterStyle::value style) {$/;"	f	class:YAML::detail::node
set_style	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_style(EmitterStyle::value style) { m_pData->set_style(style); }$/;"	f	class:YAML::detail::node_ref
set_style	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_style(EmitterStyle::value style) { m_style = style; }$/;"	f	class:YAML::detail::node_data
set_sync_mode	amun/3rd_party/spdlog/details/registry.h	/^    void set_sync_mode()$/;"	f	class:spdlog::details::registry_t
set_sync_mode	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_sync_mode()$/;"	f	class:spdlog
set_tag	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_tag(const std::string& tag) {$/;"	f	class:YAML::detail::node
set_tag	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_tag(const std::string& tag) { m_pData->set_tag(tag); }$/;"	f	class:YAML::detail::node_ref
set_tag	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_tag(const std::string& tag) { m_tag = tag; }$/;"	f	class:YAML::detail::node_data
set_type	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_type(NodeType::value type) {$/;"	f	class:YAML::detail::node
set_type	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_type(NodeType::value type) { m_pData->set_type(type); }$/;"	f	class:YAML::detail::node_ref
set_type	amun/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_type(NodeType::value type) {$/;"	f	class:YAML::detail::node_data
setstate	amun/3rd_party/blaze/util/serialization/Archive.h	/^inline void Archive<Stream>::setstate( std::ios_base::iostate state )$/;"	f	class:blaze::Archive
setting_changes	amun/3rd_party/yaml-cpp/setting.h	/^  typedef std::vector<std::unique_ptr<SettingChangeBase>> setting_changes;$/;"	t	class:YAML::SettingChanges
shape	amun/3rd_party/cnpy/cnpy.h	/^        std::vector<unsigned int> shape;$/;"	m	struct:cnpy::NpyArray
shared_memory	amun/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<memory> shared_memory;$/;"	t	namespace:YAML::detail
shared_memory_holder	amun/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<memory_holder> shared_memory_holder;$/;"	t	namespace:YAML::detail
shared_node	amun/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node> shared_node;$/;"	t	namespace:YAML::detail
shared_node_data	amun/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node_data> shared_node_data;$/;"	t	namespace:YAML::detail
shared_node_ref	amun/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node_ref> shared_node_ref;$/;"	t	namespace:YAML::detail
short_level_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class short_level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
should_log	amun/3rd_party/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	amun/3rd_party/spdlog/sinks/sink.h	/^inline bool sink::should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink
shutDownThreads	amun/3rd_party/blaze/math/smp/default/Functions.h	/^BLAZE_ALWAYS_INLINE void shutDownThreads()$/;"	f	namespace:blaze
shutDownThreads	amun/3rd_party/blaze/math/smp/openmp/Functions.h	/^BLAZE_ALWAYS_INLINE void shutDownThreads()$/;"	f	namespace:blaze
shutDownThreads	amun/3rd_party/blaze/math/smp/threads/Functions.h	/^BLAZE_ALWAYS_INLINE void shutDownThreads()$/;"	f	namespace:blaze
signbit	amun/3rd_party/spdlog/details/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal
signbit	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal
simdEnabled	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT1>::value && !IsDiagonal<MT2>::value &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : bool { simdEnabled = VT1::simdEnabled && VT2::simdEnabled &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : bool { simdEnabled = !( IsDiagonal<MT1>::value && IsDiagonal<MT2>::value ) &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : bool { simdEnabled = !IsDiagonal<MT>::value &&$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   enum : bool { simdEnabled = false };$/;"	e	enum:bool
simdEnabled	amun/3rd_party/blaze/math/functors/Abs.h	/^   static constexpr bool simdEnabled() { return HasSIMDAbs<T>::value; }$/;"	f	struct:blaze::Abs
simdEnabled	amun/3rd_party/blaze/math/functors/Acos.h	/^   static constexpr bool simdEnabled() { return HasSIMDAcos<T>::value; }$/;"	f	struct:blaze::Acos
simdEnabled	amun/3rd_party/blaze/math/functors/Acosh.h	/^   static constexpr bool simdEnabled() { return HasSIMDAcosh<T>::value; }$/;"	f	struct:blaze::Acosh
simdEnabled	amun/3rd_party/blaze/math/functors/Asin.h	/^   static constexpr bool simdEnabled() { return HasSIMDAsin<T>::value; }$/;"	f	struct:blaze::Asin
simdEnabled	amun/3rd_party/blaze/math/functors/Asinh.h	/^   static constexpr bool simdEnabled() { return HasSIMDAsinh<T>::value; }$/;"	f	struct:blaze::Asinh
simdEnabled	amun/3rd_party/blaze/math/functors/Atan.h	/^   static constexpr bool simdEnabled() { return HasSIMDAtan<T>::value; }$/;"	f	struct:blaze::Atan
simdEnabled	amun/3rd_party/blaze/math/functors/Atanh.h	/^   static constexpr bool simdEnabled() { return HasSIMDAtanh<T>::value; }$/;"	f	struct:blaze::Atanh
simdEnabled	amun/3rd_party/blaze/math/functors/Cbrt.h	/^   static constexpr bool simdEnabled() { return HasSIMDCbrt<T>::value; }$/;"	f	struct:blaze::Cbrt
simdEnabled	amun/3rd_party/blaze/math/functors/Ceil.h	/^   static constexpr bool simdEnabled() { return HasSIMDCeil<T>::value; }$/;"	f	struct:blaze::Ceil
simdEnabled	amun/3rd_party/blaze/math/functors/Conj.h	/^   static constexpr bool simdEnabled() { return HasSIMDConj<T>::value; }$/;"	f	struct:blaze::Conj
simdEnabled	amun/3rd_party/blaze/math/functors/Cos.h	/^   static constexpr bool simdEnabled() { return HasSIMDCos<T>::value; }$/;"	f	struct:blaze::Cos
simdEnabled	amun/3rd_party/blaze/math/functors/Cosh.h	/^   static constexpr bool simdEnabled() { return HasSIMDCosh<T>::value; }$/;"	f	struct:blaze::Cosh
simdEnabled	amun/3rd_party/blaze/math/functors/Erf.h	/^   static constexpr bool simdEnabled() { return HasSIMDErf<T>::value; }$/;"	f	struct:blaze::Erf
simdEnabled	amun/3rd_party/blaze/math/functors/Erfc.h	/^   static constexpr bool simdEnabled() { return HasSIMDErfc<T>::value; }$/;"	f	struct:blaze::Erfc
simdEnabled	amun/3rd_party/blaze/math/functors/Exp.h	/^   static constexpr bool simdEnabled() { return HasSIMDExp<T>::value; }$/;"	f	struct:blaze::Exp
simdEnabled	amun/3rd_party/blaze/math/functors/Floor.h	/^   static constexpr bool simdEnabled() { return HasSIMDFloor<T>::value; }$/;"	f	struct:blaze::Floor
simdEnabled	amun/3rd_party/blaze/math/functors/InvCbrt.h	/^   static constexpr bool simdEnabled() { return HasSIMDInvCbrt<T>::value; }$/;"	f	struct:blaze::InvCbrt
simdEnabled	amun/3rd_party/blaze/math/functors/InvSqrt.h	/^   static constexpr bool simdEnabled() { return HasSIMDInvSqrt<T>::value; }$/;"	f	struct:blaze::InvSqrt
simdEnabled	amun/3rd_party/blaze/math/functors/Log.h	/^   static constexpr bool simdEnabled() { return HasSIMDLog<T>::value; }$/;"	f	struct:blaze::Log
simdEnabled	amun/3rd_party/blaze/math/functors/Log10.h	/^   static constexpr bool simdEnabled() { return HasSIMDLog10<T>::value; }$/;"	f	struct:blaze::Log10
simdEnabled	amun/3rd_party/blaze/math/functors/Pow.h	/^   static constexpr bool simdEnabled() { return IsSame<T,ET>::value && HasSIMDPow<T>::value; }$/;"	f	struct:blaze::Pow
simdEnabled	amun/3rd_party/blaze/math/functors/Sin.h	/^   static constexpr bool simdEnabled() { return HasSIMDSin<T>::value; }$/;"	f	struct:blaze::Sin
simdEnabled	amun/3rd_party/blaze/math/functors/Sinh.h	/^   static constexpr bool simdEnabled() { return HasSIMDSinh<T>::value; }$/;"	f	struct:blaze::Sinh
simdEnabled	amun/3rd_party/blaze/math/functors/Sqrt.h	/^   static constexpr bool simdEnabled() { return HasSIMDSqrt<T>::value; }$/;"	f	struct:blaze::Sqrt
simdEnabled	amun/3rd_party/blaze/math/functors/Tan.h	/^   static constexpr bool simdEnabled() { return HasSIMDTan<T>::value; }$/;"	f	struct:blaze::Tan
simdEnabled	amun/3rd_party/blaze/math/functors/Tanh.h	/^   static constexpr bool simdEnabled() { return HasSIMDTanh<T>::value; }$/;"	f	struct:blaze::Tanh
simdExp_	amun/3rd_party/blaze/math/functors/Pow.h	/^   SIMDET simdExp_;  \/\/!< The SIMD exponent.$/;"	m	struct:blaze::Pow
simple_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^    explicit simple_file_sink(const filename_t &filename, bool truncate = false):_force_flush(false)$/;"	f	class:spdlog::sinks::simple_file_sink
simple_file_sink	amun/3rd_party/spdlog/sinks/file_sinks.h	/^class simple_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
simple_file_sink_mt	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<std::mutex> simple_file_sink_mt;$/;"	t	namespace:spdlog::sinks
simple_file_sink_st	amun/3rd_party/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<details::null_mutex> simple_file_sink_st;$/;"	t	namespace:spdlog::sinks
sin	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Sin,SO> sin( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
sin	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Sin,TF> sin( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
sin	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Sin,SO> sin( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
sin	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Sin,TF> sin( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
sin	amun/3rd_party/blaze/math/functors/Sin.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( sin( a ) )$/;"	f	struct:blaze::Sin
sin	amun/3rd_party/blaze/math/functors/Sin.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( sin( a ) )$/;"	f	struct:blaze::Sin
sin	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( sin( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
sinh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Sinh,SO> sinh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
sinh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Sinh,TF> sinh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
sinh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Sinh,SO> sinh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
sinh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Sinh,TF> sinh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
sinh	amun/3rd_party/blaze/math/functors/Sinh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( sinh( a ) )$/;"	f	struct:blaze::Sinh
sinh	amun/3rd_party/blaze/math/functors/Sinh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( sinh( a ) )$/;"	f	struct:blaze::Sinh
sinh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( sinh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
sink	amun/3rd_party/spdlog/sinks/sink.h	/^    sink()$/;"	f	class:spdlog::sinks::sink
sink	amun/3rd_party/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    sink_ptr sink_;$/;"	m	class:spdlog::sinks::ansicolor_sink
sinks	amun/3rd_party/spdlog/common.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr>& spdlog::logger::sinks() const$/;"	f	class:spdlog::logger
sinks	amun/3rd_party/spdlog/sinks/android_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/base_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/dist_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/file_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/null_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
size	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t size( const DenseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
size	amun/3rd_party/blaze/math/proxy/DenseVectorProxy.h	/^inline size_t DenseVectorProxy<PT,VT>::size() const$/;"	f	class:blaze::DenseVectorProxy
size	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^BLAZE_ALWAYS_INLINE size_t size( const SparseVectorProxy<PT,VT>& proxy )$/;"	f	namespace:blaze
size	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^inline size_t SparseVectorProxy<PT,VT>::size() const$/;"	f	class:blaze::SparseVectorProxy
size	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   enum : size_t { size = 1UL };$/;"	e	enum:size_t
size	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline size_t ThreadBackend<TT,MT,LT,CT>::size()$/;"	f	class:blaze::ThreadBackend
size	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline size_t Column<MT,false,false,false>::size() const$/;"	f	class:blaze::Column
size	amun/3rd_party/blaze/util/Indices.h	/^inline size_t Indices::size() const$/;"	f	class:blaze::Indices
size	amun/3rd_party/blaze/util/InputString.h	/^inline InputString::SizeType InputString::size() const$/;"	f	class:blaze::InputString
size	amun/3rd_party/blaze/util/PtrVector.h	/^inline typename PtrVector<T,D,G>::SizeType PtrVector<T,D,G>::size() const$/;"	f	class:blaze::PtrVector
size	amun/3rd_party/blaze/util/ThreadPool.h	/^inline size_t ThreadPool<TT,MT,LT,CT>::size() const$/;"	f	class:blaze::ThreadPool
size	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^inline TaskQueue::SizeType TaskQueue::size() const$/;"	f	class:blaze::threadpool::TaskQueue
size	amun/3rd_party/spdlog/details/file_helper.h	/^    size_t size()$/;"	f	class:spdlog::details::file_helper
size	amun/3rd_party/spdlog/details/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue
size	amun/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::FormatBuf
size	amun/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8
size	amun/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16
size	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef
size	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef
size	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer
size	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    size_t size() const$/;"	f	class:fmt::internal::FormatBuf
size	amun/3rd_party/yaml-cpp/binary.h	/^  std::size_t size() const { return owned() ? m_data.size() : m_unownedSize; }$/;"	f	class:YAML::Binary
size	amun/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::size() const { return m_stream.pos(); }$/;"	f	class:YAML::Emitter
size	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  std::size_t size() const { return m_pRef->size(); }$/;"	f	class:YAML::detail::node
size	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  std::size_t size() const { return m_pData->size(); }$/;"	f	class:YAML::detail::node_ref
size	amun/3rd_party/yaml-cpp/node/impl.h	/^inline std::size_t Node::size() const {$/;"	f	class:YAML::Node
size	amun/3rd_party/yaml-cpp/node_data.cpp	/^std::size_t node_data::size() const {$/;"	f	class:YAML::detail::node_data
size	amun/3rd_party/yaml-cpp/ptr_vector.h	/^  std::size_t size() const { return m_data.size(); }$/;"	f	class:YAML::ptr_vector
size	amun/common/base_tensor.cpp	/^unsigned BaseTensor::size() const {$/;"	f	class:amunmt::BaseTensor
size	amun/common/histories.h	/^    unsigned size() const {$/;"	f	class:amunmt::Histories
size	amun/common/history.h	/^    unsigned size() const {$/;"	f	class:amunmt::History
size	amun/common/sentence.cpp	/^unsigned Sentence::size(unsigned index) const {$/;"	f	class:amunmt::Sentence
size	amun/common/sentences.cpp	/^unsigned Sentences::size() const {$/;"	f	class:amunmt::Sentences
size	amun/common/vocab.cpp	/^unsigned Vocab::size() const {$/;"	f	class:amunmt::Vocab
size	amun/cpu/mblas/tensor.h	/^    unsigned size() const {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
size	amun/cpu/nematus/model.cpp	/^int Weights::Transition::size() const {$/;"	f	class:amunmt::CPU::Nematus::Weights::Transition
size	amun/cpu/npz_converter.h	/^        size_t size() const {$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
size	amun/fpga/array.h	/^  size_t size() const$/;"	f	class:amunmt::FPGA::Array
size	amun/fpga/matrix.h	/^  virtual size_t size() const$/;"	f	class:amunmt::FPGA::mblas::Matrix
size	amun/fpga/npz_converter.h	/^    size_t size() const {$/;"	f	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
size	amun/gpu/decoder/kenlm.cpp	/^size_t LM::size() const {$/;"	f	class:LM
size	amun/gpu/mblas/tensor.h	/^    virtual unsigned size() const$/;"	f	class:amunmt::GPU::mblas::TTensor
size	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned size() const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
size	amun/gpu/mblas/vector.h	/^  unsigned size() const$/;"	f	class:amunmt::GPU::mblas::Vector
size	amun/gpu/mblas/vector_wrapper.h	/^  unsigned size() const$/;"	f	class:amunmt::GPU::mblas::VectorWrapper
size	amun/gpu/npz_converter.h	/^        unsigned size() const {$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
size1	amun/cpu/npz_converter.h	/^        size_t size1() const {$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
size1	amun/fpga/npz_converter.h	/^    size_t size1() const {$/;"	f	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
size1	amun/gpu/npz_converter.h	/^        unsigned size1() const {$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
size2	amun/cpu/npz_converter.h	/^        size_t size2() const {$/;"	f	class:amunmt::CPU::NpzConverter::NpyMatrixWrapper
size2	amun/fpga/npz_converter.h	/^    size_t size2() const {$/;"	f	class:amunmt::FPGA::NpzConverter::NpyMatrixWrapper
size2	amun/gpu/npz_converter.h	/^        unsigned size2() const {$/;"	f	class:amunmt::GPU::NpzConverter::NpyMatrixWrapper
sizeUInt	amun/fpga/array.h	/^  const uint &sizeUInt() const$/;"	f	class:amunmt::FPGA::Array
sizeUInt	amun/fpga/matrix.h	/^  const uint &sizeUInt() const$/;"	f	class:amunmt::FPGA::mblas::Matrix
size_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint64_t size_;         \/\/!< The size of the vector.$/;"	m	class:blaze::VectorSerializer
size_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   size_t size_;             \/\/!< The current size\/dimension of the compressed vector.$/;"	m	class:blaze::CompressedVector
size_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   const size_t size_;    \/\/!< The size of the subvector.$/;"	m	class:blaze::Subvector
size_	amun/3rd_party/blaze/util/PtrVector.h	/^   SizeType size_;       \/\/!< The current size of the pointer vector.$/;"	m	class:blaze::PtrVector
size_	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef
size_	amun/3rd_party/spdlog/details/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer
size_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef
size_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer
size_	amun/fpga/array.h	/^  uint size_;$/;"	m	class:amunmt::FPGA::Array
size_	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned size_;$/;"	m	class:amunmt::GPU::mblas::TensorWrapper
size_	amun/gpu/mblas/vector.h	/^  unsigned size_, maxSize_;$/;"	m	class:amunmt::GPU::mblas::Vector
size_	amun/gpu/mblas/vector_wrapper.h	/^  unsigned size_;$/;"	m	class:amunmt::GPU::mblas::VectorWrapper
size_t	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : size_t { SIMDSIZE = SIMDTrait<ElementType>::size };$/;"	g
size_t	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   enum : size_t { size = 1UL };$/;"	g
size_t	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void* operator new  ( std::size_t ) = delete;$/;"	m	class:blaze::logging::FunctionTrace
size_t	amun/3rd_party/blaze/util/logging/FunctionTrace.h	/^   void* operator new[]( std::size_t ) = delete;$/;"	m	class:blaze::logging::FunctionTrace
size_t	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void* operator new  ( std::size_t ) = delete;$/;"	m	class:blaze::logging::LogSection
size_t	amun/3rd_party/blaze/util/logging/LogSection.h	/^   void* operator new[]( std::size_t ) = delete;$/;"	m	class:blaze::logging::LogSection
size_type	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef SizeType        size_type;        \/\/!< Size type of the aligned allocator.$/;"	t	class:blaze::AlignedAllocator
size_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef SizeType              size_type;           \/\/!< Size type of the pointer vector.$/;"	t	class:blaze::PtrVector
sizeof	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^   BLAZE_STATIC_ASSERT( sizeof( complex<T> ) == 2UL*sizeof( T ) );$/;"	m	struct:blaze::SIMDTraitBase
sizeof	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^   BLAZE_STATIC_ASSERT( sizeof( complex<double> ) == 2UL*sizeof( double ) );$/;"	m	struct:blaze::SIMDTraitBase
sizeof	amun/3rd_party/blaze/math/simd/SIMDTrait.h	/^   BLAZE_STATIC_ASSERT( sizeof( complex<float> ) == 2UL*sizeof( float ) );$/;"	m	struct:blaze::SIMDTraitBase
sleep_or_yield	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::sleep_or_yield(const spdlog::log_clock::time_point& now, const spdlog::log_clock::time_point& last_op_time)$/;"	f	class:spdlog::details::async_log_helper
sm_	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^      : sm_( sm )  \/\/ Sparse matrix of the evaluation expression$/;"	f	class:blaze::SMatEvalExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   Operand sm_;  \/\/!< Sparse matrix of the evaluation expression.$/;"	m	class:blaze::SMatEvalExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   Operand   sm_;  \/\/!< Sparse matrix of the absolute value expression.$/;"	m	class:blaze::SMatForEachExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^      : sm_( sm )  \/\/ Sparse matrix of the serial evaluation expression$/;"	f	class:blaze::SMatSerialExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   Operand sm_;  \/\/!< Sparse matrix of the serial evaluation expression.$/;"	m	class:blaze::SMatSerialExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      : sm_( sm )$/;"	f	class:blaze::SMatTransExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   Operand sm_;  \/\/!< Sparse matrix of the transposition expression.$/;"	m	class:blaze::SMatTransExpr
sm_	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^      : sm_( sm )  \/\/ The sparse matrix operand$/;"	f	class:blaze::SMatTransposer
sm_	amun/3rd_party/blaze/math/expressions/SMatTransposer.h	/^   MT& sm_;  \/\/!< The sparse matrix operand.$/;"	m	class:blaze::SMatTransposer
sm_	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^   MT&    sm_;  \/\/!< Reference to the accessed sparse matrix.$/;"	m	class:blaze::MatrixAccessProxy
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpAddAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpAddAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpAddAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpAddAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,false>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpAddAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpAddAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      smpAddAssign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpAddAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^      smpAddAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpAddAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      smpAddAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpAddAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpAddAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpAddAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpAddAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpAddAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^      smpAddAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpAddAssign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpAddAssign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^      smpAddAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^      smpAddAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpAddAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^      smpAddAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
smpAddAssign	amun/3rd_party/blaze/math/smp/default/DenseMatrix.h	/^   smpAddAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^   smpAddAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/default/SparseMatrix.h	/^   smpAddAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/default/SparseVector.h	/^   smpAddAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^   smpAddAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^   smpAddAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^   smpAddAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAddAssign	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^   smpAddAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpAddAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpAddAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAddAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpAddAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAddAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpAddAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpAssign( SparseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpAssign( SparseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      smpAssign( SparseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpAssign( SparseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpAssign( SparseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpAssign( SparseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpAssign( SparseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpAssign( SparseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAssign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpAssign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      smpAssign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      smpAssign( SparseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpAssign( SparseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      smpAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      smpAssign( SparseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpAssign( SparseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpAssign( SparseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpAssign( SparseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpAssign( SparseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpAssign( SparseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^      smpAssign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^      smpAssign( SparseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpAssign( SparseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpAssign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^      smpAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpAssign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpAssign( SparseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpAssign( Matrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpAssign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^      smpAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpAssign( SparseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^      smpAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
smpAssign	amun/3rd_party/blaze/math/smp/default/DenseMatrix.h	/^   smpAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^   smpAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/default/SparseMatrix.h	/^   smpAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/default/SparseVector.h	/^   smpAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^   smpAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^   smpAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^   smpAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpAssign	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^   smpAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpAssignable	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   enum : bool { smpAssignable = !evaluateMatrix && MT::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   enum : bool { smpAssignable = VT1::smpAssignable && !evaluateRight };$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   enum : bool { smpAssignable = false };$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   enum : bool { smpAssignable = false };$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   enum : bool { smpAssignable = !evaluateMatrix && MT::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateVector && VT::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateVector && VT::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpAssignable	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^   enum : bool { smpAssignable = !evaluateLeft  && MT1::smpAssignable &&$/;"	e	enum:bool
smpDivAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpDivAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpDivAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpDivAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpDivAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpDivAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpDivAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpDivAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpDivAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpDivAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpDivAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpDivAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpDivAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpDivAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpDivAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpDivAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpDivAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpDivAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpDivAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpDivAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpDivAssign	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^   smpDivAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpDivAssign	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^   smpDivAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpDivAssign	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^   smpDivAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpDivAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpDivAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpDivAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpDivAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpMultAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpMultAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpMultAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpMultAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpMultAssign( SparseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpMultAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpMultAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpMultAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpMultAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpMultAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpMultAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpMultAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^      smpMultAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpMultAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      smpMultAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpMultAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpMultAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpMultAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpMultAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpMultAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpMultAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpMultAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpMultAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^      smpMultAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^      smpMultAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpMultAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpMultAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^      smpMultAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
smpMultAssign	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^   smpMultAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/smp/default/SparseVector.h	/^   smpMultAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^   smpMultAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^   smpMultAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^   smpMultAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpMultAssign	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^   smpMultAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpMultAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpMultAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpMultAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpMultAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpMultAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void smpSubAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void smpSubAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void smpSubAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void smpSubAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,false>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void smpSubAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void smpSubAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      smpSubAssign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void smpSubAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^      smpSubAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void smpSubAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      smpSubAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^      smpSubAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^      smpSubAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^      smpSubAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      smpSubAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      smpSubAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^      smpSubAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      smpSubAssign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      smpSubAssign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^      smpSubAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^      smpSubAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      smpSubAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^      smpSubAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
smpSubAssign	amun/3rd_party/blaze/math/smp/default/DenseMatrix.h	/^   smpSubAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/default/DenseVector.h	/^   smpSubAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/default/SparseMatrix.h	/^   smpSubAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/default/SparseVector.h	/^   smpSubAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^   smpSubAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^   smpSubAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^   smpSubAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
smpSubAssign	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^   smpSubAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpSubAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/openmp/DenseVector.h	/^void smpSubAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const DenseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,columnMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseMatrix.h	/^void smpSubAssign_backend( DenseMatrix<MT1,SO>& lhs, const SparseMatrix<MT2,rowMajor>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpSubAssign_backend( DenseVector<VT1,TF1>& lhs, const DenseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
smpSubAssign_backend	amun/3rd_party/blaze/math/smp/threads/DenseVector.h	/^void smpSubAssign_backend( DenseVector<VT1,TF1>& lhs, const SparseVector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
softmax_	amun/cpu/dl4mt/decoder.h	/^    Softmax<Weights::DecSoftmax> softmax_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder
softmax_	amun/cpu/nematus/decoder.h	/^    Softmax<Weights::DecSoftmax> softmax_;$/;"	m	class:amunmt::CPU::Nematus::Decoder
softmax_	amun/fpga/decoder.h	/^  Softmax<Weights::DecSoftmax> softmax_;$/;"	m	class:amunmt::FPGA::Decoder
softmax_	amun/gpu/dl4mt/decoder.h	/^    Softmax<Weights::DecSoftmax> softmax_;$/;"	m	class:amunmt::GPU::Decoder
sourceContext_	amun/fpga/encoder_decoder.h	/^  mblas::Tensor sourceContext_;$/;"	m	class:amunmt::FPGA::EncoderDecoder
sourceVocabs_	amun/common/god.h	/^    mutable std::vector<FactorVocab> sourceVocabs_;$/;"	m	class:amunmt::God
source_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      const Source source_;  \/\/!< The source operand.$/;"	m	struct:blaze::ThreadBackend::AddAssigner
source_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      const Source source_;  \/\/!< The source operand.$/;"	m	struct:blaze::ThreadBackend::Assigner
source_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      const Source source_;  \/\/!< The source operand.$/;"	m	struct:blaze::ThreadBackend::DivAssigner
source_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      const Source source_;  \/\/!< The source operand.$/;"	m	struct:blaze::ThreadBackend::MultAssigner
source_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      const Source source_;  \/\/!< The source operand.$/;"	m	struct:blaze::ThreadBackend::SubAssigner
spacing	amun/3rd_party/blaze/config/Logging.h	/^constexpr bool spacing = false;$/;"	m	namespace:blaze::logging
spacing	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline size_t DenseMatrixProxy<PT,MT>::spacing() const$/;"	f	class:blaze::DenseMatrixProxy
spdlog	amun/3rd_party/spdlog/async_logger.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/common.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/async_log_helper.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/file_helper.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/line_logger_fwd.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/log_msg.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/null_mutex.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/os.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/details/registry.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/formatter.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/logger.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/android_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/base_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/dist_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/file_sinks.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/msvc_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/null_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/ostream_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^namespace spdlog$/;"	n
spdlog	amun/3rd_party/spdlog/spdlog.h	/^namespace spdlog$/;"	n
spdlog_ex	amun/3rd_party/spdlog/common.h	/^    spdlog_ex(const std::string& msg):_msg(msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	amun/3rd_party/spdlog/common.h	/^    spdlog_ex(const std::string& msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	amun/3rd_party/spdlog/common.h	/^class spdlog_ex: public std::exception$/;"	c	namespace:spdlog
spec	amun/3rd_party/spdlog/details/format.h	/^    FormatSpec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase
spec	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase
spec_	amun/3rd_party/spdlog/details/format.cc	/^			fmt::FormatSpec &spec_;$/;"	m	class:fmt::__anon30::WidthHandler	file:
spec_	amun/3rd_party/spdlog/details/format.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase
spec_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase
spec_	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::WidthHandler
sprintf	amun/3rd_party/spdlog/details/format.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f
sprintf	amun/3rd_party/spdlog/details/format.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f
sprintf	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f	namespace:fmt
sprintf	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f	namespace:fmt
sqrLength	amun/3rd_party/blaze/math/dense/DenseVector.h	/^const ElementType_<VT> sqrLength( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
sqrLength	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^const ElementType_<VT> sqrLength( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/dense/DenseVector.h	/^inline auto length( const DenseVector<VT,TF>& dv ) -> decltype( sqrt( sqrLength( ~dv ) ) )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Sqrt,SO> sqrt( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Sqrt,TF> sqrt( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Sqrt,SO> sqrt( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Sqrt,TF> sqrt( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/functors/Sqrt.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( sqrt( a ) )$/;"	f	struct:blaze::Sqrt
sqrt	amun/3rd_party/blaze/math/functors/Sqrt.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( sqrt( a ) )$/;"	f	struct:blaze::Sqrt
sqrt	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( sqrt( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
sqrt	amun/3rd_party/blaze/math/sparse/SparseVector.h	/^inline auto length( const SparseVector<VT,TF>& sv ) -> decltype( sqrt( sqrLength( ~sv ) ) )$/;"	f	namespace:blaze
srcSentences_	amun/plugin/nbest.h	/^    std::vector<std::string> srcSentences_;$/;"	m	class:NBest
srcTrgMap_	amun/gpu/decoder/ape_penalty.h	/^    SrcTrgMap srcTrgMap_;$/;"	m	class:GPU::ApePenaltyLoader
srcTrgMap_	amun/gpu/decoder/ape_penalty.h	/^    const SrcTrgMap& srcTrgMap_;$/;"	m	class:GPU::ApePenalty
srcVocab_	amun/plugin/nbest.h	/^    std::shared_ptr<Vocab> srcVocab_;$/;"	m	class:NBest
sstring	amun/3rd_party/spdlog/details/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon17
sstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon51
start	amun/3rd_party/blaze/util/SystemClock.h	/^inline time_t SystemClock::start() const$/;"	f	class:blaze::SystemClock
start	amun/3rd_party/blaze/util/timing/Timer.h	/^inline void Timer<TP>::start()$/;"	f	class:blaze::timing::Timer
startPos	amun/plugin/neural_phrase.h	/^   int startPos, endPos;$/;"	m	class:amunmt::NeuralPhrase
start_	amun/3rd_party/blaze/util/SystemClock.h	/^   static time_t start_;  \/\/!< Timestamp for the start of the process.$/;"	m	class:blaze::SystemClock
start_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double start_;    \/\/!< Start of the current time measurement.$/;"	m	class:blaze::timing::Timer
start_	amun/3rd_party/spdlog/details/format.h	/^    Char *start_;$/;"	m	class:fmt::FormatBuf
start_	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    Char *start_;$/;"	m	class:fmt::internal::FormatBuf
starts_with_bom	amun/3rd_party/utf8/core.h	/^    inline bool starts_with_bom (octet_iterator it, octet_iterator end)$/;"	f	namespace:utf8
states	amun/plugin/hypo_info.h	/^  States states;$/;"	m	struct:amunmt::HypoState
states_	amun/cpu/decoder/encoder_decoder_state.h	/^    CPU::mblas::Tensor states_;$/;"	m	class:amunmt::CPU::EncoderDecoderState
states_	amun/fpga/encoder_decoder_state.h	/^  mblas::Tensor states_;$/;"	m	class:amunmt::FPGA::EncoderDecoderState
states_	amun/gpu/decoder/encoder_decoder_state.h	/^    CellState states_;$/;"	m	class:amunmt::GPU::EncoderDecoderState
states_	amun/gpu/decoder/language_model.h	/^    std::vector<KenlmState> states_;$/;"	m	class:LanguageModelState
static_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline S<To> static_pointer_cast( S<From> ptr )$/;"	f	namespace:blaze
static_pointer_cast	amun/3rd_party/blaze/util/PointerCast.h	/^inline To* static_pointer_cast( From* ptr )$/;"	f	namespace:blaze
status	amun/3rd_party/yaml-cpp/scanner.h	/^    STATUS status;$/;"	m	struct:YAML::Scanner::IndentMarker
status	amun/3rd_party/yaml-cpp/token.h	/^  STATUS status;$/;"	m	struct:YAML::Token
std	amun/3rd_party/spdlog/details/format.h	/^namespace std$/;"	n
std	amun/3rd_party/spdlog/fmt/bundled/format.h	/^namespace std$/;"	n
std	amun/common/processor/bpe.h	/^namespace std$/;"	n
stderr_color_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_mt(const std::string& logger_name)$/;"	f	class:spdlog
stderr_color_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_st(const std::string& logger_name)$/;"	f	class:spdlog
stderr_logger_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_mt(const std::string& logger_name)$/;"	f	class:spdlog
stderr_logger_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_st(const std::string& logger_name)$/;"	f	class:spdlog
stderr_sink	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^    stderr_sink()$/;"	f	class:spdlog::sinks::stderr_sink
stderr_sink	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^class stderr_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stderr_sink_mt	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<std::mutex> stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
stderr_sink_st	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<details::null_mutex> stderr_sink_st;$/;"	t	namespace:spdlog::sinks
stdout_color_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_mt(const std::string& logger_name)$/;"	f	class:spdlog
stdout_color_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_st(const std::string& logger_name)$/;"	f	class:spdlog
stdout_logger_mt	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_mt(const std::string& logger_name)$/;"	f	class:spdlog
stdout_logger_st	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_st(const std::string& logger_name)$/;"	f	class:spdlog
stdout_sink	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^    stdout_sink()$/;"	f	class:spdlog::sinks::stdout_sink
stdout_sink	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^class stdout_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stdout_sink_mt	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<std::mutex> stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
stdout_sink_st	amun/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<details::null_mutex> stdout_sink_st;$/;"	t	namespace:spdlog::sinks
stop	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::CastIterator<C>::stop() const$/;"	f	class:blaze::PtrVector::CastIterator
stop	amun/3rd_party/blaze/util/PtrVector.h	/^   PtrVector<T,D,G>::ConstCastIterator<C>::stop() const$/;"	f	class:blaze::PtrVector::ConstCastIterator
stop	amun/common/threadpool.h	/^    bool stop;$/;"	m	class:amunmt::ThreadPool
store	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline void store( const SIMDType& value ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
store	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline void store( const SIMDType& value ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
store	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline void store( const SIMDType& value ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
store	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline void store( const SIMDType& value ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
store	amun/3rd_party/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int
storea	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline void storea( const SIMDType& value ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
storea	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline void storea( const SIMDType& value ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
storea	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline void storea( const SIMDType& value ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
storea	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline void storea( const SIMDType& value ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
storeu	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline void storeu( const SIMDType& value ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
storeu	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline void storeu( const SIMDType& value ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
storeu	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline void storeu( const SIMDType& value ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
storeu	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline void storeu( const SIMDType& value ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
str	amun/3rd_party/blaze/util/InputString.h	/^inline const std::string& InputString::str() const$/;"	f	class:blaze::InputString
str	amun/3rd_party/spdlog/details/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec
str	amun/3rd_party/spdlog/details/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	amun/3rd_party/spdlog/details/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str	amun/3rd_party/spdlog/details/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
str	amun/3rd_party/spdlog/details/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec
str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
str	amun/3rd_party/yaml-cpp/ostream_wrapper.h	/^  const char* str() const {$/;"	f	class:YAML::ostream_wrapper
str2id_	amun/common/vocab.h	/^    Str2Id str2id_;$/;"	m	class:amunmt::Vocab
str_	amun/3rd_party/spdlog/details/format.h	/^    char *str_;$/;"	m	class:FormatInt
str_	amun/3rd_party/spdlog/details/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec
str_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char *str_;$/;"	m	class:FormatInt
str_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec
stream	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      inline void stream( const SIMDType& value ) const {$/;"	f	class:blaze::HermitianMatrix::Iterator
stream	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      inline void stream( const SIMDType& value ) const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
stream	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      inline void stream( const SIMDType& value ) const {$/;"	f	class:blaze::Submatrix::SubmatrixIterator
stream	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      inline void stream( const SIMDType& value ) const {$/;"	f	class:blaze::Subvector::SubvectorIterator
stream_	amun/3rd_party/blaze/util/serialization/Archive.h	/^   Stream& stream_;               \/\/!< Reference to the bound stream.$/;"	m	class:blaze::Archive
stream_	amun/gpu/mblas/handles.h	/^    cudaStream_t stream_;$/;"	m	class:amunmt::GPU::mblas::CudaStreamHandler
strerror_r	amun/3rd_party/spdlog/details/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...)$/;"	f	file:
strerror_r	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...)$/;"	f	file:
strerror_s	amun/3rd_party/spdlog/details/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...)$/;"	f	file:
strerror_s	amun/3rd_party/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...)$/;"	f	file:
stride	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned stride(unsigned i) const$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
stride_	amun/gpu/mblas/tensor_wrapper.h	/^  unsigned stride_[SHAPE_SIZE];$/;"	m	class:amunmt::GPU::mblas::TensorWrapper
string	amun/3rd_party/spdlog/details/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon17
string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon51
style	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  EmitterStyle::value style() const { return m_pRef->style(); }$/;"	f	class:YAML::detail::node
style	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  EmitterStyle::value style() const { return m_style; }$/;"	f	class:YAML::detail::node_data
style	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  EmitterStyle::value style() const { return m_pData->style(); }$/;"	f	class:YAML::detail::node_ref
subAssign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::subAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
subAssign	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,true,false>::subAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::SymmetricMatrix
subAssign	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      subAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatAddExpr& rhs )$/;"	f	class:blaze::DMatDMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      subAssign( DenseMatrix<MT,SO2>& lhs, const DMatDMatSubExpr& rhs )$/;"	f	class:blaze::DMatDMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,false>& lhs, const DMatDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatEvalExpr.h	/^   friend inline void subAssign( SparseMatrix<MT2,SO2>& lhs, const DMatEvalExpr& rhs )$/;"	f	class:blaze::DMatEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatForEachExpr& rhs )$/;"	f	class:blaze::DMatForEachExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatInvExpr.h	/^   friend inline void subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatInvExpr& rhs )$/;"	f	class:blaze::DMatInvExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatAddExpr& rhs )$/;"	f	class:blaze::DMatSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DMatSMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const DMatSMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DMatSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const DMatSMatSubExpr& rhs )$/;"	f	class:blaze::DMatSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      subAssign( DenseVector<VT1,false>& lhs, const DMatSVecMultExpr& rhs )$/;"	f	class:blaze::DMatSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarDivExpr& rhs )$/;"	f	class:blaze::DMatScalarDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatScalarMultExpr& rhs )$/;"	f	class:blaze::DMatScalarMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatSerialExpr.h	/^   friend inline void subAssign( SparseMatrix<MT2,SO2>& lhs, const DMatSerialExpr& rhs )$/;"	f	class:blaze::DMatSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatAddExpr.h	/^      subAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatAddExpr& rhs )$/;"	f	class:blaze::DMatTDMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const DMatTDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DMatTDMatSubExpr.h	/^      subAssign( DenseMatrix<MT,SO2>& lhs, const DMatTDMatSubExpr& rhs )$/;"	f	class:blaze::DMatTDMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatAddExpr& rhs )$/;"	f	class:blaze::DMatTSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const DMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/DMatTSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const DMatTSMatSubExpr& rhs )$/;"	f	class:blaze::DMatTSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const DMatTransExpr& rhs )$/;"	f	class:blaze::DMatTransExpr
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const DenseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const DenseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const DenseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const SparseMatrix<MT2,!SO>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const SparseMatrix<MT2,false>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DMatTransposer.h	/^   inline void subAssign( const SparseMatrix<MT2,true>& rhs )$/;"	f	class:blaze::DMatTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const DVecDVecAddExpr& rhs )$/;"	f	class:blaze::DVecDVecAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecDVecCrossExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const DVecDVecCrossExpr& rhs )$/;"	f	class:blaze::DVecDVecCrossExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const DVecDVecDivExpr& rhs )$/;"	f	class:blaze::DVecDVecDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const DVecDVecMultExpr& rhs )$/;"	f	class:blaze::DVecDVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const DVecDVecSubExpr& rhs )$/;"	f	class:blaze::DVecDVecSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void subAssign( DenseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecEvalExpr.h	/^   friend inline void subAssign( SparseVector<VT2,TF>& lhs, const DVecEvalExpr& rhs )$/;"	f	class:blaze::DVecEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const DVecForEachExpr& rhs )$/;"	f	class:blaze::DVecForEachExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSVecAddExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const DVecSVecAddExpr& rhs )$/;"	f	class:blaze::DVecSVecAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSVecCrossExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const DVecSVecCrossExpr& rhs )$/;"	f	class:blaze::DVecSVecCrossExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const DVecSVecMultExpr& rhs )$/;"	f	class:blaze::DVecSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSVecSubExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const DVecSVecSubExpr& rhs )$/;"	f	class:blaze::DVecSVecSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const DVecScalarDivExpr& rhs )$/;"	f	class:blaze::DVecScalarDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const DVecScalarMultExpr& rhs )$/;"	f	class:blaze::DVecScalarMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void subAssign( DenseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecSerialExpr.h	/^   friend inline void subAssign( SparseVector<VT2,TF>& lhs, const DVecSerialExpr& rhs )$/;"	f	class:blaze::DVecSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      subAssign( DenseMatrix<MT,false>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,true>& lhs, const DVecTDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      subAssign( DenseMatrix<MT,false>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,true>& lhs, const DVecTSVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const DVecTransExpr& rhs )$/;"	f	class:blaze::DVecTransExpr
subAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void subAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
subAssign	amun/3rd_party/blaze/math/expressions/DVecTransposer.h	/^   inline void subAssign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::DVecTransposer
subAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void subAssign( Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/SMatDMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const SMatDMatSubExpr& rhs )$/;"	f	class:blaze::SMatDMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      subAssign( DenseVector<VT1,false>& lhs, const SMatDVecMultExpr& rhs )$/;"	f	class:blaze::SMatDVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatEvalExpr.h	/^   friend inline void subAssign( SparseMatrix<MT2,SO2>& lhs, const SMatEvalExpr& rhs )$/;"	f	class:blaze::SMatEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatForEachExpr& rhs )$/;"	f	class:blaze::SMatForEachExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatAddExpr& rhs )$/;"	f	class:blaze::SMatSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/SMatSMatMultExpr.h	/^      subAssign( Matrix<MT,true>& lhs, const SMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/SMatSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const SMatSMatSubExpr& rhs )$/;"	f	class:blaze::SMatSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,false>& lhs, const SMatSVecMultExpr& rhs )$/;"	f	class:blaze::SMatSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarDivExpr& rhs )$/;"	f	class:blaze::SMatScalarDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatScalarMultExpr& rhs )$/;"	f	class:blaze::SMatScalarMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatSerialExpr.h	/^   friend inline void subAssign( SparseMatrix<MT2,SO2>& lhs, const SMatSerialExpr& rhs )$/;"	f	class:blaze::SMatSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const SMatTDMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/SMatTDMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const SMatTDMatSubExpr& rhs )$/;"	f	class:blaze::SMatTDMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatAddExpr& rhs )$/;"	f	class:blaze::SMatTSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      subAssign( Matrix<MT,false>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatMultExpr.h	/^      subAssign( Matrix<MT,true>& lhs, const SMatTSMatMultExpr& rhs )$/;"	f	class:blaze::SMatTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const SMatTSMatSubExpr& rhs )$/;"	f	class:blaze::SMatTSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      subAssign( DenseMatrix<MT2,SO2>& lhs, const SMatTransExpr& rhs )$/;"	f	class:blaze::SMatTransExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecDVecCrossExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecDVecCrossExpr& rhs )$/;"	f	class:blaze::SVecDVecCrossExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const SVecDVecDivExpr& rhs )$/;"	f	class:blaze::SVecDVecDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      subAssign( DenseVector<VT,TF>& lhs, const SVecDVecMultExpr& rhs )$/;"	f	class:blaze::SVecDVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecDVecSubExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecDVecSubExpr& rhs )$/;"	f	class:blaze::SVecDVecSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void subAssign( DenseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   friend inline void subAssign( SparseVector<VT2,TF>& lhs, const SVecEvalExpr& rhs )$/;"	f	class:blaze::SVecEvalExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const SVecForEachExpr& rhs )$/;"	f	class:blaze::SVecForEachExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSVecAddExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecSVecAddExpr& rhs )$/;"	f	class:blaze::SVecSVecAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSVecCrossExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecSVecCrossExpr& rhs )$/;"	f	class:blaze::SVecSVecCrossExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecSVecMultExpr& rhs )$/;"	f	class:blaze::SVecSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSVecSubExpr.h	/^   friend inline void subAssign( DenseVector<VT,TF>& lhs, const SVecSVecSubExpr& rhs )$/;"	f	class:blaze::SVecSVecSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const SVecScalarDivExpr& rhs )$/;"	f	class:blaze::SVecScalarDivExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const SVecScalarMultExpr& rhs )$/;"	f	class:blaze::SVecScalarMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void subAssign( DenseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   friend inline void subAssign( SparseVector<VT2,TF>& lhs, const SVecSerialExpr& rhs )$/;"	f	class:blaze::SVecSerialExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      subAssign( DenseMatrix<MT,true>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,false>& lhs, const SVecTDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,false>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecTSVecMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,true>& lhs, const SVecTSVecMultExpr& rhs )$/;"	f	class:blaze::SVecTSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      subAssign( DenseVector<VT2,TF>& lhs, const SVecTransExpr& rhs )$/;"	f	class:blaze::SVecTransExpr
subAssign	amun/3rd_party/blaze/math/expressions/TDMatDMatMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const TDMatDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,false>& lhs, const TDMatDVecMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatAddExpr& rhs )$/;"	f	class:blaze::TDMatSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const TDMatSMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDMatSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const TDMatSMatSubExpr& rhs )$/;"	f	class:blaze::TDMatSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,true>& lhs, const TDVecDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   friend inline void subAssign( DenseVector<VT2,true>& lhs, const TDVecSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,true>& lhs, const TDVecTDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^      subAssign( DenseVector<VT2,true>& lhs, const TDVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TDVecTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const TSMatDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TSMatDMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO2>& lhs, const TSMatDMatSubExpr& rhs )$/;"	f	class:blaze::TSMatDMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT2,false>& lhs, const TSMatDVecMultExpr& rhs )$/;"	f	class:blaze::TSMatDVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      subAssign( Matrix<MT,false>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^      subAssign( Matrix<MT,true>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatMultExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/TSMatSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const TSMatSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,false>& lhs, const TSMatSVecMultExpr& rhs )$/;"	f	class:blaze::TSMatSVecMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTDMatMultExpr.h	/^      subAssign( Matrix<MT,SO>& lhs, const TSMatTDMatMultExpr& rhs )$/;"	f
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatAddExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatAddExpr& rhs )$/;"	f	class:blaze::TSMatTSMatAddExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      subAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatMultExpr.h	/^      subAssign( Matrix<MT,false>& lhs, const TSMatTSMatMultExpr& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/expressions/TSMatTSMatSubExpr.h	/^   friend inline void subAssign( DenseMatrix<MT,SO>& lhs, const TSMatTSMatSubExpr& rhs )$/;"	f	class:blaze::TSMatTSMatSubExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,true>& lhs, const TSVecSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^      subAssign( DenseVector<VT2,true>& lhs, const TSVecTDMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTDMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   friend inline void subAssign( DenseVector<VT1,true>& lhs, const TSVecTSMatMultExpr& rhs )$/;"	f	class:blaze::TSVecTSMatMultExpr
subAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE void subAssign( Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs )$/;"	f	namespace:blaze
subAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::subAssign( const DenseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
subAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::subAssign( const SparseMatrix<MT,SO2>& rhs )$/;"	f	class:blaze::CompressedMatrix
subAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::subAssign( const DenseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
subAssign	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,true>::subAssign( const SparseMatrix<MT,SO>& rhs )$/;"	f	class:blaze::CompressedMatrix
subAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::subAssign( const DenseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
subAssign	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline void CompressedVector<Type,TF>::subAssign( const SparseVector<VT,TF>& rhs )$/;"	f	class:blaze::CompressedVector
subAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,false>::subAssign( const Vector<VT,false>& rhs )$/;"	f	class:blaze::Column
subAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::subAssign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
subAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,false,false,true>::subAssign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
subAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::subAssign( const DenseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
subAssign	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline void Column<MT,true,false,SF>::subAssign( const SparseVector<VT,false>& rhs )$/;"	f	class:blaze::Column
subAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,false>::subAssign( const Vector<VT,true>& rhs )$/;"	f	class:blaze::Row
subAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::subAssign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
subAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,false,false,true>::subAssign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
subAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::subAssign( const DenseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
subAssign	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline void Row<MT,true,false,SF>::subAssign( const SparseVector<VT,true>& rhs )$/;"	f	class:blaze::Row
subAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::subAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
subAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,false,false>::subAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
subAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::subAssign( const DenseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
subAssign	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline void Submatrix<MT,AF,true,false>::subAssign( const SparseMatrix<MT2,SO>& rhs )$/;"	f	class:blaze::Submatrix
subAssign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::subAssign( const DenseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
subAssign	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^inline void Subvector<VT,AF,TF,false>::subAssign( const SparseVector<VT2,TF>& rhs )$/;"	f	class:blaze::Subvector
subAssign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^   subAssign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,!SO>& rhs )$/;"	f	namespace:blaze
subAssign_backend	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void subAssign_backend( Matrix<MT1,SO>& lhs, const Matrix<MT2,SO>& rhs )$/;"	f	namespace:blaze
submatrix	amun/3rd_party/blaze/math/views/Submatrix.h	/^   submatrix( Matrix<MT,SO>& matrix, size_t row, size_t column, size_t m, size_t n )$/;"	f	namespace:blaze
submatrix	amun/3rd_party/blaze/math/views/Submatrix.h	/^   submatrix( const Matrix<MT,SO>& matrix, size_t row, size_t column, size_t m, size_t n )$/;"	f	namespace:blaze
submatrix	amun/3rd_party/blaze/math/views/Submatrix.h	/^   submatrix( const Submatrix<MT,AF2,SO,DF>& sm, size_t row, size_t column, size_t m, size_t n )$/;"	f	namespace:blaze
subvector	amun/3rd_party/blaze/math/views/Submatrix.h	/^   subvector( const Vector<VT,TF>& vector, size_t index, size_t size )$/;"	f	namespace:blaze
subvector	amun/3rd_party/blaze/math/views/Subvector.h	/^   subvector( Vector<VT,TF>& vector, size_t index, size_t size )$/;"	f	namespace:blaze
subvector	amun/3rd_party/blaze/math/views/Subvector.h	/^   subvector( const Subvector<VT,AF2,TF,DF>& sv, size_t index, size_t size )$/;"	f	namespace:blaze
subvector	amun/3rd_party/blaze/math/views/Subvector.h	/^   subvector( const Vector<VT,TF>& vector, size_t index, size_t size )$/;"	f	namespace:blaze
sv_	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^      : sv_( sv )  \/\/ Sparse vector of the evaluation expression$/;"	f	class:blaze::SVecEvalExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecEvalExpr.h	/^   Operand sv_;  \/\/!< Sparse vector of the evaluation expression.$/;"	m	class:blaze::SVecEvalExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   Operand   sv_;  \/\/!< Sparse vector of the for-each expression.$/;"	m	class:blaze::SVecForEachExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^      : sv_( sv )  \/\/ Sparse vector of the serial evaluation expression$/;"	f	class:blaze::SVecSerialExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecSerialExpr.h	/^   Operand sv_;  \/\/!< Sparse vector of the serial evaluation expression.$/;"	m	class:blaze::SVecSerialExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      : sv_( sv )  \/\/ Sparse vector of the transposition expression$/;"	f	class:blaze::SVecTransExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   Operand sv_;  \/\/!< Sparse vector of the transposition expression.$/;"	m	class:blaze::SVecTransExpr
sv_	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^      : sv_( sv )  \/\/ The sparse vector operand$/;"	f	class:blaze::SVecTransposer
sv_	amun/3rd_party/blaze/math/expressions/SVecTransposer.h	/^   VT& sv_;  \/\/!< The sparse vector operand.$/;"	m	class:blaze::SVecTransposer
sv_	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^   VT&    sv_;  \/\/!< Reference to the accessed sparse vector.$/;"	m	class:blaze::VectorAccessProxy
swap	amun/3rd_party/yaml-cpp/binary.h	/^  void swap(std::vector<unsigned char> &rhs) {$/;"	f	class:YAML::Binary
swap	amun/cpu/mblas/tensor.h	/^    void swap(BlazeMatrix<T, SO>& rhs) {$/;"	f	class:amunmt::CPU::mblas::BlazeMatrix
swap	amun/gpu/mblas/tensor.h	/^    void swap(TTensor &other)$/;"	f	class:amunmt::GPU::mblas::TTensor
swap	amun/gpu/mblas/vector.h	/^  void swap(Vector &other)$/;"	f	class:amunmt::GPU::mblas::Vector
sync	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      void sync() const {$/;"	f	class:blaze::HermitianMatrix::Iterator
sync	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline void HermitianElement<MT>::sync()$/;"	f	class:blaze::HermitianElement
sync	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^inline void HermitianValue<MT>::sync() const$/;"	f	class:blaze::HermitianValue
sync	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      void sync() const {$/;"	f	class:blaze::SymmetricMatrix::Iterator
sync	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline void SymmetricElement<MT>::sync()$/;"	f	class:blaze::SymmetricElement
sync	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^inline void SymmetricValue<MT>::sync() const$/;"	f	class:blaze::SymmetricValue
sys	amun/python/test.py	/^import sys$/;"	i
syslog_logger	amun/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::syslog_logger(const std::string& logger_name, const std::string& syslog_ident, int syslog_option)$/;"	f	class:spdlog
syslog_prio_from_level	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^    syslog_sink(const std::string& ident = "", int syslog_option=0, int syslog_facility=LOG_USER):$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public sink$/;"	c	namespace:spdlog::sinks
sysv	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	/^inline void sysv( char uplo, int n, int nrhs, complex<double>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sysv	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	/^inline void sysv( char uplo, int n, int nrhs, complex<float>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sysv	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	/^inline void sysv( char uplo, int n, int nrhs, double* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sysv	amun/3rd_party/blaze/math/lapack/clapack/sysv.h	/^inline void sysv( char uplo, int n, int nrhs, float* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sysv	amun/3rd_party/blaze/math/lapack/sysv.h	/^inline void sysv( DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, int* ipiv )$/;"	f	namespace:blaze
sysv	amun/3rd_party/blaze/math/lapack/sysv.h	/^inline void sysv( DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, char uplo, int* ipiv )$/;"	f	namespace:blaze
sytrf	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	/^inline void sytrf( char uplo, int n, complex<double>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sytrf	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	/^inline void sytrf( char uplo, int n, complex<float>* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sytrf	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	/^inline void sytrf( char uplo, int n, double* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sytrf	amun/3rd_party/blaze/math/lapack/clapack/sytrf.h	/^inline void sytrf( char uplo, int n, float* A, int lda, int* ipiv,$/;"	f	namespace:blaze
sytrf	amun/3rd_party/blaze/math/lapack/sytrf.h	/^inline void sytrf( DenseMatrix<MT,SO>& A, char uplo, int* ipiv )$/;"	f	namespace:blaze
sytri	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	/^inline void sytri( char uplo, int n, complex<double>* A, int lda,$/;"	f	namespace:blaze
sytri	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	/^inline void sytri( char uplo, int n, complex<float>* A, int lda,$/;"	f	namespace:blaze
sytri	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	/^inline void sytri( char uplo, int n, double* A, int lda, const int* ipiv, double* work, int* info )$/;"	f	namespace:blaze
sytri	amun/3rd_party/blaze/math/lapack/clapack/sytri.h	/^inline void sytri( char uplo, int n, float* A, int lda, const int* ipiv, float* work, int* info )$/;"	f	namespace:blaze
sytri	amun/3rd_party/blaze/math/lapack/sytri.h	/^inline void sytri( DenseMatrix<MT,SO>& A, char uplo, const int* ipiv )$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	/^inline void sytrs( char uplo, int n, int nrhs, const complex<double>* A, int lda,$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	/^inline void sytrs( char uplo, int n, int nrhs, const complex<float>* A, int lda,$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	/^inline void sytrs( char uplo, int n, int nrhs, const double* A, int lda, const int* ipiv,$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/clapack/sytrs.h	/^inline void sytrs( char uplo, int n, int nrhs, const float* A, int lda, const int* ipiv,$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/sytrs.h	/^inline void sytrs( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, const int* ipiv )$/;"	f	namespace:blaze
sytrs	amun/3rd_party/blaze/math/lapack/sytrs.h	/^inline void sytrs( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B, char uplo, const int* ipiv )$/;"	f	namespace:blaze
t	amun/3rd_party/yaml-cpp/node/impl.h	/^  const T& t;$/;"	m	struct:YAML::detail::to_value_t
t	amun/3rd_party/yaml-cpp/node/impl.h	/^  const char* t;$/;"	m	struct:YAML::detail::to_value_t
t_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class t_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
tab_	amun/common/scorer.h	/^    unsigned tab_;$/;"	m	class:amunmt::Scorer
tag	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  const std::string& tag() const { return m_pRef->tag(); }$/;"	f	class:YAML::detail::node
tag	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const std::string& tag() const { return m_tag; }$/;"	f	class:YAML::detail::node_data
tag	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const std::string& tag() const { return m_pData->tag(); }$/;"	f	class:YAML::detail::node_ref
tags	amun/3rd_party/yaml-cpp/directives.h	/^  std::map<std::string, std::string> tags;$/;"	m	struct:YAML::Directives
tan	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Tan,SO> tan( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
tan	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Tan,TF> tan( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
tan	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Tan,SO> tan( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
tan	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Tan,TF> tan( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
tan	amun/3rd_party/blaze/math/functors/Tan.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( tan( a ) )$/;"	f	struct:blaze::Tan
tan	amun/3rd_party/blaze/math/functors/Tan.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( tan( a ) )$/;"	f	struct:blaze::Tan
tan	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( tan( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
tanh	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^inline const DMatForEachExpr<MT,Tanh,SO> tanh( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
tanh	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^inline const DVecForEachExpr<VT,Tanh,TF> tanh( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
tanh	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^inline const SMatForEachExpr<MT,Tanh,SO> tanh( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
tanh	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^inline const SVecForEachExpr<VT,Tanh,TF> tanh( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
tanh	amun/3rd_party/blaze/math/functors/Tanh.h	/^   BLAZE_ALWAYS_INLINE auto load( const T& a ) const -> decltype( tanh( a ) )$/;"	f	struct:blaze::Tanh
tanh	amun/3rd_party/blaze/math/functors/Tanh.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( tanh( a ) )$/;"	f	struct:blaze::Tanh
tanh	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( tanh( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
tanhapprox	amun/cpu/mblas/phoenix_functions.h	/^  inline float tanhapprox(float x) {$/;"	f	namespace:amunmt::CPU::mblas
tanhapprox	amun/cpu/mblas/simd_math_prims.h	/^inline float tanhapprox(float x) {$/;"	f
targetVocab_	amun/common/god.h	/^    mutable std::unique_ptr<Vocab> targetVocab_;$/;"	m	class:amunmt::God
target_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      Target       target_;  \/\/!< The target operand.$/;"	m	struct:blaze::ThreadBackend::AddAssigner
target_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      Target       target_;  \/\/!< The target operand.$/;"	m	struct:blaze::ThreadBackend::Assigner
target_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      Target       target_;  \/\/!< The target operand.$/;"	m	struct:blaze::ThreadBackend::DivAssigner
target_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      Target       target_;  \/\/!< The target operand.$/;"	m	struct:blaze::ThreadBackend::MultAssigner
target_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^      Target       target_;  \/\/!< The target operand.$/;"	m	struct:blaze::ThreadBackend::SubAssigner
taskqueue_	amun/3rd_party/blaze/util/ThreadPool.h	/^   TaskQueue taskqueue_;       \/\/!< Task queue for the scheduled tasks.$/;"	m	class:blaze::ThreadPool
tasks	amun/common/threadpool.h	/^    std::queue< std::function<void()> > tasks;$/;"	m	class:amunmt::ThreadPool
tasks_	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^   Tasks tasks_;  \/\/!< FIFO container for the contained tasks.$/;"	m	class:blaze::threadpool::TaskQueue
tempState_	amun/gpu/dl4mt/multiplicative.h	/^    mutable CellState tempState_;$/;"	m	class:amunmt::GPU::Multiplicative
terminated_	amun/3rd_party/blaze/util/Thread.h	/^   volatile bool   terminated_;  \/\/!< Thread termination flag.$/;"	m	class:blaze::Thread
testidToMatrixInd	amun/gpu/mblas/tensor_wrapper.h	/^inline void testidToMatrixInd()$/;"	f	namespace:amunmt::GPU::mblas
theSystemClock	amun/3rd_party/blaze/util/SystemClock.h	/^inline SystemClockID theSystemClock()$/;"	f	namespace:blaze
thousands_sep	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline StringRef thousands_sep($/;"	f	namespace:fmt::internal
thousands_sep	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline fmt::StringRef thousands_sep(...)$/;"	f	namespace:fmt::internal
threadIncr_	amun/common/god.h	/^    mutable unsigned threadIncr_;$/;"	m	class:amunmt::God
threadInd	amun/common/types.h	/^  unsigned threadInd;$/;"	m	struct:amunmt::DeviceInfo
thread_	amun/3rd_party/blaze/util/Thread.h	/^   ThreadHandle    thread_;      \/\/!< Handle to the thread of execution.$/;"	m	class:blaze::Thread
thread_buffer_size	amun/3rd_party/fast_align/src/fast_align.cc	/^size_t thread_buffer_size = 10000;$/;"	v
thread_id	amun/3rd_party/spdlog/details/async_log_helper.h	/^        size_t thread_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
thread_id	amun/3rd_party/spdlog/details/log_msg.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::log_msg
thread_id	amun/3rd_party/spdlog/details/os.h	/^inline size_t thread_id()$/;"	f	namespace:spdlog::details::os
threadpool	amun/3rd_party/blaze/util/threadpool/Task.h	/^namespace threadpool {$/;"	n	namespace:blaze
threadpool	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^namespace threadpool {$/;"	n	namespace:blaze
threadpool	amun/3rd_party/blaze/util/threadpool/ThreadPool.h	/^namespace threadpool {}$/;"	n	namespace:blaze
threadpool_	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^   static ThreadPool<TT,MT,LT,CT> threadpool_;  \/\/!< The pool of active threads of the backend system.$/;"	m	class:blaze::ThreadBackend
threads_	amun/3rd_party/blaze/util/ThreadPool.h	/^   Threads threads_;           \/\/!< The threads contained in the thread pool.$/;"	m	class:blaze::ThreadPool
throw_if_exists	amun/3rd_party/spdlog/details/registry.h	/^    void throw_if_exists(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t
thrust	amun/3rd_party/thrust_bind/bind.hpp	/^namespace thrust$/;"	n
thrust	amun/gpu/mblas/thrust_functions.h	/^namespace thrust$/;"	n
time	amun/3rd_party/spdlog/details/async_log_helper.h	/^        log_clock::time_point time;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
time	amun/3rd_party/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
time	amun/python/test2.py	/^import time$/;"	i
time_	amun/3rd_party/blaze/util/timing/Timer.h	/^   double time_;     \/\/!< The total elapsed time of all measurements.$/;"	m	class:blaze::timing::Timer
timers	amun/common/god.cpp	/^std::unordered_map<std::string, boost::timer::cpu_timer> timers;$/;"	m	namespace:amunmt	file:
timing	amun/3rd_party/blaze/util/timing/CpuPolicy.h	/^namespace timing {$/;"	n	namespace:blaze
timing	amun/3rd_party/blaze/util/timing/CpuTimer.h	/^namespace timing {$/;"	n	namespace:blaze
timing	amun/3rd_party/blaze/util/timing/Timer.h	/^namespace timing {$/;"	n	namespace:blaze
timing	amun/3rd_party/blaze/util/timing/Timing.h	/^namespace timing {}$/;"	n	namespace:blaze
timing	amun/3rd_party/blaze/util/timing/WcPolicy.h	/^namespace timing {$/;"	n	namespace:blaze
timing	amun/3rd_party/blaze/util/timing/WcTimer.h	/^namespace timing {$/;"	n	namespace:blaze
tmp	amun/3rd_party/blaze/util/TypeList.h	/^   enum { tmp = IndexOf<Tail,Type>::value };  \/\/!< Index of \\a Type in the tail of the type list.$/;"	e	enum:blaze::IndexOf::__anon127
tmp	amun/3rd_party/blaze/util/TypeList.h	/^   enum { tmp = sizeof( test( createType() ) ) == sizeof( Yes ) ? 1 : 0 };  \/\/!< Relationship evaluation.$/;"	e	enum:blaze::ContainsRelated::__anon123
to12h	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static int to12h(const tm& t)$/;"	f	namespace:spdlog::details
to_short_str	amun/3rd_party/spdlog/common.h	/^inline const char* to_short_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_str	amun/3rd_party/spdlog/common.h	/^inline const char* to_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_string	amun/3rd_party/spdlog/details/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef
to_string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef
to_unsigned	amun/3rd_party/spdlog/details/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal
to_unsigned	amun/3rd_party/spdlog/fmt/bundled/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal
to_value	amun/3rd_party/yaml-cpp/node/impl.h	/^inline typename to_value_t<T>::return_type to_value(const T& t) {$/;"	f	namespace:YAML::detail
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(char* t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(const T& t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(const char* t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t {$/;"	s	namespace:YAML::detail
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<char*> {$/;"	s	namespace:YAML::detail
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<char[N]> {$/;"	s	namespace:YAML::detail
to_value_t	amun/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<const char*> {$/;"	s	namespace:YAML::detail
tolower	amun/3rd_party/yaml-cpp/convert.cpp	/^std::string tolower(const std::string& str) {$/;"	f	namespace:__anon85
topHyps_	amun/common/history.h	/^    std::priority_queue<HypothesisCoord> topHyps_;$/;"	m	class:amunmt::History
tostring	amun/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::string tostring(T i, int pad = 0, char padval = ' ') {$/;"	f	namespace:cnpy
total	amun/3rd_party/blaze/util/timing/Timer.h	/^inline double Timer<TP>::total() const$/;"	f	class:blaze::timing::Timer
total_	amun/3rd_party/blaze/util/ThreadPool.h	/^   volatile size_t total_;     \/\/!< Total number of threads in the thread pool.$/;"	m	class:blaze::ThreadPool
trace	amun/3rd_party/spdlog/common.h	/^    trace = 0,$/;"	e	enum:spdlog::level::__anon34
trace	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T& msg)$/;"	f	class:spdlog::logger
trace	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
traits_type	amun/3rd_party/spdlog/details/format.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::FormatBuf
traits_type	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::internal::FormatBuf
trans	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^inline const DMatTransExpr<MT,!SO> trans( const DenseMatrix<MT,SO>& dm )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^inline typename DMatTransExpr<MT,SO>::Operand trans( const DMatTransExpr<MT,SO>& dm )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^inline const DVecTransExpr<VT,!TF> trans( const DenseVector<VT,TF>& dv )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^inline typename DVecTransExpr<VT,TF>::Operand trans( const DVecTransExpr<VT,TF>& dv )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^inline const SMatTransExpr<MT,!SO> trans( const SparseMatrix<MT,SO>& sm )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^inline typename SMatTransExpr<MT,SO>::Operand trans( const SMatTransExpr<MT,SO>& sm )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^inline const SVecTransExpr<VT,!TF> trans( const SparseVector<VT,TF>& sv )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^inline typename SVecTransExpr<VT,TF>::Operand trans( const SVecTransExpr<VT,TF>& sv )$/;"	f	namespace:blaze
trans	amun/3rd_party/blaze/math/functors/Trans.h	/^   BLAZE_ALWAYS_INLINE auto operator()( const T& a ) const -> decltype( trans( a ) )$/;"	f	struct:blaze::Trans
trans	amun/3rd_party/blaze/math/proxy/Proxy.h	/^   -> decltype( trans( std::declval< RepresentedType_<PT> >() ) )$/;"	f	namespace:blaze
transfer	amun/3rd_party/blaze/util/Algorithm.h	/^OutputIterator transfer( InputIterator first, InputIterator last, OutputIterator dest )$/;"	f	namespace:blaze
transition_	amun/cpu/nematus/decoder.h	/^        const Transition transition_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNFinal
transition_	amun/cpu/nematus/encoder.h	/^        const Transition transition_;$/;"	m	class:amunmt::CPU::Nematus::Encoder::EncoderRNN
translate	amun/python/amunmt.cpp	/^boost::python::list translate(boost::python::list &in, int allow_unk) {$/;"	f
translate	amun/python/bk.cpp	/^boost::python::list translate(boost::python::list &in) {$/;"	f
translate_batch	amun/python/new.cpp	/^boost::python::list translate_batch(boost::python::list &in) {$/;"	f
transpose	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^inline HermitianMatrix<MT,SO,true>& HermitianMatrix<MT,SO,true>::transpose()$/;"	f	class:blaze::HermitianMatrix
transpose	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline HermitianMatrix<MT,SO,false>& HermitianMatrix<MT,SO,false>::transpose()$/;"	f	class:blaze::HermitianMatrix
transpose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,true,false>& SymmetricMatrix<MT,SO,true,false>::transpose()$/;"	f	class:blaze::SymmetricMatrix
transpose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^inline SymmetricMatrix<MT,SO,true,true>& SymmetricMatrix<MT,SO,true,true>::transpose()$/;"	f	class:blaze::SymmetricMatrix
transpose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline SymmetricMatrix<MT,SO,false,false>& SymmetricMatrix<MT,SO,false,false>::transpose()$/;"	f	class:blaze::SymmetricMatrix
transpose	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline SymmetricMatrix<MT,SO,false,true>& SymmetricMatrix<MT,SO,false,true>::transpose()$/;"	f	class:blaze::SymmetricMatrix
transpose	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE void transpose( Matrix<MT,SO>& matrix )$/;"	f	namespace:blaze
transpose	amun/3rd_party/blaze/math/proxy/DenseMatrixProxy.h	/^inline void DenseMatrixProxy<PT,MT>::transpose() const$/;"	f	class:blaze::DenseMatrixProxy
transpose	amun/3rd_party/blaze/math/proxy/Proxy.h	/^inline void transpose( const Proxy<PT,RT>& proxy )$/;"	f	namespace:blaze
transpose	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::transpose() const$/;"	f	class:blaze::SparseMatrixProxy
transpose	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>& CompressedMatrix<Type,SO>::transpose()$/;"	f	class:blaze::CompressedMatrix
transpose	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>& CompressedMatrix<Type,true>::transpose()$/;"	f	class:blaze::CompressedMatrix
transpose	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,false,false>& Submatrix<MT,AF,false,false>::transpose()$/;"	f	class:blaze::Submatrix
transpose	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^inline Submatrix<MT,AF,true,false>& Submatrix<MT,AF,true,false>::transpose()$/;"	f	class:blaze::Submatrix
trgVocab_	amun/plugin/nbest.h	/^    std::shared_ptr<Vocab> trgVocab_;$/;"	m	class:NBest
trim	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::DiagonalMatrix
trim	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^inline void DiagonalMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::DiagonalMatrix
trim	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::HermitianMatrix
trim	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^inline void HermitianMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::HermitianMatrix
trim	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::LowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^inline void LowerMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::LowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::StrictlyLowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^inline void StrictlyLowerMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::StrictlyLowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::StrictlyUpperMatrix
trim	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^inline void StrictlyUpperMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::StrictlyUpperMatrix
trim	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::trim( size_t i )$/;"	f	class:blaze::SymmetricMatrix
trim	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,false>::trim()$/;"	f	class:blaze::SymmetricMatrix
trim	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::trim( size_t i )$/;"	f	class:blaze::SymmetricMatrix
trim	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^inline void SymmetricMatrix<MT,SO,false,true>::trim()$/;"	f	class:blaze::SymmetricMatrix
trim	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::UniLowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^inline void UniLowerMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::UniLowerMatrix
trim	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::UniUpperMatrix
trim	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^inline void UniUpperMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::UniUpperMatrix
trim	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::trim( size_t i )$/;"	f	class:blaze::UpperMatrix
trim	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^inline void UpperMatrix<MT,SO,false>::trim()$/;"	f	class:blaze::UpperMatrix
trim	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::trim( size_t i ) const$/;"	f	class:blaze::SparseMatrixProxy
trim	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^inline void SparseMatrixProxy<PT,MT>::trim() const$/;"	f	class:blaze::SparseMatrixProxy
trim	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::trim( size_t i )$/;"	f	class:blaze::CompressedMatrix
trim	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline void CompressedMatrix<Type,SO>::trim()$/;"	f	class:blaze::CompressedMatrix
trim	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,true>::trim( size_t j )$/;"	f	class:blaze::CompressedMatrix
trim	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^void CompressedMatrix<Type,true>::trim()$/;"	f	class:blaze::CompressedMatrix
trim	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,false,false>::trim( size_t i )$/;"	f	class:blaze::Submatrix
trim	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,false,false>::trim()$/;"	f	class:blaze::Submatrix
trim	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,true,false>::trim( size_t j )$/;"	f	class:blaze::Submatrix
trim	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^void Submatrix<MT,AF,true,false>::trim()$/;"	f	class:blaze::Submatrix
trimTrailingSpaces	amun/3rd_party/yaml-cpp/scanscalar.h	/^  bool trimTrailingSpaces;  \/\/ do we remove all trailing spaces (at the very$/;"	m	struct:YAML::ScanScalarParams
trmm	amun/3rd_party/blaze/math/blas/trmm.h	/^BLAZE_ALWAYS_INLINE void trmm( CBLAS_ORDER order, CBLAS_SIDE side, CBLAS_UPLO uplo,$/;"	f	namespace:blaze
trmm	amun/3rd_party/blaze/math/blas/trmm.h	/^BLAZE_ALWAYS_INLINE void trmm( DenseMatrix<MT1,SO1>& B, const DenseMatrix<MT2,SO2>& A,$/;"	f	namespace:blaze
trmv	amun/3rd_party/blaze/math/blas/trmv.h	/^BLAZE_ALWAYS_INLINE void trmv( CBLAS_ORDER order, CBLAS_UPLO uplo, CBLAS_TRANSPOSE transA,$/;"	f	namespace:blaze
trmv	amun/3rd_party/blaze/math/blas/trmv.h	/^BLAZE_ALWAYS_INLINE void trmv( DenseVector<VT,false>& x, const DenseMatrix<MT,SO>& A,$/;"	f	namespace:blaze
trmv	amun/3rd_party/blaze/math/blas/trmv.h	/^BLAZE_ALWAYS_INLINE void trmv( DenseVector<VT,true>& x, const DenseMatrix<MT,SO>& A,$/;"	f	namespace:blaze
trsm	amun/3rd_party/blaze/math/blas/trsm.h	/^BLAZE_ALWAYS_INLINE void trsm( CBLAS_ORDER order, CBLAS_SIDE side, CBLAS_UPLO uplo,$/;"	f	namespace:blaze
trsm	amun/3rd_party/blaze/math/blas/trsm.h	/^BLAZE_ALWAYS_INLINE void trsm( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b,$/;"	f	namespace:blaze
trsm	amun/3rd_party/blaze/math/blas/trsm.h	/^BLAZE_ALWAYS_INLINE void trsm( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B,$/;"	f	namespace:blaze
trsv	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	/^inline void trsv( char uplo, char trans, char diag, int n, const complex<double>* A,$/;"	f	namespace:blaze
trsv	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	/^inline void trsv( char uplo, char trans, char diag, int n, const complex<float>* A,$/;"	f	namespace:blaze
trsv	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	/^inline void trsv( char uplo, char trans, char diag, int n, const double* A,$/;"	f	namespace:blaze
trsv	amun/3rd_party/blaze/math/lapack/clapack/trsv.h	/^inline void trsv( char uplo, char trans, char diag, int n, const float* A,$/;"	f	namespace:blaze
trsv	amun/3rd_party/blaze/math/lapack/trsv.h	/^inline void trsv( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, char trans, char diag )$/;"	f	namespace:blaze
trtri	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	/^inline void trtri( char uplo, char diag, int n, complex<double>* A, int lda, int* info )$/;"	f	namespace:blaze
trtri	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	/^inline void trtri( char uplo, char diag, int n, complex<float>* A, int lda, int* info )$/;"	f	namespace:blaze
trtri	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	/^inline void trtri( char uplo, char diag, int n, double* A, int lda, int* info )$/;"	f	namespace:blaze
trtri	amun/3rd_party/blaze/math/lapack/clapack/trtri.h	/^inline void trtri( char uplo, char diag, int n, float* A, int lda, int* info )$/;"	f	namespace:blaze
trtri	amun/3rd_party/blaze/math/lapack/trtri.h	/^inline void trtri( DenseMatrix<MT,SO>& A, char uplo, char diag )$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	/^inline void trtrs( char uplo, char trans, char diag, int n, int nrhs, const complex<double>* A,$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	/^inline void trtrs( char uplo, char trans, char diag, int n, int nrhs, const complex<float>* A,$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	/^inline void trtrs( char uplo, char trans, char diag, int n, int nrhs, const double* A, int lda,$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/clapack/trtrs.h	/^inline void trtrs( char uplo, char trans, char diag, int n, int nrhs, const float* A, int lda,$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/trtrs.h	/^inline void trtrs( const DenseMatrix<MT,SO>& A, DenseVector<VT,TF>& b, char uplo, char trans, char diag )$/;"	f	namespace:blaze
trtrs	amun/3rd_party/blaze/math/lapack/trtrs.h	/^inline void trtrs( const DenseMatrix<MT1,SO1>& A, DenseMatrix<MT2,SO2>& B,$/;"	f	namespace:blaze
true_value	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	/^  static void true_value(NOT_ALLOWED*) {}$/;"	f	struct:YAML::detail::unspecified_bool
tryAddAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool tryAddAssign( const DiagonalMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool tryAddAssign( const DiagonalMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryAddAssign( const HermitianMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryAddAssign( const HermitianMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool tryAddAssign( const LowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool tryAddAssign( const LowerMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool tryAddAssign( const StrictlyLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool tryAddAssign( const StrictlyLowerMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool tryAddAssign( const StrictlyUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool tryAddAssign( const StrictlyUpperMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline bool tryAddAssign( const SymmetricMatrix<MT1,SO1,DF,NF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryAddAssign( const UniLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryAddAssign( const UniLowerMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryAddAssign( const UniUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryAddAssign( const UniUpperMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool tryAddAssign( const UpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool tryAddAssign( const UpperMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryAddAssign( const Matrix<MT,SO>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryAddAssign( const Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool tryAddAssign( const Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs, size_t index )$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/views/Column.h	/^inline bool tryAddAssign( const Column<MT,SO,DF,SF>& lhs, const Vector<VT,false>& rhs, size_t index )$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/views/Row.h	/^inline bool tryAddAssign( const Row<MT,SO,DF,SF>& lhs, const Vector<VT,true>& rhs, size_t index )$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool tryAddAssign( const Submatrix<MT,AF,SO,DF>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool tryAddAssign( const Submatrix<MT1,AF,SO1,DF>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
tryAddAssign	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool tryAddAssign( const Subvector<VT1,AF,TF,DF>& lhs, const Vector<VT2,TF>& rhs, size_t index )$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool tryAssign( const DiagonalMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool tryAssign( const DiagonalMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryAssign( const HermitianMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryAssign( const HermitianMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool tryAssign( const LowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool tryAssign( const LowerMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool tryAssign( const StrictlyLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool tryAssign( const StrictlyLowerMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool tryAssign( const StrictlyUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool tryAssign( const StrictlyUpperMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline bool tryAssign( const SymmetricMatrix<MT1,SO1,DF,NF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryAssign( const UniLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryAssign( const UniLowerMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryAssign( const UniUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryAssign( const UniUpperMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool tryAssign( const UpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool tryAssign( const UpperMatrix<MT1,SO,DF>& lhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryAssign( const Matrix<MT,SO>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryAssign( const Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool tryAssign( const Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs, size_t index )$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/views/Column.h	/^inline bool tryAssign( const Column<MT,SO,DF,SF>& lhs, const Vector<VT,false>& rhs, size_t index )$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/views/Row.h	/^inline bool tryAssign( const Row<MT,SO,DF,SF>& lhs, const Vector<VT,true>& rhs, size_t index )$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool tryAssign( const Submatrix<MT,AF,SO,DF>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool tryAssign( const Submatrix<MT1,AF,SO1,DF>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
tryAssign	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool tryAssign( const Subvector<VT1,AF,TF,DF>& lhs, const Vector<VT2,TF>& rhs, size_t index )$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryDivAssign( const HermitianMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryDivAssign( const UniLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryDivAssign( const UniUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryDivAssign( const Matrix<MT,SO>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool tryDivAssign( const Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs, size_t index )$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/views/Column.h	/^inline bool tryDivAssign( const Column<MT,SO,DF,SF>& lhs, const Vector<VT,false>& rhs, size_t index )$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/views/Row.h	/^inline bool tryDivAssign( const Row<MT,SO,DF,SF>& lhs, const Vector<VT,true>& rhs, size_t index )$/;"	f	namespace:blaze
tryDivAssign	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool tryDivAssign( const Subvector<VT1,AF,TF,DF>& lhs, const Vector<VT2,TF>& rhs, size_t index )$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool tryMultAssign( const HermitianMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool tryMultAssign( const UniLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool tryMultAssign( const UniUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool tryMultAssign( const Matrix<MT,SO>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool tryMultAssign( const Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs, size_t index )$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/views/Column.h	/^inline bool tryMultAssign( const Column<MT,SO,DF,SF>& lhs, const Vector<VT,false>& rhs, size_t index )$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/views/Row.h	/^inline bool tryMultAssign( const Row<MT,SO,DF,SF>& lhs, const Vector<VT,true>& rhs, size_t index )$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool tryMultAssign( const Submatrix<MT,AF,SO,DF>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
tryMultAssign	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool tryMultAssign( const Subvector<VT1,AF,TF,DF>& lhs, const Vector<VT2,TF>& rhs, size_t index )$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool trySubAssign( const DiagonalMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/DiagonalMatrix.h	/^inline bool trySubAssign( const DiagonalMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool trySubAssign( const HermitianMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/HermitianMatrix.h	/^inline bool trySubAssign( const HermitianMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool trySubAssign( const LowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/LowerMatrix.h	/^inline bool trySubAssign( const LowerMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool trySubAssign( const StrictlyLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/StrictlyLowerMatrix.h	/^inline bool trySubAssign( const StrictlyLowerMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool trySubAssign( const StrictlyUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/StrictlyUpperMatrix.h	/^inline bool trySubAssign( const StrictlyUpperMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/SymmetricMatrix.h	/^inline bool trySubAssign( const SymmetricMatrix<MT1,SO1,DF,NF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool trySubAssign( const UniLowerMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UniLowerMatrix.h	/^inline bool trySubAssign( const UniLowerMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool trySubAssign( const UniUpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UniUpperMatrix.h	/^inline bool trySubAssign( const UniUpperMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool trySubAssign( const UpperMatrix<MT,SO,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/adaptors/UpperMatrix.h	/^inline bool trySubAssign( const UpperMatrix<MT1,SO1,DF>& lhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool trySubAssign( const Matrix<MT,SO>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/expressions/Matrix.h	/^BLAZE_ALWAYS_INLINE bool trySubAssign( const Matrix<MT1,SO1>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/expressions/Vector.h	/^BLAZE_ALWAYS_INLINE bool trySubAssign( const Vector<VT1,TF1>& lhs, const Vector<VT2,TF2>& rhs, size_t index )$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/views/Column.h	/^inline bool trySubAssign( const Column<MT,SO,DF,SF>& lhs, const Vector<VT,false>& rhs, size_t index )$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/views/Row.h	/^inline bool trySubAssign( const Row<MT,SO,DF,SF>& lhs, const Vector<VT,true>& rhs, size_t index )$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool trySubAssign( const Submatrix<MT,AF,SO,DF>& lhs, const Vector<VT,TF>& rhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/views/Submatrix.h	/^inline bool trySubAssign( const Submatrix<MT1,AF,SO1,DF>& lhs, const Matrix<MT2,SO2>& rhs,$/;"	f	namespace:blaze
trySubAssign	amun/3rd_party/blaze/math/views/Subvector.h	/^inline bool trySubAssign( const Subvector<VT1,AF,TF,DF>& lhs, const Vector<VT2,TF>& rhs, size_t index )$/;"	f	namespace:blaze
try_lock	amun/3rd_party/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex
ttable	amun/3rd_party/fast_align/src/ttables.h	/^  Word2Word2Double ttable;$/;"	m	class:TTable
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5,T6,T7,T8,T9>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5,T6,T7,T8>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5,T6,T7>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5,T6>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4,T5>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3,T4>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2,T3>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1,T2>$/;"	s	namespace:thrust::experimental::detail::bind_detail
tuple_war_1527140	amun/3rd_party/thrust_bind/bind.hpp	/^struct tuple_war_1527140<T1>$/;"	s	namespace:thrust::experimental::detail::bind_detail
txt	amun/3rd_party/spdlog/details/async_log_helper.h	/^        std::string txt;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
type	amun/3rd_party/spdlog/details/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg
type	amun/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec
type	amun/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec
type	amun/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec
type	amun/3rd_party/spdlog/details/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList
type	amun/3rd_party/spdlog/details/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/details/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/details/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/details/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/details/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/details/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional
type	amun/3rd_party/spdlog/details/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional
type	amun/3rd_party/spdlog/details/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf
type	amun/3rd_party/spdlog/details/format.h	/^    uint64_t type;$/;"	m	struct:fmt::ArgType
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static internal::Arg::Type type(uint64_t types, unsigned index)$/;"	f	class:fmt::ArgList
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArgWithType<Char_, T> &)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf
type	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    uint64_t type;$/;"	m	struct:fmt::ArgType
type	amun/3rd_party/thrust_bind/bind.hpp	/^                   >::type type;$/;"	t	struct:thrust::experimental::detail::bind_detail::make_integer_sequence_impl
type	amun/3rd_party/thrust_bind/bind.hpp	/^                   >::type type;$/;"	t	struct:thrust::experimental::detail::bind_detail::make_integer_sequence_impl_unchecked
type	amun/3rd_party/thrust_bind/bind.hpp	/^  typedef integer_sequence<_Tp, _Indices...> type;$/;"	t	struct:thrust::experimental::detail::bind_detail::make_integer_sequence_impl_unchecked
type	amun/3rd_party/yaml-cpp/emittermanip.h	/^  Type::value type;$/;"	m	struct:YAML::_Tag
type	amun/3rd_party/yaml-cpp/emitterstate.h	/^    GroupType::value type;$/;"	m	struct:YAML::EmitterState::Group
type	amun/3rd_party/yaml-cpp/node/detail/node.h	/^  NodeType::value type() const { return m_pRef->type(); }$/;"	f	class:YAML::detail::node
type	amun/3rd_party/yaml-cpp/node/detail/node_data.h	/^  NodeType::value type() const {$/;"	f	class:YAML::detail::node_data
type	amun/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  NodeType::value type() const { return m_pData->type(); }$/;"	f	class:YAML::detail::node_ref
type	amun/3rd_party/yaml-cpp/scanner.h	/^    INDENT_TYPE type;$/;"	m	struct:YAML::Scanner::IndentMarker
type	amun/3rd_party/yaml-cpp/tag.h	/^  TYPE type;$/;"	m	struct:YAML::Tag
type	amun/3rd_party/yaml-cpp/token.h	/^  TYPE type;$/;"	m	struct:YAML::Token
type	amun/3rd_party/yaml-cpp/traits.h	/^  typedef T type;$/;"	t	struct:YAML::disable_if_c
type	amun/3rd_party/yaml-cpp/traits.h	/^  typedef T type;$/;"	t	struct:YAML::enable_if_c
type	amun/cpu/nematus/model.cpp	/^Weights::Transition::TransitionType Weights::Transition::type() const {$/;"	f	class:amunmt::CPU::Nematus::Weights::Transition
type_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint8_t  type_;         \/\/!< The type of the matrix.$/;"	m	class:blaze::MatrixSerializer
type_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint8_t  type_;         \/\/!< The type of the vector.$/;"	m	class:blaze::VectorSerializer
type_	amun/3rd_party/spdlog/details/format.cc	/^			wchar_t type_;$/;"	m	class:fmt::__anon30::ArgConverter	file:
type_	amun/3rd_party/spdlog/details/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec
type_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec
type_	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    wchar_t type_;$/;"	m	class:fmt::internal::ArgConverter
type_	amun/cpu/nematus/model.h	/^      TransitionType type_;$/;"	m	class:amunmt::CPU::Nematus::Weights::Transition
types	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    uint64_t types() const$/;"	f	class:fmt::ArgList
types_	amun/3rd_party/spdlog/details/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList
types_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList
u16	amun/3rd_party/utf8/checked.h	/^        uint16_t u16;$/;"	m	class:utf8::invalid_utf16
u8	amun/3rd_party/utf8/checked.h	/^        uint8_t u8;$/;"	m	class:utf8::invalid_utf8
uict00	amun/3rd_party/yaml-cpp/stream.cpp	/^  uict00,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictAscii	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictAscii,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictBB	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictBB,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictBF	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictBF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictEF	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictEF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictFE	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictFE,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictFF	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictFF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictMax	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictMax$/;"	e	enum:YAML::UtfIntroCharType	file:
uictOther	amun/3rd_party/yaml-cpp/stream.cpp	/^  uictOther,$/;"	e	enum:YAML::UtfIntroCharType	file:
uint16_t	amun/3rd_party/utf8/core.h	/^    typedef unsigned short  uint16_t;$/;"	t	namespace:utf8
uint32_t	amun/3rd_party/spdlog/details/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	amun/3rd_party/utf8/core.h	/^    typedef unsigned int    uint32_t;$/;"	t	namespace:utf8
uint64_t	amun/3rd_party/spdlog/details/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	amun/3rd_party/utf8/core.h	/^    typedef unsigned char   uint8_t;$/;"	t	namespace:utf8
uint_value	amun/3rd_party/spdlog/details/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon17
uint_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon51
uis_error	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_error$/;"	e	enum:YAML::UtfIntroState	file:
uis_start	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_start,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16be	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16be,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16be_bom1	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16be_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le_bom2	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le_bom2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le_imp	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le_imp,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be_b2	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be_b2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be_bom3	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be_bom3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le_bom3	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le_bom3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le_imp3	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le_imp3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_bom1	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_bom2	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_bom2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_imp	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_imp,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utfbe_b1	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utfbe_b1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utfle_bom1	amun/3rd_party/yaml-cpp/stream.cpp	/^  uis_utfle_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
ulong_long_value	amun/3rd_party/spdlog/details/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon17
ulong_long_value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon51
un_	amun/3rd_party/fast_align/src/atools.cc	/^  Array2D<bool> un_;   \/\/ union alignment$/;"	m	struct:RefineCommand	file:
unaligned	amun/3rd_party/blaze/math/AlignmentFlag.h	/^const bool unaligned = false;$/;"	m	namespace:blaze
unary_exp	amun/gpu/mblas/thrust_functions.h	/^      struct unary_exp : public thrust::unary_function<T,T> {$/;"	s	namespace:thrust::detail::functional
unary_log	amun/gpu/mblas/thrust_functions.h	/^      struct unary_log : public thrust::unary_function<T,T> {$/;"	s	namespace:thrust::detail::functional
unary_logit	amun/gpu/mblas/thrust_functions.h	/^      struct unary_logit : public thrust::unary_function<T,T> {$/;"	s	namespace:thrust::detail::functional
unary_tanh	amun/gpu/mblas/thrust_functions.h	/^      struct unary_tanh : public thrust::unary_function<T,T> {$/;"	s	namespace:thrust::detail::functional
unchecked	amun/3rd_party/utf8/unchecked.h	/^    namespace unchecked $/;"	n	namespace:utf8
underline	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline  = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink
unglq	amun/3rd_party/blaze/math/lapack/clapack/unglq.h	/^inline void unglq( int m, int n, int k, complex<double>* A, int lda, const complex<double>* tau,$/;"	f	namespace:blaze
unglq	amun/3rd_party/blaze/math/lapack/clapack/unglq.h	/^inline void unglq( int m, int n, int k, complex<float>* A, int lda, const complex<float>* tau,$/;"	f	namespace:blaze
unglq	amun/3rd_party/blaze/math/lapack/unglq.h	/^inline void unglq( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
ungql	amun/3rd_party/blaze/math/lapack/clapack/ungql.h	/^inline void ungql( int m, int n, int k, complex<double>* A, int lda, const complex<double>* tau,$/;"	f	namespace:blaze
ungql	amun/3rd_party/blaze/math/lapack/clapack/ungql.h	/^inline void ungql( int m, int n, int k, complex<float>* A, int lda, const complex<float>* tau,$/;"	f	namespace:blaze
ungql	amun/3rd_party/blaze/math/lapack/ungql.h	/^inline void ungql( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
ungqr	amun/3rd_party/blaze/math/lapack/clapack/ungqr.h	/^inline void ungqr( int m, int n, int k, complex<double>* A, int lda, const complex<double>* tau,$/;"	f	namespace:blaze
ungqr	amun/3rd_party/blaze/math/lapack/clapack/ungqr.h	/^inline void ungqr( int m, int n, int k, complex<float>* A, int lda, const complex<float>* tau,$/;"	f	namespace:blaze
ungqr	amun/3rd_party/blaze/math/lapack/ungqr.h	/^inline void ungqr( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
ungrq	amun/3rd_party/blaze/math/lapack/clapack/ungrq.h	/^inline void ungrq( int m, int n, int k, complex<double>* A, int lda, const complex<double>* tau,$/;"	f	namespace:blaze
ungrq	amun/3rd_party/blaze/math/lapack/clapack/ungrq.h	/^inline void ungrq( int m, int n, int k, complex<float>* A, int lda, const complex<float>* tau,$/;"	f	namespace:blaze
ungrq	amun/3rd_party/blaze/math/lapack/ungrq.h	/^inline void ungrq( DenseMatrix<MT,SO>& A, const ElementType_<MT>* tau )$/;"	f	namespace:blaze
unlock	amun/3rd_party/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex
unmlq	amun/3rd_party/blaze/math/lapack/clapack/unmlq.h	/^inline void unmlq( char side, char trans, int m, int n, int k, const complex<double>* A, int lda,$/;"	f	namespace:blaze
unmlq	amun/3rd_party/blaze/math/lapack/clapack/unmlq.h	/^inline void unmlq( char side, char trans, int m, int n, int k, const complex<float>* A, int lda,$/;"	f	namespace:blaze
unmlq	amun/3rd_party/blaze/math/lapack/unmlq.h	/^inline void unmlq( DenseMatrix<MT1,SO>& C, const DenseMatrix<MT2,SO>& A,$/;"	f	namespace:blaze
unmql	amun/3rd_party/blaze/math/lapack/clapack/unmql.h	/^inline void unmql( char side, char trans, int m, int n, int k, const complex<double>* A, int lda,$/;"	f	namespace:blaze
unmql	amun/3rd_party/blaze/math/lapack/clapack/unmql.h	/^inline void unmql( char side, char trans, int m, int n, int k, const complex<float>* A, int lda,$/;"	f	namespace:blaze
unmql	amun/3rd_party/blaze/math/lapack/unmql.h	/^inline void unmql( DenseMatrix<MT1,SO>& C, const DenseMatrix<MT2,SO>& A,$/;"	f	namespace:blaze
unmqr	amun/3rd_party/blaze/math/lapack/clapack/unmqr.h	/^inline void unmqr( char side, char trans, int m, int n, int k, const complex<double>* A, int lda,$/;"	f	namespace:blaze
unmqr	amun/3rd_party/blaze/math/lapack/clapack/unmqr.h	/^inline void unmqr( char side, char trans, int m, int n, int k, const complex<float>* A, int lda,$/;"	f	namespace:blaze
unmqr	amun/3rd_party/blaze/math/lapack/unmqr.h	/^inline void unmqr( DenseMatrix<MT1,SO>& C, DenseMatrix<MT2,SO>& A,$/;"	f	namespace:blaze
unmrq	amun/3rd_party/blaze/math/lapack/clapack/unmrq.h	/^inline void unmrq( char side, char trans, int m, int n, int k, const complex<double>* A, int lda,$/;"	f	namespace:blaze
unmrq	amun/3rd_party/blaze/math/lapack/clapack/unmrq.h	/^inline void unmrq( char side, char trans, int m, int n, int k, const complex<float>* A, int lda,$/;"	f	namespace:blaze
unmrq	amun/3rd_party/blaze/math/lapack/unmrq.h	/^inline void unmrq( DenseMatrix<MT1,SO>& C, const DenseMatrix<MT2,SO>& A,$/;"	f	namespace:blaze
unpadded	amun/3rd_party/blaze/math/PaddingFlag.h	/^const bool unpadded = false;$/;"	m	namespace:blaze
unspecified_bool	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	/^struct unspecified_bool {$/;"	s	namespace:YAML::detail
unspecified_bool_type	amun/3rd_party/yaml-cpp/node/detail/bool_type.h	/^typedef void (*unspecified_bool_type)(unspecified_bool::NOT_ALLOWED*);$/;"	t	namespace:YAML::detail
updateStrides	amun/gpu/mblas/tensor_wrapper.h	/^  void updateStrides()$/;"	f	class:amunmt::GPU::mblas::TensorWrapper
update_pos	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::update_pos(char ch) {$/;"	f	class:YAML::ostream_wrapper
upperBound	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::DiagonalMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Sparse.h	/^   DiagonalMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::DiagonalMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::HermitianMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^   HermitianMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::HermitianMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::LowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/lowermatrix/Sparse.h	/^   LowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::LowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyLowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Sparse.h	/^   StrictlyLowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::StrictlyLowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::StrictlyUpperMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Sparse.h	/^   StrictlyUpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::StrictlyUpperMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^   SymmetricMatrix<MT,SO,false,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::SymmetricMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^   SymmetricMatrix<MT,SO,false,true>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::SymmetricMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::UniLowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^   UniLowerMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::UniLowerMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::UniUpperMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^   UniUpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::UniUpperMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::UpperMatrix
upperBound	amun/3rd_party/blaze/math/adaptors/uppermatrix/Sparse.h	/^   UpperMatrix<MT,SO,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::UpperMatrix
upperBound	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::DVecSVecMultExpr
upperBound	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f
upperBound	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatForEachExpr
upperBound	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarDivExpr
upperBound	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatScalarMultExpr
upperBound	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f	class:blaze::SMatTransExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecDVecDivExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecDVecMultExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecForEachExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecScalarDivExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecScalarMultExpr
upperBound	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^   inline ConstIterator upperBound( size_t i, size_t j ) const {$/;"	f
upperBound	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^   inline ConstIterator upperBound( size_t index ) const {$/;"	f	class:blaze::SVecTransExpr
upperBound	amun/3rd_party/blaze/math/proxy/SparseMatrixProxy.h	/^   SparseMatrixProxy<PT,MT>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::SparseMatrixProxy
upperBound	amun/3rd_party/blaze/math/proxy/SparseVectorProxy.h	/^   SparseVectorProxy<PT,VT>::upperBound( size_t index ) const$/;"	f	class:blaze::SparseVectorProxy
upperBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
upperBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,SO>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
upperBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::CompressedMatrix
upperBound	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   CompressedMatrix<Type,true>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::CompressedMatrix
upperBound	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::upperBound( size_t index ) const$/;"	f	class:blaze::CompressedVector
upperBound	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   CompressedVector<Type,TF>::upperBound( size_t index )$/;"	f	class:blaze::CompressedVector
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::upperBound( size_t index ) const$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,false>::upperBound( size_t index )$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::upperBound( size_t index ) const$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,false,false,true>::upperBound( size_t index )$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^   Column<MT,true,false,SF>::upperBound( size_t index ) const$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/column/Sparse.h	/^inline typename Column<MT,true,false,SF>::Iterator Column<MT,true,false,SF>::upperBound( size_t index )$/;"	f	class:blaze::Column
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::upperBound( size_t index ) const$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,false>::upperBound( size_t index )$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::upperBound( size_t index ) const$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^   Row<MT,false,false,true>::upperBound( size_t index )$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::ConstIterator Row<MT,true,false,SF>::upperBound( size_t index ) const$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/row/Sparse.h	/^inline typename Row<MT,true,false,SF>::Iterator Row<MT,true,false,SF>::upperBound( size_t index )$/;"	f	class:blaze::Row
upperBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
upperBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,false,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
upperBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::upperBound( size_t i, size_t j ) const$/;"	f	class:blaze::Submatrix
upperBound	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^   Submatrix<MT,AF,true,false>::upperBound( size_t i, size_t j )$/;"	f	class:blaze::Submatrix
upperBound	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::upperBound( size_t index ) const$/;"	f	class:blaze::Subvector
upperBound	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Subvector<VT,AF,TF,false>::upperBound( size_t index )$/;"	f	class:blaze::Subvector
useFusedSoftmax_	amun/common/god.h	/^    bool useFusedSoftmax_, useTensorCores_;$/;"	m	class:amunmt::God
useOptimizedKernels	amun/3rd_party/blaze/config/Optimizations.h	/^constexpr bool useOptimizedKernels = true;$/;"	m	namespace:blaze
usePadding	amun/3rd_party/blaze/config/Optimizations.h	/^constexpr bool usePadding = true;$/;"	m	namespace:blaze
useStreaming	amun/3rd_party/blaze/config/Optimizations.h	/^constexpr bool useStreaming = true;$/;"	m	namespace:blaze
useTensorCores_	amun/common/god.h	/^    bool useFusedSoftmax_, useTensorCores_;$/;"	m	class:amunmt::God
ustring	amun/3rd_party/spdlog/details/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon17
ustring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon51
utc_minutes_offset	amun/3rd_party/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm& tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os
utf16_word	amun/3rd_party/utf8/checked.h	/^        uint16_t utf16_word() const {return u16;}$/;"	f	class:utf8::invalid_utf16
utf16be	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf16le	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf16to8	amun/3rd_party/utf8/checked.h	/^    octet_iterator utf16to8 (u16bit_iterator start, u16bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8
utf16to8	amun/3rd_party/utf8/unchecked.h	/^        octet_iterator utf16to8 (u16bit_iterator start, u16bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8::unchecked
utf32be	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf32le	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf32to8	amun/3rd_party/utf8/checked.h	/^    octet_iterator utf32to8 (u32bit_iterator start, u32bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8
utf32to8	amun/3rd_party/utf8/unchecked.h	/^        octet_iterator utf32to8 (u32bit_iterator start, u32bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8::unchecked
utf8	amun/3rd_party/utf8/checked.h	/^namespace utf8$/;"	n
utf8	amun/3rd_party/utf8/core.h	/^namespace utf8$/;"	n
utf8	amun/3rd_party/utf8/unchecked.h	/^namespace utf8$/;"	n
utf8	amun/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf8_octet	amun/3rd_party/utf8/checked.h	/^        uint8_t utf8_octet() const {return u8;}$/;"	f	class:utf8::invalid_utf8
utf8to16	amun/3rd_party/utf8/checked.h	/^    u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)$/;"	f	namespace:utf8
utf8to16	amun/3rd_party/utf8/unchecked.h	/^        u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)$/;"	f	namespace:utf8::unchecked
utf8to32	amun/3rd_party/utf8/checked.h	/^    u32bit_iterator utf8to32 (octet_iterator start, octet_iterator end, u32bit_iterator result)$/;"	f	namespace:utf8
utf8to32	amun/3rd_party/utf8/unchecked.h	/^        u32bit_iterator utf8to32 (octet_iterator start, octet_iterator end, u32bit_iterator result)$/;"	f	namespace:utf8::unchecked
utf_error	amun/3rd_party/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	g	namespace:utf8::internal
util	amun/3rd_party/extract_lex/exception.cpp	/^namespace util {$/;"	n	file:
util	amun/3rd_party/extract_lex/exception.h	/^namespace util {$/;"	n
util	amun/common/exception.cpp	/^namespace util {$/;"	n	namespace:amunmt	file:
util	amun/common/exception.h	/^namespace util {$/;"	n	namespace:amunmt
v_	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      LeftElement  v_;   \/\/!< Element of the left-hand side dense vector expression.$/;"	m	class:ConstIterator
v_	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      RightElement v_;   \/\/!< Element of the right-hand side dense vector expression.$/;"	m	class:ConstIterator
v_	amun/3rd_party/blaze/util/AlignedArray.h	/^   alignas( Alignment ) Type v_[N];  \/\/!< The aligned array of size N.$/;"	m	class:blaze::AlignedArray
v_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class v_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
validate_next	amun/3rd_party/utf8/core.h	/^    inline utf_error validate_next(octet_iterator& it, octet_iterator end) {$/;"	f	namespace:utf8::internal
validate_next	amun/3rd_party/utf8/core.h	/^    utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
value	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianElement.h	/^inline typename HermitianElement<MT>::Reference HermitianElement<MT>::value() const$/;"	f	class:blaze::HermitianElement
value	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline ConstReference value() const {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
value	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      inline Reference value() {$/;"	f	class:blaze::SymmetricMatrix::SharedElement
value	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricElement.h	/^inline typename SymmetricElement<MT>::Reference SymmetricElement<MT>::value() const$/;"	f	class:blaze::SymmetricElement
value	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerElement.h	/^inline typename UniLowerElement<MT>::Reference UniLowerElement<MT>::value() const$/;"	f	class:blaze::UniLowerElement
value	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperElement.h	/^inline typename UniUpperElement<MT>::Reference UniUpperElement<MT>::value() const$/;"	f	class:blaze::UniUpperElement
value	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::DVecSVecMultExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:ConstIterator
value	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SMatForEachExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SMatScalarDivExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SMatScalarMultExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SMatTransExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecDVecDivExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecDVecMultExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecForEachExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecScalarDivExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecScalarMultExpr::ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      inline ReturnType value() const {$/;"	f	class:ConstIterator
value	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      inline ReturnType value() const {$/;"	f	class:blaze::SVecTransExpr::ConstIterator
value	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^      enum { value = MatrixValueMappingHelper< IsDenseMatrix<T>::value, IsRowMajorMatrix<T>::value >::value };$/;"	e	enum:blaze::MatrixSerializer::MatrixValueMapping::__anon106
value	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   enum { value = 1 };$/;"	e	enum:blaze::MatrixSerializer::MatrixValueMappingHelper::__anon107
value	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   enum { value = 3 };$/;"	e	enum:blaze::MatrixSerializer::MatrixValueMappingHelper::__anon109
value	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   enum { value = 5 };$/;"	e	enum:blaze::MatrixSerializer::MatrixValueMappingHelper::__anon108
value	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   enum { value = 7 };$/;"	e	enum:blaze::MatrixSerializer::MatrixValueMappingHelper::__anon110
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = 0 };$/;"	e	enum:blaze::TypeValueMappingHelper::__anon111
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = 1 };$/;"	e	enum:blaze::TypeValueMappingHelper::__anon112
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = 2 };$/;"	e	enum:blaze::TypeValueMappingHelper::__anon113
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = 3 };$/;"	e	enum:blaze::TypeValueMappingHelper::__anon114
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = 4 };$/;"	e	enum:blaze::TypeValueMappingHelper::__anon115
value	amun/3rd_party/blaze/math/serialization/TypeValueMapping.h	/^   enum { value = TypeValueMappingHelper< IsIntegral<T>::value && IsSigned<T>::value$/;"	e	enum:blaze::TypeValueMapping::__anon116
value	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^      enum { value = VectorValueMappingHelper< IsDenseVector<T>::value >::value };$/;"	e	enum:blaze::VectorSerializer::VectorValueMapping::__anon103
value	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   enum { value = 0 };$/;"	e	enum:blaze::VectorSerializer::VectorValueMappingHelper::__anon104
value	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   enum { value = 2 };$/;"	e	enum:blaze::VectorSerializer::VectorValueMappingHelper::__anon105
value	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDint8( IntrinsicType v ) noexcept : value( v ) {}$/;"	f	namespace:blaze
value	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDint8( const SIMDi8<T>& v ) noexcept : value( (~v).value ) {}$/;"	f	namespace:blaze
value	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   BLAZE_ALWAYS_INLINE SIMDuint8( IntrinsicType v ) noexcept : value( v ) {}$/;"	f
value	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   IntrinsicType value;$/;"	m	namespace:blaze
value	amun/3rd_party/blaze/math/simd/BasicTypes.h	/^   IntrinsicType value;$/;"	v
value	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline typename ValueIndexPair<Type>::ConstReference ValueIndexPair<Type>::value() const$/;"	f	class:blaze::ValueIndexPair
value	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^inline typename ValueIndexPair<Type>::Reference ValueIndexPair<Type>::value()$/;"	f	class:blaze::ValueIndexPair
value	amun/3rd_party/blaze/math/typetraits/IsProxy.h	/^   static constexpr bool value = ( sizeof( test( std::declval< RemoveCV_<T> >() ) ) == sizeof( Yes ) );$/;"	m	struct:blaze::IsProxyHelper
value	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^   static constexpr bool value = If_< Or< IsVector<T>, IsMatrix<T> >$/;"	m	struct:blaze::IsSIMDEnabledHelper
value	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^   struct NotSIMDEnabled { static constexpr bool value = false; };$/;"	m	struct:blaze::IsSIMDEnabledHelper::NotSIMDEnabled
value	amun/3rd_party/blaze/math/typetraits/IsSIMDEnabled.h	/^   struct UseNestedMember { static constexpr bool value = T2::simdEnabled; };$/;"	m	struct:blaze::IsSIMDEnabledHelper::UseNestedMember
value	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^   static constexpr bool value = If_< Or< IsVector<T>, IsMatrix<T> >$/;"	m	struct:blaze::IsSMPAssignableHelper
value	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^   struct NotSMPAssignable { static constexpr bool value = false; };$/;"	m	struct:blaze::IsSMPAssignableHelper::NotSMPAssignable
value	amun/3rd_party/blaze/math/typetraits/IsSMPAssignable.h	/^   struct UseNestedMember { static constexpr bool value = T2::smpAssignable; };$/;"	m	struct:blaze::IsSMPAssignableHelper::UseNestedMember
value	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      inline Reference value() const {$/;"	f	class:blaze::Column::ColumnElement
value	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      inline Reference value() const {$/;"	f	class:blaze::Row::RowElement
value	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      inline Reference value() const {$/;"	f	class:blaze::Submatrix::SubmatrixElement
value	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      inline Reference value() const {$/;"	f	class:blaze::Subvector::SubvectorElement
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = -1 };  \/\/!< \\a Type is not contained in the type list.$/;"	e	enum:blaze::IndexOf::__anon125
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 0 };  \/\/!< No related type of \\a Type is contained in the type list.$/;"	e	enum:blaze::ContainsRelated::__anon122
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 0 };  \/\/!< \\a Type is not contained in the type list.$/;"	e	enum:blaze::Contains::__anon119
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 0 };  \/\/!< \\a Type is the head of the type list.$/;"	e	enum:blaze::IndexOf::__anon126
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 0 };$/;"	e	enum:blaze::Length::__anon117
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 1 + Length<Tail>::value };$/;"	e	enum:blaze::Length::__anon118
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = 1 };  \/\/!< \\a Type is the head of the type list.$/;"	e	enum:blaze::Contains::__anon120
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = Contains<Tail,Type>::value };  \/\/!< Search result for type \\a Type.$/;"	e	enum:blaze::Contains::__anon121
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = tmp == -1 ? -1 : 1 + tmp };  \/\/!< Index of \\a Type in the entire type list.$/;"	e	enum:blaze::IndexOf::__anon128
value	amun/3rd_party/blaze/util/TypeList.h	/^   enum { value = tmp == 1 ? 1 : ( ContainsRelated<Tail,Type>::value ) };  \/\/!< Search result for type \\a Type.$/;"	e	enum:blaze::ContainsRelated::__anon124
value	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t value = ( IsVectorizable<T>::value )?( 16UL ):( defaultAlignment );$/;"	m	struct:blaze::AlignmentOfHelper
value	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t value = ( IsVectorizable<T>::value )?( 32UL ):( defaultAlignment );$/;"	m	struct:blaze::AlignmentOfHelper
value	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t value = ( IsVectorizable<T>::value )?( 64UL ):( defaultAlignment );$/;"	m	struct:blaze::AlignmentOfHelper
value	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t value = 64UL;$/;"	m	struct:blaze::AlignmentOfHelper
value	amun/3rd_party/blaze/util/typetraits/AlignmentOf.h	/^   static constexpr size_t value = defaultAlignment;$/;"	m	struct:blaze::AlignmentOfHelper
value	amun/3rd_party/spdlog/details/format.cc	/^				value = 0$/;"	e	enum:fmt::__anon30::is_same::__anon31	file:
value	amun/3rd_party/spdlog/details/format.cc	/^				value = 1$/;"	e	enum:fmt::__anon30::is_same::__anon32	file:
value	amun/3rd_party/spdlog/details/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue
value	amun/3rd_party/spdlog/details/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue
value	amun/3rd_party/spdlog/details/format.h	/^        value = 0$/;"	e	enum:fmt::internal::Not::__anon24
value	amun/3rd_party/spdlog/details/format.h	/^        value = 1$/;"	e	enum:fmt::internal::Not::__anon25
value	amun/3rd_party/spdlog/details/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fmt::internal::ConvertToInt::__anon23
value	amun/3rd_party/spdlog/details/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon21
value	amun/3rd_party/spdlog/details/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon20
value	amun/3rd_party/spdlog/details/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon18
value	amun/3rd_party/spdlog/details/format.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon19
value	amun/3rd_party/spdlog/details/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec
value	amun/3rd_party/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = 0$/;"	e	enum:fmt::internal::False::__anon59
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = 0$/;"	e	enum:fmt::internal::Not::__anon57
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = 1$/;"	e	enum:fmt::internal::Not::__anon58
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fmt::internal::ConvertToInt::__anon56
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon54
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = ENABLE_CONVERSION$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon52
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon53
value	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec
value	amun/3rd_party/spdlog/fmt/bundled/ostream.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon35
value	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^        value = 0$/;"	e	enum:fmt::internal::is_same::__anon65
value	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^        value = 1$/;"	e	enum:fmt::internal::is_same::__anon66
value	amun/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	g	struct:YAML::CollectionType
value	amun/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	g	struct:YAML::EmitFromEvents::State
value	amun/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	g	struct:YAML::EmitterNodeType
value	amun/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	g	struct:YAML::_Tag::Type
value	amun/3rd_party/yaml-cpp/emittermanip.h	/^  int value;$/;"	m	struct:YAML::_Indent
value	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	g	struct:YAML::FmtScope
value	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	g	struct:YAML::FlowType
value	amun/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	g	struct:YAML::GroupType
value	amun/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	g	struct:YAML::EmitterStyle
value	amun/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	g	struct:YAML::StringFormat
value	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	g	struct:YAML::detail::iterator_type
value	amun/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	g	struct:YAML::NodeType
value	amun/3rd_party/yaml-cpp/tag.h	/^  std::string handle, value;$/;"	m	struct:YAML::Tag
value	amun/3rd_party/yaml-cpp/token.h	/^  std::string value;$/;"	m	struct:YAML::Token
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = false };$/;"	e	enum:YAML::is_numeric::__anon69
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon70
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon71
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon72
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon73
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon74
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon75
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon76
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon77
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon78
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon79
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon80
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon81
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon82
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon83
value	amun/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon84
value1_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   Reference value1_;     \/\/!< Reference to the first accessed matrix element.$/;"	m	class:blaze::HermitianProxy
value2_	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianProxy.h	/^   Reference value2_;     \/\/!< Reference to the second accessed matrix element.$/;"	m	class:blaze::HermitianProxy
value_	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/DiagonalProxy.h	/^   ReferenceType value_;    \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::DiagonalProxy
value_	amun/3rd_party/blaze/math/adaptors/lowermatrix/LowerProxy.h	/^   ReferenceType value_;    \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::LowerProxy
value_	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/StrictlyLowerProxy.h	/^   ReferenceType value_;    \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::StrictlyLowerProxy
value_	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/StrictlyUpperProxy.h	/^   ReferenceType value_;    \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::StrictlyUpperProxy
value_	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SharedValue.h	/^   mutable boost::shared_ptr<Type> value_;  \/\/!< The shared value.$/;"	m	class:blaze::SharedValue
value_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   ReferenceType value_;  \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::UniLowerProxy
value_	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   RepresentedType* value_;     \/\/!< The represented value.$/;"	m	class:blaze::UniLowerValue
value_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   ReferenceType value_;  \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::UniUpperProxy
value_	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   RepresentedType* value_;     \/\/!< The represented value.$/;"	m	class:blaze::UniUpperValue
value_	amun/3rd_party/blaze/math/adaptors/uppermatrix/UpperProxy.h	/^   ReferenceType value_;    \/\/!< Reference to the accessed matrix element.$/;"	m	class:blaze::UpperProxy
value_	amun/3rd_party/blaze/math/sparse/ValueIndexPair.h	/^   Type   value_;  \/\/!< Value of the value-index-pair.$/;"	m	class:blaze::ValueIndexPair
value_	amun/3rd_party/blaze/util/UnsignedValue.h	/^   T value_;  \/\/!< The wrapped built-in unsigned integral value.$/;"	m	class:blaze::UnsignedValue
value_	amun/3rd_party/spdlog/details/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec
value_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec
value_type	amun/3rd_party/blaze/math/adaptors/diagonalmatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DiagonalMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::HermitianMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/HermitianValue.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::HermitianValue
value_type	amun/3rd_party/blaze/math/adaptors/hermitianmatrix/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::HermitianMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/lowermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::LowerMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/strictlylowermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::StrictlyLowerMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/strictlyuppermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::StrictlyUpperMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNonNumeric.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::MatrixIterator
value_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/DenseNumeric.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNonNumeric.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::SharedIterator
value_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SparseNumeric.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::SymmetricMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/SymmetricValue.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::SymmetricValue
value_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniLowerMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniLowerMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerProxy.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::UniLowerProxy
value_type	amun/3rd_party/blaze/math/adaptors/unilowermatrix/UniLowerValue.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::UniLowerValue
value_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniUpperMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UniUpperMatrix::Iterator
value_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperProxy.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::UniUpperProxy
value_type	amun/3rd_party/blaze/math/adaptors/uniuppermatrix/UniUpperValue.h	/^   typedef ValueType  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::UniUpperValue
value_type	amun/3rd_party/blaze/math/adaptors/uppermatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::UpperMatrix::Iterator
value_type	amun/3rd_party/blaze/math/dense/DenseIterator.h	/^   typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DenseIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatDMatAddExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatDMatAddExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatDMatSubExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatDMatSubExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatForEachExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatForEachExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatScalarDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatScalarDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatScalarMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatScalarMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DMatTransExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DMatTransExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecDVecAddExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecAddExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecDVecDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecDVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecDVecSubExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecDVecSubExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecForEachExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecForEachExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::DVecSVecMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecScalarDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecScalarMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecTDVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecTSVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/DVecTransExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::DVecTransExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SMatForEachExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatForEachExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SMatScalarDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatScalarDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SMatScalarMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatScalarMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SMatTransExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SMatTransExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecDVecDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecDVecMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecForEachExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecForEachExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecScalarDivExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecScalarMultExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecTDVecMultExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:ConstIterator
value_type	amun/3rd_party/blaze/math/expressions/SVecTransExpr.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::SVecTransExpr::ConstIterator
value_type	amun/3rd_party/blaze/math/proxy/ComplexProxy.h	/^   typedef typename CT::value_type  value_type;  \/\/!< Value type of the represented complex element.$/;"	t	class:blaze::ComplexProxy
value_type	amun/3rd_party/blaze/math/views/column/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Column::ColumnIterator
value_type	amun/3rd_party/blaze/math/views/row/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Row::RowIterator
value_type	amun/3rd_party/blaze/math/views/submatrix/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
value_type	amun/3rd_party/blaze/math/views/submatrix/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Submatrix::SubmatrixIterator
value_type	amun/3rd_party/blaze/math/views/subvector/Dense.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Subvector::SubvectorIterator
value_type	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^      typedef ValueType         value_type;         \/\/!< Type of the underlying elements.$/;"	t	class:blaze::Subvector::SubvectorIterator
value_type	amun/3rd_party/blaze/util/AlignedAllocator.h	/^   typedef ValueType       value_type;       \/\/!< Type of the allocated values.$/;"	t	class:blaze::AlignedAllocator
value_type	amun/3rd_party/blaze/util/PtrIterator.h	/^   typedef ValueType                        value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrIterator
value_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ValueType                  value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrVector::CastIterator
value_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ValueType                  value_type;         \/\/!< Type of the underlying pointers.$/;"	t	class:blaze::PtrVector::ConstCastIterator
value_type	amun/3rd_party/blaze/util/PtrVector.h	/^   typedef ValueType             value_type;          \/\/!< Type of the underlying values.$/;"	t	class:blaze::PtrVector
value_type	amun/3rd_party/thrust_bind/bind.hpp	/^  typedef _Tp value_type;$/;"	t	struct:thrust::experimental::detail::bind_detail::integer_sequence
value_type	amun/3rd_party/yaml-cpp/node/detail/iterator.h	/^  typedef typename iterator_base::value_type value_type;$/;"	t	class:YAML::detail::iterator_base
value_type	amun/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_iterator_value<V> value_type;$/;"	t	class:YAML::detail::node_iterator_base
value_type	amun/cpu/mblas/tensor.h	/^    typedef T value_type;$/;"	t	class:amunmt::CPU::mblas::BlazeMatrix
value_type	amun/gpu/mblas/tensor.h	/^    typedef T value_type;$/;"	t	class:amunmt::GPU::mblas::TTensor
values_	amun/3rd_party/spdlog/details/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon26
values_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon60
variational_bayes	amun/3rd_party/fast_align/src/fast_align.cc	/^int variational_bayes = 0;$/;"	v
vec_	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f
vec_	amun/3rd_party/blaze/math/expressions/DMatDVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	v
vec_	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::DMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/DMatSVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::DMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/DVecSVecMultExpr.h	/^      LeftOperand vec_;  \/\/!< Left-hand side dense vector expression.$/;"	m	class:blaze::DVecSVecMultExpr::ConstIterator
vec_	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f	class:blaze::SMatDVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/SMatDVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::SMatDVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::SMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/SMatSVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/SVecDVecDivExpr.h	/^      RightOperand vec_;  \/\/!< Right-hand side dense vector expression.$/;"	m	class:blaze::SVecDVecDivExpr::ConstIterator
vec_	amun/3rd_party/blaze/math/expressions/SVecDVecMultExpr.h	/^      RightOperand vec_;  \/\/!< Right-hand side dense vector expression.$/;"	m	class:blaze::SVecDVecMultExpr::ConstIterator
vec_	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f
vec_	amun/3rd_party/blaze/math/expressions/TDMatDVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	v
vec_	amun/3rd_party/blaze/math/expressions/TDVecDMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	v
vec_	amun/3rd_party/blaze/math/expressions/TDVecSMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::TDVecSMatMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TDVecTDMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	v
vec_	amun/3rd_party/blaze/math/expressions/TDVecTSMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::TDVecTSMatMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side dense vector of the multiplication expression$/;"	f	class:blaze::TSMatDVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSMatDVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::TSMatDVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^      , vec_( vec )  \/\/ Right-hand side sparse vector of the multiplication expression$/;"	f	class:blaze::TSMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSMatSVecMultExpr.h	/^   RightOperand vec_;  \/\/!< Right-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::TSMatSVecMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSVecSMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::TSVecSMatMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSVecTDMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::TSVecTDMatMultExpr
vec_	amun/3rd_party/blaze/math/expressions/TSVecTSMatMultExpr.h	/^   LeftOperand  vec_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::TSVecTSMatMultExpr
vec_	amun/gpu/mblas/tensor.h	/^    Vector<T> vec_;$/;"	m	class:amunmt::GPU::mblas::TTensor
vector_	amun/3rd_party/blaze/math/expressions/DVecScalarDivExpr.h	/^   LeftOperand  vector_;  \/\/!< Left-hand side dense vector of the division expression.$/;"	m	class:blaze::DVecScalarDivExpr
vector_	amun/3rd_party/blaze/math/expressions/DVecScalarMultExpr.h	/^   LeftOperand  vector_;  \/\/!< Left-hand side dense vector of the multiplication expression.$/;"	m	class:blaze::DVecScalarMultExpr
vector_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^      IteratorType vector_;  \/\/!< Iterator over the elements of the left-hand side sparse vector expression.$/;"	m	class:blaze::SVecScalarDivExpr::ConstIterator
vector_	amun/3rd_party/blaze/math/expressions/SVecScalarDivExpr.h	/^   LeftOperand  vector_;  \/\/!< Left-hand side sparse vector of the division expression.$/;"	m	class:blaze::SVecScalarDivExpr
vector_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^      IteratorType vector_;  \/\/!< Iterator over the elements of the left-hand side sparse vector expression.$/;"	m	class:blaze::SVecScalarMultExpr::ConstIterator
vector_	amun/3rd_party/blaze/math/expressions/SVecScalarMultExpr.h	/^   LeftOperand  vector_;  \/\/!< Left-hand side sparse vector of the multiplication expression.$/;"	m	class:blaze::SVecScalarMultExpr
vector_	amun/3rd_party/blaze/math/views/subvector/Sparse.h	/^   Operand      vector_;  \/\/!< The sparse vector containing the subvector.$/;"	m	class:blaze::Subvector
version	amun/3rd_party/yaml-cpp/directives.h	/^  Version version;$/;"	m	struct:YAML::Directives
version_	amun/3rd_party/blaze/math/serialization/MatrixSerializer.h	/^   uint8_t  version_;      \/\/!< The version of the archive.$/;"	m	class:blaze::MatrixSerializer
version_	amun/3rd_party/blaze/math/serialization/VectorSerializer.h	/^   uint8_t  version_;      \/\/!< The version of the archive.$/;"	m	class:blaze::VectorSerializer
visit	amun/3rd_party/spdlog/details/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::internal::ArgVisitor
visit	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::ArgVisitor
visit_any_double	amun/3rd_party/spdlog/details/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::internal::ArgVisitor
visit_any_double	amun/3rd_party/spdlog/details/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_double	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::ArgVisitor
visit_any_double	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	amun/3rd_party/spdlog/details/format.cc	/^			bool visit_any_int(T value)$/;"	f	class:fmt::__anon30::IsZeroInt
visit_any_int	amun/3rd_party/spdlog/details/format.cc	/^			int visit_any_int(T value)$/;"	f	class:fmt::__anon30::PrecisionHandler
visit_any_int	amun/3rd_party/spdlog/details/format.cc	/^			unsigned visit_any_int(T value)$/;"	f	class:fmt::__anon30::WidthHandler
visit_any_int	amun/3rd_party/spdlog/details/format.cc	/^			void visit_any_int(T value)$/;"	f	class:fmt::__anon30::CharConverter
visit_any_int	amun/3rd_party/spdlog/details/format.cc	/^			void visit_any_int(U value)$/;"	f	class:fmt::__anon30::ArgConverter
visit_any_int	amun/3rd_party/spdlog/details/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::internal::ArgVisitor
visit_any_int	amun/3rd_party/spdlog/details/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::ArgVisitor
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    bool visit_any_int(T value)$/;"	f	class:fmt::internal::IsZeroInt
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    int visit_any_int(T value)$/;"	f	class:fmt::internal::PrecisionHandler
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    unsigned visit_any_int(T value)$/;"	f	class:fmt::internal::WidthHandler
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::CharConverter
visit_any_int	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_any_int(U value)$/;"	f	class:fmt::internal::ArgConverter
visit_bool	amun/3rd_party/spdlog/details/format.cc	/^			void visit_bool(bool value)$/;"	f	class:fmt::__anon30::ArgConverter
visit_bool	amun/3rd_party/spdlog/details/format.cc	/^			void visit_bool(bool value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_bool	amun/3rd_party/spdlog/details/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::internal::ArgVisitor
visit_bool	amun/3rd_party/spdlog/details/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_bool	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::ArgVisitor
visit_bool	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_bool	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_bool	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgConverter
visit_char	amun/3rd_party/spdlog/details/format.cc	/^			void visit_char(int value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_char	amun/3rd_party/spdlog/details/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::internal::ArgVisitor
visit_char	amun/3rd_party/spdlog/details/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_char	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::ArgVisitor
visit_char	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_char	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_char(int value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_cstring	amun/3rd_party/spdlog/details/format.cc	/^			void visit_cstring(const char *value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_cstring	amun/3rd_party/spdlog/details/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::internal::ArgVisitor
visit_cstring	amun/3rd_party/spdlog/details/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_cstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::ArgVisitor
visit_cstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_cstring	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_custom	amun/3rd_party/spdlog/details/format.cc	/^			void visit_custom(Arg::CustomValue c)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_custom	amun/3rd_party/spdlog/details/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::internal::ArgVisitor
visit_custom	amun/3rd_party/spdlog/details/format.h	/^    void visit_custom(Arg::CustomValue c)$/;"	f	class:fmt::internal::BasicArgFormatter
visit_custom	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::ArgVisitor
visit_custom	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicArgFormatter
visit_custom	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_double	amun/3rd_party/spdlog/details/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::internal::ArgVisitor
visit_double	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::ArgVisitor
visit_int	amun/3rd_party/spdlog/details/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::internal::ArgVisitor
visit_int	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::ArgVisitor
visit_long_double	amun/3rd_party/spdlog/details/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::internal::ArgVisitor
visit_long_double	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::ArgVisitor
visit_long_long	amun/3rd_party/spdlog/details/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::internal::ArgVisitor
visit_long_long	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::ArgVisitor
visit_pointer	amun/3rd_party/spdlog/details/format.cc	/^			void visit_pointer(const void *value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_pointer	amun/3rd_party/spdlog/details/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::internal::ArgVisitor
visit_pointer	amun/3rd_party/spdlog/details/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_pointer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::ArgVisitor
visit_pointer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_pointer	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::BasicPrintfArgFormatter
visit_string	amun/3rd_party/spdlog/details/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::internal::ArgVisitor
visit_string	amun/3rd_party/spdlog/details/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::ArgVisitor
visit_string	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_uint	amun/3rd_party/spdlog/details/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::internal::ArgVisitor
visit_uint	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::ArgVisitor
visit_ulong_long	amun/3rd_party/spdlog/details/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::internal::ArgVisitor
visit_ulong_long	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::ArgVisitor
visit_unhandled_arg	amun/3rd_party/spdlog/details/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::internal::ArgVisitor
visit_unhandled_arg	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::ArgVisitor
visit_wstring	amun/3rd_party/spdlog/details/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::internal::ArgVisitor
visit_wstring	amun/3rd_party/spdlog/details/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_wstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::ArgVisitor
visit_wstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
vm_	amun/gpu/decoder/kenlm.cpp	/^    WordPairs& vm_;$/;"	m	class:VocabGetter	file:
vm_	amun/gpu/decoder/kenlm.h	/^    WordPairs vm_;$/;"	m	class:LM
vocab_	amun/gpu/decoder/kenlm.cpp	/^    const Vocab& vocab_;$/;"	m	class:VocabGetter	file:
vocabs_	amun/common/factor_vocab.h	/^    std::vector<VocabPtr> vocabs_;$/;"	m	class:amunmt::FactorVocab
w_	amun/cpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Attention
w_	amun/cpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Embeddings
w_	amun/cpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::Softmax
w_	amun/cpu/dl4mt/decoder.h	/^        const Weights1& w_;$/;"	m	class:amunmt::CPU::dl4mt::Decoder::RNNHidden
w_	amun/cpu/dl4mt/encoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::dl4mt::Encoder::Embeddings
w_	amun/cpu/dl4mt/gru.h	/^    const Weights& w_;$/;"	m	class:amunmt::CPU::dl4mt::GRU
w_	amun/cpu/dl4mt/transition.h	/^    const Weights& w_;$/;"	m	class:amunmt::CPU::Transition
w_	amun/cpu/nematus/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Attention
w_	amun/cpu/nematus/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Embeddings
w_	amun/cpu/nematus/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::Softmax
w_	amun/cpu/nematus/decoder.h	/^        const Weights1& w_;$/;"	m	class:amunmt::CPU::Nematus::Decoder::RNNHidden
w_	amun/cpu/nematus/encoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::CPU::Nematus::Encoder::Embeddings
w_	amun/cpu/nematus/gru.h	/^    const Weights& w_;$/;"	m	class:amunmt::CPU::GRU
w_	amun/cpu/nematus/transition.h	/^    const Weights::Transition& w_;$/;"	m	class:amunmt::CPU::Nematus::Transition
w_	amun/fpga/decoder.h	/^      const Weights& w_;$/;"	m	class:amunmt::FPGA::Decoder::Alignment
w_	amun/fpga/decoder.h	/^      const Weights1& w_;$/;"	m	class:amunmt::FPGA::Decoder::RNNHidden
w_	amun/fpga/decoder.h	/^    const Weights& w_;$/;"	m	class:amunmt::FPGA::Decoder::Embeddings
w_	amun/fpga/decoder.h	/^    const Weights& w_;$/;"	m	class:amunmt::FPGA::Decoder::Softmax
w_	amun/fpga/encoder.h	/^    const Weights& w_;$/;"	m	class:amunmt::FPGA::Encoder::Embeddings
w_	amun/fpga/gru.h	/^  const Weights& w_;$/;"	m	class:amunmt::FPGA::FastGRU
w_	amun/fpga/gru.h	/^  const Weights& w_;$/;"	m	class:amunmt::FPGA::SlowGRU
w_	amun/gpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::GPU::Decoder::Alignment
w_	amun/gpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::GPU::Decoder::Embeddings
w_	amun/gpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::GPU::Decoder::RNNHidden
w_	amun/gpu/dl4mt/decoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::GPU::Decoder::Softmax
w_	amun/gpu/dl4mt/encoder.h	/^        const Weights& w_;$/;"	m	class:amunmt::GPU::Encoder::Embeddings
w_	amun/gpu/dl4mt/gru.h	/^    const Weights& w_;$/;"	m	class:amunmt::GPU::FastGRU
w_	amun/gpu/dl4mt/gru.h	/^    const Weights& w_;$/;"	m	class:amunmt::GPU::SlowGRU
w_	amun/gpu/dl4mt/lstm.h	/^    const Weights& w_;$/;"	m	class:amunmt::GPU::SlowLSTM
w_	amun/gpu/dl4mt/multiplicative.h	/^    const Weights::MultWeights<InnerWeights>& w_;$/;"	m	class:amunmt::GPU::Multiplicative
wait	amun/3rd_party/blaze/math/smp/threads/ThreadBackend.h	/^inline void ThreadBackend<TT,MT,LT,CT>::wait()$/;"	f	class:blaze::ThreadBackend
wait	amun/3rd_party/blaze/util/ThreadPool.h	/^void ThreadPool<TT,MT,LT,CT>::wait()$/;"	f	class:blaze::ThreadPool
waitForTask_	amun/3rd_party/blaze/util/ThreadPool.h	/^   Condition waitForTask_;     \/\/!< Wait condition for idle threads.$/;"	m	class:blaze::ThreadPool
waitForThread_	amun/3rd_party/blaze/util/ThreadPool.h	/^   Condition waitForThread_;   \/\/!< Wait condition for the thread management.$/;"	m	class:blaze::ThreadPool
wait_empty_q	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::wait_empty_q()$/;"	f	class:spdlog::details::async_log_helper
warn	amun/3rd_party/spdlog/common.h	/^    warn = 3,$/;"	e	enum:spdlog::level::__anon34
warn	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T& msg)$/;"	f	class:spdlog::logger
warn	amun/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
warning	amun/3rd_party/blaze/util/logging/LogLevel.h	/^   warning  = 2,  \/\/!< Log level for warnings.$/;"	e	enum:blaze::logging::LogLevel
weights_	amun/common/base_best_hyps.h	/^    const std::map<std::string, float> weights_;$/;"	m	class:amunmt::BaseBestHyps
weights_	amun/common/god.h	/^    std::map<std::string, float> weights_;$/;"	m	class:amunmt::God
weights_	amun/fpga/encoder_decoder_loader.h	/^  std::unique_ptr<Weights> weights_;$/;"	m	class:amunmt::FPGA::EncoderDecoderLoader
weights_	amun/gpu/decoder/encoder_decoder_loader.h	/^    std::vector<std::unique_ptr<Weights>> weights_; \/\/ MUST be indexed by gpu id. eg. weights_[2] is for gpu2$/;"	m	class:amunmt::GPU::EncoderDecoderLoader
what	amun/3rd_party/extract_lex/exception.h	/^    const char *what() const throw() { return what_.str().c_str(); }$/;"	f	class:util::Exception
what	amun/3rd_party/utf8/checked.h	/^        virtual const char* what() const throw() { return "Invalid code point"; }$/;"	f	class:utf8::invalid_code_point
what	amun/3rd_party/utf8/checked.h	/^        virtual const char* what() const throw() { return "Not enough space"; }$/;"	f	class:utf8::not_enough_room
what	amun/3rd_party/utf8/checked.h	/^        virtual const char* what() const throw() { return "invalid UTF-16, convert file to UTF-16 encoding and run again"; }$/;"	f	class:utf8::invalid_utf16
what	amun/3rd_party/utf8/checked.h	/^        virtual const char* what() const throw() { return "invalid UTF-8, convert file to UTF-8 encoding and run again"; }$/;"	f	class:utf8::invalid_utf8
what	amun/common/exception.h	/^    const char *what() const throw() { return what_.c_str(); }$/;"	f	class:amunmt::util::Exception
what_	amun/3rd_party/extract_lex/exception.h	/^    std::stringstream what_;$/;"	m	class:util::Exception
what_	amun/common/exception.h	/^    std::string what_;$/;"	m	class:amunmt::util::Exception
white	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string white      = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink
width	amun/3rd_party/fast_align/src/array2d.h	/^  unsigned width() const { return width_; }$/;"	f	class:Array2D
width	amun/3rd_party/spdlog/details/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec
width	amun/3rd_party/spdlog/details/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec
width	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec
width	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec
width_	amun/3rd_party/fast_align/src/array2d.h	/^  unsigned width_;$/;"	m	class:Array2D
width_	amun/3rd_party/spdlog/details/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec
width_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec
wincolor_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(HANDLE std_handle): out_handle_(std_handle)$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink: public  base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    wincolor_stderr_sink() : wincolor_sink<Mutex>(GetStdHandle(STD_ERROR_HANDLE))$/;"	f	class:spdlog::sinks::wincolor_stderr_sink
wincolor_stderr_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^class wincolor_stderr_sink: public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink_mt	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stderr_sink<std::mutex> wincolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
wincolor_stderr_sink_st	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stderr_sink<details::null_mutex> wincolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks
wincolor_stdout_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    wincolor_stdout_sink() : wincolor_sink<Mutex>(GetStdHandle(STD_OUTPUT_HANDLE))$/;"	f	class:spdlog::sinks::wincolor_stdout_sink
wincolor_stdout_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^class wincolor_stdout_sink: public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stdout_sink_mt	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stdout_sink<std::mutex> wincolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
wincolor_stdout_sink_st	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stdout_sink<details::null_mutex> wincolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks
word_	amun/common/hypothesis.h	/^    const unsigned word_;$/;"	m	class:amunmt::Hypothesis
word_size	amun/3rd_party/cnpy/cnpy.h	/^        unsigned int word_size;$/;"	m	struct:cnpy::NpyArray
words	amun/plugin/neural_phrase.h	/^   std::vector<size_t> words;$/;"	m	class:amunmt::NeuralPhrase
words_	amun/3rd_party/fast_align/src/corpus.h	/^  std::vector<std::string> words_;$/;"	m	class:Dict
words_	amun/common/sentence.h	/^    std::vector<Words> words_;$/;"	m	class:amunmt::Sentence
worker_loop	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::worker_loop()$/;"	f	class:spdlog::details::async_log_helper
workers	amun/common/threadpool.h	/^    std::vector<std::thread> workers;$/;"	m	class:amunmt::ThreadPool
write	amun/3rd_party/blaze/util/serialization/Archive.h	/^   Archive<Stream>::write( const Type* array, size_t count )$/;"	f	class:blaze::Archive
write	amun/3rd_party/spdlog/details/file_helper.h	/^    void write(const log_msg& msg)$/;"	f	class:spdlog::details::file_helper
write	amun/3rd_party/spdlog/details/format.cc	/^		void write(std::ostream &os, fmt::Writer &w)$/;"	f	namespace:fmt::__anon30
write	amun/3rd_party/spdlog/details/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	amun/3rd_party/spdlog/details/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase
write	amun/3rd_party/spdlog/details/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	amun/3rd_party/spdlog/details/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::write(const char* fmt, const Args&... args)$/;"	f	class:spdlog::details::line_logger
write	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::write(const char* what)$/;"	f	class:spdlog::details::line_logger
write	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase
write	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	amun/3rd_party/spdlog/fmt/bundled/ostream.cc	/^		FMT_FUNC void write(std::ostream &os, Writer &w)$/;"	f	namespace:fmt::internal
write	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::write(const char* str, std::size_t size) {$/;"	f	class:YAML::ostream_wrapper
write	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::write(const std::string& str) {$/;"	f	class:YAML::ostream_wrapper
write_decimal	amun/3rd_party/spdlog/details/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_double	amun/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_double	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_int	amun/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_int	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_null_pointer	amun/3rd_party/spdlog/details/format.cc	/^			void write_null_pointer()$/;"	f	class:fmt::internal::PrintfArgFormatter	file:
write_null_pointer	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    void write_null_pointer()$/;"	f	class:fmt::BasicPrintfArgFormatter
write_pointer	amun/3rd_party/spdlog/details/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase
write_pointer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase
write_str	amun/3rd_party/spdlog/details/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	amun/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	amun/3rd_party/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_unsigned_decimal	amun/3rd_party/spdlog/details/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
write_unsigned_decimal	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
writer	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter
writer	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase
writer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter
writer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase
writer_	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter
writer_	amun/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase
writer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter
writer_	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase
writer_	amun/3rd_party/spdlog/fmt/bundled/printf.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::PrintfFormatter
ws	amun/python/test2.py	/^    ws = create_connection("ws:\/\/localhost:8080\/translate")$/;"	v
wstring	amun/3rd_party/spdlog/details/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon17
wstring	amun/3rd_party/spdlog/fmt/bundled/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon51
x_mult_	amun/gpu/dl4mt/multiplicative.h	/^    mutable mblas::Tensor x_mult_;$/;"	m	class:amunmt::GPU::Multiplicative
yellow	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow     = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink
z_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    z_formatter():_last_update(std::chrono::seconds(0))$/;"	f	class:spdlog::details::z_formatter
z_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class z_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
zero_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^   static const Type zero_;  \/\/!< Neutral element for accesses to zero elements.$/;"	m	class:blaze::CompressedMatrix
zero_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^const Type CompressedMatrix<Type,SO>::zero_ = Type();$/;"	m	class:blaze::CompressedMatrix
zero_	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^const Type CompressedMatrix<Type,true>::zero_ = Type();$/;"	m	class:blaze::CompressedMatrix
zero_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^   static const Type zero_;  \/\/!< Neutral element for accesses to zero elements.$/;"	m	class:blaze::CompressedVector
zero_	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^const Type CompressedVector<Type,TF>::zero_ = Type();$/;"	m	class:blaze::CompressedVector
~Array	amun/fpga/array.h	/^  ~Array()$/;"	f	class:amunmt::FPGA::Array
~BPE	amun/common/processor/bpe.h	/^    virtual ~BPE() {}$/;"	f	class:amunmt::BPE
~BaseTensor	amun/common/base_tensor.h	/^    virtual ~BaseTensor() {}$/;"	f	class:amunmt::BaseTensor
~BasicWriter	amun/3rd_party/spdlog/details/format.h	/^    virtual ~BasicWriter()$/;"	f	class:BasicWriter
~BasicWriter	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    virtual ~BasicWriter()$/;"	f	class:BasicWriter
~Buffer	amun/3rd_party/spdlog/details/format.h	/^    virtual ~Buffer()$/;"	f	class:fmt::Buffer
~Buffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    virtual ~Buffer()$/;"	f	class:fmt::Buffer
~Command	amun/3rd_party/fast_align/src/atools.cc	/^  virtual ~Command() {}$/;"	f	struct:Command
~CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,SO>::~CompressedMatrix()$/;"	f	class:blaze::CompressedMatrix
~CompressedMatrix	amun/3rd_party/blaze/math/sparse/CompressedMatrix.h	/^inline CompressedMatrix<Type,true>::~CompressedMatrix()$/;"	f	class:blaze::CompressedMatrix
~CompressedVector	amun/3rd_party/blaze/math/sparse/CompressedVector.h	/^inline CompressedVector<Type,TF>::~CompressedVector()$/;"	f	class:blaze::CompressedVector
~Emitter	amun/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::~Emitter() {}$/;"	f	class:YAML::Emitter
~EmitterState	amun/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterState::~EmitterState() {}$/;"	f	class:YAML::EmitterState
~EncoderDecoderLoader	amun/fpga/encoder_decoder_loader.cpp	/^EncoderDecoderLoader::~EncoderDecoderLoader()$/;"	f	class:amunmt::FPGA::EncoderDecoderLoader
~ErrnoException	amun/3rd_party/extract_lex/exception.cpp	/^ErrnoException::~ErrnoException() throw() {}$/;"	f	class:util::ErrnoException
~ErrnoException	amun/common/exception.cpp	/^ErrnoException::~ErrnoException() throw() {}$/;"	f	class:amunmt::util::ErrnoException
~EventHandler	amun/3rd_party/yaml-cpp/eventhandler.h	/^  virtual ~EventHandler() {}$/;"	f	class:YAML::EventHandler
~Exception	amun/3rd_party/extract_lex/exception.cpp	/^Exception::~Exception() throw() {}$/;"	f	class:util::Exception
~Exception	amun/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~Exception() throw() {}$/;"	f	class:YAML::Exception
~Exception	amun/common/exception.cpp	/^Exception::~Exception() throw() {}$/;"	f	class:amunmt::util::Exception
~FileOpenException	amun/3rd_party/extract_lex/exception.h	/^    ~FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
~FileOpenException	amun/common/exception.h	/^    ~FileOpenException() throw() {}$/;"	f	class:amunmt::util::FileOpenException
~God	amun/common/god.cpp	/^God::~God()$/;"	f	class:amunmt::God
~HypoState	amun/plugin/hypo_info.cpp	/^HypoState::~HypoState()$/;"	f	class:amunmt::HypoState
~LM	amun/gpu/decoder/kenlm.cpp	/^LM::~LM() {}$/;"	f	class:LM
~Loader	amun/common/loader.h	/^    virtual ~Loader() {};$/;"	f	class:amunmt::Loader
~Matrix	amun/fpga/matrix.cpp	/^Matrix::~Matrix()$/;"	f	class:amunmt::FPGA::mblas::Matrix
~MatrixAccessProxy	amun/3rd_party/blaze/math/sparse/MatrixAccessProxy.h	/^inline MatrixAccessProxy<MT>::~MatrixAccessProxy()$/;"	f	class:blaze::MatrixAccessProxy
~MemoryBuffer	amun/3rd_party/spdlog/details/format.h	/^    ~MemoryBuffer()$/;"	f	class:fmt::internal::MemoryBuffer
~MemoryBuffer	amun/3rd_party/spdlog/fmt/bundled/format.h	/^    ~MemoryBuffer()$/;"	f	class:fmt::internal::MemoryBuffer
~MemoryPool	amun/3rd_party/blaze/util/MemoryPool.h	/^inline MemoryPool<Type,Blocksize>::~MemoryPool()$/;"	f	class:blaze::MemoryPool
~Node	amun/3rd_party/yaml-cpp/node/impl.h	/^inline Node::~Node() {}$/;"	f	class:YAML::Node
~NodeBuilder	amun/3rd_party/yaml-cpp/nodebuilder.cpp	/^NodeBuilder::~NodeBuilder() {}$/;"	f	class:YAML::NodeBuilder
~NonCopyable	amun/3rd_party/blaze/util/NonCopyable.h	/^   inline ~NonCopyable() {}  \/\/!< Destructor of the NonCopyable class.$/;"	f	class:blaze::NonCopyable
~NonNumericProxy	amun/3rd_party/blaze/math/adaptors/symmetricmatrix/NonNumericProxy.h	/^inline NonNumericProxy<MT>::~NonNumericProxy()$/;"	f	class:blaze::NonNumericProxy
~NpzConverter	amun/cpu/npz_converter.h	/^    ~NpzConverter() {$/;"	f	class:amunmt::CPU::NpzConverter
~NpzConverter	amun/fpga/npz_converter.h	/^  ~NpzConverter() {$/;"	f	class:amunmt::FPGA::NpzConverter
~OverflowException	amun/3rd_party/extract_lex/exception.cpp	/^OverflowException::~OverflowException() throw() {}$/;"	f	class:util::OverflowException
~OverflowException	amun/common/exception.cpp	/^OverflowException::~OverflowException() throw() {}$/;"	f	class:amunmt::util::OverflowException
~ParallelSection	amun/3rd_party/blaze/math/smp/ParallelSection.h	/^inline ParallelSection<T>::~ParallelSection()$/;"	f	class:blaze::ParallelSection
~Parser	amun/3rd_party/yaml-cpp/parser.cpp	/^Parser::~Parser() {}$/;"	f	class:YAML::Parser
~Postprocessor	amun/common/processor/processor.h	/^    virtual ~Postprocessor() {}$/;"	f	class:amunmt::Postprocessor
~Preprocessor	amun/common/processor/processor.h	/^    virtual ~Preprocessor() {}$/;"	f	class:amunmt::Preprocessor
~Processor	amun/common/processor/processor.h	/^    virtual ~Processor() {}$/;"	f	class:amunmt::Processor
~PtrVector	amun/3rd_party/blaze/util/PtrVector.h	/^inline PtrVector<T,D,G>::~PtrVector()$/;"	f	class:blaze::PtrVector
~RegEx	amun/3rd_party/yaml-cpp/regex_yaml.h	/^  ~RegEx() {}$/;"	f	class:YAML::RegEx
~Scanner	amun/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::~Scanner() {}$/;"	f	class:YAML::Scanner
~Scorer	amun/common/scorer.h	/^    virtual ~Scorer() {}$/;"	f	class:amunmt::Scorer
~Search	amun/common/search.cpp	/^Search::~Search()$/;"	f	class:amunmt::Search
~Sentences	amun/common/sentences.cpp	/^Sentences::~Sentences()$/;"	f	class:amunmt::Sentences
~SerialSection	amun/3rd_party/blaze/math/smp/SerialSection.h	/^inline SerialSection<T>::~SerialSection()$/;"	f	class:blaze::SerialSection
~SettingChangeBase	amun/3rd_party/yaml-cpp/setting.h	/^  virtual ~SettingChangeBase() {}$/;"	f	class:YAML::SettingChangeBase
~SettingChanges	amun/3rd_party/yaml-cpp/setting.h	/^  ~SettingChanges() { clear(); }$/;"	f	class:YAML::SettingChanges
~SingleDocParser	amun/3rd_party/yaml-cpp/singledocparser.cpp	/^SingleDocParser::~SingleDocParser() {}$/;"	f	class:YAML::SingleDocParser
~SourceIndependentScorer	amun/common/scorer.h	/^    virtual ~SourceIndependentScorer() {}$/;"	f	class:amunmt::SourceIndependentScorer
~State	amun/common/scorer.h	/^	virtual ~State() {}$/;"	f	class:amunmt::State
~Stream	amun/3rd_party/yaml-cpp/stream.cpp	/^Stream::~Stream() { delete[] m_pPrefetched; }$/;"	f	class:YAML::Stream
~StreamCharSource	amun/3rd_party/yaml-cpp/streamcharsource.h	/^  ~StreamCharSource() {}$/;"	f	class:YAML::StreamCharSource
~TTensor	amun/gpu/mblas/tensor.h	/^    ~TTensor()$/;"	f	class:amunmt::GPU::mblas::TTensor
~TaskQueue	amun/3rd_party/blaze/util/threadpool/TaskQueue.h	/^TaskQueue::~TaskQueue()$/;"	f	class:blaze::threadpool::TaskQueue
~Thread	amun/3rd_party/blaze/util/Thread.h	/^Thread<TT,MT,LT,CT>::~Thread()$/;"	f	class:blaze::Thread
~ThreadPool	amun/3rd_party/blaze/util/ThreadPool.h	/^ThreadPool<TT,MT,LT,CT>::~ThreadPool()$/;"	f	class:blaze::ThreadPool
~ThreadPool	amun/common/threadpool.h	/^inline ThreadPool::~ThreadPool() {$/;"	f	class:amunmt::ThreadPool
~TypedKeyNotFound	amun/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~TypedKeyNotFound() throw() {}$/;"	f	class:YAML::TypedKeyNotFound
~Vector	amun/gpu/mblas/vector.h	/^  ~Vector()$/;"	f	class:amunmt::GPU::mblas::Vector
~VectorAccessProxy	amun/3rd_party/blaze/math/sparse/VectorAccessProxy.h	/^inline VectorAccessProxy<VT>::~VectorAccessProxy()$/;"	f	class:blaze::VectorAccessProxy
~WindowsException	amun/3rd_party/extract_lex/exception.cpp	/^WindowsException::~WindowsException() throw() {}$/;"	f	class:util::WindowsException
~WindowsException	amun/common/exception.cpp	/^WindowsException::~WindowsException() throw() {}$/;"	f	class:amunmt::util::WindowsException
~ansicolor_sink	amun/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::~ansicolor_sink()$/;"	f	class:spdlog::sinks::ansicolor_sink
~async_log_helper	amun/3rd_party/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::~async_log_helper()$/;"	f	class:spdlog::details::async_log_helper
~file_helper	amun/3rd_party/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~flag_formatter	amun/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    virtual ~flag_formatter()$/;"	f	class:spdlog::details::flag_formatter
~formatter	amun/3rd_party/spdlog/formatter.h	/^    virtual ~formatter() {}$/;"	f	class:spdlog::formatter
~line_logger	amun/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::~line_logger()$/;"	f	class:spdlog::details::line_logger
~mpmc_bounded_queue	amun/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    ~mpmc_bounded_queue()$/;"	f	class:spdlog::details::mpmc_bounded_queue
~noncopyable	amun/3rd_party/yaml-cpp/noncopyable.h	/^  ~noncopyable() {}$/;"	f	class:YAML::noncopyable
~ostream_wrapper	amun/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::~ostream_wrapper() {}$/;"	f	class:YAML::ostream_wrapper
~sink	amun/3rd_party/spdlog/sinks/sink.h	/^    virtual ~sink() {}$/;"	f	class:spdlog::sinks::sink
~syslog_sink	amun/3rd_party/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink()$/;"	f	class:spdlog::sinks::syslog_sink
~wincolor_sink	amun/3rd_party/spdlog/sinks/wincolor_sink.h	/^    virtual ~wincolor_sink()$/;"	f	class:spdlog::sinks::wincolor_sink
